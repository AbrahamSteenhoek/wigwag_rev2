

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue May 12 10:48:29 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F18325
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	intentry,global,class=CODE,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	dabs	1,0x620,48
    62                           	dabs	1,0x5A0,80
    63                           	dabs	1,0x520,80
    64                           	dabs	1,0x4A0,80
    65                           	dabs	1,0x420,80
    66                           	dabs	1,0x3A0,80
    67                           	dabs	1,0x320,80
    68                           	dabs	1,0x2A0,80
    69                           	dabs	1,0x220,80
    70                           	dabs	1,0x1A0,80
    71                           	dabs	1,0x20F0,0,_stage_stash
    72                           	dabs	1,0x7E,2
    73  0000                     
    74                           ; Version 2.10
    75                           ; Generated 31/07/2019 GMT
    76                           ; 
    77                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC16F18325 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000E                     	;# 
   122  0010                     	;# 
   123  0011                     	;# 
   124  0012                     	;# 
   125  0013                     	;# 
   126  0014                     	;# 
   127  0015                     	;# 
   128  0015                     	;# 
   129  0016                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  0019                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  001D                     	;# 
   139  001E                     	;# 
   140  001F                     	;# 
   141  008C                     	;# 
   142  008E                     	;# 
   143  0090                     	;# 
   144  0091                     	;# 
   145  0092                     	;# 
   146  0093                     	;# 
   147  0094                     	;# 
   148  0097                     	;# 
   149  009B                     	;# 
   150  009B                     	;# 
   151  009C                     	;# 
   152  009D                     	;# 
   153  009E                     	;# 
   154  009F                     	;# 
   155  010C                     	;# 
   156  010E                     	;# 
   157  0111                     	;# 
   158  0112                     	;# 
   159  0113                     	;# 
   160  0114                     	;# 
   161  0115                     	;# 
   162  0116                     	;# 
   163  0117                     	;# 
   164  0118                     	;# 
   165  0119                     	;# 
   166  018C                     	;# 
   167  018E                     	;# 
   168  0197                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  0199                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019C                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019D                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019E                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  019F                     	;# 
   193  019F                     	;# 
   194  020C                     	;# 
   195  020E                     	;# 
   196  0211                     	;# 
   197  0211                     	;# 
   198  0212                     	;# 
   199  0212                     	;# 
   200  0213                     	;# 
   201  0213                     	;# 
   202  0214                     	;# 
   203  0214                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0215                     	;# 
   208  0216                     	;# 
   209  0216                     	;# 
   210  0217                     	;# 
   211  0217                     	;# 
   212  0219                     	;# 
   213  021A                     	;# 
   214  021B                     	;# 
   215  021C                     	;# 
   216  021D                     	;# 
   217  021D                     	;# 
   218  021E                     	;# 
   219  021F                     	;# 
   220  028C                     	;# 
   221  028E                     	;# 
   222  0291                     	;# 
   223  0291                     	;# 
   224  0292                     	;# 
   225  0293                     	;# 
   226  0294                     	;# 
   227  0295                     	;# 
   228  0295                     	;# 
   229  0296                     	;# 
   230  0297                     	;# 
   231  0298                     	;# 
   232  029F                     	;# 
   233  030C                     	;# 
   234  030E                     	;# 
   235  0311                     	;# 
   236  0311                     	;# 
   237  0312                     	;# 
   238  0313                     	;# 
   239  0314                     	;# 
   240  0315                     	;# 
   241  0315                     	;# 
   242  0316                     	;# 
   243  0317                     	;# 
   244  0318                     	;# 
   245  038C                     	;# 
   246  038E                     	;# 
   247  0391                     	;# 
   248  0392                     	;# 
   249  0393                     	;# 
   250  0397                     	;# 
   251  0398                     	;# 
   252  0399                     	;# 
   253  039A                     	;# 
   254  039C                     	;# 
   255  039D                     	;# 
   256  039E                     	;# 
   257  039F                     	;# 
   258  0411                     	;# 
   259  0411                     	;# 
   260  0412                     	;# 
   261  0413                     	;# 
   262  0414                     	;# 
   263  0415                     	;# 
   264  0416                     	;# 
   265  0417                     	;# 
   266  0418                     	;# 
   267  0418                     	;# 
   268  0419                     	;# 
   269  041A                     	;# 
   270  041B                     	;# 
   271  041C                     	;# 
   272  041D                     	;# 
   273  041E                     	;# 
   274  041F                     	;# 
   275  0498                     	;# 
   276  0498                     	;# 
   277  0499                     	;# 
   278  049A                     	;# 
   279  049B                     	;# 
   280  049B                     	;# 
   281  049C                     	;# 
   282  049D                     	;# 
   283  049E                     	;# 
   284  049F                     	;# 
   285  0617                     	;# 
   286  0618                     	;# 
   287  0619                     	;# 
   288  0619                     	;# 
   289  061A                     	;# 
   290  061B                     	;# 
   291  061C                     	;# 
   292  061C                     	;# 
   293  061F                     	;# 
   294  0691                     	;# 
   295  0692                     	;# 
   296  0693                     	;# 
   297  0694                     	;# 
   298  0695                     	;# 
   299  0696                     	;# 
   300  0697                     	;# 
   301  0698                     	;# 
   302  0699                     	;# 
   303  0711                     	;# 
   304  0712                     	;# 
   305  0713                     	;# 
   306  0714                     	;# 
   307  0715                     	;# 
   308  0716                     	;# 
   309  0717                     	;# 
   310  0718                     	;# 
   311  0719                     	;# 
   312  0891                     	;# 
   313  0891                     	;# 
   314  0891                     	;# 
   315  0891                     	;# 
   316  0891                     	;# 
   317  0891                     	;# 
   318  0892                     	;# 
   319  0892                     	;# 
   320  0892                     	;# 
   321  0893                     	;# 
   322  0893                     	;# 
   323  0893                     	;# 
   324  0893                     	;# 
   325  0893                     	;# 
   326  0893                     	;# 
   327  0894                     	;# 
   328  0894                     	;# 
   329  0894                     	;# 
   330  0895                     	;# 
   331  0895                     	;# 
   332  0895                     	;# 
   333  0896                     	;# 
   334  0896                     	;# 
   335  0896                     	;# 
   336  089B                     	;# 
   337  0911                     	;# 
   338  0912                     	;# 
   339  0913                     	;# 
   340  0914                     	;# 
   341  0915                     	;# 
   342  0916                     	;# 
   343  0918                     	;# 
   344  0919                     	;# 
   345  091A                     	;# 
   346  091B                     	;# 
   347  091C                     	;# 
   348  091D                     	;# 
   349  091E                     	;# 
   350  091F                     	;# 
   351  0E0F                     	;# 
   352  0E10                     	;# 
   353  0E11                     	;# 
   354  0E12                     	;# 
   355  0E13                     	;# 
   356  0E14                     	;# 
   357  0E15                     	;# 
   358  0E16                     	;# 
   359  0E17                     	;# 
   360  0E18                     	;# 
   361  0E19                     	;# 
   362  0E1A                     	;# 
   363  0E1B                     	;# 
   364  0E1C                     	;# 
   365  0E1D                     	;# 
   366  0E1E                     	;# 
   367  0E1F                     	;# 
   368  0E20                     	;# 
   369  0E21                     	;# 
   370  0E22                     	;# 
   371  0E24                     	;# 
   372  0E25                     	;# 
   373  0E28                     	;# 
   374  0E29                     	;# 
   375  0E2A                     	;# 
   376  0E2B                     	;# 
   377  0E2C                     	;# 
   378  0E2D                     	;# 
   379  0E2E                     	;# 
   380  0E2F                     	;# 
   381  0E90                     	;# 
   382  0E91                     	;# 
   383  0E92                     	;# 
   384  0E94                     	;# 
   385  0E95                     	;# 
   386  0EA0                     	;# 
   387  0EA1                     	;# 
   388  0EA2                     	;# 
   389  0EA3                     	;# 
   390  0EA4                     	;# 
   391  0EA5                     	;# 
   392  0F0F                     	;# 
   393  0F10                     	;# 
   394  0F11                     	;# 
   395  0F12                     	;# 
   396  0F13                     	;# 
   397  0F14                     	;# 
   398  0F15                     	;# 
   399  0F16                     	;# 
   400  0F17                     	;# 
   401  0F18                     	;# 
   402  0F19                     	;# 
   403  0F1A                     	;# 
   404  0F1B                     	;# 
   405  0F1C                     	;# 
   406  0F1D                     	;# 
   407  0F1E                     	;# 
   408  0F1F                     	;# 
   409  0F20                     	;# 
   410  0F21                     	;# 
   411  0F22                     	;# 
   412  0F23                     	;# 
   413  0F24                     	;# 
   414  0F25                     	;# 
   415  0F26                     	;# 
   416  0F27                     	;# 
   417  0F28                     	;# 
   418  0F29                     	;# 
   419  0F2A                     	;# 
   420  0F2B                     	;# 
   421  0F2C                     	;# 
   422  0F2D                     	;# 
   423  0F2E                     	;# 
   424  0F2F                     	;# 
   425  0F30                     	;# 
   426  0F31                     	;# 
   427  0F32                     	;# 
   428  0F33                     	;# 
   429  0F34                     	;# 
   430  0F35                     	;# 
   431  0F36                     	;# 
   432  0F37                     	;# 
   433  0FE4                     	;# 
   434  0FE5                     	;# 
   435  0FE6                     	;# 
   436  0FE7                     	;# 
   437  0FE8                     	;# 
   438  0FE9                     	;# 
   439  0FEA                     	;# 
   440  0FEB                     	;# 
   441  0FED                     	;# 
   442  0FEE                     	;# 
   443  0FEF                     	;# 
   444  0000                     	;# 
   445  0001                     	;# 
   446  0002                     	;# 
   447  0003                     	;# 
   448  0004                     	;# 
   449  0005                     	;# 
   450  0006                     	;# 
   451  0007                     	;# 
   452  0008                     	;# 
   453  0009                     	;# 
   454  000A                     	;# 
   455  000B                     	;# 
   456  000C                     	;# 
   457  000E                     	;# 
   458  0010                     	;# 
   459  0011                     	;# 
   460  0012                     	;# 
   461  0013                     	;# 
   462  0014                     	;# 
   463  0015                     	;# 
   464  0015                     	;# 
   465  0016                     	;# 
   466  0016                     	;# 
   467  0017                     	;# 
   468  0018                     	;# 
   469  0019                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001B                     	;# 
   473  001C                     	;# 
   474  001D                     	;# 
   475  001E                     	;# 
   476  001F                     	;# 
   477  008C                     	;# 
   478  008E                     	;# 
   479  0090                     	;# 
   480  0091                     	;# 
   481  0092                     	;# 
   482  0093                     	;# 
   483  0094                     	;# 
   484  0097                     	;# 
   485  009B                     	;# 
   486  009B                     	;# 
   487  009C                     	;# 
   488  009D                     	;# 
   489  009E                     	;# 
   490  009F                     	;# 
   491  010C                     	;# 
   492  010E                     	;# 
   493  0111                     	;# 
   494  0112                     	;# 
   495  0113                     	;# 
   496  0114                     	;# 
   497  0115                     	;# 
   498  0116                     	;# 
   499  0117                     	;# 
   500  0118                     	;# 
   501  0119                     	;# 
   502  018C                     	;# 
   503  018E                     	;# 
   504  0197                     	;# 
   505  0199                     	;# 
   506  0199                     	;# 
   507  0199                     	;# 
   508  019A                     	;# 
   509  019A                     	;# 
   510  019A                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019C                     	;# 
   517  019C                     	;# 
   518  019C                     	;# 
   519  019D                     	;# 
   520  019D                     	;# 
   521  019D                     	;# 
   522  019E                     	;# 
   523  019E                     	;# 
   524  019E                     	;# 
   525  019F                     	;# 
   526  019F                     	;# 
   527  019F                     	;# 
   528  019F                     	;# 
   529  019F                     	;# 
   530  020C                     	;# 
   531  020E                     	;# 
   532  0211                     	;# 
   533  0211                     	;# 
   534  0212                     	;# 
   535  0212                     	;# 
   536  0213                     	;# 
   537  0213                     	;# 
   538  0214                     	;# 
   539  0214                     	;# 
   540  0215                     	;# 
   541  0215                     	;# 
   542  0215                     	;# 
   543  0215                     	;# 
   544  0216                     	;# 
   545  0216                     	;# 
   546  0217                     	;# 
   547  0217                     	;# 
   548  0219                     	;# 
   549  021A                     	;# 
   550  021B                     	;# 
   551  021C                     	;# 
   552  021D                     	;# 
   553  021D                     	;# 
   554  021E                     	;# 
   555  021F                     	;# 
   556  028C                     	;# 
   557  028E                     	;# 
   558  0291                     	;# 
   559  0291                     	;# 
   560  0292                     	;# 
   561  0293                     	;# 
   562  0294                     	;# 
   563  0295                     	;# 
   564  0295                     	;# 
   565  0296                     	;# 
   566  0297                     	;# 
   567  0298                     	;# 
   568  029F                     	;# 
   569  030C                     	;# 
   570  030E                     	;# 
   571  0311                     	;# 
   572  0311                     	;# 
   573  0312                     	;# 
   574  0313                     	;# 
   575  0314                     	;# 
   576  0315                     	;# 
   577  0315                     	;# 
   578  0316                     	;# 
   579  0317                     	;# 
   580  0318                     	;# 
   581  038C                     	;# 
   582  038E                     	;# 
   583  0391                     	;# 
   584  0392                     	;# 
   585  0393                     	;# 
   586  0397                     	;# 
   587  0398                     	;# 
   588  0399                     	;# 
   589  039A                     	;# 
   590  039C                     	;# 
   591  039D                     	;# 
   592  039E                     	;# 
   593  039F                     	;# 
   594  0411                     	;# 
   595  0411                     	;# 
   596  0412                     	;# 
   597  0413                     	;# 
   598  0414                     	;# 
   599  0415                     	;# 
   600  0416                     	;# 
   601  0417                     	;# 
   602  0418                     	;# 
   603  0418                     	;# 
   604  0419                     	;# 
   605  041A                     	;# 
   606  041B                     	;# 
   607  041C                     	;# 
   608  041D                     	;# 
   609  041E                     	;# 
   610  041F                     	;# 
   611  0498                     	;# 
   612  0498                     	;# 
   613  0499                     	;# 
   614  049A                     	;# 
   615  049B                     	;# 
   616  049B                     	;# 
   617  049C                     	;# 
   618  049D                     	;# 
   619  049E                     	;# 
   620  049F                     	;# 
   621  0617                     	;# 
   622  0618                     	;# 
   623  0619                     	;# 
   624  0619                     	;# 
   625  061A                     	;# 
   626  061B                     	;# 
   627  061C                     	;# 
   628  061C                     	;# 
   629  061F                     	;# 
   630  0691                     	;# 
   631  0692                     	;# 
   632  0693                     	;# 
   633  0694                     	;# 
   634  0695                     	;# 
   635  0696                     	;# 
   636  0697                     	;# 
   637  0698                     	;# 
   638  0699                     	;# 
   639  0711                     	;# 
   640  0712                     	;# 
   641  0713                     	;# 
   642  0714                     	;# 
   643  0715                     	;# 
   644  0716                     	;# 
   645  0717                     	;# 
   646  0718                     	;# 
   647  0719                     	;# 
   648  0891                     	;# 
   649  0891                     	;# 
   650  0891                     	;# 
   651  0891                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0892                     	;# 
   655  0892                     	;# 
   656  0892                     	;# 
   657  0893                     	;# 
   658  0893                     	;# 
   659  0893                     	;# 
   660  0893                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0894                     	;# 
   664  0894                     	;# 
   665  0894                     	;# 
   666  0895                     	;# 
   667  0895                     	;# 
   668  0895                     	;# 
   669  0896                     	;# 
   670  0896                     	;# 
   671  0896                     	;# 
   672  089B                     	;# 
   673  0911                     	;# 
   674  0912                     	;# 
   675  0913                     	;# 
   676  0914                     	;# 
   677  0915                     	;# 
   678  0916                     	;# 
   679  0918                     	;# 
   680  0919                     	;# 
   681  091A                     	;# 
   682  091B                     	;# 
   683  091C                     	;# 
   684  091D                     	;# 
   685  091E                     	;# 
   686  091F                     	;# 
   687  0E0F                     	;# 
   688  0E10                     	;# 
   689  0E11                     	;# 
   690  0E12                     	;# 
   691  0E13                     	;# 
   692  0E14                     	;# 
   693  0E15                     	;# 
   694  0E16                     	;# 
   695  0E17                     	;# 
   696  0E18                     	;# 
   697  0E19                     	;# 
   698  0E1A                     	;# 
   699  0E1B                     	;# 
   700  0E1C                     	;# 
   701  0E1D                     	;# 
   702  0E1E                     	;# 
   703  0E1F                     	;# 
   704  0E20                     	;# 
   705  0E21                     	;# 
   706  0E22                     	;# 
   707  0E24                     	;# 
   708  0E25                     	;# 
   709  0E28                     	;# 
   710  0E29                     	;# 
   711  0E2A                     	;# 
   712  0E2B                     	;# 
   713  0E2C                     	;# 
   714  0E2D                     	;# 
   715  0E2E                     	;# 
   716  0E2F                     	;# 
   717  0E90                     	;# 
   718  0E91                     	;# 
   719  0E92                     	;# 
   720  0E94                     	;# 
   721  0E95                     	;# 
   722  0EA0                     	;# 
   723  0EA1                     	;# 
   724  0EA2                     	;# 
   725  0EA3                     	;# 
   726  0EA4                     	;# 
   727  0EA5                     	;# 
   728  0F0F                     	;# 
   729  0F10                     	;# 
   730  0F11                     	;# 
   731  0F12                     	;# 
   732  0F13                     	;# 
   733  0F14                     	;# 
   734  0F15                     	;# 
   735  0F16                     	;# 
   736  0F17                     	;# 
   737  0F18                     	;# 
   738  0F19                     	;# 
   739  0F1A                     	;# 
   740  0F1B                     	;# 
   741  0F1C                     	;# 
   742  0F1D                     	;# 
   743  0F1E                     	;# 
   744  0F1F                     	;# 
   745  0F20                     	;# 
   746  0F21                     	;# 
   747  0F22                     	;# 
   748  0F23                     	;# 
   749  0F24                     	;# 
   750  0F25                     	;# 
   751  0F26                     	;# 
   752  0F27                     	;# 
   753  0F28                     	;# 
   754  0F29                     	;# 
   755  0F2A                     	;# 
   756  0F2B                     	;# 
   757  0F2C                     	;# 
   758  0F2D                     	;# 
   759  0F2E                     	;# 
   760  0F2F                     	;# 
   761  0F30                     	;# 
   762  0F31                     	;# 
   763  0F32                     	;# 
   764  0F33                     	;# 
   765  0F34                     	;# 
   766  0F35                     	;# 
   767  0F36                     	;# 
   768  0F37                     	;# 
   769  0FE4                     	;# 
   770  0FE5                     	;# 
   771  0FE6                     	;# 
   772  0FE7                     	;# 
   773  0FE8                     	;# 
   774  0FE9                     	;# 
   775  0FEA                     	;# 
   776  0FEB                     	;# 
   777  0FED                     	;# 
   778  0FEE                     	;# 
   779  0FEF                     	;# 
   780  0000                     	;# 
   781  0001                     	;# 
   782  0002                     	;# 
   783  0003                     	;# 
   784  0004                     	;# 
   785  0005                     	;# 
   786  0006                     	;# 
   787  0007                     	;# 
   788  0008                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000E                     	;# 
   794  0010                     	;# 
   795  0011                     	;# 
   796  0012                     	;# 
   797  0013                     	;# 
   798  0014                     	;# 
   799  0015                     	;# 
   800  0015                     	;# 
   801  0016                     	;# 
   802  0016                     	;# 
   803  0017                     	;# 
   804  0018                     	;# 
   805  0019                     	;# 
   806  0019                     	;# 
   807  001A                     	;# 
   808  001B                     	;# 
   809  001C                     	;# 
   810  001D                     	;# 
   811  001E                     	;# 
   812  001F                     	;# 
   813  008C                     	;# 
   814  008E                     	;# 
   815  0090                     	;# 
   816  0091                     	;# 
   817  0092                     	;# 
   818  0093                     	;# 
   819  0094                     	;# 
   820  0097                     	;# 
   821  009B                     	;# 
   822  009B                     	;# 
   823  009C                     	;# 
   824  009D                     	;# 
   825  009E                     	;# 
   826  009F                     	;# 
   827  010C                     	;# 
   828  010E                     	;# 
   829  0111                     	;# 
   830  0112                     	;# 
   831  0113                     	;# 
   832  0114                     	;# 
   833  0115                     	;# 
   834  0116                     	;# 
   835  0117                     	;# 
   836  0118                     	;# 
   837  0119                     	;# 
   838  018C                     	;# 
   839  018E                     	;# 
   840  0197                     	;# 
   841  0199                     	;# 
   842  0199                     	;# 
   843  0199                     	;# 
   844  019A                     	;# 
   845  019A                     	;# 
   846  019A                     	;# 
   847  019B                     	;# 
   848  019B                     	;# 
   849  019B                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019C                     	;# 
   853  019C                     	;# 
   854  019C                     	;# 
   855  019D                     	;# 
   856  019D                     	;# 
   857  019D                     	;# 
   858  019E                     	;# 
   859  019E                     	;# 
   860  019E                     	;# 
   861  019F                     	;# 
   862  019F                     	;# 
   863  019F                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  020C                     	;# 
   867  020E                     	;# 
   868  0211                     	;# 
   869  0211                     	;# 
   870  0212                     	;# 
   871  0212                     	;# 
   872  0213                     	;# 
   873  0213                     	;# 
   874  0214                     	;# 
   875  0214                     	;# 
   876  0215                     	;# 
   877  0215                     	;# 
   878  0215                     	;# 
   879  0215                     	;# 
   880  0216                     	;# 
   881  0216                     	;# 
   882  0217                     	;# 
   883  0217                     	;# 
   884  0219                     	;# 
   885  021A                     	;# 
   886  021B                     	;# 
   887  021C                     	;# 
   888  021D                     	;# 
   889  021D                     	;# 
   890  021E                     	;# 
   891  021F                     	;# 
   892  028C                     	;# 
   893  028E                     	;# 
   894  0291                     	;# 
   895  0291                     	;# 
   896  0292                     	;# 
   897  0293                     	;# 
   898  0294                     	;# 
   899  0295                     	;# 
   900  0295                     	;# 
   901  0296                     	;# 
   902  0297                     	;# 
   903  0298                     	;# 
   904  029F                     	;# 
   905  030C                     	;# 
   906  030E                     	;# 
   907  0311                     	;# 
   908  0311                     	;# 
   909  0312                     	;# 
   910  0313                     	;# 
   911  0314                     	;# 
   912  0315                     	;# 
   913  0315                     	;# 
   914  0316                     	;# 
   915  0317                     	;# 
   916  0318                     	;# 
   917  038C                     	;# 
   918  038E                     	;# 
   919  0391                     	;# 
   920  0392                     	;# 
   921  0393                     	;# 
   922  0397                     	;# 
   923  0398                     	;# 
   924  0399                     	;# 
   925  039A                     	;# 
   926  039C                     	;# 
   927  039D                     	;# 
   928  039E                     	;# 
   929  039F                     	;# 
   930  0411                     	;# 
   931  0411                     	;# 
   932  0412                     	;# 
   933  0413                     	;# 
   934  0414                     	;# 
   935  0415                     	;# 
   936  0416                     	;# 
   937  0417                     	;# 
   938  0418                     	;# 
   939  0418                     	;# 
   940  0419                     	;# 
   941  041A                     	;# 
   942  041B                     	;# 
   943  041C                     	;# 
   944  041D                     	;# 
   945  041E                     	;# 
   946  041F                     	;# 
   947  0498                     	;# 
   948  0498                     	;# 
   949  0499                     	;# 
   950  049A                     	;# 
   951  049B                     	;# 
   952  049B                     	;# 
   953  049C                     	;# 
   954  049D                     	;# 
   955  049E                     	;# 
   956  049F                     	;# 
   957  0617                     	;# 
   958  0618                     	;# 
   959  0619                     	;# 
   960  0619                     	;# 
   961  061A                     	;# 
   962  061B                     	;# 
   963  061C                     	;# 
   964  061C                     	;# 
   965  061F                     	;# 
   966  0691                     	;# 
   967  0692                     	;# 
   968  0693                     	;# 
   969  0694                     	;# 
   970  0695                     	;# 
   971  0696                     	;# 
   972  0697                     	;# 
   973  0698                     	;# 
   974  0699                     	;# 
   975  0711                     	;# 
   976  0712                     	;# 
   977  0713                     	;# 
   978  0714                     	;# 
   979  0715                     	;# 
   980  0716                     	;# 
   981  0717                     	;# 
   982  0718                     	;# 
   983  0719                     	;# 
   984  0891                     	;# 
   985  0891                     	;# 
   986  0891                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0892                     	;# 
   991  0892                     	;# 
   992  0892                     	;# 
   993  0893                     	;# 
   994  0893                     	;# 
   995  0893                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0894                     	;# 
  1000  0894                     	;# 
  1001  0894                     	;# 
  1002  0895                     	;# 
  1003  0895                     	;# 
  1004  0895                     	;# 
  1005  0896                     	;# 
  1006  0896                     	;# 
  1007  0896                     	;# 
  1008  089B                     	;# 
  1009  0911                     	;# 
  1010  0912                     	;# 
  1011  0913                     	;# 
  1012  0914                     	;# 
  1013  0915                     	;# 
  1014  0916                     	;# 
  1015  0918                     	;# 
  1016  0919                     	;# 
  1017  091A                     	;# 
  1018  091B                     	;# 
  1019  091C                     	;# 
  1020  091D                     	;# 
  1021  091E                     	;# 
  1022  091F                     	;# 
  1023  0E0F                     	;# 
  1024  0E10                     	;# 
  1025  0E11                     	;# 
  1026  0E12                     	;# 
  1027  0E13                     	;# 
  1028  0E14                     	;# 
  1029  0E15                     	;# 
  1030  0E16                     	;# 
  1031  0E17                     	;# 
  1032  0E18                     	;# 
  1033  0E19                     	;# 
  1034  0E1A                     	;# 
  1035  0E1B                     	;# 
  1036  0E1C                     	;# 
  1037  0E1D                     	;# 
  1038  0E1E                     	;# 
  1039  0E1F                     	;# 
  1040  0E20                     	;# 
  1041  0E21                     	;# 
  1042  0E22                     	;# 
  1043  0E24                     	;# 
  1044  0E25                     	;# 
  1045  0E28                     	;# 
  1046  0E29                     	;# 
  1047  0E2A                     	;# 
  1048  0E2B                     	;# 
  1049  0E2C                     	;# 
  1050  0E2D                     	;# 
  1051  0E2E                     	;# 
  1052  0E2F                     	;# 
  1053  0E90                     	;# 
  1054  0E91                     	;# 
  1055  0E92                     	;# 
  1056  0E94                     	;# 
  1057  0E95                     	;# 
  1058  0EA0                     	;# 
  1059  0EA1                     	;# 
  1060  0EA2                     	;# 
  1061  0EA3                     	;# 
  1062  0EA4                     	;# 
  1063  0EA5                     	;# 
  1064  0F0F                     	;# 
  1065  0F10                     	;# 
  1066  0F11                     	;# 
  1067  0F12                     	;# 
  1068  0F13                     	;# 
  1069  0F14                     	;# 
  1070  0F15                     	;# 
  1071  0F16                     	;# 
  1072  0F17                     	;# 
  1073  0F18                     	;# 
  1074  0F19                     	;# 
  1075  0F1A                     	;# 
  1076  0F1B                     	;# 
  1077  0F1C                     	;# 
  1078  0F1D                     	;# 
  1079  0F1E                     	;# 
  1080  0F1F                     	;# 
  1081  0F20                     	;# 
  1082  0F21                     	;# 
  1083  0F22                     	;# 
  1084  0F23                     	;# 
  1085  0F24                     	;# 
  1086  0F25                     	;# 
  1087  0F26                     	;# 
  1088  0F27                     	;# 
  1089  0F28                     	;# 
  1090  0F29                     	;# 
  1091  0F2A                     	;# 
  1092  0F2B                     	;# 
  1093  0F2C                     	;# 
  1094  0F2D                     	;# 
  1095  0F2E                     	;# 
  1096  0F2F                     	;# 
  1097  0F30                     	;# 
  1098  0F31                     	;# 
  1099  0F32                     	;# 
  1100  0F33                     	;# 
  1101  0F34                     	;# 
  1102  0F35                     	;# 
  1103  0F36                     	;# 
  1104  0F37                     	;# 
  1105  0FE4                     	;# 
  1106  0FE5                     	;# 
  1107  0FE6                     	;# 
  1108  0FE7                     	;# 
  1109  0FE8                     	;# 
  1110  0FE9                     	;# 
  1111  0FEA                     	;# 
  1112  0FEB                     	;# 
  1113  0FED                     	;# 
  1114  0FEE                     	;# 
  1115  0FEF                     	;# 
  1116  0000                     	;# 
  1117  0001                     	;# 
  1118  0002                     	;# 
  1119  0003                     	;# 
  1120  0004                     	;# 
  1121  0005                     	;# 
  1122  0006                     	;# 
  1123  0007                     	;# 
  1124  0008                     	;# 
  1125  0009                     	;# 
  1126  000A                     	;# 
  1127  000B                     	;# 
  1128  000C                     	;# 
  1129  000E                     	;# 
  1130  0010                     	;# 
  1131  0011                     	;# 
  1132  0012                     	;# 
  1133  0013                     	;# 
  1134  0014                     	;# 
  1135  0015                     	;# 
  1136  0015                     	;# 
  1137  0016                     	;# 
  1138  0016                     	;# 
  1139  0017                     	;# 
  1140  0018                     	;# 
  1141  0019                     	;# 
  1142  0019                     	;# 
  1143  001A                     	;# 
  1144  001B                     	;# 
  1145  001C                     	;# 
  1146  001D                     	;# 
  1147  001E                     	;# 
  1148  001F                     	;# 
  1149  008C                     	;# 
  1150  008E                     	;# 
  1151  0090                     	;# 
  1152  0091                     	;# 
  1153  0092                     	;# 
  1154  0093                     	;# 
  1155  0094                     	;# 
  1156  0097                     	;# 
  1157  009B                     	;# 
  1158  009B                     	;# 
  1159  009C                     	;# 
  1160  009D                     	;# 
  1161  009E                     	;# 
  1162  009F                     	;# 
  1163  010C                     	;# 
  1164  010E                     	;# 
  1165  0111                     	;# 
  1166  0112                     	;# 
  1167  0113                     	;# 
  1168  0114                     	;# 
  1169  0115                     	;# 
  1170  0116                     	;# 
  1171  0117                     	;# 
  1172  0118                     	;# 
  1173  0119                     	;# 
  1174  018C                     	;# 
  1175  018E                     	;# 
  1176  0197                     	;# 
  1177  0199                     	;# 
  1178  0199                     	;# 
  1179  0199                     	;# 
  1180  019A                     	;# 
  1181  019A                     	;# 
  1182  019A                     	;# 
  1183  019B                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019C                     	;# 
  1189  019C                     	;# 
  1190  019C                     	;# 
  1191  019D                     	;# 
  1192  019D                     	;# 
  1193  019D                     	;# 
  1194  019E                     	;# 
  1195  019E                     	;# 
  1196  019E                     	;# 
  1197  019F                     	;# 
  1198  019F                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  020C                     	;# 
  1203  020E                     	;# 
  1204  0211                     	;# 
  1205  0211                     	;# 
  1206  0212                     	;# 
  1207  0212                     	;# 
  1208  0213                     	;# 
  1209  0213                     	;# 
  1210  0214                     	;# 
  1211  0214                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0216                     	;# 
  1217  0216                     	;# 
  1218  0217                     	;# 
  1219  0217                     	;# 
  1220  0219                     	;# 
  1221  021A                     	;# 
  1222  021B                     	;# 
  1223  021C                     	;# 
  1224  021D                     	;# 
  1225  021D                     	;# 
  1226  021E                     	;# 
  1227  021F                     	;# 
  1228  028C                     	;# 
  1229  028E                     	;# 
  1230  0291                     	;# 
  1231  0291                     	;# 
  1232  0292                     	;# 
  1233  0293                     	;# 
  1234  0294                     	;# 
  1235  0295                     	;# 
  1236  0295                     	;# 
  1237  0296                     	;# 
  1238  0297                     	;# 
  1239  0298                     	;# 
  1240  029F                     	;# 
  1241  030C                     	;# 
  1242  030E                     	;# 
  1243  0311                     	;# 
  1244  0311                     	;# 
  1245  0312                     	;# 
  1246  0313                     	;# 
  1247  0314                     	;# 
  1248  0315                     	;# 
  1249  0315                     	;# 
  1250  0316                     	;# 
  1251  0317                     	;# 
  1252  0318                     	;# 
  1253  038C                     	;# 
  1254  038E                     	;# 
  1255  0391                     	;# 
  1256  0392                     	;# 
  1257  0393                     	;# 
  1258  0397                     	;# 
  1259  0398                     	;# 
  1260  0399                     	;# 
  1261  039A                     	;# 
  1262  039C                     	;# 
  1263  039D                     	;# 
  1264  039E                     	;# 
  1265  039F                     	;# 
  1266  0411                     	;# 
  1267  0411                     	;# 
  1268  0412                     	;# 
  1269  0413                     	;# 
  1270  0414                     	;# 
  1271  0415                     	;# 
  1272  0416                     	;# 
  1273  0417                     	;# 
  1274  0418                     	;# 
  1275  0418                     	;# 
  1276  0419                     	;# 
  1277  041A                     	;# 
  1278  041B                     	;# 
  1279  041C                     	;# 
  1280  041D                     	;# 
  1281  041E                     	;# 
  1282  041F                     	;# 
  1283  0498                     	;# 
  1284  0498                     	;# 
  1285  0499                     	;# 
  1286  049A                     	;# 
  1287  049B                     	;# 
  1288  049B                     	;# 
  1289  049C                     	;# 
  1290  049D                     	;# 
  1291  049E                     	;# 
  1292  049F                     	;# 
  1293  0617                     	;# 
  1294  0618                     	;# 
  1295  0619                     	;# 
  1296  0619                     	;# 
  1297  061A                     	;# 
  1298  061B                     	;# 
  1299  061C                     	;# 
  1300  061C                     	;# 
  1301  061F                     	;# 
  1302  0691                     	;# 
  1303  0692                     	;# 
  1304  0693                     	;# 
  1305  0694                     	;# 
  1306  0695                     	;# 
  1307  0696                     	;# 
  1308  0697                     	;# 
  1309  0698                     	;# 
  1310  0699                     	;# 
  1311  0711                     	;# 
  1312  0712                     	;# 
  1313  0713                     	;# 
  1314  0714                     	;# 
  1315  0715                     	;# 
  1316  0716                     	;# 
  1317  0717                     	;# 
  1318  0718                     	;# 
  1319  0719                     	;# 
  1320  0891                     	;# 
  1321  0891                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0892                     	;# 
  1327  0892                     	;# 
  1328  0892                     	;# 
  1329  0893                     	;# 
  1330  0893                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0894                     	;# 
  1336  0894                     	;# 
  1337  0894                     	;# 
  1338  0895                     	;# 
  1339  0895                     	;# 
  1340  0895                     	;# 
  1341  0896                     	;# 
  1342  0896                     	;# 
  1343  0896                     	;# 
  1344  089B                     	;# 
  1345  0911                     	;# 
  1346  0912                     	;# 
  1347  0913                     	;# 
  1348  0914                     	;# 
  1349  0915                     	;# 
  1350  0916                     	;# 
  1351  0918                     	;# 
  1352  0919                     	;# 
  1353  091A                     	;# 
  1354  091B                     	;# 
  1355  091C                     	;# 
  1356  091D                     	;# 
  1357  091E                     	;# 
  1358  091F                     	;# 
  1359  0E0F                     	;# 
  1360  0E10                     	;# 
  1361  0E11                     	;# 
  1362  0E12                     	;# 
  1363  0E13                     	;# 
  1364  0E14                     	;# 
  1365  0E15                     	;# 
  1366  0E16                     	;# 
  1367  0E17                     	;# 
  1368  0E18                     	;# 
  1369  0E19                     	;# 
  1370  0E1A                     	;# 
  1371  0E1B                     	;# 
  1372  0E1C                     	;# 
  1373  0E1D                     	;# 
  1374  0E1E                     	;# 
  1375  0E1F                     	;# 
  1376  0E20                     	;# 
  1377  0E21                     	;# 
  1378  0E22                     	;# 
  1379  0E24                     	;# 
  1380  0E25                     	;# 
  1381  0E28                     	;# 
  1382  0E29                     	;# 
  1383  0E2A                     	;# 
  1384  0E2B                     	;# 
  1385  0E2C                     	;# 
  1386  0E2D                     	;# 
  1387  0E2E                     	;# 
  1388  0E2F                     	;# 
  1389  0E90                     	;# 
  1390  0E91                     	;# 
  1391  0E92                     	;# 
  1392  0E94                     	;# 
  1393  0E95                     	;# 
  1394  0EA0                     	;# 
  1395  0EA1                     	;# 
  1396  0EA2                     	;# 
  1397  0EA3                     	;# 
  1398  0EA4                     	;# 
  1399  0EA5                     	;# 
  1400  0F0F                     	;# 
  1401  0F10                     	;# 
  1402  0F11                     	;# 
  1403  0F12                     	;# 
  1404  0F13                     	;# 
  1405  0F14                     	;# 
  1406  0F15                     	;# 
  1407  0F16                     	;# 
  1408  0F17                     	;# 
  1409  0F18                     	;# 
  1410  0F19                     	;# 
  1411  0F1A                     	;# 
  1412  0F1B                     	;# 
  1413  0F1C                     	;# 
  1414  0F1D                     	;# 
  1415  0F1E                     	;# 
  1416  0F1F                     	;# 
  1417  0F20                     	;# 
  1418  0F21                     	;# 
  1419  0F22                     	;# 
  1420  0F23                     	;# 
  1421  0F24                     	;# 
  1422  0F25                     	;# 
  1423  0F26                     	;# 
  1424  0F27                     	;# 
  1425  0F28                     	;# 
  1426  0F29                     	;# 
  1427  0F2A                     	;# 
  1428  0F2B                     	;# 
  1429  0F2C                     	;# 
  1430  0F2D                     	;# 
  1431  0F2E                     	;# 
  1432  0F2F                     	;# 
  1433  0F30                     	;# 
  1434  0F31                     	;# 
  1435  0F32                     	;# 
  1436  0F33                     	;# 
  1437  0F34                     	;# 
  1438  0F35                     	;# 
  1439  0F36                     	;# 
  1440  0F37                     	;# 
  1441  0FE4                     	;# 
  1442  0FE5                     	;# 
  1443  0FE6                     	;# 
  1444  0FE7                     	;# 
  1445  0FE8                     	;# 
  1446  0FE9                     	;# 
  1447  0FEA                     	;# 
  1448  0FEB                     	;# 
  1449  0FED                     	;# 
  1450  0FEE                     	;# 
  1451  0FEF                     	;# 
  1452  0000                     	;# 
  1453  0001                     	;# 
  1454  0002                     	;# 
  1455  0003                     	;# 
  1456  0004                     	;# 
  1457  0005                     	;# 
  1458  0006                     	;# 
  1459  0007                     	;# 
  1460  0008                     	;# 
  1461  0009                     	;# 
  1462  000A                     	;# 
  1463  000B                     	;# 
  1464  000C                     	;# 
  1465  000E                     	;# 
  1466  0010                     	;# 
  1467  0011                     	;# 
  1468  0012                     	;# 
  1469  0013                     	;# 
  1470  0014                     	;# 
  1471  0015                     	;# 
  1472  0015                     	;# 
  1473  0016                     	;# 
  1474  0016                     	;# 
  1475  0017                     	;# 
  1476  0018                     	;# 
  1477  0019                     	;# 
  1478  0019                     	;# 
  1479  001A                     	;# 
  1480  001B                     	;# 
  1481  001C                     	;# 
  1482  001D                     	;# 
  1483  001E                     	;# 
  1484  001F                     	;# 
  1485  008C                     	;# 
  1486  008E                     	;# 
  1487  0090                     	;# 
  1488  0091                     	;# 
  1489  0092                     	;# 
  1490  0093                     	;# 
  1491  0094                     	;# 
  1492  0097                     	;# 
  1493  009B                     	;# 
  1494  009B                     	;# 
  1495  009C                     	;# 
  1496  009D                     	;# 
  1497  009E                     	;# 
  1498  009F                     	;# 
  1499  010C                     	;# 
  1500  010E                     	;# 
  1501  0111                     	;# 
  1502  0112                     	;# 
  1503  0113                     	;# 
  1504  0114                     	;# 
  1505  0115                     	;# 
  1506  0116                     	;# 
  1507  0117                     	;# 
  1508  0118                     	;# 
  1509  0119                     	;# 
  1510  018C                     	;# 
  1511  018E                     	;# 
  1512  0197                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  019F                     	;# 
  1538  020C                     	;# 
  1539  020E                     	;# 
  1540  0211                     	;# 
  1541  0211                     	;# 
  1542  0212                     	;# 
  1543  0212                     	;# 
  1544  0213                     	;# 
  1545  0213                     	;# 
  1546  0214                     	;# 
  1547  0214                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0216                     	;# 
  1553  0216                     	;# 
  1554  0217                     	;# 
  1555  0217                     	;# 
  1556  0219                     	;# 
  1557  021A                     	;# 
  1558  021B                     	;# 
  1559  021C                     	;# 
  1560  021D                     	;# 
  1561  021D                     	;# 
  1562  021E                     	;# 
  1563  021F                     	;# 
  1564  028C                     	;# 
  1565  028E                     	;# 
  1566  0291                     	;# 
  1567  0291                     	;# 
  1568  0292                     	;# 
  1569  0293                     	;# 
  1570  0294                     	;# 
  1571  0295                     	;# 
  1572  0295                     	;# 
  1573  0296                     	;# 
  1574  0297                     	;# 
  1575  0298                     	;# 
  1576  029F                     	;# 
  1577  030C                     	;# 
  1578  030E                     	;# 
  1579  0311                     	;# 
  1580  0311                     	;# 
  1581  0312                     	;# 
  1582  0313                     	;# 
  1583  0314                     	;# 
  1584  0315                     	;# 
  1585  0315                     	;# 
  1586  0316                     	;# 
  1587  0317                     	;# 
  1588  0318                     	;# 
  1589  038C                     	;# 
  1590  038E                     	;# 
  1591  0391                     	;# 
  1592  0392                     	;# 
  1593  0393                     	;# 
  1594  0397                     	;# 
  1595  0398                     	;# 
  1596  0399                     	;# 
  1597  039A                     	;# 
  1598  039C                     	;# 
  1599  039D                     	;# 
  1600  039E                     	;# 
  1601  039F                     	;# 
  1602  0411                     	;# 
  1603  0411                     	;# 
  1604  0412                     	;# 
  1605  0413                     	;# 
  1606  0414                     	;# 
  1607  0415                     	;# 
  1608  0416                     	;# 
  1609  0417                     	;# 
  1610  0418                     	;# 
  1611  0418                     	;# 
  1612  0419                     	;# 
  1613  041A                     	;# 
  1614  041B                     	;# 
  1615  041C                     	;# 
  1616  041D                     	;# 
  1617  041E                     	;# 
  1618  041F                     	;# 
  1619  0498                     	;# 
  1620  0498                     	;# 
  1621  0499                     	;# 
  1622  049A                     	;# 
  1623  049B                     	;# 
  1624  049B                     	;# 
  1625  049C                     	;# 
  1626  049D                     	;# 
  1627  049E                     	;# 
  1628  049F                     	;# 
  1629  0617                     	;# 
  1630  0618                     	;# 
  1631  0619                     	;# 
  1632  0619                     	;# 
  1633  061A                     	;# 
  1634  061B                     	;# 
  1635  061C                     	;# 
  1636  061C                     	;# 
  1637  061F                     	;# 
  1638  0691                     	;# 
  1639  0692                     	;# 
  1640  0693                     	;# 
  1641  0694                     	;# 
  1642  0695                     	;# 
  1643  0696                     	;# 
  1644  0697                     	;# 
  1645  0698                     	;# 
  1646  0699                     	;# 
  1647  0711                     	;# 
  1648  0712                     	;# 
  1649  0713                     	;# 
  1650  0714                     	;# 
  1651  0715                     	;# 
  1652  0716                     	;# 
  1653  0717                     	;# 
  1654  0718                     	;# 
  1655  0719                     	;# 
  1656  0891                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0891                     	;# 
  1662  0892                     	;# 
  1663  0892                     	;# 
  1664  0892                     	;# 
  1665  0893                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0893                     	;# 
  1671  0894                     	;# 
  1672  0894                     	;# 
  1673  0894                     	;# 
  1674  0895                     	;# 
  1675  0895                     	;# 
  1676  0895                     	;# 
  1677  0896                     	;# 
  1678  0896                     	;# 
  1679  0896                     	;# 
  1680  089B                     	;# 
  1681  0911                     	;# 
  1682  0912                     	;# 
  1683  0913                     	;# 
  1684  0914                     	;# 
  1685  0915                     	;# 
  1686  0916                     	;# 
  1687  0918                     	;# 
  1688  0919                     	;# 
  1689  091A                     	;# 
  1690  091B                     	;# 
  1691  091C                     	;# 
  1692  091D                     	;# 
  1693  091E                     	;# 
  1694  091F                     	;# 
  1695  0E0F                     	;# 
  1696  0E10                     	;# 
  1697  0E11                     	;# 
  1698  0E12                     	;# 
  1699  0E13                     	;# 
  1700  0E14                     	;# 
  1701  0E15                     	;# 
  1702  0E16                     	;# 
  1703  0E17                     	;# 
  1704  0E18                     	;# 
  1705  0E19                     	;# 
  1706  0E1A                     	;# 
  1707  0E1B                     	;# 
  1708  0E1C                     	;# 
  1709  0E1D                     	;# 
  1710  0E1E                     	;# 
  1711  0E1F                     	;# 
  1712  0E20                     	;# 
  1713  0E21                     	;# 
  1714  0E22                     	;# 
  1715  0E24                     	;# 
  1716  0E25                     	;# 
  1717  0E28                     	;# 
  1718  0E29                     	;# 
  1719  0E2A                     	;# 
  1720  0E2B                     	;# 
  1721  0E2C                     	;# 
  1722  0E2D                     	;# 
  1723  0E2E                     	;# 
  1724  0E2F                     	;# 
  1725  0E90                     	;# 
  1726  0E91                     	;# 
  1727  0E92                     	;# 
  1728  0E94                     	;# 
  1729  0E95                     	;# 
  1730  0EA0                     	;# 
  1731  0EA1                     	;# 
  1732  0EA2                     	;# 
  1733  0EA3                     	;# 
  1734  0EA4                     	;# 
  1735  0EA5                     	;# 
  1736  0F0F                     	;# 
  1737  0F10                     	;# 
  1738  0F11                     	;# 
  1739  0F12                     	;# 
  1740  0F13                     	;# 
  1741  0F14                     	;# 
  1742  0F15                     	;# 
  1743  0F16                     	;# 
  1744  0F17                     	;# 
  1745  0F18                     	;# 
  1746  0F19                     	;# 
  1747  0F1A                     	;# 
  1748  0F1B                     	;# 
  1749  0F1C                     	;# 
  1750  0F1D                     	;# 
  1751  0F1E                     	;# 
  1752  0F1F                     	;# 
  1753  0F20                     	;# 
  1754  0F21                     	;# 
  1755  0F22                     	;# 
  1756  0F23                     	;# 
  1757  0F24                     	;# 
  1758  0F25                     	;# 
  1759  0F26                     	;# 
  1760  0F27                     	;# 
  1761  0F28                     	;# 
  1762  0F29                     	;# 
  1763  0F2A                     	;# 
  1764  0F2B                     	;# 
  1765  0F2C                     	;# 
  1766  0F2D                     	;# 
  1767  0F2E                     	;# 
  1768  0F2F                     	;# 
  1769  0F30                     	;# 
  1770  0F31                     	;# 
  1771  0F32                     	;# 
  1772  0F33                     	;# 
  1773  0F34                     	;# 
  1774  0F35                     	;# 
  1775  0F36                     	;# 
  1776  0F37                     	;# 
  1777  0FE4                     	;# 
  1778  0FE5                     	;# 
  1779  0FE6                     	;# 
  1780  0FE7                     	;# 
  1781  0FE8                     	;# 
  1782  0FE9                     	;# 
  1783  0FEA                     	;# 
  1784  0FEB                     	;# 
  1785  0FED                     	;# 
  1786  0FEE                     	;# 
  1787  0FEF                     	;# 
  1788  0000                     	;# 
  1789  0001                     	;# 
  1790  0002                     	;# 
  1791  0003                     	;# 
  1792  0004                     	;# 
  1793  0005                     	;# 
  1794  0006                     	;# 
  1795  0007                     	;# 
  1796  0008                     	;# 
  1797  0009                     	;# 
  1798  000A                     	;# 
  1799  000B                     	;# 
  1800  000C                     	;# 
  1801  000E                     	;# 
  1802  0010                     	;# 
  1803  0011                     	;# 
  1804  0012                     	;# 
  1805  0013                     	;# 
  1806  0014                     	;# 
  1807  0015                     	;# 
  1808  0015                     	;# 
  1809  0016                     	;# 
  1810  0016                     	;# 
  1811  0017                     	;# 
  1812  0018                     	;# 
  1813  0019                     	;# 
  1814  0019                     	;# 
  1815  001A                     	;# 
  1816  001B                     	;# 
  1817  001C                     	;# 
  1818  001D                     	;# 
  1819  001E                     	;# 
  1820  001F                     	;# 
  1821  008C                     	;# 
  1822  008E                     	;# 
  1823  0090                     	;# 
  1824  0091                     	;# 
  1825  0092                     	;# 
  1826  0093                     	;# 
  1827  0094                     	;# 
  1828  0097                     	;# 
  1829  009B                     	;# 
  1830  009B                     	;# 
  1831  009C                     	;# 
  1832  009D                     	;# 
  1833  009E                     	;# 
  1834  009F                     	;# 
  1835  010C                     	;# 
  1836  010E                     	;# 
  1837  0111                     	;# 
  1838  0112                     	;# 
  1839  0113                     	;# 
  1840  0114                     	;# 
  1841  0115                     	;# 
  1842  0116                     	;# 
  1843  0117                     	;# 
  1844  0118                     	;# 
  1845  0119                     	;# 
  1846  018C                     	;# 
  1847  018E                     	;# 
  1848  0197                     	;# 
  1849  0199                     	;# 
  1850  0199                     	;# 
  1851  0199                     	;# 
  1852  019A                     	;# 
  1853  019A                     	;# 
  1854  019A                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019B                     	;# 
  1859  019B                     	;# 
  1860  019C                     	;# 
  1861  019C                     	;# 
  1862  019C                     	;# 
  1863  019D                     	;# 
  1864  019D                     	;# 
  1865  019D                     	;# 
  1866  019E                     	;# 
  1867  019E                     	;# 
  1868  019E                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  019F                     	;# 
  1873  019F                     	;# 
  1874  020C                     	;# 
  1875  020E                     	;# 
  1876  0211                     	;# 
  1877  0211                     	;# 
  1878  0212                     	;# 
  1879  0212                     	;# 
  1880  0213                     	;# 
  1881  0213                     	;# 
  1882  0214                     	;# 
  1883  0214                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0215                     	;# 
  1888  0216                     	;# 
  1889  0216                     	;# 
  1890  0217                     	;# 
  1891  0217                     	;# 
  1892  0219                     	;# 
  1893  021A                     	;# 
  1894  021B                     	;# 
  1895  021C                     	;# 
  1896  021D                     	;# 
  1897  021D                     	;# 
  1898  021E                     	;# 
  1899  021F                     	;# 
  1900  028C                     	;# 
  1901  028E                     	;# 
  1902  0291                     	;# 
  1903  0291                     	;# 
  1904  0292                     	;# 
  1905  0293                     	;# 
  1906  0294                     	;# 
  1907  0295                     	;# 
  1908  0295                     	;# 
  1909  0296                     	;# 
  1910  0297                     	;# 
  1911  0298                     	;# 
  1912  029F                     	;# 
  1913  030C                     	;# 
  1914  030E                     	;# 
  1915  0311                     	;# 
  1916  0311                     	;# 
  1917  0312                     	;# 
  1918  0313                     	;# 
  1919  0314                     	;# 
  1920  0315                     	;# 
  1921  0315                     	;# 
  1922  0316                     	;# 
  1923  0317                     	;# 
  1924  0318                     	;# 
  1925  038C                     	;# 
  1926  038E                     	;# 
  1927  0391                     	;# 
  1928  0392                     	;# 
  1929  0393                     	;# 
  1930  0397                     	;# 
  1931  0398                     	;# 
  1932  0399                     	;# 
  1933  039A                     	;# 
  1934  039C                     	;# 
  1935  039D                     	;# 
  1936  039E                     	;# 
  1937  039F                     	;# 
  1938  0411                     	;# 
  1939  0411                     	;# 
  1940  0412                     	;# 
  1941  0413                     	;# 
  1942  0414                     	;# 
  1943  0415                     	;# 
  1944  0416                     	;# 
  1945  0417                     	;# 
  1946  0418                     	;# 
  1947  0418                     	;# 
  1948  0419                     	;# 
  1949  041A                     	;# 
  1950  041B                     	;# 
  1951  041C                     	;# 
  1952  041D                     	;# 
  1953  041E                     	;# 
  1954  041F                     	;# 
  1955  0498                     	;# 
  1956  0498                     	;# 
  1957  0499                     	;# 
  1958  049A                     	;# 
  1959  049B                     	;# 
  1960  049B                     	;# 
  1961  049C                     	;# 
  1962  049D                     	;# 
  1963  049E                     	;# 
  1964  049F                     	;# 
  1965  0617                     	;# 
  1966  0618                     	;# 
  1967  0619                     	;# 
  1968  0619                     	;# 
  1969  061A                     	;# 
  1970  061B                     	;# 
  1971  061C                     	;# 
  1972  061C                     	;# 
  1973  061F                     	;# 
  1974  0691                     	;# 
  1975  0692                     	;# 
  1976  0693                     	;# 
  1977  0694                     	;# 
  1978  0695                     	;# 
  1979  0696                     	;# 
  1980  0697                     	;# 
  1981  0698                     	;# 
  1982  0699                     	;# 
  1983  0711                     	;# 
  1984  0712                     	;# 
  1985  0713                     	;# 
  1986  0714                     	;# 
  1987  0715                     	;# 
  1988  0716                     	;# 
  1989  0717                     	;# 
  1990  0718                     	;# 
  1991  0719                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0891                     	;# 
  1997  0891                     	;# 
  1998  0892                     	;# 
  1999  0892                     	;# 
  2000  0892                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0893                     	;# 
  2006  0893                     	;# 
  2007  0894                     	;# 
  2008  0894                     	;# 
  2009  0894                     	;# 
  2010  0895                     	;# 
  2011  0895                     	;# 
  2012  0895                     	;# 
  2013  0896                     	;# 
  2014  0896                     	;# 
  2015  0896                     	;# 
  2016  089B                     	;# 
  2017  0911                     	;# 
  2018  0912                     	;# 
  2019  0913                     	;# 
  2020  0914                     	;# 
  2021  0915                     	;# 
  2022  0916                     	;# 
  2023  0918                     	;# 
  2024  0919                     	;# 
  2025  091A                     	;# 
  2026  091B                     	;# 
  2027  091C                     	;# 
  2028  091D                     	;# 
  2029  091E                     	;# 
  2030  091F                     	;# 
  2031  0E0F                     	;# 
  2032  0E10                     	;# 
  2033  0E11                     	;# 
  2034  0E12                     	;# 
  2035  0E13                     	;# 
  2036  0E14                     	;# 
  2037  0E15                     	;# 
  2038  0E16                     	;# 
  2039  0E17                     	;# 
  2040  0E18                     	;# 
  2041  0E19                     	;# 
  2042  0E1A                     	;# 
  2043  0E1B                     	;# 
  2044  0E1C                     	;# 
  2045  0E1D                     	;# 
  2046  0E1E                     	;# 
  2047  0E1F                     	;# 
  2048  0E20                     	;# 
  2049  0E21                     	;# 
  2050  0E22                     	;# 
  2051  0E24                     	;# 
  2052  0E25                     	;# 
  2053  0E28                     	;# 
  2054  0E29                     	;# 
  2055  0E2A                     	;# 
  2056  0E2B                     	;# 
  2057  0E2C                     	;# 
  2058  0E2D                     	;# 
  2059  0E2E                     	;# 
  2060  0E2F                     	;# 
  2061  0E90                     	;# 
  2062  0E91                     	;# 
  2063  0E92                     	;# 
  2064  0E94                     	;# 
  2065  0E95                     	;# 
  2066  0EA0                     	;# 
  2067  0EA1                     	;# 
  2068  0EA2                     	;# 
  2069  0EA3                     	;# 
  2070  0EA4                     	;# 
  2071  0EA5                     	;# 
  2072  0F0F                     	;# 
  2073  0F10                     	;# 
  2074  0F11                     	;# 
  2075  0F12                     	;# 
  2076  0F13                     	;# 
  2077  0F14                     	;# 
  2078  0F15                     	;# 
  2079  0F16                     	;# 
  2080  0F17                     	;# 
  2081  0F18                     	;# 
  2082  0F19                     	;# 
  2083  0F1A                     	;# 
  2084  0F1B                     	;# 
  2085  0F1C                     	;# 
  2086  0F1D                     	;# 
  2087  0F1E                     	;# 
  2088  0F1F                     	;# 
  2089  0F20                     	;# 
  2090  0F21                     	;# 
  2091  0F22                     	;# 
  2092  0F23                     	;# 
  2093  0F24                     	;# 
  2094  0F25                     	;# 
  2095  0F26                     	;# 
  2096  0F27                     	;# 
  2097  0F28                     	;# 
  2098  0F29                     	;# 
  2099  0F2A                     	;# 
  2100  0F2B                     	;# 
  2101  0F2C                     	;# 
  2102  0F2D                     	;# 
  2103  0F2E                     	;# 
  2104  0F2F                     	;# 
  2105  0F30                     	;# 
  2106  0F31                     	;# 
  2107  0F32                     	;# 
  2108  0F33                     	;# 
  2109  0F34                     	;# 
  2110  0F35                     	;# 
  2111  0F36                     	;# 
  2112  0F37                     	;# 
  2113  0FE4                     	;# 
  2114  0FE5                     	;# 
  2115  0FE6                     	;# 
  2116  0FE7                     	;# 
  2117  0FE8                     	;# 
  2118  0FE9                     	;# 
  2119  0FEA                     	;# 
  2120  0FEB                     	;# 
  2121  0FED                     	;# 
  2122  0FEE                     	;# 
  2123  0FEF                     	;# 
  2124  0000                     	;# 
  2125  0001                     	;# 
  2126  0002                     	;# 
  2127  0003                     	;# 
  2128  0004                     	;# 
  2129  0005                     	;# 
  2130  0006                     	;# 
  2131  0007                     	;# 
  2132  0008                     	;# 
  2133  0009                     	;# 
  2134  000A                     	;# 
  2135  000B                     	;# 
  2136  000C                     	;# 
  2137  000E                     	;# 
  2138  0010                     	;# 
  2139  0011                     	;# 
  2140  0012                     	;# 
  2141  0013                     	;# 
  2142  0014                     	;# 
  2143  0015                     	;# 
  2144  0015                     	;# 
  2145  0016                     	;# 
  2146  0016                     	;# 
  2147  0017                     	;# 
  2148  0018                     	;# 
  2149  0019                     	;# 
  2150  0019                     	;# 
  2151  001A                     	;# 
  2152  001B                     	;# 
  2153  001C                     	;# 
  2154  001D                     	;# 
  2155  001E                     	;# 
  2156  001F                     	;# 
  2157  008C                     	;# 
  2158  008E                     	;# 
  2159  0090                     	;# 
  2160  0091                     	;# 
  2161  0092                     	;# 
  2162  0093                     	;# 
  2163  0094                     	;# 
  2164  0097                     	;# 
  2165  009B                     	;# 
  2166  009B                     	;# 
  2167  009C                     	;# 
  2168  009D                     	;# 
  2169  009E                     	;# 
  2170  009F                     	;# 
  2171  010C                     	;# 
  2172  010E                     	;# 
  2173  0111                     	;# 
  2174  0112                     	;# 
  2175  0113                     	;# 
  2176  0114                     	;# 
  2177  0115                     	;# 
  2178  0116                     	;# 
  2179  0117                     	;# 
  2180  0118                     	;# 
  2181  0119                     	;# 
  2182  018C                     	;# 
  2183  018E                     	;# 
  2184  0197                     	;# 
  2185  0199                     	;# 
  2186  0199                     	;# 
  2187  0199                     	;# 
  2188  019A                     	;# 
  2189  019A                     	;# 
  2190  019A                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019B                     	;# 
  2194  019B                     	;# 
  2195  019B                     	;# 
  2196  019C                     	;# 
  2197  019C                     	;# 
  2198  019C                     	;# 
  2199  019D                     	;# 
  2200  019D                     	;# 
  2201  019D                     	;# 
  2202  019E                     	;# 
  2203  019E                     	;# 
  2204  019E                     	;# 
  2205  019F                     	;# 
  2206  019F                     	;# 
  2207  019F                     	;# 
  2208  019F                     	;# 
  2209  019F                     	;# 
  2210  020C                     	;# 
  2211  020E                     	;# 
  2212  0211                     	;# 
  2213  0211                     	;# 
  2214  0212                     	;# 
  2215  0212                     	;# 
  2216  0213                     	;# 
  2217  0213                     	;# 
  2218  0214                     	;# 
  2219  0214                     	;# 
  2220  0215                     	;# 
  2221  0215                     	;# 
  2222  0215                     	;# 
  2223  0215                     	;# 
  2224  0216                     	;# 
  2225  0216                     	;# 
  2226  0217                     	;# 
  2227  0217                     	;# 
  2228  0219                     	;# 
  2229  021A                     	;# 
  2230  021B                     	;# 
  2231  021C                     	;# 
  2232  021D                     	;# 
  2233  021D                     	;# 
  2234  021E                     	;# 
  2235  021F                     	;# 
  2236  028C                     	;# 
  2237  028E                     	;# 
  2238  0291                     	;# 
  2239  0291                     	;# 
  2240  0292                     	;# 
  2241  0293                     	;# 
  2242  0294                     	;# 
  2243  0295                     	;# 
  2244  0295                     	;# 
  2245  0296                     	;# 
  2246  0297                     	;# 
  2247  0298                     	;# 
  2248  029F                     	;# 
  2249  030C                     	;# 
  2250  030E                     	;# 
  2251  0311                     	;# 
  2252  0311                     	;# 
  2253  0312                     	;# 
  2254  0313                     	;# 
  2255  0314                     	;# 
  2256  0315                     	;# 
  2257  0315                     	;# 
  2258  0316                     	;# 
  2259  0317                     	;# 
  2260  0318                     	;# 
  2261  038C                     	;# 
  2262  038E                     	;# 
  2263  0391                     	;# 
  2264  0392                     	;# 
  2265  0393                     	;# 
  2266  0397                     	;# 
  2267  0398                     	;# 
  2268  0399                     	;# 
  2269  039A                     	;# 
  2270  039C                     	;# 
  2271  039D                     	;# 
  2272  039E                     	;# 
  2273  039F                     	;# 
  2274  0411                     	;# 
  2275  0411                     	;# 
  2276  0412                     	;# 
  2277  0413                     	;# 
  2278  0414                     	;# 
  2279  0415                     	;# 
  2280  0416                     	;# 
  2281  0417                     	;# 
  2282  0418                     	;# 
  2283  0418                     	;# 
  2284  0419                     	;# 
  2285  041A                     	;# 
  2286  041B                     	;# 
  2287  041C                     	;# 
  2288  041D                     	;# 
  2289  041E                     	;# 
  2290  041F                     	;# 
  2291  0498                     	;# 
  2292  0498                     	;# 
  2293  0499                     	;# 
  2294  049A                     	;# 
  2295  049B                     	;# 
  2296  049B                     	;# 
  2297  049C                     	;# 
  2298  049D                     	;# 
  2299  049E                     	;# 
  2300  049F                     	;# 
  2301  0617                     	;# 
  2302  0618                     	;# 
  2303  0619                     	;# 
  2304  0619                     	;# 
  2305  061A                     	;# 
  2306  061B                     	;# 
  2307  061C                     	;# 
  2308  061C                     	;# 
  2309  061F                     	;# 
  2310  0691                     	;# 
  2311  0692                     	;# 
  2312  0693                     	;# 
  2313  0694                     	;# 
  2314  0695                     	;# 
  2315  0696                     	;# 
  2316  0697                     	;# 
  2317  0698                     	;# 
  2318  0699                     	;# 
  2319  0711                     	;# 
  2320  0712                     	;# 
  2321  0713                     	;# 
  2322  0714                     	;# 
  2323  0715                     	;# 
  2324  0716                     	;# 
  2325  0717                     	;# 
  2326  0718                     	;# 
  2327  0719                     	;# 
  2328  0891                     	;# 
  2329  0891                     	;# 
  2330  0891                     	;# 
  2331  0891                     	;# 
  2332  0891                     	;# 
  2333  0891                     	;# 
  2334  0892                     	;# 
  2335  0892                     	;# 
  2336  0892                     	;# 
  2337  0893                     	;# 
  2338  0893                     	;# 
  2339  0893                     	;# 
  2340  0893                     	;# 
  2341  0893                     	;# 
  2342  0893                     	;# 
  2343  0894                     	;# 
  2344  0894                     	;# 
  2345  0894                     	;# 
  2346  0895                     	;# 
  2347  0895                     	;# 
  2348  0895                     	;# 
  2349  0896                     	;# 
  2350  0896                     	;# 
  2351  0896                     	;# 
  2352  089B                     	;# 
  2353  0911                     	;# 
  2354  0912                     	;# 
  2355  0913                     	;# 
  2356  0914                     	;# 
  2357  0915                     	;# 
  2358  0916                     	;# 
  2359  0918                     	;# 
  2360  0919                     	;# 
  2361  091A                     	;# 
  2362  091B                     	;# 
  2363  091C                     	;# 
  2364  091D                     	;# 
  2365  091E                     	;# 
  2366  091F                     	;# 
  2367  0E0F                     	;# 
  2368  0E10                     	;# 
  2369  0E11                     	;# 
  2370  0E12                     	;# 
  2371  0E13                     	;# 
  2372  0E14                     	;# 
  2373  0E15                     	;# 
  2374  0E16                     	;# 
  2375  0E17                     	;# 
  2376  0E18                     	;# 
  2377  0E19                     	;# 
  2378  0E1A                     	;# 
  2379  0E1B                     	;# 
  2380  0E1C                     	;# 
  2381  0E1D                     	;# 
  2382  0E1E                     	;# 
  2383  0E1F                     	;# 
  2384  0E20                     	;# 
  2385  0E21                     	;# 
  2386  0E22                     	;# 
  2387  0E24                     	;# 
  2388  0E25                     	;# 
  2389  0E28                     	;# 
  2390  0E29                     	;# 
  2391  0E2A                     	;# 
  2392  0E2B                     	;# 
  2393  0E2C                     	;# 
  2394  0E2D                     	;# 
  2395  0E2E                     	;# 
  2396  0E2F                     	;# 
  2397  0E90                     	;# 
  2398  0E91                     	;# 
  2399  0E92                     	;# 
  2400  0E94                     	;# 
  2401  0E95                     	;# 
  2402  0EA0                     	;# 
  2403  0EA1                     	;# 
  2404  0EA2                     	;# 
  2405  0EA3                     	;# 
  2406  0EA4                     	;# 
  2407  0EA5                     	;# 
  2408  0F0F                     	;# 
  2409  0F10                     	;# 
  2410  0F11                     	;# 
  2411  0F12                     	;# 
  2412  0F13                     	;# 
  2413  0F14                     	;# 
  2414  0F15                     	;# 
  2415  0F16                     	;# 
  2416  0F17                     	;# 
  2417  0F18                     	;# 
  2418  0F19                     	;# 
  2419  0F1A                     	;# 
  2420  0F1B                     	;# 
  2421  0F1C                     	;# 
  2422  0F1D                     	;# 
  2423  0F1E                     	;# 
  2424  0F1F                     	;# 
  2425  0F20                     	;# 
  2426  0F21                     	;# 
  2427  0F22                     	;# 
  2428  0F23                     	;# 
  2429  0F24                     	;# 
  2430  0F25                     	;# 
  2431  0F26                     	;# 
  2432  0F27                     	;# 
  2433  0F28                     	;# 
  2434  0F29                     	;# 
  2435  0F2A                     	;# 
  2436  0F2B                     	;# 
  2437  0F2C                     	;# 
  2438  0F2D                     	;# 
  2439  0F2E                     	;# 
  2440  0F2F                     	;# 
  2441  0F30                     	;# 
  2442  0F31                     	;# 
  2443  0F32                     	;# 
  2444  0F33                     	;# 
  2445  0F34                     	;# 
  2446  0F35                     	;# 
  2447  0F36                     	;# 
  2448  0F37                     	;# 
  2449  0FE4                     	;# 
  2450  0FE5                     	;# 
  2451  0FE6                     	;# 
  2452  0FE7                     	;# 
  2453  0FE8                     	;# 
  2454  0FE9                     	;# 
  2455  0FEA                     	;# 
  2456  0FEB                     	;# 
  2457  0FED                     	;# 
  2458  0FEE                     	;# 
  2459  0FEF                     	;# 
  2460  0000                     	;# 
  2461  0001                     	;# 
  2462  0002                     	;# 
  2463  0003                     	;# 
  2464  0004                     	;# 
  2465  0005                     	;# 
  2466  0006                     	;# 
  2467  0007                     	;# 
  2468  0008                     	;# 
  2469  0009                     	;# 
  2470  000A                     	;# 
  2471  000B                     	;# 
  2472  000C                     	;# 
  2473  000E                     	;# 
  2474  0010                     	;# 
  2475  0011                     	;# 
  2476  0012                     	;# 
  2477  0013                     	;# 
  2478  0014                     	;# 
  2479  0015                     	;# 
  2480  0015                     	;# 
  2481  0016                     	;# 
  2482  0016                     	;# 
  2483  0017                     	;# 
  2484  0018                     	;# 
  2485  0019                     	;# 
  2486  0019                     	;# 
  2487  001A                     	;# 
  2488  001B                     	;# 
  2489  001C                     	;# 
  2490  001D                     	;# 
  2491  001E                     	;# 
  2492  001F                     	;# 
  2493  008C                     	;# 
  2494  008E                     	;# 
  2495  0090                     	;# 
  2496  0091                     	;# 
  2497  0092                     	;# 
  2498  0093                     	;# 
  2499  0094                     	;# 
  2500  0097                     	;# 
  2501  009B                     	;# 
  2502  009B                     	;# 
  2503  009C                     	;# 
  2504  009D                     	;# 
  2505  009E                     	;# 
  2506  009F                     	;# 
  2507  010C                     	;# 
  2508  010E                     	;# 
  2509  0111                     	;# 
  2510  0112                     	;# 
  2511  0113                     	;# 
  2512  0114                     	;# 
  2513  0115                     	;# 
  2514  0116                     	;# 
  2515  0117                     	;# 
  2516  0118                     	;# 
  2517  0119                     	;# 
  2518  018C                     	;# 
  2519  018E                     	;# 
  2520  0197                     	;# 
  2521  0199                     	;# 
  2522  0199                     	;# 
  2523  0199                     	;# 
  2524  019A                     	;# 
  2525  019A                     	;# 
  2526  019A                     	;# 
  2527  019B                     	;# 
  2528  019B                     	;# 
  2529  019B                     	;# 
  2530  019B                     	;# 
  2531  019B                     	;# 
  2532  019C                     	;# 
  2533  019C                     	;# 
  2534  019C                     	;# 
  2535  019D                     	;# 
  2536  019D                     	;# 
  2537  019D                     	;# 
  2538  019E                     	;# 
  2539  019E                     	;# 
  2540  019E                     	;# 
  2541  019F                     	;# 
  2542  019F                     	;# 
  2543  019F                     	;# 
  2544  019F                     	;# 
  2545  019F                     	;# 
  2546  020C                     	;# 
  2547  020E                     	;# 
  2548  0211                     	;# 
  2549  0211                     	;# 
  2550  0212                     	;# 
  2551  0212                     	;# 
  2552  0213                     	;# 
  2553  0213                     	;# 
  2554  0214                     	;# 
  2555  0214                     	;# 
  2556  0215                     	;# 
  2557  0215                     	;# 
  2558  0215                     	;# 
  2559  0215                     	;# 
  2560  0216                     	;# 
  2561  0216                     	;# 
  2562  0217                     	;# 
  2563  0217                     	;# 
  2564  0219                     	;# 
  2565  021A                     	;# 
  2566  021B                     	;# 
  2567  021C                     	;# 
  2568  021D                     	;# 
  2569  021D                     	;# 
  2570  021E                     	;# 
  2571  021F                     	;# 
  2572  028C                     	;# 
  2573  028E                     	;# 
  2574  0291                     	;# 
  2575  0291                     	;# 
  2576  0292                     	;# 
  2577  0293                     	;# 
  2578  0294                     	;# 
  2579  0295                     	;# 
  2580  0295                     	;# 
  2581  0296                     	;# 
  2582  0297                     	;# 
  2583  0298                     	;# 
  2584  029F                     	;# 
  2585  030C                     	;# 
  2586  030E                     	;# 
  2587  0311                     	;# 
  2588  0311                     	;# 
  2589  0312                     	;# 
  2590  0313                     	;# 
  2591  0314                     	;# 
  2592  0315                     	;# 
  2593  0315                     	;# 
  2594  0316                     	;# 
  2595  0317                     	;# 
  2596  0318                     	;# 
  2597  038C                     	;# 
  2598  038E                     	;# 
  2599  0391                     	;# 
  2600  0392                     	;# 
  2601  0393                     	;# 
  2602  0397                     	;# 
  2603  0398                     	;# 
  2604  0399                     	;# 
  2605  039A                     	;# 
  2606  039C                     	;# 
  2607  039D                     	;# 
  2608  039E                     	;# 
  2609  039F                     	;# 
  2610  0411                     	;# 
  2611  0411                     	;# 
  2612  0412                     	;# 
  2613  0413                     	;# 
  2614  0414                     	;# 
  2615  0415                     	;# 
  2616  0416                     	;# 
  2617  0417                     	;# 
  2618  0418                     	;# 
  2619  0418                     	;# 
  2620  0419                     	;# 
  2621  041A                     	;# 
  2622  041B                     	;# 
  2623  041C                     	;# 
  2624  041D                     	;# 
  2625  041E                     	;# 
  2626  041F                     	;# 
  2627  0498                     	;# 
  2628  0498                     	;# 
  2629  0499                     	;# 
  2630  049A                     	;# 
  2631  049B                     	;# 
  2632  049B                     	;# 
  2633  049C                     	;# 
  2634  049D                     	;# 
  2635  049E                     	;# 
  2636  049F                     	;# 
  2637  0617                     	;# 
  2638  0618                     	;# 
  2639  0619                     	;# 
  2640  0619                     	;# 
  2641  061A                     	;# 
  2642  061B                     	;# 
  2643  061C                     	;# 
  2644  061C                     	;# 
  2645  061F                     	;# 
  2646  0691                     	;# 
  2647  0692                     	;# 
  2648  0693                     	;# 
  2649  0694                     	;# 
  2650  0695                     	;# 
  2651  0696                     	;# 
  2652  0697                     	;# 
  2653  0698                     	;# 
  2654  0699                     	;# 
  2655  0711                     	;# 
  2656  0712                     	;# 
  2657  0713                     	;# 
  2658  0714                     	;# 
  2659  0715                     	;# 
  2660  0716                     	;# 
  2661  0717                     	;# 
  2662  0718                     	;# 
  2663  0719                     	;# 
  2664  0891                     	;# 
  2665  0891                     	;# 
  2666  0891                     	;# 
  2667  0891                     	;# 
  2668  0891                     	;# 
  2669  0891                     	;# 
  2670  0892                     	;# 
  2671  0892                     	;# 
  2672  0892                     	;# 
  2673  0893                     	;# 
  2674  0893                     	;# 
  2675  0893                     	;# 
  2676  0893                     	;# 
  2677  0893                     	;# 
  2678  0893                     	;# 
  2679  0894                     	;# 
  2680  0894                     	;# 
  2681  0894                     	;# 
  2682  0895                     	;# 
  2683  0895                     	;# 
  2684  0895                     	;# 
  2685  0896                     	;# 
  2686  0896                     	;# 
  2687  0896                     	;# 
  2688  089B                     	;# 
  2689  0911                     	;# 
  2690  0912                     	;# 
  2691  0913                     	;# 
  2692  0914                     	;# 
  2693  0915                     	;# 
  2694  0916                     	;# 
  2695  0918                     	;# 
  2696  0919                     	;# 
  2697  091A                     	;# 
  2698  091B                     	;# 
  2699  091C                     	;# 
  2700  091D                     	;# 
  2701  091E                     	;# 
  2702  091F                     	;# 
  2703  0E0F                     	;# 
  2704  0E10                     	;# 
  2705  0E11                     	;# 
  2706  0E12                     	;# 
  2707  0E13                     	;# 
  2708  0E14                     	;# 
  2709  0E15                     	;# 
  2710  0E16                     	;# 
  2711  0E17                     	;# 
  2712  0E18                     	;# 
  2713  0E19                     	;# 
  2714  0E1A                     	;# 
  2715  0E1B                     	;# 
  2716  0E1C                     	;# 
  2717  0E1D                     	;# 
  2718  0E1E                     	;# 
  2719  0E1F                     	;# 
  2720  0E20                     	;# 
  2721  0E21                     	;# 
  2722  0E22                     	;# 
  2723  0E24                     	;# 
  2724  0E25                     	;# 
  2725  0E28                     	;# 
  2726  0E29                     	;# 
  2727  0E2A                     	;# 
  2728  0E2B                     	;# 
  2729  0E2C                     	;# 
  2730  0E2D                     	;# 
  2731  0E2E                     	;# 
  2732  0E2F                     	;# 
  2733  0E90                     	;# 
  2734  0E91                     	;# 
  2735  0E92                     	;# 
  2736  0E94                     	;# 
  2737  0E95                     	;# 
  2738  0EA0                     	;# 
  2739  0EA1                     	;# 
  2740  0EA2                     	;# 
  2741  0EA3                     	;# 
  2742  0EA4                     	;# 
  2743  0EA5                     	;# 
  2744  0F0F                     	;# 
  2745  0F10                     	;# 
  2746  0F11                     	;# 
  2747  0F12                     	;# 
  2748  0F13                     	;# 
  2749  0F14                     	;# 
  2750  0F15                     	;# 
  2751  0F16                     	;# 
  2752  0F17                     	;# 
  2753  0F18                     	;# 
  2754  0F19                     	;# 
  2755  0F1A                     	;# 
  2756  0F1B                     	;# 
  2757  0F1C                     	;# 
  2758  0F1D                     	;# 
  2759  0F1E                     	;# 
  2760  0F1F                     	;# 
  2761  0F20                     	;# 
  2762  0F21                     	;# 
  2763  0F22                     	;# 
  2764  0F23                     	;# 
  2765  0F24                     	;# 
  2766  0F25                     	;# 
  2767  0F26                     	;# 
  2768  0F27                     	;# 
  2769  0F28                     	;# 
  2770  0F29                     	;# 
  2771  0F2A                     	;# 
  2772  0F2B                     	;# 
  2773  0F2C                     	;# 
  2774  0F2D                     	;# 
  2775  0F2E                     	;# 
  2776  0F2F                     	;# 
  2777  0F30                     	;# 
  2778  0F31                     	;# 
  2779  0F32                     	;# 
  2780  0F33                     	;# 
  2781  0F34                     	;# 
  2782  0F35                     	;# 
  2783  0F36                     	;# 
  2784  0F37                     	;# 
  2785  0FE4                     	;# 
  2786  0FE5                     	;# 
  2787  0FE6                     	;# 
  2788  0FE7                     	;# 
  2789  0FE8                     	;# 
  2790  0FE9                     	;# 
  2791  0FEA                     	;# 
  2792  0FEB                     	;# 
  2793  0FED                     	;# 
  2794  0FEE                     	;# 
  2795  0FEF                     	;# 
  2796  0000                     	;# 
  2797  0001                     	;# 
  2798  0002                     	;# 
  2799  0003                     	;# 
  2800  0004                     	;# 
  2801  0005                     	;# 
  2802  0006                     	;# 
  2803  0007                     	;# 
  2804  0008                     	;# 
  2805  0009                     	;# 
  2806  000A                     	;# 
  2807  000B                     	;# 
  2808  000C                     	;# 
  2809  000E                     	;# 
  2810  0010                     	;# 
  2811  0011                     	;# 
  2812  0012                     	;# 
  2813  0013                     	;# 
  2814  0014                     	;# 
  2815  0015                     	;# 
  2816  0015                     	;# 
  2817  0016                     	;# 
  2818  0016                     	;# 
  2819  0017                     	;# 
  2820  0018                     	;# 
  2821  0019                     	;# 
  2822  0019                     	;# 
  2823  001A                     	;# 
  2824  001B                     	;# 
  2825  001C                     	;# 
  2826  001D                     	;# 
  2827  001E                     	;# 
  2828  001F                     	;# 
  2829  008C                     	;# 
  2830  008E                     	;# 
  2831  0090                     	;# 
  2832  0091                     	;# 
  2833  0092                     	;# 
  2834  0093                     	;# 
  2835  0094                     	;# 
  2836  0097                     	;# 
  2837  009B                     	;# 
  2838  009B                     	;# 
  2839  009C                     	;# 
  2840  009D                     	;# 
  2841  009E                     	;# 
  2842  009F                     	;# 
  2843  010C                     	;# 
  2844  010E                     	;# 
  2845  0111                     	;# 
  2846  0112                     	;# 
  2847  0113                     	;# 
  2848  0114                     	;# 
  2849  0115                     	;# 
  2850  0116                     	;# 
  2851  0117                     	;# 
  2852  0118                     	;# 
  2853  0119                     	;# 
  2854  018C                     	;# 
  2855  018E                     	;# 
  2856  0197                     	;# 
  2857  0199                     	;# 
  2858  0199                     	;# 
  2859  0199                     	;# 
  2860  019A                     	;# 
  2861  019A                     	;# 
  2862  019A                     	;# 
  2863  019B                     	;# 
  2864  019B                     	;# 
  2865  019B                     	;# 
  2866  019B                     	;# 
  2867  019B                     	;# 
  2868  019C                     	;# 
  2869  019C                     	;# 
  2870  019C                     	;# 
  2871  019D                     	;# 
  2872  019D                     	;# 
  2873  019D                     	;# 
  2874  019E                     	;# 
  2875  019E                     	;# 
  2876  019E                     	;# 
  2877  019F                     	;# 
  2878  019F                     	;# 
  2879  019F                     	;# 
  2880  019F                     	;# 
  2881  019F                     	;# 
  2882  020C                     	;# 
  2883  020E                     	;# 
  2884  0211                     	;# 
  2885  0211                     	;# 
  2886  0212                     	;# 
  2887  0212                     	;# 
  2888  0213                     	;# 
  2889  0213                     	;# 
  2890  0214                     	;# 
  2891  0214                     	;# 
  2892  0215                     	;# 
  2893  0215                     	;# 
  2894  0215                     	;# 
  2895  0215                     	;# 
  2896  0216                     	;# 
  2897  0216                     	;# 
  2898  0217                     	;# 
  2899  0217                     	;# 
  2900  0219                     	;# 
  2901  021A                     	;# 
  2902  021B                     	;# 
  2903  021C                     	;# 
  2904  021D                     	;# 
  2905  021D                     	;# 
  2906  021E                     	;# 
  2907  021F                     	;# 
  2908  028C                     	;# 
  2909  028E                     	;# 
  2910  0291                     	;# 
  2911  0291                     	;# 
  2912  0292                     	;# 
  2913  0293                     	;# 
  2914  0294                     	;# 
  2915  0295                     	;# 
  2916  0295                     	;# 
  2917  0296                     	;# 
  2918  0297                     	;# 
  2919  0298                     	;# 
  2920  029F                     	;# 
  2921  030C                     	;# 
  2922  030E                     	;# 
  2923  0311                     	;# 
  2924  0311                     	;# 
  2925  0312                     	;# 
  2926  0313                     	;# 
  2927  0314                     	;# 
  2928  0315                     	;# 
  2929  0315                     	;# 
  2930  0316                     	;# 
  2931  0317                     	;# 
  2932  0318                     	;# 
  2933  038C                     	;# 
  2934  038E                     	;# 
  2935  0391                     	;# 
  2936  0392                     	;# 
  2937  0393                     	;# 
  2938  0397                     	;# 
  2939  0398                     	;# 
  2940  0399                     	;# 
  2941  039A                     	;# 
  2942  039C                     	;# 
  2943  039D                     	;# 
  2944  039E                     	;# 
  2945  039F                     	;# 
  2946  0411                     	;# 
  2947  0411                     	;# 
  2948  0412                     	;# 
  2949  0413                     	;# 
  2950  0414                     	;# 
  2951  0415                     	;# 
  2952  0416                     	;# 
  2953  0417                     	;# 
  2954  0418                     	;# 
  2955  0418                     	;# 
  2956  0419                     	;# 
  2957  041A                     	;# 
  2958  041B                     	;# 
  2959  041C                     	;# 
  2960  041D                     	;# 
  2961  041E                     	;# 
  2962  041F                     	;# 
  2963  0498                     	;# 
  2964  0498                     	;# 
  2965  0499                     	;# 
  2966  049A                     	;# 
  2967  049B                     	;# 
  2968  049B                     	;# 
  2969  049C                     	;# 
  2970  049D                     	;# 
  2971  049E                     	;# 
  2972  049F                     	;# 
  2973  0617                     	;# 
  2974  0618                     	;# 
  2975  0619                     	;# 
  2976  0619                     	;# 
  2977  061A                     	;# 
  2978  061B                     	;# 
  2979  061C                     	;# 
  2980  061C                     	;# 
  2981  061F                     	;# 
  2982  0691                     	;# 
  2983  0692                     	;# 
  2984  0693                     	;# 
  2985  0694                     	;# 
  2986  0695                     	;# 
  2987  0696                     	;# 
  2988  0697                     	;# 
  2989  0698                     	;# 
  2990  0699                     	;# 
  2991  0711                     	;# 
  2992  0712                     	;# 
  2993  0713                     	;# 
  2994  0714                     	;# 
  2995  0715                     	;# 
  2996  0716                     	;# 
  2997  0717                     	;# 
  2998  0718                     	;# 
  2999  0719                     	;# 
  3000  0891                     	;# 
  3001  0891                     	;# 
  3002  0891                     	;# 
  3003  0891                     	;# 
  3004  0891                     	;# 
  3005  0891                     	;# 
  3006  0892                     	;# 
  3007  0892                     	;# 
  3008  0892                     	;# 
  3009  0893                     	;# 
  3010  0893                     	;# 
  3011  0893                     	;# 
  3012  0893                     	;# 
  3013  0893                     	;# 
  3014  0893                     	;# 
  3015  0894                     	;# 
  3016  0894                     	;# 
  3017  0894                     	;# 
  3018  0895                     	;# 
  3019  0895                     	;# 
  3020  0895                     	;# 
  3021  0896                     	;# 
  3022  0896                     	;# 
  3023  0896                     	;# 
  3024  089B                     	;# 
  3025  0911                     	;# 
  3026  0912                     	;# 
  3027  0913                     	;# 
  3028  0914                     	;# 
  3029  0915                     	;# 
  3030  0916                     	;# 
  3031  0918                     	;# 
  3032  0919                     	;# 
  3033  091A                     	;# 
  3034  091B                     	;# 
  3035  091C                     	;# 
  3036  091D                     	;# 
  3037  091E                     	;# 
  3038  091F                     	;# 
  3039  0E0F                     	;# 
  3040  0E10                     	;# 
  3041  0E11                     	;# 
  3042  0E12                     	;# 
  3043  0E13                     	;# 
  3044  0E14                     	;# 
  3045  0E15                     	;# 
  3046  0E16                     	;# 
  3047  0E17                     	;# 
  3048  0E18                     	;# 
  3049  0E19                     	;# 
  3050  0E1A                     	;# 
  3051  0E1B                     	;# 
  3052  0E1C                     	;# 
  3053  0E1D                     	;# 
  3054  0E1E                     	;# 
  3055  0E1F                     	;# 
  3056  0E20                     	;# 
  3057  0E21                     	;# 
  3058  0E22                     	;# 
  3059  0E24                     	;# 
  3060  0E25                     	;# 
  3061  0E28                     	;# 
  3062  0E29                     	;# 
  3063  0E2A                     	;# 
  3064  0E2B                     	;# 
  3065  0E2C                     	;# 
  3066  0E2D                     	;# 
  3067  0E2E                     	;# 
  3068  0E2F                     	;# 
  3069  0E90                     	;# 
  3070  0E91                     	;# 
  3071  0E92                     	;# 
  3072  0E94                     	;# 
  3073  0E95                     	;# 
  3074  0EA0                     	;# 
  3075  0EA1                     	;# 
  3076  0EA2                     	;# 
  3077  0EA3                     	;# 
  3078  0EA4                     	;# 
  3079  0EA5                     	;# 
  3080  0F0F                     	;# 
  3081  0F10                     	;# 
  3082  0F11                     	;# 
  3083  0F12                     	;# 
  3084  0F13                     	;# 
  3085  0F14                     	;# 
  3086  0F15                     	;# 
  3087  0F16                     	;# 
  3088  0F17                     	;# 
  3089  0F18                     	;# 
  3090  0F19                     	;# 
  3091  0F1A                     	;# 
  3092  0F1B                     	;# 
  3093  0F1C                     	;# 
  3094  0F1D                     	;# 
  3095  0F1E                     	;# 
  3096  0F1F                     	;# 
  3097  0F20                     	;# 
  3098  0F21                     	;# 
  3099  0F22                     	;# 
  3100  0F23                     	;# 
  3101  0F24                     	;# 
  3102  0F25                     	;# 
  3103  0F26                     	;# 
  3104  0F27                     	;# 
  3105  0F28                     	;# 
  3106  0F29                     	;# 
  3107  0F2A                     	;# 
  3108  0F2B                     	;# 
  3109  0F2C                     	;# 
  3110  0F2D                     	;# 
  3111  0F2E                     	;# 
  3112  0F2F                     	;# 
  3113  0F30                     	;# 
  3114  0F31                     	;# 
  3115  0F32                     	;# 
  3116  0F33                     	;# 
  3117  0F34                     	;# 
  3118  0F35                     	;# 
  3119  0F36                     	;# 
  3120  0F37                     	;# 
  3121  0FE4                     	;# 
  3122  0FE5                     	;# 
  3123  0FE6                     	;# 
  3124  0FE7                     	;# 
  3125  0FE8                     	;# 
  3126  0FE9                     	;# 
  3127  0FEA                     	;# 
  3128  0FEB                     	;# 
  3129  0FED                     	;# 
  3130  0FEE                     	;# 
  3131  0FEF                     	;# 
  3132  0000                     	;# 
  3133  0001                     	;# 
  3134  0002                     	;# 
  3135  0003                     	;# 
  3136  0004                     	;# 
  3137  0005                     	;# 
  3138  0006                     	;# 
  3139  0007                     	;# 
  3140  0008                     	;# 
  3141  0009                     	;# 
  3142  000A                     	;# 
  3143  000B                     	;# 
  3144  000C                     	;# 
  3145  000E                     	;# 
  3146  0010                     	;# 
  3147  0011                     	;# 
  3148  0012                     	;# 
  3149  0013                     	;# 
  3150  0014                     	;# 
  3151  0015                     	;# 
  3152  0015                     	;# 
  3153  0016                     	;# 
  3154  0016                     	;# 
  3155  0017                     	;# 
  3156  0018                     	;# 
  3157  0019                     	;# 
  3158  0019                     	;# 
  3159  001A                     	;# 
  3160  001B                     	;# 
  3161  001C                     	;# 
  3162  001D                     	;# 
  3163  001E                     	;# 
  3164  001F                     	;# 
  3165  008C                     	;# 
  3166  008E                     	;# 
  3167  0090                     	;# 
  3168  0091                     	;# 
  3169  0092                     	;# 
  3170  0093                     	;# 
  3171  0094                     	;# 
  3172  0097                     	;# 
  3173  009B                     	;# 
  3174  009B                     	;# 
  3175  009C                     	;# 
  3176  009D                     	;# 
  3177  009E                     	;# 
  3178  009F                     	;# 
  3179  010C                     	;# 
  3180  010E                     	;# 
  3181  0111                     	;# 
  3182  0112                     	;# 
  3183  0113                     	;# 
  3184  0114                     	;# 
  3185  0115                     	;# 
  3186  0116                     	;# 
  3187  0117                     	;# 
  3188  0118                     	;# 
  3189  0119                     	;# 
  3190  018C                     	;# 
  3191  018E                     	;# 
  3192  0197                     	;# 
  3193  0199                     	;# 
  3194  0199                     	;# 
  3195  0199                     	;# 
  3196  019A                     	;# 
  3197  019A                     	;# 
  3198  019A                     	;# 
  3199  019B                     	;# 
  3200  019B                     	;# 
  3201  019B                     	;# 
  3202  019B                     	;# 
  3203  019B                     	;# 
  3204  019C                     	;# 
  3205  019C                     	;# 
  3206  019C                     	;# 
  3207  019D                     	;# 
  3208  019D                     	;# 
  3209  019D                     	;# 
  3210  019E                     	;# 
  3211  019E                     	;# 
  3212  019E                     	;# 
  3213  019F                     	;# 
  3214  019F                     	;# 
  3215  019F                     	;# 
  3216  019F                     	;# 
  3217  019F                     	;# 
  3218  020C                     	;# 
  3219  020E                     	;# 
  3220  0211                     	;# 
  3221  0211                     	;# 
  3222  0212                     	;# 
  3223  0212                     	;# 
  3224  0213                     	;# 
  3225  0213                     	;# 
  3226  0214                     	;# 
  3227  0214                     	;# 
  3228  0215                     	;# 
  3229  0215                     	;# 
  3230  0215                     	;# 
  3231  0215                     	;# 
  3232  0216                     	;# 
  3233  0216                     	;# 
  3234  0217                     	;# 
  3235  0217                     	;# 
  3236  0219                     	;# 
  3237  021A                     	;# 
  3238  021B                     	;# 
  3239  021C                     	;# 
  3240  021D                     	;# 
  3241  021D                     	;# 
  3242  021E                     	;# 
  3243  021F                     	;# 
  3244  028C                     	;# 
  3245  028E                     	;# 
  3246  0291                     	;# 
  3247  0291                     	;# 
  3248  0292                     	;# 
  3249  0293                     	;# 
  3250  0294                     	;# 
  3251  0295                     	;# 
  3252  0295                     	;# 
  3253  0296                     	;# 
  3254  0297                     	;# 
  3255  0298                     	;# 
  3256  029F                     	;# 
  3257  030C                     	;# 
  3258  030E                     	;# 
  3259  0311                     	;# 
  3260  0311                     	;# 
  3261  0312                     	;# 
  3262  0313                     	;# 
  3263  0314                     	;# 
  3264  0315                     	;# 
  3265  0315                     	;# 
  3266  0316                     	;# 
  3267  0317                     	;# 
  3268  0318                     	;# 
  3269  038C                     	;# 
  3270  038E                     	;# 
  3271  0391                     	;# 
  3272  0392                     	;# 
  3273  0393                     	;# 
  3274  0397                     	;# 
  3275  0398                     	;# 
  3276  0399                     	;# 
  3277  039A                     	;# 
  3278  039C                     	;# 
  3279  039D                     	;# 
  3280  039E                     	;# 
  3281  039F                     	;# 
  3282  0411                     	;# 
  3283  0411                     	;# 
  3284  0412                     	;# 
  3285  0413                     	;# 
  3286  0414                     	;# 
  3287  0415                     	;# 
  3288  0416                     	;# 
  3289  0417                     	;# 
  3290  0418                     	;# 
  3291  0418                     	;# 
  3292  0419                     	;# 
  3293  041A                     	;# 
  3294  041B                     	;# 
  3295  041C                     	;# 
  3296  041D                     	;# 
  3297  041E                     	;# 
  3298  041F                     	;# 
  3299  0498                     	;# 
  3300  0498                     	;# 
  3301  0499                     	;# 
  3302  049A                     	;# 
  3303  049B                     	;# 
  3304  049B                     	;# 
  3305  049C                     	;# 
  3306  049D                     	;# 
  3307  049E                     	;# 
  3308  049F                     	;# 
  3309  0617                     	;# 
  3310  0618                     	;# 
  3311  0619                     	;# 
  3312  0619                     	;# 
  3313  061A                     	;# 
  3314  061B                     	;# 
  3315  061C                     	;# 
  3316  061C                     	;# 
  3317  061F                     	;# 
  3318  0691                     	;# 
  3319  0692                     	;# 
  3320  0693                     	;# 
  3321  0694                     	;# 
  3322  0695                     	;# 
  3323  0696                     	;# 
  3324  0697                     	;# 
  3325  0698                     	;# 
  3326  0699                     	;# 
  3327  0711                     	;# 
  3328  0712                     	;# 
  3329  0713                     	;# 
  3330  0714                     	;# 
  3331  0715                     	;# 
  3332  0716                     	;# 
  3333  0717                     	;# 
  3334  0718                     	;# 
  3335  0719                     	;# 
  3336  0891                     	;# 
  3337  0891                     	;# 
  3338  0891                     	;# 
  3339  0891                     	;# 
  3340  0891                     	;# 
  3341  0891                     	;# 
  3342  0892                     	;# 
  3343  0892                     	;# 
  3344  0892                     	;# 
  3345  0893                     	;# 
  3346  0893                     	;# 
  3347  0893                     	;# 
  3348  0893                     	;# 
  3349  0893                     	;# 
  3350  0893                     	;# 
  3351  0894                     	;# 
  3352  0894                     	;# 
  3353  0894                     	;# 
  3354  0895                     	;# 
  3355  0895                     	;# 
  3356  0895                     	;# 
  3357  0896                     	;# 
  3358  0896                     	;# 
  3359  0896                     	;# 
  3360  089B                     	;# 
  3361  0911                     	;# 
  3362  0912                     	;# 
  3363  0913                     	;# 
  3364  0914                     	;# 
  3365  0915                     	;# 
  3366  0916                     	;# 
  3367  0918                     	;# 
  3368  0919                     	;# 
  3369  091A                     	;# 
  3370  091B                     	;# 
  3371  091C                     	;# 
  3372  091D                     	;# 
  3373  091E                     	;# 
  3374  091F                     	;# 
  3375  0E0F                     	;# 
  3376  0E10                     	;# 
  3377  0E11                     	;# 
  3378  0E12                     	;# 
  3379  0E13                     	;# 
  3380  0E14                     	;# 
  3381  0E15                     	;# 
  3382  0E16                     	;# 
  3383  0E17                     	;# 
  3384  0E18                     	;# 
  3385  0E19                     	;# 
  3386  0E1A                     	;# 
  3387  0E1B                     	;# 
  3388  0E1C                     	;# 
  3389  0E1D                     	;# 
  3390  0E1E                     	;# 
  3391  0E1F                     	;# 
  3392  0E20                     	;# 
  3393  0E21                     	;# 
  3394  0E22                     	;# 
  3395  0E24                     	;# 
  3396  0E25                     	;# 
  3397  0E28                     	;# 
  3398  0E29                     	;# 
  3399  0E2A                     	;# 
  3400  0E2B                     	;# 
  3401  0E2C                     	;# 
  3402  0E2D                     	;# 
  3403  0E2E                     	;# 
  3404  0E2F                     	;# 
  3405  0E90                     	;# 
  3406  0E91                     	;# 
  3407  0E92                     	;# 
  3408  0E94                     	;# 
  3409  0E95                     	;# 
  3410  0EA0                     	;# 
  3411  0EA1                     	;# 
  3412  0EA2                     	;# 
  3413  0EA3                     	;# 
  3414  0EA4                     	;# 
  3415  0EA5                     	;# 
  3416  0F0F                     	;# 
  3417  0F10                     	;# 
  3418  0F11                     	;# 
  3419  0F12                     	;# 
  3420  0F13                     	;# 
  3421  0F14                     	;# 
  3422  0F15                     	;# 
  3423  0F16                     	;# 
  3424  0F17                     	;# 
  3425  0F18                     	;# 
  3426  0F19                     	;# 
  3427  0F1A                     	;# 
  3428  0F1B                     	;# 
  3429  0F1C                     	;# 
  3430  0F1D                     	;# 
  3431  0F1E                     	;# 
  3432  0F1F                     	;# 
  3433  0F20                     	;# 
  3434  0F21                     	;# 
  3435  0F22                     	;# 
  3436  0F23                     	;# 
  3437  0F24                     	;# 
  3438  0F25                     	;# 
  3439  0F26                     	;# 
  3440  0F27                     	;# 
  3441  0F28                     	;# 
  3442  0F29                     	;# 
  3443  0F2A                     	;# 
  3444  0F2B                     	;# 
  3445  0F2C                     	;# 
  3446  0F2D                     	;# 
  3447  0F2E                     	;# 
  3448  0F2F                     	;# 
  3449  0F30                     	;# 
  3450  0F31                     	;# 
  3451  0F32                     	;# 
  3452  0F33                     	;# 
  3453  0F34                     	;# 
  3454  0F35                     	;# 
  3455  0F36                     	;# 
  3456  0F37                     	;# 
  3457  0FE4                     	;# 
  3458  0FE5                     	;# 
  3459  0FE6                     	;# 
  3460  0FE7                     	;# 
  3461  0FE8                     	;# 
  3462  0FE9                     	;# 
  3463  0FEA                     	;# 
  3464  0FEB                     	;# 
  3465  0FED                     	;# 
  3466  0FEE                     	;# 
  3467  0FEF                     	;# 
  3468  0000                     	;# 
  3469  0001                     	;# 
  3470  0002                     	;# 
  3471  0003                     	;# 
  3472  0004                     	;# 
  3473  0005                     	;# 
  3474  0006                     	;# 
  3475  0007                     	;# 
  3476  0008                     	;# 
  3477  0009                     	;# 
  3478  000A                     	;# 
  3479  000B                     	;# 
  3480  000C                     	;# 
  3481  000E                     	;# 
  3482  0010                     	;# 
  3483  0011                     	;# 
  3484  0012                     	;# 
  3485  0013                     	;# 
  3486  0014                     	;# 
  3487  0015                     	;# 
  3488  0015                     	;# 
  3489  0016                     	;# 
  3490  0016                     	;# 
  3491  0017                     	;# 
  3492  0018                     	;# 
  3493  0019                     	;# 
  3494  0019                     	;# 
  3495  001A                     	;# 
  3496  001B                     	;# 
  3497  001C                     	;# 
  3498  001D                     	;# 
  3499  001E                     	;# 
  3500  001F                     	;# 
  3501  008C                     	;# 
  3502  008E                     	;# 
  3503  0090                     	;# 
  3504  0091                     	;# 
  3505  0092                     	;# 
  3506  0093                     	;# 
  3507  0094                     	;# 
  3508  0097                     	;# 
  3509  009B                     	;# 
  3510  009B                     	;# 
  3511  009C                     	;# 
  3512  009D                     	;# 
  3513  009E                     	;# 
  3514  009F                     	;# 
  3515  010C                     	;# 
  3516  010E                     	;# 
  3517  0111                     	;# 
  3518  0112                     	;# 
  3519  0113                     	;# 
  3520  0114                     	;# 
  3521  0115                     	;# 
  3522  0116                     	;# 
  3523  0117                     	;# 
  3524  0118                     	;# 
  3525  0119                     	;# 
  3526  018C                     	;# 
  3527  018E                     	;# 
  3528  0197                     	;# 
  3529  0199                     	;# 
  3530  0199                     	;# 
  3531  0199                     	;# 
  3532  019A                     	;# 
  3533  019A                     	;# 
  3534  019A                     	;# 
  3535  019B                     	;# 
  3536  019B                     	;# 
  3537  019B                     	;# 
  3538  019B                     	;# 
  3539  019B                     	;# 
  3540  019C                     	;# 
  3541  019C                     	;# 
  3542  019C                     	;# 
  3543  019D                     	;# 
  3544  019D                     	;# 
  3545  019D                     	;# 
  3546  019E                     	;# 
  3547  019E                     	;# 
  3548  019E                     	;# 
  3549  019F                     	;# 
  3550  019F                     	;# 
  3551  019F                     	;# 
  3552  019F                     	;# 
  3553  019F                     	;# 
  3554  020C                     	;# 
  3555  020E                     	;# 
  3556  0211                     	;# 
  3557  0211                     	;# 
  3558  0212                     	;# 
  3559  0212                     	;# 
  3560  0213                     	;# 
  3561  0213                     	;# 
  3562  0214                     	;# 
  3563  0214                     	;# 
  3564  0215                     	;# 
  3565  0215                     	;# 
  3566  0215                     	;# 
  3567  0215                     	;# 
  3568  0216                     	;# 
  3569  0216                     	;# 
  3570  0217                     	;# 
  3571  0217                     	;# 
  3572  0219                     	;# 
  3573  021A                     	;# 
  3574  021B                     	;# 
  3575  021C                     	;# 
  3576  021D                     	;# 
  3577  021D                     	;# 
  3578  021E                     	;# 
  3579  021F                     	;# 
  3580  028C                     	;# 
  3581  028E                     	;# 
  3582  0291                     	;# 
  3583  0291                     	;# 
  3584  0292                     	;# 
  3585  0293                     	;# 
  3586  0294                     	;# 
  3587  0295                     	;# 
  3588  0295                     	;# 
  3589  0296                     	;# 
  3590  0297                     	;# 
  3591  0298                     	;# 
  3592  029F                     	;# 
  3593  030C                     	;# 
  3594  030E                     	;# 
  3595  0311                     	;# 
  3596  0311                     	;# 
  3597  0312                     	;# 
  3598  0313                     	;# 
  3599  0314                     	;# 
  3600  0315                     	;# 
  3601  0315                     	;# 
  3602  0316                     	;# 
  3603  0317                     	;# 
  3604  0318                     	;# 
  3605  038C                     	;# 
  3606  038E                     	;# 
  3607  0391                     	;# 
  3608  0392                     	;# 
  3609  0393                     	;# 
  3610  0397                     	;# 
  3611  0398                     	;# 
  3612  0399                     	;# 
  3613  039A                     	;# 
  3614  039C                     	;# 
  3615  039D                     	;# 
  3616  039E                     	;# 
  3617  039F                     	;# 
  3618  0411                     	;# 
  3619  0411                     	;# 
  3620  0412                     	;# 
  3621  0413                     	;# 
  3622  0414                     	;# 
  3623  0415                     	;# 
  3624  0416                     	;# 
  3625  0417                     	;# 
  3626  0418                     	;# 
  3627  0418                     	;# 
  3628  0419                     	;# 
  3629  041A                     	;# 
  3630  041B                     	;# 
  3631  041C                     	;# 
  3632  041D                     	;# 
  3633  041E                     	;# 
  3634  041F                     	;# 
  3635  0498                     	;# 
  3636  0498                     	;# 
  3637  0499                     	;# 
  3638  049A                     	;# 
  3639  049B                     	;# 
  3640  049B                     	;# 
  3641  049C                     	;# 
  3642  049D                     	;# 
  3643  049E                     	;# 
  3644  049F                     	;# 
  3645  0617                     	;# 
  3646  0618                     	;# 
  3647  0619                     	;# 
  3648  0619                     	;# 
  3649  061A                     	;# 
  3650  061B                     	;# 
  3651  061C                     	;# 
  3652  061C                     	;# 
  3653  061F                     	;# 
  3654  0691                     	;# 
  3655  0692                     	;# 
  3656  0693                     	;# 
  3657  0694                     	;# 
  3658  0695                     	;# 
  3659  0696                     	;# 
  3660  0697                     	;# 
  3661  0698                     	;# 
  3662  0699                     	;# 
  3663  0711                     	;# 
  3664  0712                     	;# 
  3665  0713                     	;# 
  3666  0714                     	;# 
  3667  0715                     	;# 
  3668  0716                     	;# 
  3669  0717                     	;# 
  3670  0718                     	;# 
  3671  0719                     	;# 
  3672  0891                     	;# 
  3673  0891                     	;# 
  3674  0891                     	;# 
  3675  0891                     	;# 
  3676  0891                     	;# 
  3677  0891                     	;# 
  3678  0892                     	;# 
  3679  0892                     	;# 
  3680  0892                     	;# 
  3681  0893                     	;# 
  3682  0893                     	;# 
  3683  0893                     	;# 
  3684  0893                     	;# 
  3685  0893                     	;# 
  3686  0893                     	;# 
  3687  0894                     	;# 
  3688  0894                     	;# 
  3689  0894                     	;# 
  3690  0895                     	;# 
  3691  0895                     	;# 
  3692  0895                     	;# 
  3693  0896                     	;# 
  3694  0896                     	;# 
  3695  0896                     	;# 
  3696  089B                     	;# 
  3697  0911                     	;# 
  3698  0912                     	;# 
  3699  0913                     	;# 
  3700  0914                     	;# 
  3701  0915                     	;# 
  3702  0916                     	;# 
  3703  0918                     	;# 
  3704  0919                     	;# 
  3705  091A                     	;# 
  3706  091B                     	;# 
  3707  091C                     	;# 
  3708  091D                     	;# 
  3709  091E                     	;# 
  3710  091F                     	;# 
  3711  0E0F                     	;# 
  3712  0E10                     	;# 
  3713  0E11                     	;# 
  3714  0E12                     	;# 
  3715  0E13                     	;# 
  3716  0E14                     	;# 
  3717  0E15                     	;# 
  3718  0E16                     	;# 
  3719  0E17                     	;# 
  3720  0E18                     	;# 
  3721  0E19                     	;# 
  3722  0E1A                     	;# 
  3723  0E1B                     	;# 
  3724  0E1C                     	;# 
  3725  0E1D                     	;# 
  3726  0E1E                     	;# 
  3727  0E1F                     	;# 
  3728  0E20                     	;# 
  3729  0E21                     	;# 
  3730  0E22                     	;# 
  3731  0E24                     	;# 
  3732  0E25                     	;# 
  3733  0E28                     	;# 
  3734  0E29                     	;# 
  3735  0E2A                     	;# 
  3736  0E2B                     	;# 
  3737  0E2C                     	;# 
  3738  0E2D                     	;# 
  3739  0E2E                     	;# 
  3740  0E2F                     	;# 
  3741  0E90                     	;# 
  3742  0E91                     	;# 
  3743  0E92                     	;# 
  3744  0E94                     	;# 
  3745  0E95                     	;# 
  3746  0EA0                     	;# 
  3747  0EA1                     	;# 
  3748  0EA2                     	;# 
  3749  0EA3                     	;# 
  3750  0EA4                     	;# 
  3751  0EA5                     	;# 
  3752  0F0F                     	;# 
  3753  0F10                     	;# 
  3754  0F11                     	;# 
  3755  0F12                     	;# 
  3756  0F13                     	;# 
  3757  0F14                     	;# 
  3758  0F15                     	;# 
  3759  0F16                     	;# 
  3760  0F17                     	;# 
  3761  0F18                     	;# 
  3762  0F19                     	;# 
  3763  0F1A                     	;# 
  3764  0F1B                     	;# 
  3765  0F1C                     	;# 
  3766  0F1D                     	;# 
  3767  0F1E                     	;# 
  3768  0F1F                     	;# 
  3769  0F20                     	;# 
  3770  0F21                     	;# 
  3771  0F22                     	;# 
  3772  0F23                     	;# 
  3773  0F24                     	;# 
  3774  0F25                     	;# 
  3775  0F26                     	;# 
  3776  0F27                     	;# 
  3777  0F28                     	;# 
  3778  0F29                     	;# 
  3779  0F2A                     	;# 
  3780  0F2B                     	;# 
  3781  0F2C                     	;# 
  3782  0F2D                     	;# 
  3783  0F2E                     	;# 
  3784  0F2F                     	;# 
  3785  0F30                     	;# 
  3786  0F31                     	;# 
  3787  0F32                     	;# 
  3788  0F33                     	;# 
  3789  0F34                     	;# 
  3790  0F35                     	;# 
  3791  0F36                     	;# 
  3792  0F37                     	;# 
  3793  0FE4                     	;# 
  3794  0FE5                     	;# 
  3795  0FE6                     	;# 
  3796  0FE7                     	;# 
  3797  0FE8                     	;# 
  3798  0FE9                     	;# 
  3799  0FEA                     	;# 
  3800  0FEB                     	;# 
  3801  0FED                     	;# 
  3802  0FEE                     	;# 
  3803  0FEF                     	;# 
  3804  0000                     	;# 
  3805  0001                     	;# 
  3806  0002                     	;# 
  3807  0003                     	;# 
  3808  0004                     	;# 
  3809  0005                     	;# 
  3810  0006                     	;# 
  3811  0007                     	;# 
  3812  0008                     	;# 
  3813  0009                     	;# 
  3814  000A                     	;# 
  3815  000B                     	;# 
  3816  000C                     	;# 
  3817  000E                     	;# 
  3818  0010                     	;# 
  3819  0011                     	;# 
  3820  0012                     	;# 
  3821  0013                     	;# 
  3822  0014                     	;# 
  3823  0015                     	;# 
  3824  0015                     	;# 
  3825  0016                     	;# 
  3826  0016                     	;# 
  3827  0017                     	;# 
  3828  0018                     	;# 
  3829  0019                     	;# 
  3830  0019                     	;# 
  3831  001A                     	;# 
  3832  001B                     	;# 
  3833  001C                     	;# 
  3834  001D                     	;# 
  3835  001E                     	;# 
  3836  001F                     	;# 
  3837  008C                     	;# 
  3838  008E                     	;# 
  3839  0090                     	;# 
  3840  0091                     	;# 
  3841  0092                     	;# 
  3842  0093                     	;# 
  3843  0094                     	;# 
  3844  0097                     	;# 
  3845  009B                     	;# 
  3846  009B                     	;# 
  3847  009C                     	;# 
  3848  009D                     	;# 
  3849  009E                     	;# 
  3850  009F                     	;# 
  3851  010C                     	;# 
  3852  010E                     	;# 
  3853  0111                     	;# 
  3854  0112                     	;# 
  3855  0113                     	;# 
  3856  0114                     	;# 
  3857  0115                     	;# 
  3858  0116                     	;# 
  3859  0117                     	;# 
  3860  0118                     	;# 
  3861  0119                     	;# 
  3862  018C                     	;# 
  3863  018E                     	;# 
  3864  0197                     	;# 
  3865  0199                     	;# 
  3866  0199                     	;# 
  3867  0199                     	;# 
  3868  019A                     	;# 
  3869  019A                     	;# 
  3870  019A                     	;# 
  3871  019B                     	;# 
  3872  019B                     	;# 
  3873  019B                     	;# 
  3874  019B                     	;# 
  3875  019B                     	;# 
  3876  019C                     	;# 
  3877  019C                     	;# 
  3878  019C                     	;# 
  3879  019D                     	;# 
  3880  019D                     	;# 
  3881  019D                     	;# 
  3882  019E                     	;# 
  3883  019E                     	;# 
  3884  019E                     	;# 
  3885  019F                     	;# 
  3886  019F                     	;# 
  3887  019F                     	;# 
  3888  019F                     	;# 
  3889  019F                     	;# 
  3890  020C                     	;# 
  3891  020E                     	;# 
  3892  0211                     	;# 
  3893  0211                     	;# 
  3894  0212                     	;# 
  3895  0212                     	;# 
  3896  0213                     	;# 
  3897  0213                     	;# 
  3898  0214                     	;# 
  3899  0214                     	;# 
  3900  0215                     	;# 
  3901  0215                     	;# 
  3902  0215                     	;# 
  3903  0215                     	;# 
  3904  0216                     	;# 
  3905  0216                     	;# 
  3906  0217                     	;# 
  3907  0217                     	;# 
  3908  0219                     	;# 
  3909  021A                     	;# 
  3910  021B                     	;# 
  3911  021C                     	;# 
  3912  021D                     	;# 
  3913  021D                     	;# 
  3914  021E                     	;# 
  3915  021F                     	;# 
  3916  028C                     	;# 
  3917  028E                     	;# 
  3918  0291                     	;# 
  3919  0291                     	;# 
  3920  0292                     	;# 
  3921  0293                     	;# 
  3922  0294                     	;# 
  3923  0295                     	;# 
  3924  0295                     	;# 
  3925  0296                     	;# 
  3926  0297                     	;# 
  3927  0298                     	;# 
  3928  029F                     	;# 
  3929  030C                     	;# 
  3930  030E                     	;# 
  3931  0311                     	;# 
  3932  0311                     	;# 
  3933  0312                     	;# 
  3934  0313                     	;# 
  3935  0314                     	;# 
  3936  0315                     	;# 
  3937  0315                     	;# 
  3938  0316                     	;# 
  3939  0317                     	;# 
  3940  0318                     	;# 
  3941  038C                     	;# 
  3942  038E                     	;# 
  3943  0391                     	;# 
  3944  0392                     	;# 
  3945  0393                     	;# 
  3946  0397                     	;# 
  3947  0398                     	;# 
  3948  0399                     	;# 
  3949  039A                     	;# 
  3950  039C                     	;# 
  3951  039D                     	;# 
  3952  039E                     	;# 
  3953  039F                     	;# 
  3954  0411                     	;# 
  3955  0411                     	;# 
  3956  0412                     	;# 
  3957  0413                     	;# 
  3958  0414                     	;# 
  3959  0415                     	;# 
  3960  0416                     	;# 
  3961  0417                     	;# 
  3962  0418                     	;# 
  3963  0418                     	;# 
  3964  0419                     	;# 
  3965  041A                     	;# 
  3966  041B                     	;# 
  3967  041C                     	;# 
  3968  041D                     	;# 
  3969  041E                     	;# 
  3970  041F                     	;# 
  3971  0498                     	;# 
  3972  0498                     	;# 
  3973  0499                     	;# 
  3974  049A                     	;# 
  3975  049B                     	;# 
  3976  049B                     	;# 
  3977  049C                     	;# 
  3978  049D                     	;# 
  3979  049E                     	;# 
  3980  049F                     	;# 
  3981  0617                     	;# 
  3982  0618                     	;# 
  3983  0619                     	;# 
  3984  0619                     	;# 
  3985  061A                     	;# 
  3986  061B                     	;# 
  3987  061C                     	;# 
  3988  061C                     	;# 
  3989  061F                     	;# 
  3990  0691                     	;# 
  3991  0692                     	;# 
  3992  0693                     	;# 
  3993  0694                     	;# 
  3994  0695                     	;# 
  3995  0696                     	;# 
  3996  0697                     	;# 
  3997  0698                     	;# 
  3998  0699                     	;# 
  3999  0711                     	;# 
  4000  0712                     	;# 
  4001  0713                     	;# 
  4002  0714                     	;# 
  4003  0715                     	;# 
  4004  0716                     	;# 
  4005  0717                     	;# 
  4006  0718                     	;# 
  4007  0719                     	;# 
  4008  0891                     	;# 
  4009  0891                     	;# 
  4010  0891                     	;# 
  4011  0891                     	;# 
  4012  0891                     	;# 
  4013  0891                     	;# 
  4014  0892                     	;# 
  4015  0892                     	;# 
  4016  0892                     	;# 
  4017  0893                     	;# 
  4018  0893                     	;# 
  4019  0893                     	;# 
  4020  0893                     	;# 
  4021  0893                     	;# 
  4022  0893                     	;# 
  4023  0894                     	;# 
  4024  0894                     	;# 
  4025  0894                     	;# 
  4026  0895                     	;# 
  4027  0895                     	;# 
  4028  0895                     	;# 
  4029  0896                     	;# 
  4030  0896                     	;# 
  4031  0896                     	;# 
  4032  089B                     	;# 
  4033  0911                     	;# 
  4034  0912                     	;# 
  4035  0913                     	;# 
  4036  0914                     	;# 
  4037  0915                     	;# 
  4038  0916                     	;# 
  4039  0918                     	;# 
  4040  0919                     	;# 
  4041  091A                     	;# 
  4042  091B                     	;# 
  4043  091C                     	;# 
  4044  091D                     	;# 
  4045  091E                     	;# 
  4046  091F                     	;# 
  4047  0E0F                     	;# 
  4048  0E10                     	;# 
  4049  0E11                     	;# 
  4050  0E12                     	;# 
  4051  0E13                     	;# 
  4052  0E14                     	;# 
  4053  0E15                     	;# 
  4054  0E16                     	;# 
  4055  0E17                     	;# 
  4056  0E18                     	;# 
  4057  0E19                     	;# 
  4058  0E1A                     	;# 
  4059  0E1B                     	;# 
  4060  0E1C                     	;# 
  4061  0E1D                     	;# 
  4062  0E1E                     	;# 
  4063  0E1F                     	;# 
  4064  0E20                     	;# 
  4065  0E21                     	;# 
  4066  0E22                     	;# 
  4067  0E24                     	;# 
  4068  0E25                     	;# 
  4069  0E28                     	;# 
  4070  0E29                     	;# 
  4071  0E2A                     	;# 
  4072  0E2B                     	;# 
  4073  0E2C                     	;# 
  4074  0E2D                     	;# 
  4075  0E2E                     	;# 
  4076  0E2F                     	;# 
  4077  0E90                     	;# 
  4078  0E91                     	;# 
  4079  0E92                     	;# 
  4080  0E94                     	;# 
  4081  0E95                     	;# 
  4082  0EA0                     	;# 
  4083  0EA1                     	;# 
  4084  0EA2                     	;# 
  4085  0EA3                     	;# 
  4086  0EA4                     	;# 
  4087  0EA5                     	;# 
  4088  0F0F                     	;# 
  4089  0F10                     	;# 
  4090  0F11                     	;# 
  4091  0F12                     	;# 
  4092  0F13                     	;# 
  4093  0F14                     	;# 
  4094  0F15                     	;# 
  4095  0F16                     	;# 
  4096  0F17                     	;# 
  4097  0F18                     	;# 
  4098  0F19                     	;# 
  4099  0F1A                     	;# 
  4100  0F1B                     	;# 
  4101  0F1C                     	;# 
  4102  0F1D                     	;# 
  4103  0F1E                     	;# 
  4104  0F1F                     	;# 
  4105  0F20                     	;# 
  4106  0F21                     	;# 
  4107  0F22                     	;# 
  4108  0F23                     	;# 
  4109  0F24                     	;# 
  4110  0F25                     	;# 
  4111  0F26                     	;# 
  4112  0F27                     	;# 
  4113  0F28                     	;# 
  4114  0F29                     	;# 
  4115  0F2A                     	;# 
  4116  0F2B                     	;# 
  4117  0F2C                     	;# 
  4118  0F2D                     	;# 
  4119  0F2E                     	;# 
  4120  0F2F                     	;# 
  4121  0F30                     	;# 
  4122  0F31                     	;# 
  4123  0F32                     	;# 
  4124  0F33                     	;# 
  4125  0F34                     	;# 
  4126  0F35                     	;# 
  4127  0F36                     	;# 
  4128  0F37                     	;# 
  4129  0FE4                     	;# 
  4130  0FE5                     	;# 
  4131  0FE6                     	;# 
  4132  0FE7                     	;# 
  4133  0FE8                     	;# 
  4134  0FE9                     	;# 
  4135  0FEA                     	;# 
  4136  0FEB                     	;# 
  4137  0FED                     	;# 
  4138  0FEE                     	;# 
  4139  0FEF                     	;# 
  4140  0000                     	;# 
  4141  0001                     	;# 
  4142  0002                     	;# 
  4143  0003                     	;# 
  4144  0004                     	;# 
  4145  0005                     	;# 
  4146  0006                     	;# 
  4147  0007                     	;# 
  4148  0008                     	;# 
  4149  0009                     	;# 
  4150  000A                     	;# 
  4151  000B                     	;# 
  4152  000C                     	;# 
  4153  000E                     	;# 
  4154  0010                     	;# 
  4155  0011                     	;# 
  4156  0012                     	;# 
  4157  0013                     	;# 
  4158  0014                     	;# 
  4159  0015                     	;# 
  4160  0015                     	;# 
  4161  0016                     	;# 
  4162  0016                     	;# 
  4163  0017                     	;# 
  4164  0018                     	;# 
  4165  0019                     	;# 
  4166  0019                     	;# 
  4167  001A                     	;# 
  4168  001B                     	;# 
  4169  001C                     	;# 
  4170  001D                     	;# 
  4171  001E                     	;# 
  4172  001F                     	;# 
  4173  008C                     	;# 
  4174  008E                     	;# 
  4175  0090                     	;# 
  4176  0091                     	;# 
  4177  0092                     	;# 
  4178  0093                     	;# 
  4179  0094                     	;# 
  4180  0097                     	;# 
  4181  009B                     	;# 
  4182  009B                     	;# 
  4183  009C                     	;# 
  4184  009D                     	;# 
  4185  009E                     	;# 
  4186  009F                     	;# 
  4187  010C                     	;# 
  4188  010E                     	;# 
  4189  0111                     	;# 
  4190  0112                     	;# 
  4191  0113                     	;# 
  4192  0114                     	;# 
  4193  0115                     	;# 
  4194  0116                     	;# 
  4195  0117                     	;# 
  4196  0118                     	;# 
  4197  0119                     	;# 
  4198  018C                     	;# 
  4199  018E                     	;# 
  4200  0197                     	;# 
  4201  0199                     	;# 
  4202  0199                     	;# 
  4203  0199                     	;# 
  4204  019A                     	;# 
  4205  019A                     	;# 
  4206  019A                     	;# 
  4207  019B                     	;# 
  4208  019B                     	;# 
  4209  019B                     	;# 
  4210  019B                     	;# 
  4211  019B                     	;# 
  4212  019C                     	;# 
  4213  019C                     	;# 
  4214  019C                     	;# 
  4215  019D                     	;# 
  4216  019D                     	;# 
  4217  019D                     	;# 
  4218  019E                     	;# 
  4219  019E                     	;# 
  4220  019E                     	;# 
  4221  019F                     	;# 
  4222  019F                     	;# 
  4223  019F                     	;# 
  4224  019F                     	;# 
  4225  019F                     	;# 
  4226  020C                     	;# 
  4227  020E                     	;# 
  4228  0211                     	;# 
  4229  0211                     	;# 
  4230  0212                     	;# 
  4231  0212                     	;# 
  4232  0213                     	;# 
  4233  0213                     	;# 
  4234  0214                     	;# 
  4235  0214                     	;# 
  4236  0215                     	;# 
  4237  0215                     	;# 
  4238  0215                     	;# 
  4239  0215                     	;# 
  4240  0216                     	;# 
  4241  0216                     	;# 
  4242  0217                     	;# 
  4243  0217                     	;# 
  4244  0219                     	;# 
  4245  021A                     	;# 
  4246  021B                     	;# 
  4247  021C                     	;# 
  4248  021D                     	;# 
  4249  021D                     	;# 
  4250  021E                     	;# 
  4251  021F                     	;# 
  4252  028C                     	;# 
  4253  028E                     	;# 
  4254  0291                     	;# 
  4255  0291                     	;# 
  4256  0292                     	;# 
  4257  0293                     	;# 
  4258  0294                     	;# 
  4259  0295                     	;# 
  4260  0295                     	;# 
  4261  0296                     	;# 
  4262  0297                     	;# 
  4263  0298                     	;# 
  4264  029F                     	;# 
  4265  030C                     	;# 
  4266  030E                     	;# 
  4267  0311                     	;# 
  4268  0311                     	;# 
  4269  0312                     	;# 
  4270  0313                     	;# 
  4271  0314                     	;# 
  4272  0315                     	;# 
  4273  0315                     	;# 
  4274  0316                     	;# 
  4275  0317                     	;# 
  4276  0318                     	;# 
  4277  038C                     	;# 
  4278  038E                     	;# 
  4279  0391                     	;# 
  4280  0392                     	;# 
  4281  0393                     	;# 
  4282  0397                     	;# 
  4283  0398                     	;# 
  4284  0399                     	;# 
  4285  039A                     	;# 
  4286  039C                     	;# 
  4287  039D                     	;# 
  4288  039E                     	;# 
  4289  039F                     	;# 
  4290  0411                     	;# 
  4291  0411                     	;# 
  4292  0412                     	;# 
  4293  0413                     	;# 
  4294  0414                     	;# 
  4295  0415                     	;# 
  4296  0416                     	;# 
  4297  0417                     	;# 
  4298  0418                     	;# 
  4299  0418                     	;# 
  4300  0419                     	;# 
  4301  041A                     	;# 
  4302  041B                     	;# 
  4303  041C                     	;# 
  4304  041D                     	;# 
  4305  041E                     	;# 
  4306  041F                     	;# 
  4307  0498                     	;# 
  4308  0498                     	;# 
  4309  0499                     	;# 
  4310  049A                     	;# 
  4311  049B                     	;# 
  4312  049B                     	;# 
  4313  049C                     	;# 
  4314  049D                     	;# 
  4315  049E                     	;# 
  4316  049F                     	;# 
  4317  0617                     	;# 
  4318  0618                     	;# 
  4319  0619                     	;# 
  4320  0619                     	;# 
  4321  061A                     	;# 
  4322  061B                     	;# 
  4323  061C                     	;# 
  4324  061C                     	;# 
  4325  061F                     	;# 
  4326  0691                     	;# 
  4327  0692                     	;# 
  4328  0693                     	;# 
  4329  0694                     	;# 
  4330  0695                     	;# 
  4331  0696                     	;# 
  4332  0697                     	;# 
  4333  0698                     	;# 
  4334  0699                     	;# 
  4335  0711                     	;# 
  4336  0712                     	;# 
  4337  0713                     	;# 
  4338  0714                     	;# 
  4339  0715                     	;# 
  4340  0716                     	;# 
  4341  0717                     	;# 
  4342  0718                     	;# 
  4343  0719                     	;# 
  4344  0891                     	;# 
  4345  0891                     	;# 
  4346  0891                     	;# 
  4347  0891                     	;# 
  4348  0891                     	;# 
  4349  0891                     	;# 
  4350  0892                     	;# 
  4351  0892                     	;# 
  4352  0892                     	;# 
  4353  0893                     	;# 
  4354  0893                     	;# 
  4355  0893                     	;# 
  4356  0893                     	;# 
  4357  0893                     	;# 
  4358  0893                     	;# 
  4359  0894                     	;# 
  4360  0894                     	;# 
  4361  0894                     	;# 
  4362  0895                     	;# 
  4363  0895                     	;# 
  4364  0895                     	;# 
  4365  0896                     	;# 
  4366  0896                     	;# 
  4367  0896                     	;# 
  4368  089B                     	;# 
  4369  0911                     	;# 
  4370  0912                     	;# 
  4371  0913                     	;# 
  4372  0914                     	;# 
  4373  0915                     	;# 
  4374  0916                     	;# 
  4375  0918                     	;# 
  4376  0919                     	;# 
  4377  091A                     	;# 
  4378  091B                     	;# 
  4379  091C                     	;# 
  4380  091D                     	;# 
  4381  091E                     	;# 
  4382  091F                     	;# 
  4383  0E0F                     	;# 
  4384  0E10                     	;# 
  4385  0E11                     	;# 
  4386  0E12                     	;# 
  4387  0E13                     	;# 
  4388  0E14                     	;# 
  4389  0E15                     	;# 
  4390  0E16                     	;# 
  4391  0E17                     	;# 
  4392  0E18                     	;# 
  4393  0E19                     	;# 
  4394  0E1A                     	;# 
  4395  0E1B                     	;# 
  4396  0E1C                     	;# 
  4397  0E1D                     	;# 
  4398  0E1E                     	;# 
  4399  0E1F                     	;# 
  4400  0E20                     	;# 
  4401  0E21                     	;# 
  4402  0E22                     	;# 
  4403  0E24                     	;# 
  4404  0E25                     	;# 
  4405  0E28                     	;# 
  4406  0E29                     	;# 
  4407  0E2A                     	;# 
  4408  0E2B                     	;# 
  4409  0E2C                     	;# 
  4410  0E2D                     	;# 
  4411  0E2E                     	;# 
  4412  0E2F                     	;# 
  4413  0E90                     	;# 
  4414  0E91                     	;# 
  4415  0E92                     	;# 
  4416  0E94                     	;# 
  4417  0E95                     	;# 
  4418  0EA0                     	;# 
  4419  0EA1                     	;# 
  4420  0EA2                     	;# 
  4421  0EA3                     	;# 
  4422  0EA4                     	;# 
  4423  0EA5                     	;# 
  4424  0F0F                     	;# 
  4425  0F10                     	;# 
  4426  0F11                     	;# 
  4427  0F12                     	;# 
  4428  0F13                     	;# 
  4429  0F14                     	;# 
  4430  0F15                     	;# 
  4431  0F16                     	;# 
  4432  0F17                     	;# 
  4433  0F18                     	;# 
  4434  0F19                     	;# 
  4435  0F1A                     	;# 
  4436  0F1B                     	;# 
  4437  0F1C                     	;# 
  4438  0F1D                     	;# 
  4439  0F1E                     	;# 
  4440  0F1F                     	;# 
  4441  0F20                     	;# 
  4442  0F21                     	;# 
  4443  0F22                     	;# 
  4444  0F23                     	;# 
  4445  0F24                     	;# 
  4446  0F25                     	;# 
  4447  0F26                     	;# 
  4448  0F27                     	;# 
  4449  0F28                     	;# 
  4450  0F29                     	;# 
  4451  0F2A                     	;# 
  4452  0F2B                     	;# 
  4453  0F2C                     	;# 
  4454  0F2D                     	;# 
  4455  0F2E                     	;# 
  4456  0F2F                     	;# 
  4457  0F30                     	;# 
  4458  0F31                     	;# 
  4459  0F32                     	;# 
  4460  0F33                     	;# 
  4461  0F34                     	;# 
  4462  0F35                     	;# 
  4463  0F36                     	;# 
  4464  0F37                     	;# 
  4465  0FE4                     	;# 
  4466  0FE5                     	;# 
  4467  0FE6                     	;# 
  4468  0FE7                     	;# 
  4469  0FE8                     	;# 
  4470  0FE9                     	;# 
  4471  0FEA                     	;# 
  4472  0FEB                     	;# 
  4473  0FED                     	;# 
  4474  0FEE                     	;# 
  4475  0FEF                     	;_stage_stash
  4476                           
  4477                           	psect	idataBANK1
  4478  0DD7                     __pidataBANK1:	
  4479                           
  4480                           ;initializer for InitLowerPattern@F477
  4481  0DD7  3400               	retlw	0
  4482  0DD8  3400               	retlw	0
  4483  0DD9  3400               	retlw	0
  4484  0DDA  3401               	retlw	1
  4485                           
  4486                           ;initializer for InitLowerPattern@F474
  4487  0DDB  3400               	retlw	0
  4488  0DDC  3400               	retlw	0
  4489  0DDD  3401               	retlw	1
  4490  0DDE  3400               	retlw	0
  4491                           
  4492                           ;initializer for InitUpperLowerPattern@F465
  4493  0DDF  3400               	retlw	0
  4494  0DE0  3400               	retlw	0
  4495  0DE1  3401               	retlw	1
  4496  0DE2  3401               	retlw	1
  4497                           
  4498                           ;initializer for InitUpperLowerPattern@F462
  4499  0DE3  3401               	retlw	1
  4500  0DE4  3401               	retlw	1
  4501  0DE5  3400               	retlw	0
  4502  0DE6  3400               	retlw	0
  4503                           
  4504                           ;initializer for InitXStrobePattern@F453
  4505  0DE7  3400               	retlw	0
  4506  0DE8  3401               	retlw	1
  4507  0DE9  3401               	retlw	1
  4508  0DEA  3400               	retlw	0
  4509                           
  4510                           ;initializer for InitXStrobePattern@F450
  4511  0DEB  3401               	retlw	1
  4512  0DEC  3400               	retlw	0
  4513  0DED  3400               	retlw	0
  4514  0DEE  3401               	retlw	1
  4515                           
  4516                           ;initializer for InitWigwagPattern@F441
  4517  0DEF  3400               	retlw	0
  4518  0DF0  3401               	retlw	1
  4519  0DF1  3400               	retlw	0
  4520  0DF2  3401               	retlw	1
  4521                           
  4522                           ;initializer for InitWigwagPattern@F438
  4523  0DF3  3401               	retlw	1
  4524  0DF4  3400               	retlw	0
  4525  0DF5  3401               	retlw	1
  4526  0DF6  3400               	retlw	0
  4527                           
  4528                           	psect	nvCOMMON
  4529  0077                     __pnvCOMMON:	
  4530  0077                     _timer1ReloadVal:	
  4531  0077                     	ds	2
  4532  0079                     _IOCCF0_InterruptHandler:	
  4533  0079                     	ds	2
  4534                           
  4535                           	psect	nvBANK1
  4536  00ED                     __pnvBANK1:	
  4537  00ED                     _TMR1_InterruptHandler:	
  4538  00ED                     	ds	2
  4539  0003                     _STATUSbits	set	3
  4540  000E                     _PORTCbits	set	14
  4541  001C                     _T1GCONbits	set	28
  4542  001B                     _T1CONbits	set	27
  4543  0019                     _TMR1L	set	25
  4544  001A                     _TMR1H	set	26
  4545  001C                     _T1GCON	set	28
  4546  0011                     _PIR1bits	set	17
  4547  000B                     _INTCONbits	set	11
  4548  0010                     _PIR0bits	set	16
  4549  0091                     _PIE1bits	set	145
  4550  0090                     _PIE0bits	set	144
  4551  008E                     _TRISC	set	142
  4552  008C                     _TRISA	set	140
  4553  0097                     _WDTCON	set	151
  4554  010E                     _LATCbits	set	270
  4555  010E                     _LATC	set	270
  4556  010C                     _LATA	set	268
  4557  018C                     _ANSELA	set	396
  4558  018E                     _ANSELC	set	398
  4559  020E                     _WPUC	set	526
  4560  020C                     _WPUA	set	524
  4561  028E                     _ODCONC	set	654
  4562  028C                     _ODCONA	set	652
  4563  030E                     _SLRCONC	set	782
  4564  030C                     _SLRCONA	set	780
  4565  0397                     _IOCCPbits	set	919
  4566  0398                     _IOCCNbits	set	920
  4567  0399                     _IOCCFbits	set	921
  4568  038E                     _INLVLC	set	910
  4569  038C                     _INLVLA	set	908
  4570  0896                     _NVMCON2	set	2198
  4571  0894                     _NVMDATH	set	2196
  4572  0893                     _NVMDATL	set	2195
  4573  0892                     _NVMADRH	set	2194
  4574  0891                     _NVMADRL	set	2193
  4575  0895                     _NVMCON1bits	set	2197
  4576  0916                     _PMD5	set	2326
  4577  0915                     _PMD4	set	2325
  4578  0914                     _PMD3	set	2324
  4579  0913                     _PMD2	set	2323
  4580  0912                     _PMD1	set	2322
  4581  0911                     _PMD0	set	2321
  4582  091E                     _OSCTUNE	set	2334
  4583  091F                     _OSCFRQ	set	2335
  4584  091D                     _OSCEN	set	2333
  4585  091B                     _OSCCON3	set	2331
  4586  0919                     _OSCCON1	set	2329
  4587                           
  4588                           ; #config settings
  4589  0000                     
  4590                           	psect	cinit
  4591  002A                     start_initialization:	
  4592  002A                     __initialization:		;BIGRAM
  4593                           
  4594                           ; Initialize objects allocated to BANK1
  4595  002A  30D7               	movlw	low __pidataBANK1
  4596  002B  0084               	movwf	4
  4597  002C  308D               	movlw	(high __pidataBANK1)| (0+128)
  4598  002D  0085               	movwf	5
  4599  002E  30CD               	movlw	low __pdataBANK1
  4600  002F  0086               	movwf	6
  4601  0030  3000               	movlw	high __pdataBANK1
  4602  0031  0087               	movwf	7
  4603  0032  3000               	movlw	0
  4604  0033  00FF               	movwf	btemp+1
  4605  0034  3020               	movlw	32
  4606  0035  318C  24F9  3180   	fcall	init_ram
  4607                           
  4608                           ; Clear objects allocated to BIGRAM
  4609  0038  30F0               	movlw	low (0+8432)
  4610  0039  0084               	movwf	4
  4611  003A  3020               	movlw	high (0+8432)
  4612  003B  0085               	movwf	5
  4613  003C  3000               	movlw	0
  4614  003D  00FE               	movwf	btemp
  4615  003E  3003               	movlw	3
  4616  003F  00FF               	movwf	btemp+1
  4617  0040  318C  24ED  3180   	fcall	clear_ram0
  4618                           
  4619                           ; Clear objects allocated to COMMON
  4620  0043  01FB               	clrf	__pbssCOMMON& (0+127)
  4621  0044  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
  4622  0045  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
  4623                           
  4624                           ; Clear objects allocated to BANK0
  4625  0046  3064               	movlw	low __pbssBANK0
  4626  0047  0084               	movwf	4
  4627  0048  3000               	movlw	high __pbssBANK0
  4628  0049  0085               	movwf	5
  4629  004A  300B               	movlw	11
  4630  004B  00FE               	movwf	btemp
  4631  004C  3000               	movlw	0
  4632  004D  00FF               	movwf	btemp+1
  4633  004E  318C  24ED  3180   	fcall	clear_ram0
  4634                           
  4635                           ; Clear objects allocated to BANK1
  4636  0051  30A0               	movlw	low __pbssBANK1
  4637  0052  0084               	movwf	4
  4638  0053  3000               	movlw	high __pbssBANK1
  4639  0054  0085               	movwf	5
  4640  0055  302D               	movlw	45
  4641  0056  00FE               	movwf	btemp
  4642  0057  3000               	movlw	0
  4643  0058  00FF               	movwf	btemp+1
  4644  0059  318C  24ED  3180   	fcall	clear_ram0
  4645  005C                     end_of_initialization:	
  4646                           ;End of C runtime variable initialization code
  4647                           
  4648  005C                     __end_of__initialization:	
  4649  005C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4650  005D  0020               	movlb	0
  4651  005E  318E  2E8F         	ljmp	_main	;jump to C main() function
  4652                           
  4653                           	psect	bssCOMMON
  4654  007B                     __pbssCOMMON:	
  4655  007B                     _start_time:	
  4656  007B                     	ds	2
  4657  007D                     _ts_trigger:	
  4658  007D                     	ds	1
  4659                           
  4660                           	psect	bssBANK0
  4661  0064                     __pbssBANK0:	
  4662  0064                     _cur_ms:	
  4663  0064                     	ds	4
  4664  0068                     _pattern_list_iter:	
  4665  0068                     	ds	2
  4666  006A                     _stage_list_iter:	
  4667  006A                     	ds	2
  4668  006C                     _update_stage:	
  4669  006C                     	ds	1
  4670  006D                     _last_pc_input_state:	
  4671  006D                     	ds	1
  4672  006E                     _cur_pc_input_state:	
  4673  006E                     	ds	1
  4674                           
  4675                           	psect	bssBANK1
  4676  00A0                     __pbssBANK1:	
  4677  00A0                     NewStage@F419:	
  4678  00A0                     	ds	4
  4679  00A4                     _ts_trigger_time:	
  4680  00A4                     	ds	4
  4681  00A8                     _pattern_selector:	
  4682  00A8                     	ds	19
  4683  00BB                     _pattern_stash:	
  4684  00BB                     	ds	18
  4685                           
  4686                           	psect	dataBANK1
  4687  00CD                     __pdataBANK1:	
  4688  00CD                     InitLowerPattern@F477:	
  4689  00CD                     	ds	4
  4690  00D1                     InitLowerPattern@F474:	
  4691  00D1                     	ds	4
  4692  00D5                     InitUpperLowerPattern@F465:	
  4693  00D5                     	ds	4
  4694  00D9                     InitUpperLowerPattern@F462:	
  4695  00D9                     	ds	4
  4696  00DD                     InitXStrobePattern@F453:	
  4697  00DD                     	ds	4
  4698  00E1                     InitXStrobePattern@F450:	
  4699  00E1                     	ds	4
  4700  00E5                     InitWigwagPattern@F441:	
  4701  00E5                     	ds	4
  4702  00E9                     InitWigwagPattern@F438:	
  4703  00E9                     	ds	4
  4704                           
  4705                           	psect	inittext
  4706  0CF9                     init_ram:	
  4707  0CF9  00FE               	movwf	btemp
  4708  0CFA                     initloop:	
  4709  0CFA  0012               	moviw fsr0++
  4710  0CFB  001E               	movwi fsr1++
  4711  0CFC  3001               	movlw	1
  4712  0CFD  02FE               	subwf	btemp,f
  4713  0CFE  3000               	movlw	0
  4714  0CFF  3BFF               	subwfb	btemp+1,f
  4715  0D00  087F               	movf	btemp+1,w
  4716  0D01  047E               	iorwf	btemp,w
  4717  0D02  1D03               	skipz
  4718  0D03  2CFA               	goto	initloop
  4719  0D04  3400               	retlw	0
  4720                           
  4721                           	psect	clrtext
  4722  0CED                     clear_ram0:	
  4723                           ;	Called with FSR0 containing the base address, and
  4724                           ;	btemp/btemp+1 has the size to clear
  4725                           
  4726  0CED  0064               	clrwdt	;clear the watchdog before getting into this loop
  4727  0CEE                     clrloop0:	
  4728  0CEE  0180               	clrf	0	;clear RAM location pointed to by FSR
  4729  0CEF  3101               	addfsr 0,1
  4730  0CF0  3001               	movlw	1
  4731  0CF1  02FE               	subwf	btemp,f
  4732  0CF2  3000               	movlw	0
  4733  0CF3  3BFF               	subwfb	btemp+1,f
  4734  0CF4  087F               	movf	btemp+1,w
  4735  0CF5  047E               	iorwf	btemp,w
  4736  0CF6  1D03               	skipz
  4737  0CF7  2CEE               	goto	clrloop0	;have we reached the end yet?
  4738  0CF8  3400               	retlw	0	;all done for this memory range, return
  4739                           
  4740                           	psect	cstackCOMMON
  4741  0070                     __pcstackCOMMON:	
  4742  0070                     ?_PMD_Initialize:	
  4743  0070                     ?_PIN_MANAGER_Initialize:	
  4744                           ; 1 bytes @ 0x0
  4745                           
  4746  0070                     ?_OSCILLATOR_Initialize:	
  4747                           ; 1 bytes @ 0x0
  4748                           
  4749  0070                     ?_WDT_Initialize:	
  4750                           ; 1 bytes @ 0x0
  4751                           
  4752  0070                     ?_TMR1_Initialize:	
  4753                           ; 1 bytes @ 0x0
  4754                           
  4755  0070                     ?_TripTurnSignal:	
  4756                           ; 1 bytes @ 0x0
  4757                           
  4758  0070                     ?_IOCCF0_ISR:	
  4759                           ; 1 bytes @ 0x0
  4760                           
  4761  0070                     ?_TMR1_ISR:	
  4762                           ; 1 bytes @ 0x0
  4763                           
  4764  0070                     ?_TMR1_DefaultInterruptHandler:	
  4765                           ; 1 bytes @ 0x0
  4766                           
  4767  0070                     ??_TMR1_DefaultInterruptHandler:	
  4768                           ; 1 bytes @ 0x0
  4769                           
  4770  0070                     ?_SetOutputs:	
  4771                           ; 1 bytes @ 0x0
  4772                           
  4773  0070                     ?_TurnSignalDone:	
  4774                           ; 1 bytes @ 0x0
  4775                           
  4776  0070                     ?_PatternCycleInputChanged:	
  4777                           ; 1 bytes @ 0x0
  4778                           
  4779  0070                     ?_FlashPattern:	
  4780                           ; 1 bytes @ 0x0
  4781                           
  4782  0070                     ?_EEPROM_GetSavedPattern:	
  4783                           ; 1 bytes @ 0x0
  4784                           
  4785  0070                     ?_EEPROM_SavePattern:	
  4786                           ; 1 bytes @ 0x0
  4787                           
  4788  0070                     ?_eeprom_read:	
  4789                           ; 1 bytes @ 0x0
  4790                           
  4791  0070                     ?_SYSTEM_Initialize:	
  4792                           ; 1 bytes @ 0x0
  4793                           
  4794  0070                     ?_PIN_MANAGER_IOC:	
  4795                           ; 1 bytes @ 0x0
  4796                           
  4797  0070                     ?_INTERRUPT_InterruptManager:	
  4798                           ; 1 bytes @ 0x0
  4799                           
  4800  0070                     ?_TMR1_StartTimer:	
  4801                           ; 1 bytes @ 0x0
  4802                           
  4803  0070                     ?_TMR1_WriteTimer:	
  4804                           ; 1 bytes @ 0x0
  4805                           
  4806  0070                     ?_setup:	
  4807                           ; 1 bytes @ 0x0
  4808                           
  4809  0070                     ?_main:	
  4810                           ; 1 bytes @ 0x0
  4811                           
  4812  0070                     ?i1_SetLight:	
  4813                           ; 1 bytes @ 0x0
  4814                           
  4815  0070                     ?i1_SetOutputs:	
  4816                           ; 1 bytes @ 0x0
  4817                           
  4818  0070                     ?i1_ms:	
  4819                           ; 1 bytes @ 0x0
  4820                           
  4821  0070                     i1SetLight@_state:	
  4822                           ; 4 bytes @ 0x0
  4823                           
  4824  0070                     TMR1_WriteTimer@timerVal:	
  4825                           ; 1 bytes @ 0x0
  4826                           
  4827                           
  4828                           ; 2 bytes @ 0x0
  4829  0070                     	ds	1
  4830  0071                     ??i1_SetLight:	
  4831                           
  4832                           ; 1 bytes @ 0x1
  4833  0071                     	ds	1
  4834  0072                     ??_TMR1_ISR:	
  4835  0072                     ??_TMR1_WriteTimer:	
  4836                           ; 1 bytes @ 0x2
  4837                           
  4838                           
  4839                           ; 1 bytes @ 0x2
  4840  0072                     	ds	1
  4841  0073                     i1SetLight@light:	
  4842                           
  4843                           ; 1 bytes @ 0x3
  4844  0073                     	ds	1
  4845  0074                     ??i1_ms:	
  4846  0074                     i1SetLight@state:	
  4847                           ; 1 bytes @ 0x4
  4848                           
  4849                           
  4850                           ; 1 bytes @ 0x4
  4851  0074                     	ds	1
  4852  0075                     ??i1_SetOutputs:	
  4853                           
  4854                           ; 1 bytes @ 0x5
  4855  0075                     	ds	1
  4856  0076                     i1SetOutputs@state:	
  4857                           
  4858                           ; 1 bytes @ 0x6
  4859  0076                     	ds	1
  4860  0077                     ??_TripTurnSignal:	
  4861  0077                     ??_IOCCF0_ISR:	
  4862                           ; 1 bytes @ 0x7
  4863                           
  4864  0077                     ??_PIN_MANAGER_IOC:	
  4865                           ; 1 bytes @ 0x7
  4866                           
  4867  0077                     ??_INTERRUPT_InterruptManager:	
  4868                           ; 1 bytes @ 0x7
  4869                           
  4870                           
  4871                           	psect	cstackBANK0
  4872  0020                     __pcstackBANK0:	
  4873                           ; 1 bytes @ 0x7
  4874                           
  4875  0020                     ??_PMD_Initialize:	
  4876  0020                     ??_OSCILLATOR_Initialize:	
  4877                           ; 1 bytes @ 0x0
  4878                           
  4879  0020                     ??_WDT_Initialize:	
  4880                           ; 1 bytes @ 0x0
  4881                           
  4882  0020                     ?_IOCCF0_SetInterruptHandler:	
  4883                           ; 1 bytes @ 0x0
  4884                           
  4885  0020                     ?_TMR1_SetInterruptHandler:	
  4886                           ; 1 bytes @ 0x0
  4887                           
  4888  0020                     ??_PatternCycleInputChanged:	
  4889                           ; 1 bytes @ 0x0
  4890                           
  4891  0020                     ?_eeprom_write:	
  4892                           ; 1 bytes @ 0x0
  4893                           
  4894  0020                     ??_eeprom_read:	
  4895                           ; 1 bytes @ 0x0
  4896                           
  4897  0020                     ??_TMR1_StartTimer:	
  4898                           ; 1 bytes @ 0x0
  4899                           
  4900  0020                     ?_SetLight:	
  4901                           ; 1 bytes @ 0x0
  4902                           
  4903  0020                     ?_AssignLightStates:	
  4904                           ; 1 bytes @ 0x0
  4905                           
  4906  0020                     ?_NewStage:	
  4907                           ; 1 bytes @ 0x0
  4908                           
  4909  0020                     ?___wmul:	
  4910                           ; 2 bytes @ 0x0
  4911                           
  4912  0020                     ?_ms:	
  4913                           ; 2 bytes @ 0x0
  4914                           
  4915  0020                     SetLight@_state:	
  4916                           ; 4 bytes @ 0x0
  4917                           
  4918  0020                     eeprom_read@addr:	
  4919                           ; 1 bytes @ 0x0
  4920                           
  4921  0020                     eeprom_write@value:	
  4922                           ; 1 bytes @ 0x0
  4923                           
  4924  0020                     IOCCF0_SetInterruptHandler@InterruptHandler:	
  4925                           ; 1 bytes @ 0x0
  4926                           
  4927  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  4928                           ; 2 bytes @ 0x0
  4929                           
  4930  0020                     AssignLightStates@stage:	
  4931                           ; 2 bytes @ 0x0
  4932                           
  4933  0020                     ___wmul@multiplier:	
  4934                           ; 2 bytes @ 0x0
  4935                           
  4936                           
  4937                           ; 2 bytes @ 0x0
  4938  0020                     	ds	1
  4939  0021                     ??_EEPROM_GetSavedPattern:	
  4940  0021                     ??_eeprom_write:	
  4941                           ; 1 bytes @ 0x1
  4942                           
  4943  0021                     ??_SetLight:	
  4944                           ; 1 bytes @ 0x1
  4945                           
  4946  0021                     eeprom_write@addr:	
  4947                           ; 1 bytes @ 0x1
  4948                           
  4949                           
  4950                           ; 1 bytes @ 0x1
  4951  0021                     	ds	1
  4952  0022                     ??_PIN_MANAGER_Initialize:	
  4953  0022                     ??_TMR1_Initialize:	
  4954                           ; 1 bytes @ 0x2
  4955                           
  4956  0022                     ??_IOCCF0_SetInterruptHandler:	
  4957                           ; 1 bytes @ 0x2
  4958                           
  4959  0022                     ??_TMR1_SetInterruptHandler:	
  4960                           ; 1 bytes @ 0x2
  4961                           
  4962  0022                     ??_EEPROM_SavePattern:	
  4963                           ; 1 bytes @ 0x2
  4964                           
  4965  0022                     ??_SYSTEM_Initialize:	
  4966                           ; 1 bytes @ 0x2
  4967                           
  4968  0022                     AssignLightStates@states:	
  4969                           ; 1 bytes @ 0x2
  4970                           
  4971  0022                     EEPROM_GetSavedPattern@saved_pattern:	
  4972                           ; 1 bytes @ 0x2
  4973                           
  4974  0022                     PatternCycleInputChanged@delay_count:	
  4975                           ; 1 bytes @ 0x2
  4976                           
  4977  0022                     ___wmul@multiplicand:	
  4978                           ; 2 bytes @ 0x2
  4979                           
  4980                           
  4981                           ; 2 bytes @ 0x2
  4982  0022                     	ds	1
  4983  0023                     ??_AssignLightStates:	
  4984  0023                     SetLight@light:	
  4985                           ; 1 bytes @ 0x3
  4986                           
  4987  0023                     EEPROM_SavePattern@pattern_name:	
  4988                           ; 1 bytes @ 0x3
  4989                           
  4990                           
  4991                           ; 1 bytes @ 0x3
  4992  0023                     	ds	1
  4993  0024                     ??_ms:	
  4994  0024                     ??___wmul:	
  4995                           ; 1 bytes @ 0x4
  4996                           
  4997  0024                     ?_NextPattern:	
  4998                           ; 1 bytes @ 0x4
  4999                           
  5000  0024                     ?_abs:	
  5001                           ; 2 bytes @ 0x4
  5002                           
  5003  0024                     SetLight@state:	
  5004                           ; 2 bytes @ 0x4
  5005                           
  5006  0024                     NextPattern@p_selector:	
  5007                           ; 1 bytes @ 0x4
  5008                           
  5009  0024                     ___wmul@product:	
  5010                           ; 2 bytes @ 0x4
  5011                           
  5012  0024                     abs@a:	
  5013                           ; 2 bytes @ 0x4
  5014                           
  5015                           
  5016                           ; 2 bytes @ 0x4
  5017  0024                     	ds	1
  5018  0025                     ??_SetOutputs:	
  5019  0025                     ??_FlashPattern:	
  5020                           ; 1 bytes @ 0x5
  5021                           
  5022                           
  5023                           ; 1 bytes @ 0x5
  5024  0025                     	ds	1
  5025  0026                     ??_NextPattern:	
  5026  0026                     ??_abs:	
  5027                           ; 1 bytes @ 0x6
  5028                           
  5029  0026                     SetOutputs@state:	
  5030                           ; 1 bytes @ 0x6
  5031                           
  5032                           
  5033                           ; 1 bytes @ 0x6
  5034  0026                     	ds	1
  5035  0027                     AssignLightStates@i:	
  5036                           
  5037                           ; 2 bytes @ 0x7
  5038  0027                     	ds	1
  5039  0028                     ??_TurnSignalDone:	
  5040  0028                     ?_NewPattern:	
  5041                           ; 1 bytes @ 0x8
  5042                           
  5043                           
  5044                           ; 2 bytes @ 0x8
  5045  0028                     	ds	1
  5046  0029                     ??_NewStage:	
  5047                           
  5048                           ; 1 bytes @ 0x9
  5049  0029                     	ds	4
  5050  002D                     NewStage@init_states:	
  5051                           
  5052                           ; 4 bytes @ 0xD
  5053  002D                     	ds	2
  5054  002F                     FlashPattern@current_time:	
  5055                           
  5056                           ; 2 bytes @ 0xF
  5057  002F                     	ds	2
  5058  0031                     NewStage@new_stage:	
  5059                           
  5060                           ; 2 bytes @ 0x11
  5061  0031                     	ds	2
  5062  0033                     ??_NewPattern:	
  5063  0033                     ?_ConstructStage:	
  5064                           ; 1 bytes @ 0x13
  5065                           
  5066  0033                     ?_CopyStageData:	
  5067                           ; 2 bytes @ 0x13
  5068                           
  5069  0033                     ConstructStage@time_ms:	
  5070                           ; 2 bytes @ 0x13
  5071                           
  5072  0033                     CopyStageData@dest:	
  5073                           ; 2 bytes @ 0x13
  5074                           
  5075                           
  5076                           ; 2 bytes @ 0x13
  5077  0033                     	ds	2
  5078  0035                     ConstructStage@next:	
  5079  0035                     NewPattern@new_pattern:	
  5080                           ; 1 bytes @ 0x15
  5081                           
  5082  0035                     CopyStageData@source:	
  5083                           ; 2 bytes @ 0x15
  5084                           
  5085                           
  5086                           ; 2 bytes @ 0x15
  5087  0035                     	ds	1
  5088  0036                     ??_ConstructStage:	
  5089                           
  5090                           ; 1 bytes @ 0x16
  5091  0036                     	ds	1
  5092  0037                     ??_CopyStageData:	
  5093  0037                     ConstructStage@new_stage:	
  5094                           ; 1 bytes @ 0x17
  5095                           
  5096                           
  5097                           ; 2 bytes @ 0x17
  5098  0037                     	ds	2
  5099  0039                     ConstructStage@states:	
  5100                           
  5101                           ; 1 bytes @ 0x19
  5102  0039                     	ds	1
  5103  003A                     CopyStageData@i:	
  5104                           
  5105                           ; 2 bytes @ 0x1A
  5106  003A                     	ds	2
  5107  003C                     ?_AppendStage:	
  5108  003C                     AppendStage@head:	
  5109                           ; 1 bytes @ 0x1C
  5110                           
  5111                           
  5112                           ; 2 bytes @ 0x1C
  5113  003C                     	ds	2
  5114  003E                     AppendStage@new_stage:	
  5115                           
  5116                           ; 2 bytes @ 0x1E
  5117  003E                     	ds	2
  5118  0040                     ??_AppendStage:	
  5119                           
  5120                           ; 1 bytes @ 0x20
  5121  0040                     	ds	2
  5122  0042                     AppendStage@last_stage:	
  5123                           
  5124                           ; 2 bytes @ 0x22
  5125  0042                     	ds	2
  5126  0044                     ?_InitWigwagPattern:	
  5127  0044                     ?_InitXStrobePattern:	
  5128                           ; 1 bytes @ 0x24
  5129                           
  5130  0044                     ?_InitUpperLowerPattern:	
  5131                           ; 1 bytes @ 0x24
  5132                           
  5133  0044                     ?_InitLowerPattern:	
  5134                           ; 1 bytes @ 0x24
  5135                           
  5136  0044                     InitWigwagPattern@pattern:	
  5137                           ; 1 bytes @ 0x24
  5138                           
  5139  0044                     InitXStrobePattern@pattern:	
  5140                           ; 2 bytes @ 0x24
  5141                           
  5142  0044                     InitUpperLowerPattern@pattern:	
  5143                           ; 2 bytes @ 0x24
  5144                           
  5145  0044                     InitLowerPattern@pattern:	
  5146                           ; 2 bytes @ 0x24
  5147                           
  5148                           
  5149                           ; 2 bytes @ 0x24
  5150  0044                     	ds	2
  5151  0046                     ??_InitWigwagPattern:	
  5152  0046                     ??_InitXStrobePattern:	
  5153                           ; 1 bytes @ 0x26
  5154                           
  5155  0046                     ??_InitUpperLowerPattern:	
  5156                           ; 1 bytes @ 0x26
  5157                           
  5158  0046                     ??_InitLowerPattern:	
  5159                           ; 1 bytes @ 0x26
  5160                           
  5161                           
  5162                           ; 1 bytes @ 0x26
  5163  0046                     	ds	1
  5164  0047                     InitWigwagPattern@left_side_states:	
  5165  0047                     InitXStrobePattern@diag_1_4_states:	
  5166                           ; 4 bytes @ 0x27
  5167                           
  5168  0047                     InitUpperLowerPattern@upper_states:	
  5169                           ; 4 bytes @ 0x27
  5170                           
  5171  0047                     InitLowerPattern@lower_left_states:	
  5172                           ; 4 bytes @ 0x27
  5173                           
  5174                           
  5175                           ; 4 bytes @ 0x27
  5176  0047                     	ds	4
  5177  004B                     InitWigwagPattern@right_side_states:	
  5178  004B                     InitXStrobePattern@diag_2_3_states:	
  5179                           ; 4 bytes @ 0x2B
  5180                           
  5181  004B                     InitUpperLowerPattern@lower_states:	
  5182                           ; 4 bytes @ 0x2B
  5183                           
  5184  004B                     InitLowerPattern@lower_right_states:	
  5185                           ; 4 bytes @ 0x2B
  5186                           
  5187                           
  5188                           ; 4 bytes @ 0x2B
  5189  004B                     	ds	4
  5190  004F                     InitWigwagPattern@left_side_on:	
  5191  004F                     InitXStrobePattern@diag_1_4:	
  5192                           ; 2 bytes @ 0x2F
  5193                           
  5194  004F                     InitUpperLowerPattern@upper:	
  5195                           ; 2 bytes @ 0x2F
  5196                           
  5197  004F                     InitLowerPattern@lower_left:	
  5198                           ; 2 bytes @ 0x2F
  5199                           
  5200                           
  5201                           ; 2 bytes @ 0x2F
  5202  004F                     	ds	2
  5203  0051                     InitWigwagPattern@right_side_on:	
  5204  0051                     InitXStrobePattern@diag_2_3:	
  5205                           ; 2 bytes @ 0x31
  5206                           
  5207  0051                     InitUpperLowerPattern@lower:	
  5208                           ; 2 bytes @ 0x31
  5209                           
  5210  0051                     InitLowerPattern@lower_right:	
  5211                           ; 2 bytes @ 0x31
  5212                           
  5213                           
  5214                           ; 2 bytes @ 0x31
  5215  0051                     	ds	2
  5216  0053                     InitWigwagPattern@i:	
  5217  0053                     InitXStrobePattern@i:	
  5218                           ; 2 bytes @ 0x33
  5219                           
  5220  0053                     InitUpperLowerPattern@i:	
  5221                           ; 2 bytes @ 0x33
  5222                           
  5223  0053                     InitLowerPattern@i:	
  5224                           ; 2 bytes @ 0x33
  5225                           
  5226                           
  5227                           ; 2 bytes @ 0x33
  5228  0053                     	ds	2
  5229  0055                     InitWigwagPattern@i_857:	
  5230  0055                     InitXStrobePattern@i_883:	
  5231                           ; 2 bytes @ 0x35
  5232                           
  5233  0055                     InitUpperLowerPattern@i_909:	
  5234                           ; 2 bytes @ 0x35
  5235                           
  5236  0055                     InitLowerPattern@i_935:	
  5237                           ; 2 bytes @ 0x35
  5238                           
  5239                           
  5240                           ; 2 bytes @ 0x35
  5241  0055                     	ds	2
  5242  0057                     InitWigwagPattern@off:	
  5243  0057                     InitXStrobePattern@off:	
  5244                           ; 2 bytes @ 0x37
  5245                           
  5246  0057                     InitUpperLowerPattern@off:	
  5247                           ; 2 bytes @ 0x37
  5248                           
  5249  0057                     InitLowerPattern@off:	
  5250                           ; 2 bytes @ 0x37
  5251                           
  5252                           
  5253                           ; 2 bytes @ 0x37
  5254  0057                     	ds	2
  5255  0059                     InitWigwagPattern@head:	
  5256  0059                     InitXStrobePattern@head:	
  5257                           ; 2 bytes @ 0x39
  5258                           
  5259  0059                     InitUpperLowerPattern@head:	
  5260                           ; 2 bytes @ 0x39
  5261                           
  5262  0059                     InitLowerPattern@head:	
  5263                           ; 2 bytes @ 0x39
  5264                           
  5265                           
  5266                           ; 2 bytes @ 0x39
  5267  0059                     	ds	2
  5268  005B                     ?_InitPatternSelector:	
  5269  005B                     InitPatternSelector@p_selector:	
  5270                           ; 1 bytes @ 0x3B
  5271                           
  5272                           
  5273                           ; 2 bytes @ 0x3B
  5274  005B                     	ds	2
  5275  005D                     ??_InitPatternSelector:	
  5276                           
  5277                           ; 1 bytes @ 0x3D
  5278  005D                     	ds	4
  5279  0061                     InitPatternSelector@i:	
  5280                           
  5281                           ; 2 bytes @ 0x41
  5282  0061                     	ds	2
  5283  0063                     ??_setup:	
  5284  0063                     ??_main:	
  5285                           ; 1 bytes @ 0x43
  5286                           
  5287                           
  5288                           ; 1 bytes @ 0x43
  5289  0063                     	ds	1
  5290                           
  5291                           	psect	maintext
  5292  0E8F                     __pmaintext:	
  5293 ;;
  5294 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  5295 ;;
  5296 ;; *************** function _main *****************
  5297 ;; Defined at:
  5298 ;;		line 32 in file "main.c"
  5299 ;; Parameters:    Size  Location     Type
  5300 ;;		None
  5301 ;; Auto vars:     Size  Location     Type
  5302 ;;		None
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  1    wreg      void 
  5305 ;; Registers used:
  5306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : B1F/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;Total ram usage:        1 bytes
  5317 ;; Hardware stack levels required when called:   12
  5318 ;; This function calls:
  5319 ;;		_FlashPattern
  5320 ;;		_NextPattern
  5321 ;;		_PatternCycleInputChanged
  5322 ;;		_TurnSignalDone
  5323 ;;		_setup
  5324 ;; This function is called by:
  5325 ;;		Startup code after reset
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           
  5330                           ;psect for function _main
  5331  0E8F                     _main:	
  5332  0E8F                     l2853:	
  5333                           ;incstack = 0
  5334                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5335                           
  5336                           
  5337                           ;main.c: 34:     setup();
  5338  0E8F  318D  2583  318E   	fcall	_setup
  5339  0E92                     l2855:	
  5340                           
  5341                           ;main.c: 37:     {;main.c: 38:         if( !TurnSignalDone() )
  5342  0E92  318F  27C1  318E   	fcall	_TurnSignalDone
  5343  0E95  3A00               	xorlw	0
  5344  0E96  1D03               	skipz
  5345  0E97  2E99               	goto	u1671
  5346  0E98  2E9A               	goto	u1670
  5347  0E99                     u1671:	
  5348  0E99  2E9B               	goto	l2859
  5349  0E9A                     u1670:	
  5350  0E9A  2E92               	goto	l2855
  5351  0E9B                     l2859:	
  5352                           
  5353                           ;main.c: 52:         if ( PatternCycleInputChanged() )
  5354  0E9B  318F  2716  318E   	fcall	_PatternCycleInputChanged
  5355  0E9E  3A00               	xorlw	0
  5356  0E9F  1903               	skipnz
  5357  0EA0  2EA2               	goto	u1681
  5358  0EA1  2EA3               	goto	u1680
  5359  0EA2                     u1681:	
  5360  0EA2  2EB0               	goto	l2865
  5361  0EA3                     u1680:	
  5362  0EA3                     l2861:	
  5363                           
  5364                           ;main.c: 53:         {;main.c: 55:             if ( cur_pc_input_state == 0 )
  5365  0EA3  0020               	movlb	0	; select bank0
  5366  0EA4  086E               	movf	_cur_pc_input_state,w
  5367  0EA5  1D03               	btfss	3,2
  5368  0EA6  2EA8               	goto	u1691
  5369  0EA7  2EA9               	goto	u1690
  5370  0EA8                     u1691:	
  5371  0EA8  2EB0               	goto	l2865
  5372  0EA9                     u1690:	
  5373  0EA9                     l2863:	
  5374                           
  5375                           ;main.c: 56:             {;main.c: 57:                 NextPattern( &pattern_selector );
  5376  0EA9  30A8               	movlw	low _pattern_selector
  5377  0EAA  00A4               	movwf	NextPattern@p_selector
  5378  0EAB  3000               	movlw	high _pattern_selector
  5379  0EAC  00A5               	movwf	NextPattern@p_selector+1
  5380  0EAD  3185  25C0  318E   	fcall	_NextPattern
  5381  0EB0                     l2865:	
  5382                           ;main.c: 58:             }
  5383                           
  5384                           
  5385                           ;main.c: 65:         last_pc_input_state = cur_pc_input_state;
  5386  0EB0  0020               	movlb	0	; select bank0
  5387  0EB1  086E               	movf	_cur_pc_input_state,w
  5388  0EB2  00E3               	movwf	??_main
  5389  0EB3  0863               	movf	??_main,w
  5390  0EB4  00ED               	movwf	_last_pc_input_state
  5391  0EB5                     l2867:	
  5392                           
  5393                           ;main.c: 67:         FlashPattern();
  5394  0EB5  3185  2525  318E   	fcall	_FlashPattern
  5395  0EB8  2E92               	goto	l2855
  5396  0EB9  3180  2828         	ljmp	start
  5397  0EBB                     __end_of_main:	
  5398                           
  5399                           	psect	text1
  5400  0D83                     __ptext1:	
  5401 ;; *************** function _setup *****************
  5402 ;; Defined at:
  5403 ;;		line 12 in file "main.c"
  5404 ;; Parameters:    Size  Location     Type
  5405 ;;		None
  5406 ;; Auto vars:     Size  Location     Type
  5407 ;;		None
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  1    wreg      void 
  5410 ;; Registers used:
  5411 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5412 ;; Tracked objects:
  5413 ;;		On entry : 0/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5421 ;;Total ram usage:        0 bytes
  5422 ;; Hardware stack levels used:    1
  5423 ;; Hardware stack levels required when called:   11
  5424 ;; This function calls:
  5425 ;;		_InitPatternSelector
  5426 ;;		_SYSTEM_Initialize
  5427 ;;		_SetOutputs
  5428 ;;		_TMR1_Initialize
  5429 ;;		_TMR1_StartTimer
  5430 ;; This function is called by:
  5431 ;;		_main
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           
  5436                           ;psect for function _setup
  5437  0D83                     _setup:	
  5438  0D83                     l2783:	
  5439                           ;incstack = 0
  5440                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5441                           
  5442                           
  5443                           ;main.c: 15:     SYSTEM_Initialize();
  5444  0D83  318D  2513  318D   	fcall	_SYSTEM_Initialize
  5445  0D86                     l2785:	
  5446                           
  5447                           ;main.c: 17:     (INTCONbits.GIE = 1);
  5448  0D86  178B               	bsf	11,7	;volatile
  5449  0D87                     l2787:	
  5450                           
  5451                           ;main.c: 20:     (INTCONbits.PEIE = 1);
  5452  0D87  170B               	bsf	11,6	;volatile
  5453                           
  5454                           ;main.c: 23:     TMR1_Initialize();
  5455  0D88  318D  2558  318D   	fcall	_TMR1_Initialize
  5456  0D8B                     l2789:	
  5457                           
  5458                           ;main.c: 24:     TMR1_StartTimer();
  5459  0D8B  318C  2494  318D   	fcall	_TMR1_StartTimer
  5460  0D8E                     l2791:	
  5461                           
  5462                           ;main.c: 27:     SetOutputs( 0 );
  5463  0D8E  3000               	movlw	0
  5464  0D8F  318E  263D  318D   	fcall	_SetOutputs
  5465  0D92                     l2793:	
  5466                           
  5467                           ;main.c: 29:     InitPatternSelector( &pattern_selector );
  5468  0D92  30A8               	movlw	low _pattern_selector
  5469  0D93  0020               	movlb	0	; select bank0
  5470  0D94  00DB               	movwf	InitPatternSelector@p_selector
  5471  0D95  3000               	movlw	high _pattern_selector
  5472  0D96  00DC               	movwf	InitPatternSelector@p_selector+1
  5473  0D97  3184  2487  318D   	fcall	_InitPatternSelector
  5474  0D9A                     l261:	
  5475  0D9A  0008               	return
  5476  0D9B                     __end_of_setup:	
  5477                           
  5478                           	psect	text2
  5479  0C94                     __ptext2:	
  5480 ;; *************** function _TMR1_StartTimer *****************
  5481 ;; Defined at:
  5482 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;		None
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;		None
  5487 ;; Return value:  Size  Location     Type
  5488 ;;                  1    wreg      void 
  5489 ;; Registers used:
  5490 ;;		None
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5500 ;;Total ram usage:        0 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; Hardware stack levels required when called:    6
  5503 ;; This function calls:
  5504 ;;		Nothing
  5505 ;; This function is called by:
  5506 ;;		_setup
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           
  5511                           ;psect for function _TMR1_StartTimer
  5512  0C94                     _TMR1_StartTimer:	
  5513  0C94                     l2749:	
  5514                           ;incstack = 0
  5515                           ; Regs used in _TMR1_StartTimer: []
  5516                           
  5517                           
  5518                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
  5519  0C94  0020               	movlb	0	; select bank0
  5520  0C95  141B               	bsf	27,0	;volatile
  5521  0C96                     l186:	
  5522  0C96  0008               	return
  5523  0C97                     __end_of_TMR1_StartTimer:	
  5524                           
  5525                           	psect	text3
  5526  0D13                     __ptext3:	
  5527 ;; *************** function _SYSTEM_Initialize *****************
  5528 ;; Defined at:
  5529 ;;		line 50 in file "mcc_generated_files/mcc.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;		None
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;		None
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      void 
  5536 ;; Registers used:
  5537 ;;		wreg, status,2, status,0, pclath, cstack
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;Total ram usage:        0 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    8
  5550 ;; This function calls:
  5551 ;;		_OSCILLATOR_Initialize
  5552 ;;		_PIN_MANAGER_Initialize
  5553 ;;		_PMD_Initialize
  5554 ;;		_TMR1_Initialize
  5555 ;;		_WDT_Initialize
  5556 ;; This function is called by:
  5557 ;;		_setup
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           
  5562                           ;psect for function _SYSTEM_Initialize
  5563  0D13                     _SYSTEM_Initialize:	
  5564  0D13                     l2739:	
  5565                           ;incstack = 0
  5566                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5567                           
  5568                           
  5569                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
  5570  0D13  318C  24A1  318D   	fcall	_PMD_Initialize
  5571  0D16                     l2741:	
  5572                           
  5573                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  5574  0D16  318E  2663  318D   	fcall	_PIN_MANAGER_Initialize
  5575  0D19                     l2743:	
  5576                           
  5577                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  5578  0D19  318C  24B2  318D   	fcall	_OSCILLATOR_Initialize
  5579  0D1C                     l2745:	
  5580                           
  5581                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  5582  0D1C  318C  2497  318D   	fcall	_WDT_Initialize
  5583  0D1F                     l2747:	
  5584                           
  5585                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  5586  0D1F  318D  2558  318D   	fcall	_TMR1_Initialize
  5587  0D22                     l45:	
  5588  0D22  0008               	return
  5589  0D23                     __end_of_SYSTEM_Initialize:	
  5590                           
  5591                           	psect	text4
  5592  0C97                     __ptext4:	
  5593 ;; *************** function _WDT_Initialize *****************
  5594 ;; Defined at:
  5595 ;;		line 74 in file "mcc_generated_files/mcc.c"
  5596 ;; Parameters:    Size  Location     Type
  5597 ;;		None
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;		None
  5600 ;; Return value:  Size  Location     Type
  5601 ;;                  1    wreg      void 
  5602 ;; Registers used:
  5603 ;;		wreg
  5604 ;; Tracked objects:
  5605 ;;		On entry : 0/0
  5606 ;;		On exit  : 0/0
  5607 ;;		Unchanged: 0/0
  5608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5613 ;;Total ram usage:        0 bytes
  5614 ;; Hardware stack levels used:    1
  5615 ;; Hardware stack levels required when called:    6
  5616 ;; This function calls:
  5617 ;;		Nothing
  5618 ;; This function is called by:
  5619 ;;		_SYSTEM_Initialize
  5620 ;; This function uses a non-reentrant model
  5621 ;;
  5622                           
  5623                           
  5624                           ;psect for function _WDT_Initialize
  5625  0C97                     _WDT_Initialize:	
  5626  0C97                     l2673:	
  5627                           ;incstack = 0
  5628                           ; Regs used in _WDT_Initialize: [wreg]
  5629                           
  5630                           
  5631                           ;mcc_generated_files/mcc.c: 77:     WDTCON = 0x16;
  5632  0C97  3016               	movlw	22
  5633  0C98  0021               	movlb	1	; select bank1
  5634  0C99  0097               	movwf	23	;volatile
  5635  0C9A                     l51:	
  5636  0C9A  0008               	return
  5637  0C9B                     __end_of_WDT_Initialize:	
  5638                           
  5639                           	psect	text5
  5640  0D58                     __ptext5:	
  5641 ;; *************** function _TMR1_Initialize *****************
  5642 ;; Defined at:
  5643 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;		None
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;		None
  5648 ;; Return value:  Size  Location     Type
  5649 ;;                  1    wreg      void 
  5650 ;; Registers used:
  5651 ;;		wreg, status,2, status,0, pclath, cstack
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5661 ;;Total ram usage:        0 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    7
  5664 ;; This function calls:
  5665 ;;		_TMR1_SetInterruptHandler
  5666 ;; This function is called by:
  5667 ;;		_SYSTEM_Initialize
  5668 ;;		_setup
  5669 ;; This function uses a non-reentrant model
  5670 ;;
  5671                           
  5672                           
  5673                           ;psect for function _TMR1_Initialize
  5674  0D58                     _TMR1_Initialize:	
  5675  0D58                     l2675:	
  5676                           ;incstack = 0
  5677                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5678                           
  5679                           
  5680                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  5681  0D58  0020               	movlb	0	; select bank0
  5682  0D59  019C               	clrf	28	;volatile
  5683  0D5A                     l2677:	
  5684                           
  5685                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xFF;
  5686  0D5A  30FF               	movlw	255
  5687  0D5B  009A               	movwf	26	;volatile
  5688  0D5C                     l2679:	
  5689                           
  5690                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0x00;
  5691  0D5C  0199               	clrf	25	;volatile
  5692  0D5D                     l2681:	
  5693                           
  5694                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  5695  0D5D  1011               	bcf	17,0	;volatile
  5696                           
  5697                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  5698  0D5E  081A               	movf	26,w	;volatile
  5699  0D5F  00F8               	movwf	_timer1ReloadVal+1	;volatile
  5700  0D60  0819               	movf	25,w	;volatile
  5701  0D61  00F7               	movwf	_timer1ReloadVal	;volatile
  5702  0D62                     l2683:	
  5703                           
  5704                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  5705  0D62  0021               	movlb	1	; select bank1
  5706  0D63  1411               	bsf	17,0	;volatile
  5707  0D64                     l2685:	
  5708                           
  5709                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  5710  0D64  30CE               	movlw	low _TMR1_DefaultInterruptHandler
  5711  0D65  0020               	movlb	0	; select bank0
  5712  0D66  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  5713  0D67  300C               	movlw	high _TMR1_DefaultInterruptHandler
  5714  0D68  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  5715  0D69  318C  24BB  318D   	fcall	_TMR1_SetInterruptHandler
  5716  0D6C                     l183:	
  5717  0D6C  0008               	return
  5718  0D6D                     __end_of_TMR1_Initialize:	
  5719                           
  5720                           	psect	text6
  5721  0CBB                     __ptext6:	
  5722 ;; *************** function _TMR1_SetInterruptHandler *****************
  5723 ;; Defined at:
  5724 ;;		line 172 in file "mcc_generated_files/tmr1.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5727 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;		None
  5730 ;; Return value:  Size  Location     Type
  5731 ;;                  1    wreg      void 
  5732 ;; Registers used:
  5733 ;;		wreg
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5739 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5743 ;;Total ram usage:        2 bytes
  5744 ;; Hardware stack levels used:    1
  5745 ;; Hardware stack levels required when called:    6
  5746 ;; This function calls:
  5747 ;;		Nothing
  5748 ;; This function is called by:
  5749 ;;		_TMR1_Initialize
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           
  5754                           ;psect for function _TMR1_SetInterruptHandler
  5755  0CBB                     _TMR1_SetInterruptHandler:	
  5756  0CBB                     l2611:	
  5757                           ;incstack = 0
  5758                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  5759                           
  5760                           
  5761                           ;mcc_generated_files/tmr1.c: 173:     TMR1_InterruptHandler = InterruptHandler;
  5762  0CBB  0020               	movlb	0	; select bank0
  5763  0CBC  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  5764  0CBD  0021               	movlb	1	; select bank1
  5765  0CBE  00EE               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  5766  0CBF  0020               	movlb	0	; select bank0
  5767  0CC0  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  5768  0CC1  0021               	movlb	1	; select bank1
  5769  0CC2  00ED               	movwf	_TMR1_InterruptHandler^(0+128)
  5770  0CC3                     l213:	
  5771  0CC3  0008               	return
  5772  0CC4                     __end_of_TMR1_SetInterruptHandler:	
  5773                           
  5774                           	psect	text7
  5775  0CA1                     __ptext7:	
  5776 ;; *************** function _PMD_Initialize *****************
  5777 ;; Defined at:
  5778 ;;		line 80 in file "mcc_generated_files/mcc.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;		None
  5783 ;; Return value:  Size  Location     Type
  5784 ;;                  1    wreg      void 
  5785 ;; Registers used:
  5786 ;;		status,2
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;Total ram usage:        0 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:    6
  5799 ;; This function calls:
  5800 ;;		Nothing
  5801 ;; This function is called by:
  5802 ;;		_SYSTEM_Initialize
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           
  5807                           ;psect for function _PMD_Initialize
  5808  0CA1                     _PMD_Initialize:	
  5809  0CA1                     l2631:	
  5810                           ;incstack = 0
  5811                           ; Regs used in _PMD_Initialize: [status,2]
  5812                           
  5813                           
  5814                           ;mcc_generated_files/mcc.c: 83:     PMD0 = 0x00;
  5815  0CA1  0032               	movlb	18	; select bank18
  5816  0CA2  0191               	clrf	17	;volatile
  5817                           
  5818                           ;mcc_generated_files/mcc.c: 85:     PMD1 = 0x00;
  5819  0CA3  0192               	clrf	18	;volatile
  5820                           
  5821                           ;mcc_generated_files/mcc.c: 87:     PMD2 = 0x00;
  5822  0CA4  0193               	clrf	19	;volatile
  5823                           
  5824                           ;mcc_generated_files/mcc.c: 89:     PMD3 = 0x00;
  5825  0CA5  0194               	clrf	20	;volatile
  5826                           
  5827                           ;mcc_generated_files/mcc.c: 91:     PMD4 = 0x00;
  5828  0CA6  0195               	clrf	21	;volatile
  5829                           
  5830                           ;mcc_generated_files/mcc.c: 93:     PMD5 = 0x00;
  5831  0CA7  0196               	clrf	22	;volatile
  5832  0CA8                     l54:	
  5833  0CA8  0008               	return
  5834  0CA9                     __end_of_PMD_Initialize:	
  5835                           
  5836                           	psect	text8
  5837  0E63                     __ptext8:	
  5838 ;; *************** function _PIN_MANAGER_Initialize *****************
  5839 ;; Defined at:
  5840 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;		None
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;		None
  5845 ;; Return value:  Size  Location     Type
  5846 ;;                  1    wreg      void 
  5847 ;; Registers used:
  5848 ;;		wreg, status,2, status,0, pclath, cstack
  5849 ;; Tracked objects:
  5850 ;;		On entry : 0/0
  5851 ;;		On exit  : 0/0
  5852 ;;		Unchanged: 0/0
  5853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5858 ;;Total ram usage:        0 bytes
  5859 ;; Hardware stack levels used:    1
  5860 ;; Hardware stack levels required when called:    7
  5861 ;; This function calls:
  5862 ;;		_IOCCF0_SetInterruptHandler
  5863 ;; This function is called by:
  5864 ;;		_SYSTEM_Initialize
  5865 ;; This function uses a non-reentrant model
  5866 ;;
  5867                           
  5868                           
  5869                           ;psect for function _PIN_MANAGER_Initialize
  5870  0E63                     _PIN_MANAGER_Initialize:	
  5871  0E63                     l2633:	
  5872                           ;incstack = 0
  5873                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5874                           
  5875                           
  5876                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
  5877  0E63  0022               	movlb	2	; select bank2
  5878  0E64  018C               	clrf	12	;volatile
  5879  0E65                     l2635:	
  5880                           
  5881                           ;mcc_generated_files/pin_manager.c: 63:     LATC = 0x20;
  5882  0E65  3020               	movlw	32
  5883  0E66  008E               	movwf	14	;volatile
  5884  0E67                     l2637:	
  5885                           
  5886                           ;mcc_generated_files/pin_manager.c: 68:     TRISA = 0x37;
  5887  0E67  3037               	movlw	55
  5888  0E68  0021               	movlb	1	; select bank1
  5889  0E69  008C               	movwf	12	;volatile
  5890  0E6A                     l2639:	
  5891                           
  5892                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x21;
  5893  0E6A  3021               	movlw	33
  5894  0E6B  008E               	movwf	14	;volatile
  5895  0E6C                     l2641:	
  5896                           
  5897                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  5898  0E6C  0023               	movlb	3	; select bank3
  5899  0E6D  018E               	clrf	14	;volatile
  5900                           
  5901                           ;mcc_generated_files/pin_manager.c: 75:     ANSELA = 0x33;
  5902  0E6E  3033               	movlw	51
  5903  0E6F  008C               	movwf	12	;volatile
  5904  0E70                     l2643:	
  5905                           
  5906                           ;mcc_generated_files/pin_manager.c: 80:     WPUA = 0x00;
  5907  0E70  0024               	movlb	4	; select bank4
  5908  0E71  018C               	clrf	12	;volatile
  5909  0E72                     l2645:	
  5910                           
  5911                           ;mcc_generated_files/pin_manager.c: 81:     WPUC = 0x1E;
  5912  0E72  301E               	movlw	30
  5913  0E73  008E               	movwf	14	;volatile
  5914                           
  5915                           ;mcc_generated_files/pin_manager.c: 86:     ODCONA = 0x00;
  5916  0E74  0025               	movlb	5	; select bank5
  5917  0E75  018C               	clrf	12	;volatile
  5918                           
  5919                           ;mcc_generated_files/pin_manager.c: 87:     ODCONC = 0x00;
  5920  0E76  018E               	clrf	14	;volatile
  5921  0E77                     l2647:	
  5922                           
  5923                           ;mcc_generated_files/pin_manager.c: 92:     SLRCONA = 0x37;
  5924  0E77  3037               	movlw	55
  5925  0E78  0026               	movlb	6	; select bank6
  5926  0E79  008C               	movwf	12	;volatile
  5927  0E7A                     l2649:	
  5928                           
  5929                           ;mcc_generated_files/pin_manager.c: 93:     SLRCONC = 0x3F;
  5930  0E7A  303F               	movlw	63
  5931  0E7B  008E               	movwf	14	;volatile
  5932  0E7C                     l2651:	
  5933                           
  5934                           ;mcc_generated_files/pin_manager.c: 98:     INLVLA = 0x3F;
  5935  0E7C  303F               	movlw	63
  5936  0E7D  0027               	movlb	7	; select bank7
  5937  0E7E  008C               	movwf	12	;volatile
  5938  0E7F                     l2653:	
  5939                           
  5940                           ;mcc_generated_files/pin_manager.c: 99:     INLVLC = 0x3F;
  5941  0E7F  303F               	movlw	63
  5942  0E80  008E               	movwf	14	;volatile
  5943  0E81                     l2655:	
  5944                           
  5945                           ;mcc_generated_files/pin_manager.c: 106:     IOCCFbits.IOCCF0 = 0;
  5946  0E81  1019               	bcf	25,0	;volatile
  5947  0E82                     l2657:	
  5948                           
  5949                           ;mcc_generated_files/pin_manager.c: 108:     IOCCNbits.IOCCN0 = 0;
  5950  0E82  1018               	bcf	24,0	;volatile
  5951  0E83                     l2659:	
  5952                           
  5953                           ;mcc_generated_files/pin_manager.c: 110:     IOCCPbits.IOCCP0 = 1;
  5954  0E83  1417               	bsf	23,0	;volatile
  5955  0E84                     l2661:	
  5956                           
  5957                           ;mcc_generated_files/pin_manager.c: 114:     IOCCF0_SetInterruptHandler( TripTurnSignal 
      +                          );
  5958  0E84  3023               	movlw	low _TripTurnSignal
  5959  0E85  0020               	movlb	0	; select bank0
  5960  0E86  00A0               	movwf	IOCCF0_SetInterruptHandler@InterruptHandler
  5961  0E87  300D               	movlw	high _TripTurnSignal
  5962  0E88  00A1               	movwf	IOCCF0_SetInterruptHandler@InterruptHandler+1
  5963  0E89  318C  249B  318E   	fcall	_IOCCF0_SetInterruptHandler
  5964  0E8C                     l2663:	
  5965                           
  5966                           ;mcc_generated_files/pin_manager.c: 116:     PIE0bits.IOCIE = 1;
  5967  0E8C  0021               	movlb	1	; select bank1
  5968  0E8D  1610               	bsf	16,4	;volatile
  5969  0E8E                     l109:	
  5970  0E8E  0008               	return
  5971  0E8F                     __end_of_PIN_MANAGER_Initialize:	
  5972                           
  5973                           	psect	text9
  5974  0C9B                     __ptext9:	
  5975 ;; *************** function _IOCCF0_SetInterruptHandler *****************
  5976 ;; Defined at:
  5977 ;;		line 147 in file "mcc_generated_files/pin_manager.c"
  5978 ;; Parameters:    Size  Location     Type
  5979 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5980 ;;		 -> TripTurnSignal(1), 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;		None
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      void 
  5985 ;; Registers used:
  5986 ;;		wreg
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5992 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5995 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5996 ;;Total ram usage:        2 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    6
  5999 ;; This function calls:
  6000 ;;		Nothing
  6001 ;; This function is called by:
  6002 ;;		_PIN_MANAGER_Initialize
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           
  6007                           ;psect for function _IOCCF0_SetInterruptHandler
  6008  0C9B                     _IOCCF0_SetInterruptHandler:	
  6009  0C9B                     l2609:	
  6010                           ;incstack = 0
  6011                           ; Regs used in _IOCCF0_SetInterruptHandler: [wreg]
  6012                           
  6013                           
  6014                           ;mcc_generated_files/pin_manager.c: 148:     IOCCF0_InterruptHandler = InterruptHandler;
  6015  0C9B  0020               	movlb	0	; select bank0
  6016  0C9C  0821               	movf	IOCCF0_SetInterruptHandler@InterruptHandler+1,w
  6017  0C9D  00FA               	movwf	_IOCCF0_InterruptHandler+1
  6018  0C9E  0820               	movf	IOCCF0_SetInterruptHandler@InterruptHandler,w
  6019  0C9F  00F9               	movwf	_IOCCF0_InterruptHandler
  6020  0CA0                     l120:	
  6021  0CA0  0008               	return
  6022  0CA1                     __end_of_IOCCF0_SetInterruptHandler:	
  6023                           
  6024                           	psect	text10
  6025  0CB2                     __ptext10:	
  6026 ;; *************** function _OSCILLATOR_Initialize *****************
  6027 ;; Defined at:
  6028 ;;		line 60 in file "mcc_generated_files/mcc.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;		None
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;		None
  6033 ;; Return value:  Size  Location     Type
  6034 ;;                  1    wreg      void 
  6035 ;; Registers used:
  6036 ;;		wreg, status,2
  6037 ;; Tracked objects:
  6038 ;;		On entry : 0/0
  6039 ;;		On exit  : 0/0
  6040 ;;		Unchanged: 0/0
  6041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6046 ;;Total ram usage:        0 bytes
  6047 ;; Hardware stack levels used:    1
  6048 ;; Hardware stack levels required when called:    6
  6049 ;; This function calls:
  6050 ;;		Nothing
  6051 ;; This function is called by:
  6052 ;;		_SYSTEM_Initialize
  6053 ;; This function uses a non-reentrant model
  6054 ;;
  6055                           
  6056                           
  6057                           ;psect for function _OSCILLATOR_Initialize
  6058  0CB2                     _OSCILLATOR_Initialize:	
  6059  0CB2                     l2665:	
  6060                           ;incstack = 0
  6061                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6062                           
  6063                           
  6064                           ;mcc_generated_files/mcc.c: 63:     OSCCON1 = 0x62;
  6065  0CB2  3062               	movlw	98
  6066  0CB3  0032               	movlb	18	; select bank18
  6067  0CB4  0099               	movwf	25	;volatile
  6068  0CB5                     l2667:	
  6069                           
  6070                           ;mcc_generated_files/mcc.c: 65:     OSCCON3 = 0x00;
  6071  0CB5  019B               	clrf	27	;volatile
  6072  0CB6                     l2669:	
  6073                           
  6074                           ;mcc_generated_files/mcc.c: 67:     OSCEN = 0x00;
  6075  0CB6  019D               	clrf	29	;volatile
  6076                           
  6077                           ;mcc_generated_files/mcc.c: 69:     OSCFRQ = 0x03;
  6078  0CB7  3003               	movlw	3
  6079  0CB8  009F               	movwf	31	;volatile
  6080  0CB9                     l2671:	
  6081                           
  6082                           ;mcc_generated_files/mcc.c: 71:     OSCTUNE = 0x00;
  6083  0CB9  019E               	clrf	30	;volatile
  6084  0CBA                     l48:	
  6085  0CBA  0008               	return
  6086  0CBB                     __end_of_OSCILLATOR_Initialize:	
  6087                           
  6088                           	psect	text11
  6089  0487                     __ptext11:	
  6090 ;; *************** function _InitPatternSelector *****************
  6091 ;; Defined at:
  6092 ;;		line 3 in file "PatternSelector.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;  p_selector      2   59[BANK0 ] PTR volatile struct Patt
  6095 ;;		 -> pattern_selector(19), 
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;  i               2   65[BANK0 ] int 
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  1    wreg      void 
  6100 ;; Registers used:
  6101 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6107 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6108 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6109 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6110 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6111 ;;Total ram usage:        8 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:   10
  6114 ;; This function calls:
  6115 ;;		_EEPROM_GetSavedPattern
  6116 ;;		_InitLowerPattern
  6117 ;;		_InitUpperLowerPattern
  6118 ;;		_InitWigwagPattern
  6119 ;;		_InitXStrobePattern
  6120 ;;		_NewPattern
  6121 ;; This function is called by:
  6122 ;;		_setup
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           
  6127                           ;psect for function _InitPatternSelector
  6128  0487                     _InitPatternSelector:	
  6129  0487                     l2751:	
  6130                           ;incstack = 0
  6131                           ; Regs used in _InitPatternSelector: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6132                           
  6133                           
  6134                           ;PatternSelector.c: 3: void InitPatternSelector( struct PatternSelector* p_selector );Pa
      +                          tternSelector.c: 4: {;PatternSelector.c: 6:     for ( int i = 0; i < MAX_PATTERNS; i++ )
  6135  0487  0020               	movlb	0	; select bank0
  6136  0488  01E1               	clrf	InitPatternSelector@i
  6137  0489  01E2               	clrf	InitPatternSelector@i+1
  6138  048A                     l2757:	
  6139                           
  6140                           ;PatternSelector.c: 7:     {;PatternSelector.c: 8:         p_selector->patterns[i] = New
      +                          Pattern();
  6141  048A  318F  2783  3184   	fcall	_NewPattern
  6142  048D  0020               	movlb	0	; select bank0
  6143  048E  0862               	movf	InitPatternSelector@i+1,w
  6144  048F  00DE               	movwf	??_InitPatternSelector+1
  6145  0490  0861               	movf	InitPatternSelector@i,w
  6146  0491  00DD               	movwf	??_InitPatternSelector
  6147  0492  35DD               	lslf	??_InitPatternSelector,f
  6148  0493  0DDE               	rlf	??_InitPatternSelector+1,f
  6149  0494  085D               	movf	??_InitPatternSelector,w
  6150  0495  075B               	addwf	InitPatternSelector@p_selector,w
  6151  0496  0086               	movwf	6
  6152  0497  085E               	movf	??_InitPatternSelector+1,w
  6153  0498  3D5C               	addwfc	InitPatternSelector@p_selector+1,w
  6154  0499  0087               	movwf	7
  6155  049A  0828               	movf	?_NewPattern,w
  6156  049B  3FC0               	movwi [0]fsr1
  6157  049C  0829               	movf	?_NewPattern+1,w
  6158  049D  3FC1               	movwi [1]fsr1
  6159  049E                     l2759:	
  6160                           
  6161                           ;PatternSelector.c: 9:     }
  6162  049E  3001               	movlw	1
  6163  049F  07E1               	addwf	InitPatternSelector@i,f
  6164  04A0  3000               	movlw	0
  6165  04A1  3DE2               	addwfc	InitPatternSelector@i+1,f
  6166  04A2                     l2761:	
  6167  04A2  0862               	movf	InitPatternSelector@i+1,w
  6168  04A3  3A80               	xorlw	128
  6169  04A4  00DD               	movwf	??_InitPatternSelector
  6170  04A5  3080               	movlw	128
  6171  04A6  025D               	subwf	??_InitPatternSelector,w
  6172  04A7  1D03               	skipz
  6173  04A8  2CAB               	goto	u1615
  6174  04A9  3006               	movlw	6
  6175  04AA  0261               	subwf	InitPatternSelector@i,w
  6176  04AB                     u1615:	
  6177  04AB  1C03               	skipc
  6178  04AC  2CAE               	goto	u1611
  6179  04AD  2CAF               	goto	u1610
  6180  04AE                     u1611:	
  6181  04AE  2C8A               	goto	l2757
  6182  04AF                     u1610:	
  6183  04AF                     l2763:	
  6184                           
  6185                           ;PatternSelector.c: 10:     p_selector->active = EEPROM_GetSavedPattern();
  6186  04AF  318D  25F7  3184   	fcall	_EEPROM_GetSavedPattern
  6187  04B2  0020               	movlb	0	; select bank0
  6188  04B3  00DD               	movwf	??_InitPatternSelector
  6189  04B4  085B               	movf	InitPatternSelector@p_selector,w
  6190  04B5  3E0C               	addlw	12
  6191  04B6  00DE               	movwf	??_InitPatternSelector+1
  6192  04B7  3000               	movlw	0
  6193  04B8  3D5C               	addwfc	InitPatternSelector@p_selector+1,w
  6194  04B9  00DF               	movwf	??_InitPatternSelector+2
  6195  04BA  085E               	movf	??_InitPatternSelector+1,w
  6196  04BB  0086               	movwf	6
  6197  04BC  085F               	movf	??_InitPatternSelector+2,w
  6198  04BD  0087               	movwf	7
  6199  04BE  085D               	movf	??_InitPatternSelector,w
  6200  04BF  0081               	movwf	1
  6201  04C0                     l2765:	
  6202                           
  6203                           ;PatternSelector.c: 12:     InitWigwagPattern( p_selector->patterns[WIGWAG] );
  6204  04C0  085B               	movf	InitPatternSelector@p_selector,w
  6205  04C1  0086               	movwf	6
  6206  04C2  085C               	movf	InitPatternSelector@p_selector+1,w
  6207  04C3  0087               	movwf	7
  6208  04C4  3F40               	moviw [0]fsr1
  6209  04C5  00C4               	movwf	InitWigwagPattern@pattern
  6210  04C6  3F41               	moviw [1]fsr1
  6211  04C7  00C5               	movwf	InitWigwagPattern@pattern+1
  6212  04C8  3183  237E  3184   	fcall	_InitWigwagPattern
  6213  04CB                     l2767:	
  6214                           
  6215                           ;PatternSelector.c: 13:     InitXStrobePattern( p_selector->patterns[XSTROBE] );
  6216  04CB  0020               	movlb	0	; select bank0
  6217  04CC  085B               	movf	InitPatternSelector@p_selector,w
  6218  04CD  0086               	movwf	6
  6219  04CE  085C               	movf	InitPatternSelector@p_selector+1,w
  6220  04CF  0087               	movwf	7
  6221  04D0  3142               	addfsr 1,2
  6222  04D1  3F40               	moviw [0]fsr1
  6223  04D2  00C4               	movwf	InitXStrobePattern@pattern
  6224  04D3  3F41               	moviw [1]fsr1
  6225  04D4  00C5               	movwf	InitXStrobePattern@pattern+1
  6226  04D5  3180  2060  3184   	fcall	_InitXStrobePattern
  6227  04D8                     l2769:	
  6228                           
  6229                           ;PatternSelector.c: 14:     InitUpperLowerPattern( p_selector->patterns[UPPER_LOWER] );
  6230  04D8  0020               	movlb	0	; select bank0
  6231  04D9  085B               	movf	InitPatternSelector@p_selector,w
  6232  04DA  0086               	movwf	6
  6233  04DB  085C               	movf	InitPatternSelector@p_selector+1,w
  6234  04DC  0087               	movwf	7
  6235  04DD  3144               	addfsr 1,4
  6236  04DE  3F40               	moviw [0]fsr1
  6237  04DF  00C4               	movwf	InitUpperLowerPattern@pattern
  6238  04E0  3F41               	moviw [1]fsr1
  6239  04E1  00C5               	movwf	InitUpperLowerPattern@pattern+1
  6240  04E2  3181  216A  3184   	fcall	_InitUpperLowerPattern
  6241  04E5                     l2771:	
  6242                           
  6243                           ;PatternSelector.c: 15:     InitLowerPattern( p_selector->patterns[LOWER] );
  6244  04E5  0020               	movlb	0	; select bank0
  6245  04E6  085B               	movf	InitPatternSelector@p_selector,w
  6246  04E7  0086               	movwf	6
  6247  04E8  085C               	movf	InitPatternSelector@p_selector+1,w
  6248  04E9  0087               	movwf	7
  6249  04EA  3146               	addfsr 1,6
  6250  04EB  3F40               	moviw [0]fsr1
  6251  04EC  00C4               	movwf	InitLowerPattern@pattern
  6252  04ED  3F41               	moviw [1]fsr1
  6253  04EE  00C5               	movwf	InitLowerPattern@pattern+1
  6254  04EF  3182  2274  3184   	fcall	_InitLowerPattern
  6255  04F2                     l2773:	
  6256                           
  6257                           ;PatternSelector.c: 16:     p_selector->current_stage = p_selector->patterns[ p_selector
      +                          ->active ]->first_stage;
  6258  04F2  0020               	movlb	0	; select bank0
  6259  04F3  085B               	movf	InitPatternSelector@p_selector,w
  6260  04F4  0086               	movwf	6
  6261  04F5  085C               	movf	InitPatternSelector@p_selector+1,w
  6262  04F6  0087               	movwf	7
  6263  04F7  314C               	addfsr 1,12
  6264  04F8  0801               	movf	1,w
  6265  04F9  00DD               	movwf	??_InitPatternSelector
  6266  04FA  01DE               	clrf	??_InitPatternSelector+1
  6267  04FB  35DD               	lslf	??_InitPatternSelector,f
  6268  04FC  0DDE               	rlf	??_InitPatternSelector+1,f
  6269  04FD  085D               	movf	??_InitPatternSelector,w
  6270  04FE  075B               	addwf	InitPatternSelector@p_selector,w
  6271  04FF  0086               	movwf	6
  6272  0500  085E               	movf	??_InitPatternSelector+1,w
  6273  0501  3D5C               	addwfc	InitPatternSelector@p_selector+1,w
  6274  0502  0087               	movwf	7
  6275  0503  3F40               	moviw [0]fsr1
  6276  0504  00DF               	movwf	??_InitPatternSelector+2
  6277  0505  3F41               	moviw [1]fsr1
  6278  0506  00E0               	movwf	??_InitPatternSelector+3
  6279  0507  085F               	movf	??_InitPatternSelector+2,w
  6280  0508  0086               	movwf	6
  6281  0509  0860               	movf	??_InitPatternSelector+3,w
  6282  050A  0087               	movwf	7
  6283  050B  3141               	addfsr 1,1
  6284  050C  085B               	movf	InitPatternSelector@p_selector,w
  6285  050D  0084               	movwf	4
  6286  050E  085C               	movf	InitPatternSelector@p_selector+1,w
  6287  050F  0085               	movwf	5
  6288  0510  310D               	addfsr 0,13
  6289  0511  3F40               	moviw [0]fsr1
  6290  0512  3F80               	movwi [0]fsr0
  6291  0513  3F41               	moviw [1]fsr1
  6292  0514  3F81               	movwi [1]fsr0
  6293  0515                     l2775:	
  6294                           
  6295                           ;PatternSelector.c: 18:     p_selector->start_time = 0;
  6296  0515  085B               	movf	InitPatternSelector@p_selector,w
  6297  0516  3E0F               	addlw	15
  6298  0517  00DD               	movwf	??_InitPatternSelector
  6299  0518  3000               	movlw	0
  6300  0519  3D5C               	addwfc	InitPatternSelector@p_selector+1,w
  6301  051A  00DE               	movwf	??_InitPatternSelector+1
  6302  051B  085D               	movf	??_InitPatternSelector,w
  6303  051C  0086               	movwf	6
  6304  051D  085E               	movf	??_InitPatternSelector+1,w
  6305  051E  0087               	movwf	7
  6306  051F  3000               	movlw	0
  6307  0520  3FC0               	movwi [0]fsr1
  6308  0521  3FC1               	movwi [1]fsr1
  6309  0522  3FC2               	movwi [2]fsr1
  6310  0523  3FC3               	movwi [3]fsr1
  6311  0524                     l302:	
  6312  0524  0008               	return
  6313  0525                     __end_of_InitPatternSelector:	
  6314                           
  6315                           	psect	text12
  6316  0F83                     __ptext12:	
  6317 ;; *************** function _NewPattern *****************
  6318 ;; Defined at:
  6319 ;;		line 36 in file "Pattern.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;		None
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;  new_pattern     2   21[BANK0 ] PTR struct Pattern
  6324 ;;		 -> pattern_stash(18), 
  6325 ;; Return value:  Size  Location     Type
  6326 ;;                  2    8[BANK0 ] PTR struct Pattern
  6327 ;; Registers used:
  6328 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;Total ram usage:        4 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    8
  6341 ;; This function calls:
  6342 ;;		_NewStage
  6343 ;;		___wmul
  6344 ;; This function is called by:
  6345 ;;		_InitPatternSelector
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           
  6350                           ;psect for function _NewPattern
  6351  0F83                     _NewPattern:	
  6352  0F83                     l2687:	
  6353                           ;incstack = 0
  6354                           ; Regs used in _NewPattern: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6355                           
  6356                           
  6357                           ;Pattern.c: 38:     if ( pattern_list_iter >= MAX_PATTERNS )
  6358  0F83  3000               	movlw	0
  6359  0F84  0020               	movlb	0	; select bank0
  6360  0F85  0269               	subwf	_pattern_list_iter+1,w
  6361  0F86  3006               	movlw	6
  6362  0F87  1903               	skipnz
  6363  0F88  0268               	subwf	_pattern_list_iter,w
  6364  0F89  1C03               	skipc
  6365  0F8A  2F8C               	goto	u1521
  6366  0F8B  2F8D               	goto	u1520
  6367  0F8C                     u1521:	
  6368  0F8C  2F90               	goto	l2693
  6369  0F8D                     u1520:	
  6370  0F8D                     l2689:	
  6371                           
  6372                           ;Pattern.c: 39:     {;Pattern.c: 40:         return ((void*)0);
  6373  0F8D  01A8               	clrf	?_NewPattern
  6374  0F8E  01A9               	clrf	?_NewPattern+1
  6375  0F8F  2FC0               	goto	l421
  6376  0F90                     l2693:	
  6377                           
  6378                           ;Pattern.c: 42:     struct Pattern* new_pattern = &pattern_stash[ pattern_list_iter++ ];
  6379  0F90  0869               	movf	_pattern_list_iter+1,w
  6380  0F91  00A1               	movwf	___wmul@multiplier+1
  6381  0F92  0868               	movf	_pattern_list_iter,w
  6382  0F93  00A0               	movwf	___wmul@multiplier
  6383  0F94  3003               	movlw	3
  6384  0F95  00A2               	movwf	___wmul@multiplicand
  6385  0F96  3000               	movlw	0
  6386  0F97  00A3               	movwf	___wmul@multiplicand+1
  6387  0F98  318D  25B7  318F   	fcall	___wmul
  6388  0F9B  30BB               	movlw	low _pattern_stash
  6389  0F9C  0020               	movlb	0	; select bank0
  6390  0F9D  00B3               	movwf	??_NewPattern
  6391  0F9E  3000               	movlw	high _pattern_stash
  6392  0F9F  00B4               	movwf	??_NewPattern+1
  6393  0FA0  0820               	movf	?___wmul,w
  6394  0FA1  0733               	addwf	??_NewPattern,w
  6395  0FA2  00B5               	movwf	NewPattern@new_pattern
  6396  0FA3  0821               	movf	?___wmul+1,w
  6397  0FA4  3D34               	addwfc	??_NewPattern+1,w
  6398  0FA5  00B6               	movwf	NewPattern@new_pattern+1
  6399  0FA6                     l2695:	
  6400  0FA6  3001               	movlw	1
  6401  0FA7  07E8               	addwf	_pattern_list_iter,f
  6402  0FA8  3000               	movlw	0
  6403  0FA9  3DE9               	addwfc	_pattern_list_iter+1,f
  6404  0FAA                     l2697:	
  6405                           
  6406                           ;Pattern.c: 43:     new_pattern->name = WIGWAG;
  6407  0FAA  0835               	movf	NewPattern@new_pattern,w
  6408  0FAB  0086               	movwf	6
  6409  0FAC  0836               	movf	NewPattern@new_pattern+1,w
  6410  0FAD  0087               	movwf	7
  6411  0FAE  0181               	clrf	1
  6412  0FAF                     l2699:	
  6413                           
  6414                           ;Pattern.c: 44:     new_pattern->first_stage = NewStage();
  6415  0FAF  3187  278E  318F   	fcall	_NewStage
  6416  0FB2  0020               	movlb	0	; select bank0
  6417  0FB3  0835               	movf	NewPattern@new_pattern,w
  6418  0FB4  0086               	movwf	6
  6419  0FB5  0836               	movf	NewPattern@new_pattern+1,w
  6420  0FB6  0087               	movwf	7
  6421  0FB7  3141               	addfsr 1,1
  6422  0FB8  0820               	movf	?_NewStage,w
  6423  0FB9  3FC0               	movwi [0]fsr1
  6424  0FBA  0821               	movf	?_NewStage+1,w
  6425  0FBB  3FC1               	movwi [1]fsr1
  6426  0FBC                     l2701:	
  6427                           
  6428                           ;Pattern.c: 46:     return new_pattern;
  6429  0FBC  0836               	movf	NewPattern@new_pattern+1,w
  6430  0FBD  00A9               	movwf	?_NewPattern+1
  6431  0FBE  0835               	movf	NewPattern@new_pattern,w
  6432  0FBF  00A8               	movwf	?_NewPattern
  6433  0FC0                     l421:	
  6434  0FC0  0008               	return
  6435  0FC1                     __end_of_NewPattern:	
  6436                           
  6437                           	psect	text13
  6438  0DB7                     __ptext13:	
  6439 ;; *************** function ___wmul *****************
  6440 ;; Defined at:
  6441 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6444 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;  product         2    4[BANK0 ] unsigned int 
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  2    0[BANK0 ] unsigned int 
  6449 ;; Registers used:
  6450 ;;		wreg, status,2, status,0
  6451 ;; Tracked objects:
  6452 ;;		On entry : 0/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6456 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6457 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;Total ram usage:        6 bytes
  6461 ;; Hardware stack levels used:    1
  6462 ;; Hardware stack levels required when called:    6
  6463 ;; This function calls:
  6464 ;;		Nothing
  6465 ;; This function is called by:
  6466 ;;		_NewPattern
  6467 ;; This function uses a non-reentrant model
  6468 ;;
  6469                           
  6470                           
  6471                           ;psect for function ___wmul
  6472  0DB7                     ___wmul:	
  6473  0DB7                     l2617:	
  6474                           ;incstack = 0
  6475                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6476                           
  6477  0DB7  0020               	movlb	0	; select bank0
  6478  0DB8  01A4               	clrf	___wmul@product
  6479  0DB9  01A5               	clrf	___wmul@product+1
  6480  0DBA                     l2619:	
  6481  0DBA  1C20               	btfss	___wmul@multiplier,0
  6482  0DBB  2DBD               	goto	u1481
  6483  0DBC  2DBE               	goto	u1480
  6484  0DBD                     u1481:	
  6485  0DBD  2DC2               	goto	l732
  6486  0DBE                     u1480:	
  6487  0DBE                     l2621:	
  6488  0DBE  0822               	movf	___wmul@multiplicand,w
  6489  0DBF  07A4               	addwf	___wmul@product,f
  6490  0DC0  0823               	movf	___wmul@multiplicand+1,w
  6491  0DC1  3DA5               	addwfc	___wmul@product+1,f
  6492  0DC2                     l732:	
  6493  0DC2  3001               	movlw	1
  6494  0DC3                     u1495:	
  6495  0DC3  35A2               	lslf	___wmul@multiplicand,f
  6496  0DC4  0DA3               	rlf	___wmul@multiplicand+1,f
  6497  0DC5  0B89               	decfsz	9,f
  6498  0DC6  2DC3               	goto	u1495
  6499  0DC7                     l2623:	
  6500  0DC7  3001               	movlw	1
  6501  0DC8                     u1505:	
  6502  0DC8  36A1               	lsrf	___wmul@multiplier+1,f
  6503  0DC9  0CA0               	rrf	___wmul@multiplier,f
  6504  0DCA  0B89               	decfsz	9,f
  6505  0DCB  2DC8               	goto	u1505
  6506  0DCC                     l2625:	
  6507  0DCC  0820               	movf	___wmul@multiplier,w
  6508  0DCD  0421               	iorwf	___wmul@multiplier+1,w
  6509  0DCE  1D03               	btfss	3,2
  6510  0DCF  2DD1               	goto	u1511
  6511  0DD0  2DD2               	goto	u1510
  6512  0DD1                     u1511:	
  6513  0DD1  2DBA               	goto	l2619
  6514  0DD2                     u1510:	
  6515  0DD2                     l2627:	
  6516  0DD2  0825               	movf	___wmul@product+1,w
  6517  0DD3  00A1               	movwf	?___wmul+1
  6518  0DD4  0824               	movf	___wmul@product,w
  6519  0DD5  00A0               	movwf	?___wmul
  6520  0DD6                     l734:	
  6521  0DD6  0008               	return
  6522  0DD7                     __end_of___wmul:	
  6523                           
  6524                           	psect	text14
  6525  0060                     __ptext14:	
  6526 ;; *************** function _InitXStrobePattern *****************
  6527 ;; Defined at:
  6528 ;;		line 118 in file "Pattern.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;  pattern         2   36[BANK0 ] PTR struct Pattern
  6531 ;;		 -> pattern_stash(18), NULL(0), 
  6532 ;; Auto vars:     Size  Location     Type
  6533 ;;  i               2   53[BANK0 ] int 
  6534 ;;  i               2   51[BANK0 ] int 
  6535 ;;  diag_2_3_sta    4   43[BANK0 ] _Bool [4]
  6536 ;;  diag_1_4_sta    4   39[BANK0 ] _Bool [4]
  6537 ;;  head            2   57[BANK0 ] PTR struct Stage
  6538 ;;		 -> stage_stash(768), NULL(0), 
  6539 ;;  off             2   55[BANK0 ] PTR struct Stage
  6540 ;;		 -> stage_stash(768), NULL(0), 
  6541 ;;  diag_2_3        2   49[BANK0 ] PTR struct Stage
  6542 ;;		 -> stage_stash(768), NULL(0), 
  6543 ;;  diag_1_4        2   47[BANK0 ] PTR struct Stage
  6544 ;;		 -> stage_stash(768), NULL(0), 
  6545 ;; Return value:  Size  Location     Type
  6546 ;;                  1    wreg      void 
  6547 ;; Registers used:
  6548 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6549 ;; Tracked objects:
  6550 ;;		On entry : 0/0
  6551 ;;		On exit  : 0/0
  6552 ;;		Unchanged: 0/0
  6553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6554 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;Total ram usage:       23 bytes
  6559 ;; Hardware stack levels used:    1
  6560 ;; Hardware stack levels required when called:    9
  6561 ;; This function calls:
  6562 ;;		_AppendStage
  6563 ;;		_ConstructStage
  6564 ;;		_CopyStageData
  6565 ;;		_NewStage
  6566 ;; This function is called by:
  6567 ;;		_InitPatternSelector
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           
  6572                           ;psect for function _InitXStrobePattern
  6573  0060                     _InitXStrobePattern:	
  6574  0060                     l2171:	
  6575                           ;incstack = 0
  6576                           ; Regs used in _InitXStrobePattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6577                           
  6578                           
  6579                           ;Pattern.c: 118: void InitXStrobePattern( struct Pattern* pattern );Pattern.c: 119: {;Pa
      +                          ttern.c: 120:     pattern->name = XSTROBE;
  6580  0060  0020               	movlb	0	; select bank0
  6581  0061  0844               	movf	InitXStrobePattern@pattern,w
  6582  0062  0086               	movwf	6
  6583  0063  0845               	movf	InitXStrobePattern@pattern+1,w
  6584  0064  0087               	movwf	7
  6585  0065  3001               	movlw	1
  6586  0066  0081               	movwf	1
  6587  0067                     l2173:	
  6588                           
  6589                           ;Pattern.c: 123:     _Bool diag_1_4_states[NUM_LIGHTS] = { 1, 0, 0, 1 };
  6590  0067  0021               	movlb	1	; select bank1
  6591  0068  0864               	movf	(InitXStrobePattern@F450+3)^(0+128),w
  6592  0069  0020               	movlb	0	; select bank0
  6593  006A  00CA               	movwf	InitXStrobePattern@diag_1_4_states+3
  6594  006B  0021               	movlb	1	; select bank1
  6595  006C  0863               	movf	(InitXStrobePattern@F450+2)^(0+128),w
  6596  006D  0020               	movlb	0	; select bank0
  6597  006E  00C9               	movwf	InitXStrobePattern@diag_1_4_states+2
  6598  006F  0021               	movlb	1	; select bank1
  6599  0070  0862               	movf	(InitXStrobePattern@F450+1)^(0+128),w
  6600  0071  0020               	movlb	0	; select bank0
  6601  0072  00C8               	movwf	InitXStrobePattern@diag_1_4_states+1
  6602  0073  0021               	movlb	1	; select bank1
  6603  0074  0861               	movf	InitXStrobePattern@F450^(0+128),w
  6604  0075  0020               	movlb	0	; select bank0
  6605  0076  00C7               	movwf	InitXStrobePattern@diag_1_4_states
  6606  0077                     l2175:	
  6607                           
  6608                           ;Pattern.c: 124:     struct Stage* diag_1_4 = ConstructStage( diag_1_4_states, 60UL, ((v
      +                          oid*)0) );
  6609  0077  303C               	movlw	60
  6610  0078  00B3               	movwf	ConstructStage@time_ms
  6611  0079  3000               	movlw	0
  6612  007A  00B4               	movwf	ConstructStage@time_ms+1
  6613  007B  01B5               	clrf	ConstructStage@next
  6614  007C  3047               	movlw	(low (InitXStrobePattern@diag_1_4_states| 0))& (0+255)
  6615  007D  318E  26BB  3180   	fcall	_ConstructStage
  6616  0080  0020               	movlb	0	; select bank0
  6617  0081  0834               	movf	?_ConstructStage+1,w
  6618  0082  00D0               	movwf	InitXStrobePattern@diag_1_4+1
  6619  0083  0833               	movf	?_ConstructStage,w
  6620  0084  00CF               	movwf	InitXStrobePattern@diag_1_4
  6621  0085                     l2177:	
  6622                           
  6623                           ;Pattern.c: 126:     _Bool diag_2_3_states[NUM_LIGHTS] = { 0, 1, 1, 0 };
  6624  0085  0021               	movlb	1	; select bank1
  6625  0086  0860               	movf	(InitXStrobePattern@F453+3)^(0+128),w
  6626  0087  0020               	movlb	0	; select bank0
  6627  0088  00CE               	movwf	InitXStrobePattern@diag_2_3_states+3
  6628  0089  0021               	movlb	1	; select bank1
  6629  008A  085F               	movf	(InitXStrobePattern@F453+2)^(0+128),w
  6630  008B  0020               	movlb	0	; select bank0
  6631  008C  00CD               	movwf	InitXStrobePattern@diag_2_3_states+2
  6632  008D  0021               	movlb	1	; select bank1
  6633  008E  085E               	movf	(InitXStrobePattern@F453+1)^(0+128),w
  6634  008F  0020               	movlb	0	; select bank0
  6635  0090  00CC               	movwf	InitXStrobePattern@diag_2_3_states+1
  6636  0091  0021               	movlb	1	; select bank1
  6637  0092  085D               	movf	InitXStrobePattern@F453^(0+128),w
  6638  0093  0020               	movlb	0	; select bank0
  6639  0094  00CB               	movwf	InitXStrobePattern@diag_2_3_states
  6640  0095                     l2179:	
  6641                           
  6642                           ;Pattern.c: 127:     struct Stage* diag_2_3 = ConstructStage( diag_2_3_states, 60UL, ((v
      +                          oid*)0) );
  6643  0095  303C               	movlw	60
  6644  0096  00B3               	movwf	ConstructStage@time_ms
  6645  0097  3000               	movlw	0
  6646  0098  00B4               	movwf	ConstructStage@time_ms+1
  6647  0099  01B5               	clrf	ConstructStage@next
  6648  009A  304B               	movlw	(low (InitXStrobePattern@diag_2_3_states| 0))& (0+255)
  6649  009B  318E  26BB  3180   	fcall	_ConstructStage
  6650  009E  0020               	movlb	0	; select bank0
  6651  009F  0834               	movf	?_ConstructStage+1,w
  6652  00A0  00D2               	movwf	InitXStrobePattern@diag_2_3+1
  6653  00A1  0833               	movf	?_ConstructStage,w
  6654  00A2  00D1               	movwf	InitXStrobePattern@diag_2_3
  6655  00A3                     l2181:	
  6656                           
  6657                           ;Pattern.c: 129:     struct Stage* off = NewStage();
  6658  00A3  3187  278E  3180   	fcall	_NewStage
  6659  00A6  0020               	movlb	0	; select bank0
  6660  00A7  0821               	movf	?_NewStage+1,w
  6661  00A8  00D8               	movwf	InitXStrobePattern@off+1
  6662  00A9  0820               	movf	?_NewStage,w
  6663  00AA  00D7               	movwf	InitXStrobePattern@off
  6664  00AB                     l2183:	
  6665                           
  6666                           ;Pattern.c: 131:     struct Stage* head = pattern->first_stage;
  6667  00AB  0844               	movf	InitXStrobePattern@pattern,w
  6668  00AC  0086               	movwf	6
  6669  00AD  0845               	movf	InitXStrobePattern@pattern+1,w
  6670  00AE  0087               	movwf	7
  6671  00AF  3141               	addfsr 1,1
  6672  00B0  3F40               	moviw [0]fsr1
  6673  00B1  00D9               	movwf	InitXStrobePattern@head
  6674  00B2  3F41               	moviw [1]fsr1
  6675  00B3  00DA               	movwf	InitXStrobePattern@head+1
  6676  00B4                     l2185:	
  6677                           
  6678                           ;Pattern.c: 134:     for( int i = 0; i < 3; i++ )
  6679  00B4  01D3               	clrf	InitXStrobePattern@i
  6680  00B5  01D4               	clrf	InitXStrobePattern@i+1
  6681  00B6                     l2191:	
  6682                           
  6683                           ;Pattern.c: 135:     {;Pattern.c: 136:         AppendStage( head, CopyStageData( NewStag
      +                          e(), diag_1_4 ) );
  6684  00B6  0020               	movlb	0	; select bank0
  6685  00B7  085A               	movf	InitXStrobePattern@head+1,w
  6686  00B8  00BD               	movwf	AppendStage@head+1
  6687  00B9  0859               	movf	InitXStrobePattern@head,w
  6688  00BA  00BC               	movwf	AppendStage@head
  6689  00BB  3187  278E  3180   	fcall	_NewStage
  6690  00BE  0020               	movlb	0	; select bank0
  6691  00BF  0821               	movf	?_NewStage+1,w
  6692  00C0  00B4               	movwf	CopyStageData@dest+1
  6693  00C1  0820               	movf	?_NewStage,w
  6694  00C2  00B3               	movwf	CopyStageData@dest
  6695  00C3  0850               	movf	InitXStrobePattern@diag_1_4+1,w
  6696  00C4  00B6               	movwf	CopyStageData@source+1
  6697  00C5  084F               	movf	InitXStrobePattern@diag_1_4,w
  6698  00C6  00B5               	movwf	CopyStageData@source
  6699  00C7  318F  274A  3180   	fcall	_CopyStageData
  6700  00CA  0020               	movlb	0	; select bank0
  6701  00CB  0834               	movf	?_CopyStageData+1,w
  6702  00CC  00BF               	movwf	AppendStage@new_stage+1
  6703  00CD  0833               	movf	?_CopyStageData,w
  6704  00CE  00BE               	movwf	AppendStage@new_stage
  6705  00CF  3187  2736  3180   	fcall	_AppendStage
  6706                           
  6707                           ;Pattern.c: 137:         AppendStage( head, CopyStageData( NewStage(), off ) );
  6708  00D2  0020               	movlb	0	; select bank0
  6709  00D3  085A               	movf	InitXStrobePattern@head+1,w
  6710  00D4  00BD               	movwf	AppendStage@head+1
  6711  00D5  0859               	movf	InitXStrobePattern@head,w
  6712  00D6  00BC               	movwf	AppendStage@head
  6713  00D7  3187  278E  3180   	fcall	_NewStage
  6714  00DA  0020               	movlb	0	; select bank0
  6715  00DB  0821               	movf	?_NewStage+1,w
  6716  00DC  00B4               	movwf	CopyStageData@dest+1
  6717  00DD  0820               	movf	?_NewStage,w
  6718  00DE  00B3               	movwf	CopyStageData@dest
  6719  00DF  0858               	movf	InitXStrobePattern@off+1,w
  6720  00E0  00B6               	movwf	CopyStageData@source+1
  6721  00E1  0857               	movf	InitXStrobePattern@off,w
  6722  00E2  00B5               	movwf	CopyStageData@source
  6723  00E3  318F  274A  3180   	fcall	_CopyStageData
  6724  00E6  0020               	movlb	0	; select bank0
  6725  00E7  0834               	movf	?_CopyStageData+1,w
  6726  00E8  00BF               	movwf	AppendStage@new_stage+1
  6727  00E9  0833               	movf	?_CopyStageData,w
  6728  00EA  00BE               	movwf	AppendStage@new_stage
  6729  00EB  3187  2736  3180   	fcall	_AppendStage
  6730  00EE                     l2193:	
  6731                           
  6732                           ;Pattern.c: 138:     }
  6733  00EE  3001               	movlw	1
  6734  00EF  0020               	movlb	0	; select bank0
  6735  00F0  07D3               	addwf	InitXStrobePattern@i,f
  6736  00F1  3000               	movlw	0
  6737  00F2  3DD4               	addwfc	InitXStrobePattern@i+1,f
  6738  00F3                     l2195:	
  6739  00F3  0854               	movf	InitXStrobePattern@i+1,w
  6740  00F4  3A80               	xorlw	128
  6741  00F5  00C6               	movwf	??_InitXStrobePattern
  6742  00F6  3080               	movlw	128
  6743  00F7  0246               	subwf	??_InitXStrobePattern,w
  6744  00F8  1D03               	skipz
  6745  00F9  28FC               	goto	u1035
  6746  00FA  3003               	movlw	3
  6747  00FB  0253               	subwf	InitXStrobePattern@i,w
  6748  00FC                     u1035:	
  6749  00FC  1C03               	skipc
  6750  00FD  28FF               	goto	u1031
  6751  00FE  2900               	goto	u1030
  6752  00FF                     u1031:	
  6753  00FF  28B6               	goto	l2191
  6754  0100                     u1030:	
  6755  0100                     l2197:	
  6756                           
  6757                           ;Pattern.c: 141:     AppendStage( head, CopyStageData( NewStage(), off ) );
  6758  0100  0020               	movlb	0	; select bank0
  6759  0101  085A               	movf	InitXStrobePattern@head+1,w
  6760  0102  00BD               	movwf	AppendStage@head+1
  6761  0103  0859               	movf	InitXStrobePattern@head,w
  6762  0104  00BC               	movwf	AppendStage@head
  6763  0105  3187  278E  3180   	fcall	_NewStage
  6764  0108  0020               	movlb	0	; select bank0
  6765  0109  0821               	movf	?_NewStage+1,w
  6766  010A  00B4               	movwf	CopyStageData@dest+1
  6767  010B  0820               	movf	?_NewStage,w
  6768  010C  00B3               	movwf	CopyStageData@dest
  6769  010D  0858               	movf	InitXStrobePattern@off+1,w
  6770  010E  00B6               	movwf	CopyStageData@source+1
  6771  010F  0857               	movf	InitXStrobePattern@off,w
  6772  0110  00B5               	movwf	CopyStageData@source
  6773  0111  318F  274A  3180   	fcall	_CopyStageData
  6774  0114  0020               	movlb	0	; select bank0
  6775  0115  0834               	movf	?_CopyStageData+1,w
  6776  0116  00BF               	movwf	AppendStage@new_stage+1
  6777  0117  0833               	movf	?_CopyStageData,w
  6778  0118  00BE               	movwf	AppendStage@new_stage
  6779  0119  3187  2736  3180   	fcall	_AppendStage
  6780  011C                     l2199:	
  6781                           
  6782                           ;Pattern.c: 144:     for( int i = 0; i < 3; i++ )
  6783  011C  0020               	movlb	0	; select bank0
  6784  011D  01D5               	clrf	InitXStrobePattern@i_883
  6785  011E  01D6               	clrf	InitXStrobePattern@i_883+1
  6786  011F                     l2205:	
  6787                           
  6788                           ;Pattern.c: 145:     {;Pattern.c: 146:         AppendStage( head, CopyStageData( NewStag
      +                          e(), diag_2_3 ) );
  6789  011F  0020               	movlb	0	; select bank0
  6790  0120  085A               	movf	InitXStrobePattern@head+1,w
  6791  0121  00BD               	movwf	AppendStage@head+1
  6792  0122  0859               	movf	InitXStrobePattern@head,w
  6793  0123  00BC               	movwf	AppendStage@head
  6794  0124  3187  278E  3180   	fcall	_NewStage
  6795  0127  0020               	movlb	0	; select bank0
  6796  0128  0821               	movf	?_NewStage+1,w
  6797  0129  00B4               	movwf	CopyStageData@dest+1
  6798  012A  0820               	movf	?_NewStage,w
  6799  012B  00B3               	movwf	CopyStageData@dest
  6800  012C  0852               	movf	InitXStrobePattern@diag_2_3+1,w
  6801  012D  00B6               	movwf	CopyStageData@source+1
  6802  012E  0851               	movf	InitXStrobePattern@diag_2_3,w
  6803  012F  00B5               	movwf	CopyStageData@source
  6804  0130  318F  274A  3180   	fcall	_CopyStageData
  6805  0133  0020               	movlb	0	; select bank0
  6806  0134  0834               	movf	?_CopyStageData+1,w
  6807  0135  00BF               	movwf	AppendStage@new_stage+1
  6808  0136  0833               	movf	?_CopyStageData,w
  6809  0137  00BE               	movwf	AppendStage@new_stage
  6810  0138  3187  2736  3180   	fcall	_AppendStage
  6811                           
  6812                           ;Pattern.c: 147:         AppendStage( head, CopyStageData( NewStage(), off ) );
  6813  013B  0020               	movlb	0	; select bank0
  6814  013C  085A               	movf	InitXStrobePattern@head+1,w
  6815  013D  00BD               	movwf	AppendStage@head+1
  6816  013E  0859               	movf	InitXStrobePattern@head,w
  6817  013F  00BC               	movwf	AppendStage@head
  6818  0140  3187  278E  3180   	fcall	_NewStage
  6819  0143  0020               	movlb	0	; select bank0
  6820  0144  0821               	movf	?_NewStage+1,w
  6821  0145  00B4               	movwf	CopyStageData@dest+1
  6822  0146  0820               	movf	?_NewStage,w
  6823  0147  00B3               	movwf	CopyStageData@dest
  6824  0148  0858               	movf	InitXStrobePattern@off+1,w
  6825  0149  00B6               	movwf	CopyStageData@source+1
  6826  014A  0857               	movf	InitXStrobePattern@off,w
  6827  014B  00B5               	movwf	CopyStageData@source
  6828  014C  318F  274A  3180   	fcall	_CopyStageData
  6829  014F  0020               	movlb	0	; select bank0
  6830  0150  0834               	movf	?_CopyStageData+1,w
  6831  0151  00BF               	movwf	AppendStage@new_stage+1
  6832  0152  0833               	movf	?_CopyStageData,w
  6833  0153  00BE               	movwf	AppendStage@new_stage
  6834  0154  3187  2736  3180   	fcall	_AppendStage
  6835  0157                     l2207:	
  6836                           
  6837                           ;Pattern.c: 148:     }
  6838  0157  3001               	movlw	1
  6839  0158  0020               	movlb	0	; select bank0
  6840  0159  07D5               	addwf	InitXStrobePattern@i_883,f
  6841  015A  3000               	movlw	0
  6842  015B  3DD6               	addwfc	InitXStrobePattern@i_883+1,f
  6843  015C                     l2209:	
  6844  015C  0856               	movf	InitXStrobePattern@i_883+1,w
  6845  015D  3A80               	xorlw	128
  6846  015E  00C6               	movwf	??_InitXStrobePattern
  6847  015F  3080               	movlw	128
  6848  0160  0246               	subwf	??_InitXStrobePattern,w
  6849  0161  1D03               	skipz
  6850  0162  2965               	goto	u1045
  6851  0163  3003               	movlw	3
  6852  0164  0255               	subwf	InitXStrobePattern@i_883,w
  6853  0165                     u1045:	
  6854  0165  1C03               	skipc
  6855  0166  2968               	goto	u1041
  6856  0167  2969               	goto	u1040
  6857  0168                     u1041:	
  6858  0168  291F               	goto	l2205
  6859  0169                     u1040:	
  6860  0169                     l459:	
  6861  0169  0008               	return
  6862  016A                     __end_of_InitXStrobePattern:	
  6863                           
  6864                           	psect	text15
  6865  037E                     __ptext15:	
  6866 ;; *************** function _InitWigwagPattern *****************
  6867 ;; Defined at:
  6868 ;;		line 85 in file "Pattern.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;  pattern         2   36[BANK0 ] PTR struct Pattern
  6871 ;;		 -> pattern_stash(18), NULL(0), 
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;  i               2   53[BANK0 ] int 
  6874 ;;  i               2   51[BANK0 ] int 
  6875 ;;  right_side_s    4   43[BANK0 ] _Bool [4]
  6876 ;;  left_side_st    4   39[BANK0 ] _Bool [4]
  6877 ;;  head            2   57[BANK0 ] PTR struct Stage
  6878 ;;		 -> stage_stash(768), NULL(0), 
  6879 ;;  off             2   55[BANK0 ] PTR struct Stage
  6880 ;;		 -> stage_stash(768), NULL(0), 
  6881 ;;  right_side_o    2   49[BANK0 ] PTR struct Stage
  6882 ;;		 -> stage_stash(768), NULL(0), 
  6883 ;;  left_side_on    2   47[BANK0 ] PTR struct Stage
  6884 ;;		 -> stage_stash(768), NULL(0), 
  6885 ;; Return value:  Size  Location     Type
  6886 ;;                  1    wreg      void 
  6887 ;; Registers used:
  6888 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6889 ;; Tracked objects:
  6890 ;;		On entry : 0/0
  6891 ;;		On exit  : 0/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6894 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6895 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;Total ram usage:       23 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:    9
  6901 ;; This function calls:
  6902 ;;		_AppendStage
  6903 ;;		_ConstructStage
  6904 ;;		_CopyStageData
  6905 ;;		_NewStage
  6906 ;; This function is called by:
  6907 ;;		_InitPatternSelector
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           
  6912                           ;psect for function _InitWigwagPattern
  6913  037E                     _InitWigwagPattern:	
  6914  037E                     l2131:	
  6915                           ;incstack = 0
  6916                           ; Regs used in _InitWigwagPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6917                           
  6918                           
  6919                           ;Pattern.c: 85: void InitWigwagPattern( struct Pattern* pattern );Pattern.c: 86: {;Patte
      +                          rn.c: 87:     pattern->name = WIGWAG;
  6920  037E  0020               	movlb	0	; select bank0
  6921  037F  0844               	movf	InitWigwagPattern@pattern,w
  6922  0380  0086               	movwf	6
  6923  0381  0845               	movf	InitWigwagPattern@pattern+1,w
  6924  0382  0087               	movwf	7
  6925  0383  0181               	clrf	1
  6926  0384                     l2133:	
  6927                           
  6928                           ;Pattern.c: 90:     _Bool left_side_states[NUM_LIGHTS] = { 1, 0, 1, 0 };
  6929  0384  0021               	movlb	1	; select bank1
  6930  0385  086C               	movf	(InitWigwagPattern@F438+3)^(0+128),w
  6931  0386  0020               	movlb	0	; select bank0
  6932  0387  00CA               	movwf	InitWigwagPattern@left_side_states+3
  6933  0388  0021               	movlb	1	; select bank1
  6934  0389  086B               	movf	(InitWigwagPattern@F438+2)^(0+128),w
  6935  038A  0020               	movlb	0	; select bank0
  6936  038B  00C9               	movwf	InitWigwagPattern@left_side_states+2
  6937  038C  0021               	movlb	1	; select bank1
  6938  038D  086A               	movf	(InitWigwagPattern@F438+1)^(0+128),w
  6939  038E  0020               	movlb	0	; select bank0
  6940  038F  00C8               	movwf	InitWigwagPattern@left_side_states+1
  6941  0390  0021               	movlb	1	; select bank1
  6942  0391  0869               	movf	InitWigwagPattern@F438^(0+128),w
  6943  0392  0020               	movlb	0	; select bank0
  6944  0393  00C7               	movwf	InitWigwagPattern@left_side_states
  6945  0394                     l2135:	
  6946                           
  6947                           ;Pattern.c: 91:     struct Stage* left_side_on = ConstructStage( left_side_states, 60UL,
      +                           ((void*)0) );
  6948  0394  303C               	movlw	60
  6949  0395  00B3               	movwf	ConstructStage@time_ms
  6950  0396  3000               	movlw	0
  6951  0397  00B4               	movwf	ConstructStage@time_ms+1
  6952  0398  01B5               	clrf	ConstructStage@next
  6953  0399  3047               	movlw	(low (InitWigwagPattern@left_side_states| 0))& (0+255)
  6954  039A  318E  26BB  3183   	fcall	_ConstructStage
  6955  039D  0020               	movlb	0	; select bank0
  6956  039E  0834               	movf	?_ConstructStage+1,w
  6957  039F  00D0               	movwf	InitWigwagPattern@left_side_on+1
  6958  03A0  0833               	movf	?_ConstructStage,w
  6959  03A1  00CF               	movwf	InitWigwagPattern@left_side_on
  6960  03A2                     l2137:	
  6961                           
  6962                           ;Pattern.c: 93:     _Bool right_side_states[NUM_LIGHTS] = { 0, 1, 0, 1 };
  6963  03A2  0021               	movlb	1	; select bank1
  6964  03A3  0868               	movf	(InitWigwagPattern@F441+3)^(0+128),w
  6965  03A4  0020               	movlb	0	; select bank0
  6966  03A5  00CE               	movwf	InitWigwagPattern@right_side_states+3
  6967  03A6  0021               	movlb	1	; select bank1
  6968  03A7  0867               	movf	(InitWigwagPattern@F441+2)^(0+128),w
  6969  03A8  0020               	movlb	0	; select bank0
  6970  03A9  00CD               	movwf	InitWigwagPattern@right_side_states+2
  6971  03AA  0021               	movlb	1	; select bank1
  6972  03AB  0866               	movf	(InitWigwagPattern@F441+1)^(0+128),w
  6973  03AC  0020               	movlb	0	; select bank0
  6974  03AD  00CC               	movwf	InitWigwagPattern@right_side_states+1
  6975  03AE  0021               	movlb	1	; select bank1
  6976  03AF  0865               	movf	InitWigwagPattern@F441^(0+128),w
  6977  03B0  0020               	movlb	0	; select bank0
  6978  03B1  00CB               	movwf	InitWigwagPattern@right_side_states
  6979  03B2                     l2139:	
  6980                           
  6981                           ;Pattern.c: 94:     struct Stage* right_side_on = ConstructStage( right_side_states, 60U
      +                          L, ((void*)0) );
  6982  03B2  303C               	movlw	60
  6983  03B3  00B3               	movwf	ConstructStage@time_ms
  6984  03B4  3000               	movlw	0
  6985  03B5  00B4               	movwf	ConstructStage@time_ms+1
  6986  03B6  01B5               	clrf	ConstructStage@next
  6987  03B7  304B               	movlw	(low (InitWigwagPattern@right_side_states| 0))& (0+255)
  6988  03B8  318E  26BB  3183   	fcall	_ConstructStage
  6989  03BB  0020               	movlb	0	; select bank0
  6990  03BC  0834               	movf	?_ConstructStage+1,w
  6991  03BD  00D2               	movwf	InitWigwagPattern@right_side_on+1
  6992  03BE  0833               	movf	?_ConstructStage,w
  6993  03BF  00D1               	movwf	InitWigwagPattern@right_side_on
  6994  03C0                     l2141:	
  6995                           
  6996                           ;Pattern.c: 96:     struct Stage* off = NewStage();
  6997  03C0  3187  278E  3183   	fcall	_NewStage
  6998  03C3  0020               	movlb	0	; select bank0
  6999  03C4  0821               	movf	?_NewStage+1,w
  7000  03C5  00D8               	movwf	InitWigwagPattern@off+1
  7001  03C6  0820               	movf	?_NewStage,w
  7002  03C7  00D7               	movwf	InitWigwagPattern@off
  7003  03C8                     l2143:	
  7004                           
  7005                           ;Pattern.c: 98:     struct Stage* head = pattern->first_stage;
  7006  03C8  0844               	movf	InitWigwagPattern@pattern,w
  7007  03C9  0086               	movwf	6
  7008  03CA  0845               	movf	InitWigwagPattern@pattern+1,w
  7009  03CB  0087               	movwf	7
  7010  03CC  3141               	addfsr 1,1
  7011  03CD  3F40               	moviw [0]fsr1
  7012  03CE  00D9               	movwf	InitWigwagPattern@head
  7013  03CF  3F41               	moviw [1]fsr1
  7014  03D0  00DA               	movwf	InitWigwagPattern@head+1
  7015  03D1                     l2145:	
  7016                           
  7017                           ;Pattern.c: 101:     for( int i = 0; i < 3; i++ )
  7018  03D1  01D3               	clrf	InitWigwagPattern@i
  7019  03D2  01D4               	clrf	InitWigwagPattern@i+1
  7020  03D3                     l2151:	
  7021                           
  7022                           ;Pattern.c: 102:     {;Pattern.c: 103:         AppendStage( head, CopyStageData( NewStag
      +                          e(), left_side_on ) );
  7023  03D3  0020               	movlb	0	; select bank0
  7024  03D4  085A               	movf	InitWigwagPattern@head+1,w
  7025  03D5  00BD               	movwf	AppendStage@head+1
  7026  03D6  0859               	movf	InitWigwagPattern@head,w
  7027  03D7  00BC               	movwf	AppendStage@head
  7028  03D8  3187  278E  3183   	fcall	_NewStage
  7029  03DB  0020               	movlb	0	; select bank0
  7030  03DC  0821               	movf	?_NewStage+1,w
  7031  03DD  00B4               	movwf	CopyStageData@dest+1
  7032  03DE  0820               	movf	?_NewStage,w
  7033  03DF  00B3               	movwf	CopyStageData@dest
  7034  03E0  0850               	movf	InitWigwagPattern@left_side_on+1,w
  7035  03E1  00B6               	movwf	CopyStageData@source+1
  7036  03E2  084F               	movf	InitWigwagPattern@left_side_on,w
  7037  03E3  00B5               	movwf	CopyStageData@source
  7038  03E4  318F  274A  3183   	fcall	_CopyStageData
  7039  03E7  0020               	movlb	0	; select bank0
  7040  03E8  0834               	movf	?_CopyStageData+1,w
  7041  03E9  00BF               	movwf	AppendStage@new_stage+1
  7042  03EA  0833               	movf	?_CopyStageData,w
  7043  03EB  00BE               	movwf	AppendStage@new_stage
  7044  03EC  3187  2736  3183   	fcall	_AppendStage
  7045                           
  7046                           ;Pattern.c: 104:         AppendStage( head, CopyStageData( NewStage(), off ) );
  7047  03EF  0020               	movlb	0	; select bank0
  7048  03F0  085A               	movf	InitWigwagPattern@head+1,w
  7049  03F1  00BD               	movwf	AppendStage@head+1
  7050  03F2  0859               	movf	InitWigwagPattern@head,w
  7051  03F3  00BC               	movwf	AppendStage@head
  7052  03F4  3187  278E  3183   	fcall	_NewStage
  7053  03F7  0020               	movlb	0	; select bank0
  7054  03F8  0821               	movf	?_NewStage+1,w
  7055  03F9  00B4               	movwf	CopyStageData@dest+1
  7056  03FA  0820               	movf	?_NewStage,w
  7057  03FB  00B3               	movwf	CopyStageData@dest
  7058  03FC  0858               	movf	InitWigwagPattern@off+1,w
  7059  03FD  00B6               	movwf	CopyStageData@source+1
  7060  03FE  0857               	movf	InitWigwagPattern@off,w
  7061  03FF  00B5               	movwf	CopyStageData@source
  7062  0400  318F  274A  3183   	fcall	_CopyStageData
  7063  0403  0020               	movlb	0	; select bank0
  7064  0404  0834               	movf	?_CopyStageData+1,w
  7065  0405  00BF               	movwf	AppendStage@new_stage+1
  7066  0406  0833               	movf	?_CopyStageData,w
  7067  0407  00BE               	movwf	AppendStage@new_stage
  7068  0408  3187  2736  3183   	fcall	_AppendStage
  7069  040B                     l2153:	
  7070                           
  7071                           ;Pattern.c: 105:     }
  7072  040B  3001               	movlw	1
  7073  040C  0020               	movlb	0	; select bank0
  7074  040D  07D3               	addwf	InitWigwagPattern@i,f
  7075  040E  3000               	movlw	0
  7076  040F  3DD4               	addwfc	InitWigwagPattern@i+1,f
  7077  0410                     l2155:	
  7078  0410  0854               	movf	InitWigwagPattern@i+1,w
  7079  0411  3A80               	xorlw	128
  7080  0412  00C6               	movwf	??_InitWigwagPattern
  7081  0413  3080               	movlw	128
  7082  0414  0246               	subwf	??_InitWigwagPattern,w
  7083  0415  1D03               	skipz
  7084  0416  2C19               	goto	u1015
  7085  0417  3003               	movlw	3
  7086  0418  0253               	subwf	InitWigwagPattern@i,w
  7087  0419                     u1015:	
  7088  0419  1C03               	skipc
  7089  041A  2C1C               	goto	u1011
  7090  041B  2C1D               	goto	u1010
  7091  041C                     u1011:	
  7092  041C  2BD3               	goto	l2151
  7093  041D                     u1010:	
  7094  041D                     l2157:	
  7095                           
  7096                           ;Pattern.c: 108:     AppendStage( head, CopyStageData( NewStage(), off ) );
  7097  041D  0020               	movlb	0	; select bank0
  7098  041E  085A               	movf	InitWigwagPattern@head+1,w
  7099  041F  00BD               	movwf	AppendStage@head+1
  7100  0420  0859               	movf	InitWigwagPattern@head,w
  7101  0421  00BC               	movwf	AppendStage@head
  7102  0422  3187  278E  3183   	fcall	_NewStage
  7103  0425  0020               	movlb	0	; select bank0
  7104  0426  0821               	movf	?_NewStage+1,w
  7105  0427  00B4               	movwf	CopyStageData@dest+1
  7106  0428  0820               	movf	?_NewStage,w
  7107  0429  00B3               	movwf	CopyStageData@dest
  7108  042A  0858               	movf	InitWigwagPattern@off+1,w
  7109  042B  00B6               	movwf	CopyStageData@source+1
  7110  042C  0857               	movf	InitWigwagPattern@off,w
  7111  042D  00B5               	movwf	CopyStageData@source
  7112  042E  318F  274A  3183   	fcall	_CopyStageData
  7113  0431  0020               	movlb	0	; select bank0
  7114  0432  0834               	movf	?_CopyStageData+1,w
  7115  0433  00BF               	movwf	AppendStage@new_stage+1
  7116  0434  0833               	movf	?_CopyStageData,w
  7117  0435  00BE               	movwf	AppendStage@new_stage
  7118  0436  3187  2736  3183   	fcall	_AppendStage
  7119  0439                     l2159:	
  7120                           
  7121                           ;Pattern.c: 111:     for( int i = 0; i < 3; i++ )
  7122  0439  0020               	movlb	0	; select bank0
  7123  043A  01D5               	clrf	InitWigwagPattern@i_857
  7124  043B  01D6               	clrf	InitWigwagPattern@i_857+1
  7125  043C                     l2165:	
  7126                           
  7127                           ;Pattern.c: 112:     {;Pattern.c: 113:         AppendStage( head, CopyStageData( NewStag
      +                          e(), right_side_on ) );
  7128  043C  0020               	movlb	0	; select bank0
  7129  043D  085A               	movf	InitWigwagPattern@head+1,w
  7130  043E  00BD               	movwf	AppendStage@head+1
  7131  043F  0859               	movf	InitWigwagPattern@head,w
  7132  0440  00BC               	movwf	AppendStage@head
  7133  0441  3187  278E  3183   	fcall	_NewStage
  7134  0444  0020               	movlb	0	; select bank0
  7135  0445  0821               	movf	?_NewStage+1,w
  7136  0446  00B4               	movwf	CopyStageData@dest+1
  7137  0447  0820               	movf	?_NewStage,w
  7138  0448  00B3               	movwf	CopyStageData@dest
  7139  0449  0852               	movf	InitWigwagPattern@right_side_on+1,w
  7140  044A  00B6               	movwf	CopyStageData@source+1
  7141  044B  0851               	movf	InitWigwagPattern@right_side_on,w
  7142  044C  00B5               	movwf	CopyStageData@source
  7143  044D  318F  274A  3183   	fcall	_CopyStageData
  7144  0450  0020               	movlb	0	; select bank0
  7145  0451  0834               	movf	?_CopyStageData+1,w
  7146  0452  00BF               	movwf	AppendStage@new_stage+1
  7147  0453  0833               	movf	?_CopyStageData,w
  7148  0454  00BE               	movwf	AppendStage@new_stage
  7149  0455  3187  2736  3183   	fcall	_AppendStage
  7150                           
  7151                           ;Pattern.c: 114:         AppendStage( head, CopyStageData( NewStage(), off ) );
  7152  0458  0020               	movlb	0	; select bank0
  7153  0459  085A               	movf	InitWigwagPattern@head+1,w
  7154  045A  00BD               	movwf	AppendStage@head+1
  7155  045B  0859               	movf	InitWigwagPattern@head,w
  7156  045C  00BC               	movwf	AppendStage@head
  7157  045D  3187  278E  3183   	fcall	_NewStage
  7158  0460  0020               	movlb	0	; select bank0
  7159  0461  0821               	movf	?_NewStage+1,w
  7160  0462  00B4               	movwf	CopyStageData@dest+1
  7161  0463  0820               	movf	?_NewStage,w
  7162  0464  00B3               	movwf	CopyStageData@dest
  7163  0465  0858               	movf	InitWigwagPattern@off+1,w
  7164  0466  00B6               	movwf	CopyStageData@source+1
  7165  0467  0857               	movf	InitWigwagPattern@off,w
  7166  0468  00B5               	movwf	CopyStageData@source
  7167  0469  318F  274A  3183   	fcall	_CopyStageData
  7168  046C  0020               	movlb	0	; select bank0
  7169  046D  0834               	movf	?_CopyStageData+1,w
  7170  046E  00BF               	movwf	AppendStage@new_stage+1
  7171  046F  0833               	movf	?_CopyStageData,w
  7172  0470  00BE               	movwf	AppendStage@new_stage
  7173  0471  3187  2736  3183   	fcall	_AppendStage
  7174  0474                     l2167:	
  7175                           
  7176                           ;Pattern.c: 115:     }
  7177  0474  3001               	movlw	1
  7178  0475  0020               	movlb	0	; select bank0
  7179  0476  07D5               	addwf	InitWigwagPattern@i_857,f
  7180  0477  3000               	movlw	0
  7181  0478  3DD6               	addwfc	InitWigwagPattern@i_857+1,f
  7182  0479                     l2169:	
  7183  0479  0856               	movf	InitWigwagPattern@i_857+1,w
  7184  047A  3A80               	xorlw	128
  7185  047B  00C6               	movwf	??_InitWigwagPattern
  7186  047C  3080               	movlw	128
  7187  047D  0246               	subwf	??_InitWigwagPattern,w
  7188  047E  1D03               	skipz
  7189  047F  2C82               	goto	u1025
  7190  0480  3003               	movlw	3
  7191  0481  0255               	subwf	InitWigwagPattern@i_857,w
  7192  0482                     u1025:	
  7193  0482  1C03               	skipc
  7194  0483  2C85               	goto	u1021
  7195  0484  2C86               	goto	u1020
  7196  0485                     u1021:	
  7197  0485  2C3C               	goto	l2165
  7198  0486                     u1020:	
  7199  0486                     l448:	
  7200  0486  0008               	return
  7201  0487                     __end_of_InitWigwagPattern:	
  7202                           
  7203                           	psect	text16
  7204  016A                     __ptext16:	
  7205 ;; *************** function _InitUpperLowerPattern *****************
  7206 ;; Defined at:
  7207 ;;		line 151 in file "Pattern.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;  pattern         2   36[BANK0 ] PTR struct Pattern
  7210 ;;		 -> pattern_stash(18), NULL(0), 
  7211 ;; Auto vars:     Size  Location     Type
  7212 ;;  i               2   53[BANK0 ] int 
  7213 ;;  i               2   51[BANK0 ] int 
  7214 ;;  lower_states    4   43[BANK0 ] _Bool [4]
  7215 ;;  upper_states    4   39[BANK0 ] _Bool [4]
  7216 ;;  head            2   57[BANK0 ] PTR struct Stage
  7217 ;;		 -> stage_stash(768), NULL(0), 
  7218 ;;  off             2   55[BANK0 ] PTR struct Stage
  7219 ;;		 -> stage_stash(768), NULL(0), 
  7220 ;;  lower           2   49[BANK0 ] PTR struct Stage
  7221 ;;		 -> stage_stash(768), NULL(0), 
  7222 ;;  upper           2   47[BANK0 ] PTR struct Stage
  7223 ;;		 -> stage_stash(768), NULL(0), 
  7224 ;; Return value:  Size  Location     Type
  7225 ;;                  1    wreg      void 
  7226 ;; Registers used:
  7227 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7233 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7237 ;;Total ram usage:       23 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:    9
  7240 ;; This function calls:
  7241 ;;		_AppendStage
  7242 ;;		_ConstructStage
  7243 ;;		_CopyStageData
  7244 ;;		_NewStage
  7245 ;; This function is called by:
  7246 ;;		_InitPatternSelector
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250                           
  7251                           ;psect for function _InitUpperLowerPattern
  7252  016A                     _InitUpperLowerPattern:	
  7253  016A                     l2211:	
  7254                           ;incstack = 0
  7255                           ; Regs used in _InitUpperLowerPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7256                           
  7257                           
  7258                           ;Pattern.c: 151: void InitUpperLowerPattern( struct Pattern* pattern );Pattern.c: 152: {
      +                          ;Pattern.c: 153:     pattern->name = UPPER_LOWER;
  7259  016A  0020               	movlb	0	; select bank0
  7260  016B  0844               	movf	InitUpperLowerPattern@pattern,w
  7261  016C  0086               	movwf	6
  7262  016D  0845               	movf	InitUpperLowerPattern@pattern+1,w
  7263  016E  0087               	movwf	7
  7264  016F  3002               	movlw	2
  7265  0170  0081               	movwf	1
  7266  0171                     l2213:	
  7267                           
  7268                           ;Pattern.c: 156:     _Bool upper_states[NUM_LIGHTS] = { 1, 1, 0, 0 };
  7269  0171  0021               	movlb	1	; select bank1
  7270  0172  085C               	movf	(InitUpperLowerPattern@F462+3)^(0+128),w
  7271  0173  0020               	movlb	0	; select bank0
  7272  0174  00CA               	movwf	InitUpperLowerPattern@upper_states+3
  7273  0175  0021               	movlb	1	; select bank1
  7274  0176  085B               	movf	(InitUpperLowerPattern@F462+2)^(0+128),w
  7275  0177  0020               	movlb	0	; select bank0
  7276  0178  00C9               	movwf	InitUpperLowerPattern@upper_states+2
  7277  0179  0021               	movlb	1	; select bank1
  7278  017A  085A               	movf	(InitUpperLowerPattern@F462+1)^(0+128),w
  7279  017B  0020               	movlb	0	; select bank0
  7280  017C  00C8               	movwf	InitUpperLowerPattern@upper_states+1
  7281  017D  0021               	movlb	1	; select bank1
  7282  017E  0859               	movf	InitUpperLowerPattern@F462^(0+128),w
  7283  017F  0020               	movlb	0	; select bank0
  7284  0180  00C7               	movwf	InitUpperLowerPattern@upper_states
  7285  0181                     l2215:	
  7286                           
  7287                           ;Pattern.c: 157:     struct Stage* upper = ConstructStage( upper_states, 60UL, ((void*)0
      +                          ) );
  7288  0181  303C               	movlw	60
  7289  0182  00B3               	movwf	ConstructStage@time_ms
  7290  0183  3000               	movlw	0
  7291  0184  00B4               	movwf	ConstructStage@time_ms+1
  7292  0185  01B5               	clrf	ConstructStage@next
  7293  0186  3047               	movlw	(low (InitUpperLowerPattern@upper_states| 0))& (0+255)
  7294  0187  318E  26BB  3181   	fcall	_ConstructStage
  7295  018A  0020               	movlb	0	; select bank0
  7296  018B  0834               	movf	?_ConstructStage+1,w
  7297  018C  00D0               	movwf	InitUpperLowerPattern@upper+1
  7298  018D  0833               	movf	?_ConstructStage,w
  7299  018E  00CF               	movwf	InitUpperLowerPattern@upper
  7300  018F                     l2217:	
  7301                           
  7302                           ;Pattern.c: 159:     _Bool lower_states[NUM_LIGHTS] = { 0, 0, 1, 1 };
  7303  018F  0021               	movlb	1	; select bank1
  7304  0190  0858               	movf	(InitUpperLowerPattern@F465+3)^(0+128),w
  7305  0191  0020               	movlb	0	; select bank0
  7306  0192  00CE               	movwf	InitUpperLowerPattern@lower_states+3
  7307  0193  0021               	movlb	1	; select bank1
  7308  0194  0857               	movf	(InitUpperLowerPattern@F465+2)^(0+128),w
  7309  0195  0020               	movlb	0	; select bank0
  7310  0196  00CD               	movwf	InitUpperLowerPattern@lower_states+2
  7311  0197  0021               	movlb	1	; select bank1
  7312  0198  0856               	movf	(InitUpperLowerPattern@F465+1)^(0+128),w
  7313  0199  0020               	movlb	0	; select bank0
  7314  019A  00CC               	movwf	InitUpperLowerPattern@lower_states+1
  7315  019B  0021               	movlb	1	; select bank1
  7316  019C  0855               	movf	InitUpperLowerPattern@F465^(0+128),w
  7317  019D  0020               	movlb	0	; select bank0
  7318  019E  00CB               	movwf	InitUpperLowerPattern@lower_states
  7319  019F                     l2219:	
  7320                           
  7321                           ;Pattern.c: 160:     struct Stage* lower = ConstructStage( lower_states, 60UL, ((void*)0
      +                          ) );
  7322  019F  303C               	movlw	60
  7323  01A0  00B3               	movwf	ConstructStage@time_ms
  7324  01A1  3000               	movlw	0
  7325  01A2  00B4               	movwf	ConstructStage@time_ms+1
  7326  01A3  01B5               	clrf	ConstructStage@next
  7327  01A4  304B               	movlw	(low (InitUpperLowerPattern@lower_states| 0))& (0+255)
  7328  01A5  318E  26BB  3181   	fcall	_ConstructStage
  7329  01A8  0020               	movlb	0	; select bank0
  7330  01A9  0834               	movf	?_ConstructStage+1,w
  7331  01AA  00D2               	movwf	InitUpperLowerPattern@lower+1
  7332  01AB  0833               	movf	?_ConstructStage,w
  7333  01AC  00D1               	movwf	InitUpperLowerPattern@lower
  7334  01AD                     l2221:	
  7335                           
  7336                           ;Pattern.c: 162:     struct Stage* off = NewStage();
  7337  01AD  3187  278E  3181   	fcall	_NewStage
  7338  01B0  0020               	movlb	0	; select bank0
  7339  01B1  0821               	movf	?_NewStage+1,w
  7340  01B2  00D8               	movwf	InitUpperLowerPattern@off+1
  7341  01B3  0820               	movf	?_NewStage,w
  7342  01B4  00D7               	movwf	InitUpperLowerPattern@off
  7343  01B5                     l2223:	
  7344                           
  7345                           ;Pattern.c: 165:     struct Stage* head = pattern->first_stage;
  7346  01B5  0844               	movf	InitUpperLowerPattern@pattern,w
  7347  01B6  0086               	movwf	6
  7348  01B7  0845               	movf	InitUpperLowerPattern@pattern+1,w
  7349  01B8  0087               	movwf	7
  7350  01B9  3141               	addfsr 1,1
  7351  01BA  3F40               	moviw [0]fsr1
  7352  01BB  00D9               	movwf	InitUpperLowerPattern@head
  7353  01BC  3F41               	moviw [1]fsr1
  7354  01BD  00DA               	movwf	InitUpperLowerPattern@head+1
  7355  01BE                     l2225:	
  7356                           
  7357                           ;Pattern.c: 168:     for( int i = 0; i < 3; i++ )
  7358  01BE  01D3               	clrf	InitUpperLowerPattern@i
  7359  01BF  01D4               	clrf	InitUpperLowerPattern@i+1
  7360  01C0                     l2231:	
  7361                           
  7362                           ;Pattern.c: 169:     {;Pattern.c: 170:         AppendStage( head, CopyStageData( NewStag
      +                          e(), upper ) );
  7363  01C0  0020               	movlb	0	; select bank0
  7364  01C1  085A               	movf	InitUpperLowerPattern@head+1,w
  7365  01C2  00BD               	movwf	AppendStage@head+1
  7366  01C3  0859               	movf	InitUpperLowerPattern@head,w
  7367  01C4  00BC               	movwf	AppendStage@head
  7368  01C5  3187  278E  3181   	fcall	_NewStage
  7369  01C8  0020               	movlb	0	; select bank0
  7370  01C9  0821               	movf	?_NewStage+1,w
  7371  01CA  00B4               	movwf	CopyStageData@dest+1
  7372  01CB  0820               	movf	?_NewStage,w
  7373  01CC  00B3               	movwf	CopyStageData@dest
  7374  01CD  0850               	movf	InitUpperLowerPattern@upper+1,w
  7375  01CE  00B6               	movwf	CopyStageData@source+1
  7376  01CF  084F               	movf	InitUpperLowerPattern@upper,w
  7377  01D0  00B5               	movwf	CopyStageData@source
  7378  01D1  318F  274A  3181   	fcall	_CopyStageData
  7379  01D4  0020               	movlb	0	; select bank0
  7380  01D5  0834               	movf	?_CopyStageData+1,w
  7381  01D6  00BF               	movwf	AppendStage@new_stage+1
  7382  01D7  0833               	movf	?_CopyStageData,w
  7383  01D8  00BE               	movwf	AppendStage@new_stage
  7384  01D9  3187  2736  3181   	fcall	_AppendStage
  7385                           
  7386                           ;Pattern.c: 171:         AppendStage( head, CopyStageData( NewStage(), off ) );
  7387  01DC  0020               	movlb	0	; select bank0
  7388  01DD  085A               	movf	InitUpperLowerPattern@head+1,w
  7389  01DE  00BD               	movwf	AppendStage@head+1
  7390  01DF  0859               	movf	InitUpperLowerPattern@head,w
  7391  01E0  00BC               	movwf	AppendStage@head
  7392  01E1  3187  278E  3181   	fcall	_NewStage
  7393  01E4  0020               	movlb	0	; select bank0
  7394  01E5  0821               	movf	?_NewStage+1,w
  7395  01E6  00B4               	movwf	CopyStageData@dest+1
  7396  01E7  0820               	movf	?_NewStage,w
  7397  01E8  00B3               	movwf	CopyStageData@dest
  7398  01E9  0858               	movf	InitUpperLowerPattern@off+1,w
  7399  01EA  00B6               	movwf	CopyStageData@source+1
  7400  01EB  0857               	movf	InitUpperLowerPattern@off,w
  7401  01EC  00B5               	movwf	CopyStageData@source
  7402  01ED  318F  274A  3181   	fcall	_CopyStageData
  7403  01F0  0020               	movlb	0	; select bank0
  7404  01F1  0834               	movf	?_CopyStageData+1,w
  7405  01F2  00BF               	movwf	AppendStage@new_stage+1
  7406  01F3  0833               	movf	?_CopyStageData,w
  7407  01F4  00BE               	movwf	AppendStage@new_stage
  7408  01F5  3187  2736  3181   	fcall	_AppendStage
  7409  01F8                     l2233:	
  7410                           
  7411                           ;Pattern.c: 172:     }
  7412  01F8  3001               	movlw	1
  7413  01F9  0020               	movlb	0	; select bank0
  7414  01FA  07D3               	addwf	InitUpperLowerPattern@i,f
  7415  01FB  3000               	movlw	0
  7416  01FC  3DD4               	addwfc	InitUpperLowerPattern@i+1,f
  7417  01FD                     l2235:	
  7418  01FD  0854               	movf	InitUpperLowerPattern@i+1,w
  7419  01FE  3A80               	xorlw	128
  7420  01FF  00C6               	movwf	??_InitUpperLowerPattern
  7421  0200  3080               	movlw	128
  7422  0201  0246               	subwf	??_InitUpperLowerPattern,w
  7423  0202  1D03               	skipz
  7424  0203  2A06               	goto	u1055
  7425  0204  3003               	movlw	3
  7426  0205  0253               	subwf	InitUpperLowerPattern@i,w
  7427  0206                     u1055:	
  7428  0206  1C03               	skipc
  7429  0207  2A09               	goto	u1051
  7430  0208  2A0A               	goto	u1050
  7431  0209                     u1051:	
  7432  0209  29C0               	goto	l2231
  7433  020A                     u1050:	
  7434  020A                     l2237:	
  7435                           
  7436                           ;Pattern.c: 175:     AppendStage( head, CopyStageData( NewStage(), off ) );
  7437  020A  0020               	movlb	0	; select bank0
  7438  020B  085A               	movf	InitUpperLowerPattern@head+1,w
  7439  020C  00BD               	movwf	AppendStage@head+1
  7440  020D  0859               	movf	InitUpperLowerPattern@head,w
  7441  020E  00BC               	movwf	AppendStage@head
  7442  020F  3187  278E  3181   	fcall	_NewStage
  7443  0212  0020               	movlb	0	; select bank0
  7444  0213  0821               	movf	?_NewStage+1,w
  7445  0214  00B4               	movwf	CopyStageData@dest+1
  7446  0215  0820               	movf	?_NewStage,w
  7447  0216  00B3               	movwf	CopyStageData@dest
  7448  0217  0858               	movf	InitUpperLowerPattern@off+1,w
  7449  0218  00B6               	movwf	CopyStageData@source+1
  7450  0219  0857               	movf	InitUpperLowerPattern@off,w
  7451  021A  00B5               	movwf	CopyStageData@source
  7452  021B  318F  274A  3181   	fcall	_CopyStageData
  7453  021E  0020               	movlb	0	; select bank0
  7454  021F  0834               	movf	?_CopyStageData+1,w
  7455  0220  00BF               	movwf	AppendStage@new_stage+1
  7456  0221  0833               	movf	?_CopyStageData,w
  7457  0222  00BE               	movwf	AppendStage@new_stage
  7458  0223  3187  2736  3181   	fcall	_AppendStage
  7459  0226                     l2239:	
  7460                           
  7461                           ;Pattern.c: 178:     for( int i = 0; i < 3; i++ )
  7462  0226  0020               	movlb	0	; select bank0
  7463  0227  01D5               	clrf	InitUpperLowerPattern@i_909
  7464  0228  01D6               	clrf	InitUpperLowerPattern@i_909+1
  7465  0229                     l2245:	
  7466                           
  7467                           ;Pattern.c: 179:     {;Pattern.c: 180:         AppendStage( head, CopyStageData( NewStag
      +                          e(), lower ) );
  7468  0229  0020               	movlb	0	; select bank0
  7469  022A  085A               	movf	InitUpperLowerPattern@head+1,w
  7470  022B  00BD               	movwf	AppendStage@head+1
  7471  022C  0859               	movf	InitUpperLowerPattern@head,w
  7472  022D  00BC               	movwf	AppendStage@head
  7473  022E  3187  278E  3181   	fcall	_NewStage
  7474  0231  0020               	movlb	0	; select bank0
  7475  0232  0821               	movf	?_NewStage+1,w
  7476  0233  00B4               	movwf	CopyStageData@dest+1
  7477  0234  0820               	movf	?_NewStage,w
  7478  0235  00B3               	movwf	CopyStageData@dest
  7479  0236  0852               	movf	InitUpperLowerPattern@lower+1,w
  7480  0237  00B6               	movwf	CopyStageData@source+1
  7481  0238  0851               	movf	InitUpperLowerPattern@lower,w
  7482  0239  00B5               	movwf	CopyStageData@source
  7483  023A  318F  274A  3181   	fcall	_CopyStageData
  7484  023D  0020               	movlb	0	; select bank0
  7485  023E  0834               	movf	?_CopyStageData+1,w
  7486  023F  00BF               	movwf	AppendStage@new_stage+1
  7487  0240  0833               	movf	?_CopyStageData,w
  7488  0241  00BE               	movwf	AppendStage@new_stage
  7489  0242  3187  2736  3181   	fcall	_AppendStage
  7490                           
  7491                           ;Pattern.c: 181:         AppendStage( head, CopyStageData( NewStage(), off ) );
  7492  0245  0020               	movlb	0	; select bank0
  7493  0246  085A               	movf	InitUpperLowerPattern@head+1,w
  7494  0247  00BD               	movwf	AppendStage@head+1
  7495  0248  0859               	movf	InitUpperLowerPattern@head,w
  7496  0249  00BC               	movwf	AppendStage@head
  7497  024A  3187  278E  3181   	fcall	_NewStage
  7498  024D  0020               	movlb	0	; select bank0
  7499  024E  0821               	movf	?_NewStage+1,w
  7500  024F  00B4               	movwf	CopyStageData@dest+1
  7501  0250  0820               	movf	?_NewStage,w
  7502  0251  00B3               	movwf	CopyStageData@dest
  7503  0252  0858               	movf	InitUpperLowerPattern@off+1,w
  7504  0253  00B6               	movwf	CopyStageData@source+1
  7505  0254  0857               	movf	InitUpperLowerPattern@off,w
  7506  0255  00B5               	movwf	CopyStageData@source
  7507  0256  318F  274A  3181   	fcall	_CopyStageData
  7508  0259  0020               	movlb	0	; select bank0
  7509  025A  0834               	movf	?_CopyStageData+1,w
  7510  025B  00BF               	movwf	AppendStage@new_stage+1
  7511  025C  0833               	movf	?_CopyStageData,w
  7512  025D  00BE               	movwf	AppendStage@new_stage
  7513  025E  3187  2736  3181   	fcall	_AppendStage
  7514  0261                     l2247:	
  7515                           
  7516                           ;Pattern.c: 182:     }
  7517  0261  3001               	movlw	1
  7518  0262  0020               	movlb	0	; select bank0
  7519  0263  07D5               	addwf	InitUpperLowerPattern@i_909,f
  7520  0264  3000               	movlw	0
  7521  0265  3DD6               	addwfc	InitUpperLowerPattern@i_909+1,f
  7522  0266                     l2249:	
  7523  0266  0856               	movf	InitUpperLowerPattern@i_909+1,w
  7524  0267  3A80               	xorlw	128
  7525  0268  00C6               	movwf	??_InitUpperLowerPattern
  7526  0269  3080               	movlw	128
  7527  026A  0246               	subwf	??_InitUpperLowerPattern,w
  7528  026B  1D03               	skipz
  7529  026C  2A6F               	goto	u1065
  7530  026D  3003               	movlw	3
  7531  026E  0255               	subwf	InitUpperLowerPattern@i_909,w
  7532  026F                     u1065:	
  7533  026F  1C03               	skipc
  7534  0270  2A72               	goto	u1061
  7535  0271  2A73               	goto	u1060
  7536  0272                     u1061:	
  7537  0272  2A29               	goto	l2245
  7538  0273                     u1060:	
  7539  0273                     l470:	
  7540  0273  0008               	return
  7541  0274                     __end_of_InitUpperLowerPattern:	
  7542                           
  7543                           	psect	text17
  7544  0274                     __ptext17:	
  7545 ;; *************** function _InitLowerPattern *****************
  7546 ;; Defined at:
  7547 ;;		line 185 in file "Pattern.c"
  7548 ;; Parameters:    Size  Location     Type
  7549 ;;  pattern         2   36[BANK0 ] PTR struct Pattern
  7550 ;;		 -> pattern_stash(18), NULL(0), 
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;  i               2   53[BANK0 ] int 
  7553 ;;  i               2   51[BANK0 ] int 
  7554 ;;  lower_right_    4   43[BANK0 ] _Bool [4]
  7555 ;;  lower_left_s    4   39[BANK0 ] _Bool [4]
  7556 ;;  head            2   57[BANK0 ] PTR struct Stage
  7557 ;;		 -> stage_stash(768), NULL(0), 
  7558 ;;  off             2   55[BANK0 ] PTR struct Stage
  7559 ;;		 -> stage_stash(768), NULL(0), 
  7560 ;;  lower_right     2   49[BANK0 ] PTR struct Stage
  7561 ;;		 -> stage_stash(768), NULL(0), 
  7562 ;;  lower_left      2   47[BANK0 ] PTR struct Stage
  7563 ;;		 -> stage_stash(768), NULL(0), 
  7564 ;; Return value:  Size  Location     Type
  7565 ;;                  1    wreg      void 
  7566 ;; Registers used:
  7567 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7568 ;; Tracked objects:
  7569 ;;		On entry : 0/0
  7570 ;;		On exit  : 0/0
  7571 ;;		Unchanged: 0/0
  7572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7573 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7574 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7576 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7577 ;;Total ram usage:       23 bytes
  7578 ;; Hardware stack levels used:    1
  7579 ;; Hardware stack levels required when called:    9
  7580 ;; This function calls:
  7581 ;;		_AppendStage
  7582 ;;		_ConstructStage
  7583 ;;		_CopyStageData
  7584 ;;		_NewStage
  7585 ;; This function is called by:
  7586 ;;		_InitPatternSelector
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590                           
  7591                           ;psect for function _InitLowerPattern
  7592  0274                     _InitLowerPattern:	
  7593  0274                     l2251:	
  7594                           ;incstack = 0
  7595                           ; Regs used in _InitLowerPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7596                           
  7597                           
  7598                           ;Pattern.c: 185: void InitLowerPattern( struct Pattern* pattern );Pattern.c: 186: {;Patt
      +                          ern.c: 187:     pattern->name = LOWER;
  7599  0274  0020               	movlb	0	; select bank0
  7600  0275  0844               	movf	InitLowerPattern@pattern,w
  7601  0276  0086               	movwf	6
  7602  0277  0845               	movf	InitLowerPattern@pattern+1,w
  7603  0278  0087               	movwf	7
  7604  0279  3003               	movlw	3
  7605  027A  0081               	movwf	1
  7606  027B                     l2253:	
  7607                           
  7608                           ;Pattern.c: 190:     _Bool lower_left_states[NUM_LIGHTS] = { 0, 0, 1, 0 };
  7609  027B  0021               	movlb	1	; select bank1
  7610  027C  0854               	movf	(InitLowerPattern@F474+3)^(0+128),w
  7611  027D  0020               	movlb	0	; select bank0
  7612  027E  00CA               	movwf	InitLowerPattern@lower_left_states+3
  7613  027F  0021               	movlb	1	; select bank1
  7614  0280  0853               	movf	(InitLowerPattern@F474+2)^(0+128),w
  7615  0281  0020               	movlb	0	; select bank0
  7616  0282  00C9               	movwf	InitLowerPattern@lower_left_states+2
  7617  0283  0021               	movlb	1	; select bank1
  7618  0284  0852               	movf	(InitLowerPattern@F474+1)^(0+128),w
  7619  0285  0020               	movlb	0	; select bank0
  7620  0286  00C8               	movwf	InitLowerPattern@lower_left_states+1
  7621  0287  0021               	movlb	1	; select bank1
  7622  0288  0851               	movf	InitLowerPattern@F474^(0+128),w
  7623  0289  0020               	movlb	0	; select bank0
  7624  028A  00C7               	movwf	InitLowerPattern@lower_left_states
  7625  028B                     l2255:	
  7626                           
  7627                           ;Pattern.c: 191:     struct Stage* lower_left = ConstructStage( lower_left_states, 60UL,
      +                           ((void*)0) );
  7628  028B  303C               	movlw	60
  7629  028C  00B3               	movwf	ConstructStage@time_ms
  7630  028D  3000               	movlw	0
  7631  028E  00B4               	movwf	ConstructStage@time_ms+1
  7632  028F  01B5               	clrf	ConstructStage@next
  7633  0290  3047               	movlw	(low (InitLowerPattern@lower_left_states| 0))& (0+255)
  7634  0291  318E  26BB  3182   	fcall	_ConstructStage
  7635  0294  0020               	movlb	0	; select bank0
  7636  0295  0834               	movf	?_ConstructStage+1,w
  7637  0296  00D0               	movwf	InitLowerPattern@lower_left+1
  7638  0297  0833               	movf	?_ConstructStage,w
  7639  0298  00CF               	movwf	InitLowerPattern@lower_left
  7640  0299                     l2257:	
  7641                           
  7642                           ;Pattern.c: 193:     _Bool lower_right_states[NUM_LIGHTS] = { 0, 0, 0, 1 };
  7643  0299  0021               	movlb	1	; select bank1
  7644  029A  0850               	movf	(InitLowerPattern@F477+3)^(0+128),w
  7645  029B  0020               	movlb	0	; select bank0
  7646  029C  00CE               	movwf	InitLowerPattern@lower_right_states+3
  7647  029D  0021               	movlb	1	; select bank1
  7648  029E  084F               	movf	(InitLowerPattern@F477+2)^(0+128),w
  7649  029F  0020               	movlb	0	; select bank0
  7650  02A0  00CD               	movwf	InitLowerPattern@lower_right_states+2
  7651  02A1  0021               	movlb	1	; select bank1
  7652  02A2  084E               	movf	(InitLowerPattern@F477+1)^(0+128),w
  7653  02A3  0020               	movlb	0	; select bank0
  7654  02A4  00CC               	movwf	InitLowerPattern@lower_right_states+1
  7655  02A5  0021               	movlb	1	; select bank1
  7656  02A6  084D               	movf	InitLowerPattern@F477^(0+128),w
  7657  02A7  0020               	movlb	0	; select bank0
  7658  02A8  00CB               	movwf	InitLowerPattern@lower_right_states
  7659  02A9                     l2259:	
  7660                           
  7661                           ;Pattern.c: 194:     struct Stage* lower_right = ConstructStage( lower_right_states, 60U
      +                          L, ((void*)0) );
  7662  02A9  303C               	movlw	60
  7663  02AA  00B3               	movwf	ConstructStage@time_ms
  7664  02AB  3000               	movlw	0
  7665  02AC  00B4               	movwf	ConstructStage@time_ms+1
  7666  02AD  01B5               	clrf	ConstructStage@next
  7667  02AE  304B               	movlw	(low (InitLowerPattern@lower_right_states| 0))& (0+255)
  7668  02AF  318E  26BB  3182   	fcall	_ConstructStage
  7669  02B2  0020               	movlb	0	; select bank0
  7670  02B3  0834               	movf	?_ConstructStage+1,w
  7671  02B4  00D2               	movwf	InitLowerPattern@lower_right+1
  7672  02B5  0833               	movf	?_ConstructStage,w
  7673  02B6  00D1               	movwf	InitLowerPattern@lower_right
  7674  02B7                     l2261:	
  7675                           
  7676                           ;Pattern.c: 196:     struct Stage* off = NewStage();
  7677  02B7  3187  278E  3182   	fcall	_NewStage
  7678  02BA  0020               	movlb	0	; select bank0
  7679  02BB  0821               	movf	?_NewStage+1,w
  7680  02BC  00D8               	movwf	InitLowerPattern@off+1
  7681  02BD  0820               	movf	?_NewStage,w
  7682  02BE  00D7               	movwf	InitLowerPattern@off
  7683  02BF                     l2263:	
  7684                           
  7685                           ;Pattern.c: 198:     struct Stage* head = pattern->first_stage;
  7686  02BF  0844               	movf	InitLowerPattern@pattern,w
  7687  02C0  0086               	movwf	6
  7688  02C1  0845               	movf	InitLowerPattern@pattern+1,w
  7689  02C2  0087               	movwf	7
  7690  02C3  3141               	addfsr 1,1
  7691  02C4  3F40               	moviw [0]fsr1
  7692  02C5  00D9               	movwf	InitLowerPattern@head
  7693  02C6  3F41               	moviw [1]fsr1
  7694  02C7  00DA               	movwf	InitLowerPattern@head+1
  7695  02C8                     l2265:	
  7696                           
  7697                           ;Pattern.c: 201:     for( int i = 0; i < 3; i++ )
  7698  02C8  01D3               	clrf	InitLowerPattern@i
  7699  02C9  01D4               	clrf	InitLowerPattern@i+1
  7700  02CA                     l2271:	
  7701                           
  7702                           ;Pattern.c: 202:     {;Pattern.c: 203:         AppendStage( head, CopyStageData( NewStag
      +                          e(), lower_left ) );
  7703  02CA  0020               	movlb	0	; select bank0
  7704  02CB  085A               	movf	InitLowerPattern@head+1,w
  7705  02CC  00BD               	movwf	AppendStage@head+1
  7706  02CD  0859               	movf	InitLowerPattern@head,w
  7707  02CE  00BC               	movwf	AppendStage@head
  7708  02CF  3187  278E  3182   	fcall	_NewStage
  7709  02D2  0020               	movlb	0	; select bank0
  7710  02D3  0821               	movf	?_NewStage+1,w
  7711  02D4  00B4               	movwf	CopyStageData@dest+1
  7712  02D5  0820               	movf	?_NewStage,w
  7713  02D6  00B3               	movwf	CopyStageData@dest
  7714  02D7  0850               	movf	InitLowerPattern@lower_left+1,w
  7715  02D8  00B6               	movwf	CopyStageData@source+1
  7716  02D9  084F               	movf	InitLowerPattern@lower_left,w
  7717  02DA  00B5               	movwf	CopyStageData@source
  7718  02DB  318F  274A  3182   	fcall	_CopyStageData
  7719  02DE  0020               	movlb	0	; select bank0
  7720  02DF  0834               	movf	?_CopyStageData+1,w
  7721  02E0  00BF               	movwf	AppendStage@new_stage+1
  7722  02E1  0833               	movf	?_CopyStageData,w
  7723  02E2  00BE               	movwf	AppendStage@new_stage
  7724  02E3  3187  2736  3182   	fcall	_AppendStage
  7725                           
  7726                           ;Pattern.c: 204:         AppendStage( head, CopyStageData( NewStage(), off ) );
  7727  02E6  0020               	movlb	0	; select bank0
  7728  02E7  085A               	movf	InitLowerPattern@head+1,w
  7729  02E8  00BD               	movwf	AppendStage@head+1
  7730  02E9  0859               	movf	InitLowerPattern@head,w
  7731  02EA  00BC               	movwf	AppendStage@head
  7732  02EB  3187  278E  3182   	fcall	_NewStage
  7733  02EE  0020               	movlb	0	; select bank0
  7734  02EF  0821               	movf	?_NewStage+1,w
  7735  02F0  00B4               	movwf	CopyStageData@dest+1
  7736  02F1  0820               	movf	?_NewStage,w
  7737  02F2  00B3               	movwf	CopyStageData@dest
  7738  02F3  0858               	movf	InitLowerPattern@off+1,w
  7739  02F4  00B6               	movwf	CopyStageData@source+1
  7740  02F5  0857               	movf	InitLowerPattern@off,w
  7741  02F6  00B5               	movwf	CopyStageData@source
  7742  02F7  318F  274A  3182   	fcall	_CopyStageData
  7743  02FA  0020               	movlb	0	; select bank0
  7744  02FB  0834               	movf	?_CopyStageData+1,w
  7745  02FC  00BF               	movwf	AppendStage@new_stage+1
  7746  02FD  0833               	movf	?_CopyStageData,w
  7747  02FE  00BE               	movwf	AppendStage@new_stage
  7748  02FF  3187  2736  3182   	fcall	_AppendStage
  7749  0302                     l2273:	
  7750                           
  7751                           ;Pattern.c: 205:     }
  7752  0302  3001               	movlw	1
  7753  0303  0020               	movlb	0	; select bank0
  7754  0304  07D3               	addwf	InitLowerPattern@i,f
  7755  0305  3000               	movlw	0
  7756  0306  3DD4               	addwfc	InitLowerPattern@i+1,f
  7757  0307                     l2275:	
  7758  0307  0854               	movf	InitLowerPattern@i+1,w
  7759  0308  3A80               	xorlw	128
  7760  0309  00C6               	movwf	??_InitLowerPattern
  7761  030A  3080               	movlw	128
  7762  030B  0246               	subwf	??_InitLowerPattern,w
  7763  030C  1D03               	skipz
  7764  030D  2B10               	goto	u1075
  7765  030E  3003               	movlw	3
  7766  030F  0253               	subwf	InitLowerPattern@i,w
  7767  0310                     u1075:	
  7768  0310  1C03               	skipc
  7769  0311  2B13               	goto	u1071
  7770  0312  2B14               	goto	u1070
  7771  0313                     u1071:	
  7772  0313  2ACA               	goto	l2271
  7773  0314                     u1070:	
  7774  0314                     l2277:	
  7775                           
  7776                           ;Pattern.c: 208:     AppendStage( head, CopyStageData( NewStage(), off ) );
  7777  0314  0020               	movlb	0	; select bank0
  7778  0315  085A               	movf	InitLowerPattern@head+1,w
  7779  0316  00BD               	movwf	AppendStage@head+1
  7780  0317  0859               	movf	InitLowerPattern@head,w
  7781  0318  00BC               	movwf	AppendStage@head
  7782  0319  3187  278E  3182   	fcall	_NewStage
  7783  031C  0020               	movlb	0	; select bank0
  7784  031D  0821               	movf	?_NewStage+1,w
  7785  031E  00B4               	movwf	CopyStageData@dest+1
  7786  031F  0820               	movf	?_NewStage,w
  7787  0320  00B3               	movwf	CopyStageData@dest
  7788  0321  0858               	movf	InitLowerPattern@off+1,w
  7789  0322  00B6               	movwf	CopyStageData@source+1
  7790  0323  0857               	movf	InitLowerPattern@off,w
  7791  0324  00B5               	movwf	CopyStageData@source
  7792  0325  318F  274A  3182   	fcall	_CopyStageData
  7793  0328  0020               	movlb	0	; select bank0
  7794  0329  0834               	movf	?_CopyStageData+1,w
  7795  032A  00BF               	movwf	AppendStage@new_stage+1
  7796  032B  0833               	movf	?_CopyStageData,w
  7797  032C  00BE               	movwf	AppendStage@new_stage
  7798  032D  3187  2736  3182   	fcall	_AppendStage
  7799  0330                     l2279:	
  7800                           
  7801                           ;Pattern.c: 211:     for( int i = 0; i < 3; i++ )
  7802  0330  0020               	movlb	0	; select bank0
  7803  0331  01D5               	clrf	InitLowerPattern@i_935
  7804  0332  01D6               	clrf	InitLowerPattern@i_935+1
  7805  0333                     l2285:	
  7806                           
  7807                           ;Pattern.c: 212:     {;Pattern.c: 213:         AppendStage( head, CopyStageData( NewStag
      +                          e(), lower_right ) );
  7808  0333  0020               	movlb	0	; select bank0
  7809  0334  085A               	movf	InitLowerPattern@head+1,w
  7810  0335  00BD               	movwf	AppendStage@head+1
  7811  0336  0859               	movf	InitLowerPattern@head,w
  7812  0337  00BC               	movwf	AppendStage@head
  7813  0338  3187  278E  3182   	fcall	_NewStage
  7814  033B  0020               	movlb	0	; select bank0
  7815  033C  0821               	movf	?_NewStage+1,w
  7816  033D  00B4               	movwf	CopyStageData@dest+1
  7817  033E  0820               	movf	?_NewStage,w
  7818  033F  00B3               	movwf	CopyStageData@dest
  7819  0340  0852               	movf	InitLowerPattern@lower_right+1,w
  7820  0341  00B6               	movwf	CopyStageData@source+1
  7821  0342  0851               	movf	InitLowerPattern@lower_right,w
  7822  0343  00B5               	movwf	CopyStageData@source
  7823  0344  318F  274A  3182   	fcall	_CopyStageData
  7824  0347  0020               	movlb	0	; select bank0
  7825  0348  0834               	movf	?_CopyStageData+1,w
  7826  0349  00BF               	movwf	AppendStage@new_stage+1
  7827  034A  0833               	movf	?_CopyStageData,w
  7828  034B  00BE               	movwf	AppendStage@new_stage
  7829  034C  3187  2736  3182   	fcall	_AppendStage
  7830                           
  7831                           ;Pattern.c: 214:         AppendStage( head, CopyStageData( NewStage(), off ) );
  7832  034F  0020               	movlb	0	; select bank0
  7833  0350  085A               	movf	InitLowerPattern@head+1,w
  7834  0351  00BD               	movwf	AppendStage@head+1
  7835  0352  0859               	movf	InitLowerPattern@head,w
  7836  0353  00BC               	movwf	AppendStage@head
  7837  0354  3187  278E  3182   	fcall	_NewStage
  7838  0357  0020               	movlb	0	; select bank0
  7839  0358  0821               	movf	?_NewStage+1,w
  7840  0359  00B4               	movwf	CopyStageData@dest+1
  7841  035A  0820               	movf	?_NewStage,w
  7842  035B  00B3               	movwf	CopyStageData@dest
  7843  035C  0858               	movf	InitLowerPattern@off+1,w
  7844  035D  00B6               	movwf	CopyStageData@source+1
  7845  035E  0857               	movf	InitLowerPattern@off,w
  7846  035F  00B5               	movwf	CopyStageData@source
  7847  0360  318F  274A  3182   	fcall	_CopyStageData
  7848  0363  0020               	movlb	0	; select bank0
  7849  0364  0834               	movf	?_CopyStageData+1,w
  7850  0365  00BF               	movwf	AppendStage@new_stage+1
  7851  0366  0833               	movf	?_CopyStageData,w
  7852  0367  00BE               	movwf	AppendStage@new_stage
  7853  0368  3187  2736  3182   	fcall	_AppendStage
  7854  036B                     l2287:	
  7855                           
  7856                           ;Pattern.c: 215:     }
  7857  036B  3001               	movlw	1
  7858  036C  0020               	movlb	0	; select bank0
  7859  036D  07D5               	addwf	InitLowerPattern@i_935,f
  7860  036E  3000               	movlw	0
  7861  036F  3DD6               	addwfc	InitLowerPattern@i_935+1,f
  7862  0370                     l2289:	
  7863  0370  0856               	movf	InitLowerPattern@i_935+1,w
  7864  0371  3A80               	xorlw	128
  7865  0372  00C6               	movwf	??_InitLowerPattern
  7866  0373  3080               	movlw	128
  7867  0374  0246               	subwf	??_InitLowerPattern,w
  7868  0375  1D03               	skipz
  7869  0376  2B79               	goto	u1085
  7870  0377  3003               	movlw	3
  7871  0378  0255               	subwf	InitLowerPattern@i_935,w
  7872  0379                     u1085:	
  7873  0379  1C03               	skipc
  7874  037A  2B7C               	goto	u1081
  7875  037B  2B7D               	goto	u1080
  7876  037C                     u1081:	
  7877  037C  2B33               	goto	l2285
  7878  037D                     u1080:	
  7879  037D                     l481:	
  7880  037D  0008               	return
  7881  037E                     __end_of_InitLowerPattern:	
  7882                           
  7883                           	psect	text18
  7884  0F4A                     __ptext18:	
  7885 ;; *************** function _CopyStageData *****************
  7886 ;; Defined at:
  7887 ;;		line 58 in file "Pattern.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;  dest            2   19[BANK0 ] PTR struct Stage
  7890 ;;		 -> stage_stash(768), NULL(0), 
  7891 ;;  source          2   21[BANK0 ] PTR struct Stage
  7892 ;;		 -> stage_stash(768), NULL(0), 
  7893 ;; Auto vars:     Size  Location     Type
  7894 ;;  i               2   26[BANK0 ] int 
  7895 ;; Return value:  Size  Location     Type
  7896 ;;                  2   19[BANK0 ] PTR struct Stage
  7897 ;; Registers used:
  7898 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7899 ;; Tracked objects:
  7900 ;;		On entry : 0/0
  7901 ;;		On exit  : 0/0
  7902 ;;		Unchanged: 0/0
  7903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7904 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7905 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7906 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7907 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7908 ;;Total ram usage:        9 bytes
  7909 ;; Hardware stack levels used:    1
  7910 ;; Hardware stack levels required when called:    6
  7911 ;; This function calls:
  7912 ;;		Nothing
  7913 ;; This function is called by:
  7914 ;;		_InitWigwagPattern
  7915 ;;		_InitXStrobePattern
  7916 ;;		_InitUpperLowerPattern
  7917 ;;		_InitLowerPattern
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           
  7922                           ;psect for function _CopyStageData
  7923  0F4A                     _CopyStageData:	
  7924  0F4A                     l1987:	
  7925                           ;incstack = 0
  7926                           ; Regs used in _CopyStageData: [wreg-fsr1h+status,2+status,0]
  7927                           
  7928                           
  7929                           ;Pattern.c: 58: struct Stage* CopyStageData( struct Stage* dest, struct Stage* source );
      +                          Pattern.c: 59: {;Pattern.c: 60:     for( int i = 0; i < NUM_LIGHTS; i++ )
  7930  0F4A  0020               	movlb	0	; select bank0
  7931  0F4B  01BA               	clrf	CopyStageData@i
  7932  0F4C  01BB               	clrf	CopyStageData@i+1
  7933  0F4D                     l1993:	
  7934                           
  7935                           ;Pattern.c: 61:         dest->light_states[i] = source->light_states[i];
  7936  0F4D  0020               	movlb	0	; select bank0
  7937  0F4E  083A               	movf	CopyStageData@i,w
  7938  0F4F  0735               	addwf	CopyStageData@source,w
  7939  0F50  0086               	movwf	6
  7940  0F51  083B               	movf	CopyStageData@i+1,w
  7941  0F52  3D36               	addwfc	CopyStageData@source+1,w
  7942  0F53  0087               	movwf	7
  7943  0F54  0801               	movf	1,w
  7944  0F55  00B7               	movwf	??_CopyStageData
  7945  0F56  083A               	movf	CopyStageData@i,w
  7946  0F57  0733               	addwf	CopyStageData@dest,w
  7947  0F58  00B8               	movwf	??_CopyStageData+1
  7948  0F59  083B               	movf	CopyStageData@i+1,w
  7949  0F5A  3D34               	addwfc	CopyStageData@dest+1,w
  7950  0F5B  00B9               	movwf	??_CopyStageData+2
  7951  0F5C  0838               	movf	??_CopyStageData+1,w
  7952  0F5D  0086               	movwf	6
  7953  0F5E  0839               	movf	??_CopyStageData+2,w
  7954  0F5F  0087               	movwf	7
  7955  0F60  0837               	movf	??_CopyStageData,w
  7956  0F61  0081               	movwf	1
  7957  0F62                     l1995:	
  7958  0F62  3001               	movlw	1
  7959  0F63  07BA               	addwf	CopyStageData@i,f
  7960  0F64  3000               	movlw	0
  7961  0F65  3DBB               	addwfc	CopyStageData@i+1,f
  7962  0F66                     l1997:	
  7963  0F66  083B               	movf	CopyStageData@i+1,w
  7964  0F67  3A80               	xorlw	128
  7965  0F68  00B7               	movwf	??_CopyStageData
  7966  0F69  3080               	movlw	128
  7967  0F6A  0237               	subwf	??_CopyStageData,w
  7968  0F6B  1D03               	skipz
  7969  0F6C  2F6F               	goto	u885
  7970  0F6D  3004               	movlw	4
  7971  0F6E  023A               	subwf	CopyStageData@i,w
  7972  0F6F                     u885:	
  7973  0F6F  1C03               	skipc
  7974  0F70  2F72               	goto	u881
  7975  0F71  2F73               	goto	u880
  7976  0F72                     u881:	
  7977  0F72  2F4D               	goto	l1993
  7978  0F73                     u880:	
  7979  0F73                     l1999:	
  7980                           
  7981                           ;Pattern.c: 62:     dest->time_ms = source->time_ms;
  7982  0F73  0020               	movlb	0	; select bank0
  7983  0F74  0835               	movf	CopyStageData@source,w
  7984  0F75  0086               	movwf	6
  7985  0F76  0836               	movf	CopyStageData@source+1,w
  7986  0F77  0087               	movwf	7
  7987  0F78  3144               	addfsr 1,4
  7988  0F79  0833               	movf	CopyStageData@dest,w
  7989  0F7A  0084               	movwf	4
  7990  0F7B  0834               	movf	CopyStageData@dest+1,w
  7991  0F7C  0085               	movwf	5
  7992  0F7D  3104               	addfsr 0,4
  7993  0F7E  3F40               	moviw [0]fsr1
  7994  0F7F  3F80               	movwi [0]fsr0
  7995  0F80  3F41               	moviw [1]fsr1
  7996  0F81  3F81               	movwi [1]fsr0
  7997  0F82                     l2001:	
  7998  0F82                     l429:	
  7999                           ;Pattern.c: 63:     return dest;
  8000                           
  8001  0F82  0008               	return
  8002  0F83                     __end_of_CopyStageData:	
  8003                           
  8004                           	psect	text19
  8005  0EBB                     __ptext19:	
  8006 ;; *************** function _ConstructStage *****************
  8007 ;; Defined at:
  8008 ;;		line 49 in file "Pattern.c"
  8009 ;; Parameters:    Size  Location     Type
  8010 ;;  states          1    wreg     PTR const _Bool 
  8011 ;;		 -> InitLowerPattern@lower_right_states(4), InitLowerPattern@lower_left_states(4), InitUpperLowerPattern@lower_state
      +s(4), InitUpperLowerPattern@upper_states(4), 
  8012 ;;		 -> InitXStrobePattern@diag_2_3_states(4), InitXStrobePattern@diag_1_4_states(4), InitWigwagPattern@right_side_state
      +s(4), InitWigwagPattern@left_side_states(4), 
  8013 ;;  time_ms         2   19[BANK0 ] const unsigned short 
  8014 ;;  next            1   21[BANK0 ] PTR struct Stage
  8015 ;;		 -> NULL(0), 
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;  states          1   25[BANK0 ] PTR const _Bool 
  8018 ;;		 -> InitLowerPattern@lower_right_states(4), InitLowerPattern@lower_left_states(4), InitUpperLowerPattern@lower_state
      +s(4), InitUpperLowerPattern@upper_states(4), 
  8019 ;;		 -> InitXStrobePattern@diag_2_3_states(4), InitXStrobePattern@diag_1_4_states(4), InitWigwagPattern@right_side_state
      +s(4), InitWigwagPattern@left_side_states(4), 
  8020 ;;  new_stage       2   23[BANK0 ] PTR struct Stage
  8021 ;;		 -> stage_stash(768), NULL(0), 
  8022 ;; Return value:  Size  Location     Type
  8023 ;;                  2   19[BANK0 ] PTR struct Stage
  8024 ;; Registers used:
  8025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8026 ;; Tracked objects:
  8027 ;;		On entry : 0/0
  8028 ;;		On exit  : 0/0
  8029 ;;		Unchanged: 0/0
  8030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8031 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8032 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8033 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8034 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8035 ;;Total ram usage:        7 bytes
  8036 ;; Hardware stack levels used:    1
  8037 ;; Hardware stack levels required when called:    8
  8038 ;; This function calls:
  8039 ;;		_AssignLightStates
  8040 ;;		_NewStage
  8041 ;; This function is called by:
  8042 ;;		_InitWigwagPattern
  8043 ;;		_InitXStrobePattern
  8044 ;;		_InitUpperLowerPattern
  8045 ;;		_InitLowerPattern
  8046 ;; This function uses a non-reentrant model
  8047 ;;
  8048                           
  8049                           
  8050                           ;psect for function _ConstructStage
  8051  0EBB                     _ConstructStage:	
  8052                           
  8053                           ;incstack = 0
  8054                           ; Regs used in _ConstructStage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8055                           ;ConstructStage@states stored from wreg
  8056  0EBB  0020               	movlb	0	; select bank0
  8057  0EBC  00B9               	movwf	ConstructStage@states
  8058  0EBD                     l1977:	
  8059                           
  8060                           ;Pattern.c: 49: struct Stage* ConstructStage( const _Bool states[NUM_LIGHTS], const uint
      +                           time_ms, struct Stage* next );Pattern.c: 50: {;Pattern.c: 51:     struct Stage* new_sta
      +                          ge = NewStage();
  8061  0EBD  3187  278E  318E   	fcall	_NewStage
  8062  0EC0  0020               	movlb	0	; select bank0
  8063  0EC1  0821               	movf	?_NewStage+1,w
  8064  0EC2  00B8               	movwf	ConstructStage@new_stage+1
  8065  0EC3  0820               	movf	?_NewStage,w
  8066  0EC4  00B7               	movwf	ConstructStage@new_stage
  8067                           
  8068                           ;Pattern.c: 52:     AssignLightStates( new_stage, states );
  8069  0EC5  0838               	movf	ConstructStage@new_stage+1,w
  8070  0EC6  00A1               	movwf	AssignLightStates@stage+1
  8071  0EC7  0837               	movf	ConstructStage@new_stage,w
  8072  0EC8  00A0               	movwf	AssignLightStates@stage
  8073  0EC9  0839               	movf	ConstructStage@states,w
  8074  0ECA  00B6               	movwf	??_ConstructStage
  8075  0ECB  0836               	movf	??_ConstructStage,w
  8076  0ECC  00A2               	movwf	AssignLightStates@states
  8077  0ECD  318E  2618  318E   	fcall	_AssignLightStates
  8078  0ED0                     l1979:	
  8079                           
  8080                           ;Pattern.c: 53:     new_stage->time_ms = time_ms;
  8081  0ED0  0020               	movlb	0	; select bank0
  8082  0ED1  0837               	movf	ConstructStage@new_stage,w
  8083  0ED2  0086               	movwf	6
  8084  0ED3  0838               	movf	ConstructStage@new_stage+1,w
  8085  0ED4  0087               	movwf	7
  8086  0ED5  3144               	addfsr 1,4
  8087  0ED6  0833               	movf	ConstructStage@time_ms,w
  8088  0ED7  3FC0               	movwi [0]fsr1
  8089  0ED8  0834               	movf	ConstructStage@time_ms+1,w
  8090  0ED9  3FC1               	movwi [1]fsr1
  8091  0EDA                     l1981:	
  8092                           
  8093                           ;Pattern.c: 54:     new_stage->next = next;
  8094  0EDA  0837               	movf	ConstructStage@new_stage,w
  8095  0EDB  0086               	movwf	6
  8096  0EDC  0838               	movf	ConstructStage@new_stage+1,w
  8097  0EDD  0087               	movwf	7
  8098  0EDE  3146               	addfsr 1,6
  8099  0EDF  0835               	movf	ConstructStage@next,w
  8100  0EE0  3FC0               	movwi [0]fsr1
  8101  0EE1  3000               	movlw	0
  8102  0EE2  3FC1               	movwi [1]fsr1
  8103  0EE3                     l1983:	
  8104                           
  8105                           ;Pattern.c: 55:     return new_stage;
  8106  0EE3  0838               	movf	ConstructStage@new_stage+1,w
  8107  0EE4  00B4               	movwf	?_ConstructStage+1
  8108  0EE5  0837               	movf	ConstructStage@new_stage,w
  8109  0EE6  00B3               	movwf	?_ConstructStage
  8110  0EE7                     l424:	
  8111  0EE7  0008               	return
  8112  0EE8                     __end_of_ConstructStage:	
  8113                           
  8114                           	psect	text20
  8115  078E                     __ptext20:	
  8116 ;; *************** function _NewStage *****************
  8117 ;; Defined at:
  8118 ;;		line 22 in file "Pattern.c"
  8119 ;; Parameters:    Size  Location     Type
  8120 ;;		None
  8121 ;; Auto vars:     Size  Location     Type
  8122 ;;  init_states     4   13[BANK0 ] _Bool [4]
  8123 ;;  new_stage       2   17[BANK0 ] PTR struct Stage
  8124 ;;		 -> stage_stash(768), 
  8125 ;; Return value:  Size  Location     Type
  8126 ;;                  2    0[BANK0 ] PTR struct Stage
  8127 ;; Registers used:
  8128 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8129 ;; Tracked objects:
  8130 ;;		On entry : 0/0
  8131 ;;		On exit  : 0/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8135 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8136 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8137 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8138 ;;Total ram usage:       10 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; Hardware stack levels required when called:    7
  8141 ;; This function calls:
  8142 ;;		_AssignLightStates
  8143 ;; This function is called by:
  8144 ;;		_NewPattern
  8145 ;;		_ConstructStage
  8146 ;;		_InitWigwagPattern
  8147 ;;		_InitXStrobePattern
  8148 ;;		_InitUpperLowerPattern
  8149 ;;		_InitLowerPattern
  8150 ;; This function uses a non-reentrant model
  8151 ;;
  8152                           
  8153                           
  8154                           ;psect for function _NewStage
  8155  078E                     _NewStage:	
  8156  078E                     l1923:	
  8157                           ;incstack = 0
  8158                           ; Regs used in _NewStage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8159                           
  8160                           
  8161                           ;Pattern.c: 24:     if ( stage_list_iter >= MAX_STAGES )
  8162  078E  3000               	movlw	0
  8163  078F  0020               	movlb	0	; select bank0
  8164  0790  026B               	subwf	_stage_list_iter+1,w
  8165  0791  3060               	movlw	96
  8166  0792  1903               	skipnz
  8167  0793  026A               	subwf	_stage_list_iter,w
  8168  0794  1C03               	skipc
  8169  0795  2F97               	goto	u751
  8170  0796  2F98               	goto	u750
  8171  0797                     u751:	
  8172  0797  2F9B               	goto	l1929
  8173  0798                     u750:	
  8174  0798                     l1925:	
  8175                           
  8176                           ;Pattern.c: 25:         return ((void*)0);
  8177  0798  01A0               	clrf	?_NewStage
  8178  0799  01A1               	clrf	?_NewStage+1
  8179  079A  2FDC               	goto	l415
  8180  079B                     l1929:	
  8181                           
  8182                           ;Pattern.c: 27:     struct Stage* new_stage = &stage_stash[ stage_list_iter++ ];
  8183  079B  086B               	movf	_stage_list_iter+1,w
  8184  079C  00AA               	movwf	??_NewStage+1
  8185  079D  086A               	movf	_stage_list_iter,w
  8186  079E  00A9               	movwf	??_NewStage
  8187  079F  35A9               	lslf	??_NewStage,f
  8188  07A0  0DAA               	rlf	??_NewStage+1,f
  8189  07A1  35A9               	lslf	??_NewStage,f
  8190  07A2  0DAA               	rlf	??_NewStage+1,f
  8191  07A3  35A9               	lslf	??_NewStage,f
  8192  07A4  0DAA               	rlf	??_NewStage+1,f
  8193  07A5  30F0               	movlw	240
  8194  07A6  00AB               	movwf	??_NewStage+2
  8195  07A7  3020               	movlw	32
  8196  07A8  00AC               	movwf	??_NewStage+3
  8197  07A9  0829               	movf	??_NewStage,w
  8198  07AA  072B               	addwf	??_NewStage+2,w
  8199  07AB  00B1               	movwf	NewStage@new_stage
  8200  07AC  082A               	movf	??_NewStage+1,w
  8201  07AD  3D2C               	addwfc	??_NewStage+3,w
  8202  07AE  00B2               	movwf	NewStage@new_stage+1
  8203  07AF                     l1931:	
  8204  07AF  3001               	movlw	1
  8205  07B0  07EA               	addwf	_stage_list_iter,f
  8206  07B1  3000               	movlw	0
  8207  07B2  3DEB               	addwfc	_stage_list_iter+1,f
  8208  07B3                     l1933:	
  8209                           
  8210                           ;Pattern.c: 28:     _Bool init_states[NUM_LIGHTS] = { 0, 0, 0, 0 };
  8211  07B3  3000               	movlw	0
  8212  07B4  00B0               	movwf	NewStage@init_states+3
  8213  07B5  3000               	movlw	0
  8214  07B6  00AF               	movwf	NewStage@init_states+2
  8215  07B7  3000               	movlw	0
  8216  07B8  00AE               	movwf	NewStage@init_states+1
  8217  07B9  3000               	movlw	0
  8218  07BA  00AD               	movwf	NewStage@init_states
  8219  07BB                     l1935:	
  8220                           
  8221                           ;Pattern.c: 29:     AssignLightStates( new_stage, init_states );
  8222  07BB  0832               	movf	NewStage@new_stage+1,w
  8223  07BC  00A1               	movwf	AssignLightStates@stage+1
  8224  07BD  0831               	movf	NewStage@new_stage,w
  8225  07BE  00A0               	movwf	AssignLightStates@stage
  8226  07BF  302D               	movlw	(low (NewStage@init_states| 0))& (0+255)
  8227  07C0  00A9               	movwf	??_NewStage
  8228  07C1  0829               	movf	??_NewStage,w
  8229  07C2  00A2               	movwf	AssignLightStates@states
  8230  07C3  318E  2618  3187   	fcall	_AssignLightStates
  8231  07C6                     l1937:	
  8232                           
  8233                           ;Pattern.c: 30:     new_stage->time_ms = 60UL;
  8234  07C6  0020               	movlb	0	; select bank0
  8235  07C7  0831               	movf	NewStage@new_stage,w
  8236  07C8  0086               	movwf	6
  8237  07C9  0832               	movf	NewStage@new_stage+1,w
  8238  07CA  0087               	movwf	7
  8239  07CB  3144               	addfsr 1,4
  8240  07CC  303C               	movlw	60
  8241  07CD  3FC0               	movwi [0]fsr1
  8242  07CE  3000               	movlw	0
  8243  07CF  3FC1               	movwi [1]fsr1
  8244  07D0                     l1939:	
  8245                           
  8246                           ;Pattern.c: 31:     new_stage->next = ((void*)0);
  8247  07D0  0831               	movf	NewStage@new_stage,w
  8248  07D1  0086               	movwf	6
  8249  07D2  0832               	movf	NewStage@new_stage+1,w
  8250  07D3  0087               	movwf	7
  8251  07D4  3146               	addfsr 1,6
  8252  07D5  3000               	movlw	0
  8253  07D6  3FC0               	movwi [0]fsr1
  8254  07D7  3FC1               	movwi [1]fsr1
  8255  07D8                     l1941:	
  8256                           
  8257                           ;Pattern.c: 33:     return new_stage;
  8258  07D8  0832               	movf	NewStage@new_stage+1,w
  8259  07D9  00A1               	movwf	?_NewStage+1
  8260  07DA  0831               	movf	NewStage@new_stage,w
  8261  07DB  00A0               	movwf	?_NewStage
  8262  07DC                     l415:	
  8263  07DC  0008               	return
  8264  07DD                     __end_of_NewStage:	
  8265                           
  8266                           	psect	text21
  8267  0E18                     __ptext21:	
  8268 ;; *************** function _AssignLightStates *****************
  8269 ;; Defined at:
  8270 ;;		line 14 in file "Pattern.c"
  8271 ;; Parameters:    Size  Location     Type
  8272 ;;  stage           2    0[BANK0 ] PTR struct Stage
  8273 ;;		 -> stage_stash(768), NULL(0), 
  8274 ;;  states          1    2[BANK0 ] PTR const _Bool 
  8275 ;;		 -> InitLowerPattern@lower_right_states(4), InitLowerPattern@lower_left_states(4), InitUpperLowerPattern@lower_state
      +s(4), InitUpperLowerPattern@upper_states(4), 
  8276 ;;		 -> InitXStrobePattern@diag_2_3_states(4), InitXStrobePattern@diag_1_4_states(4), InitWigwagPattern@right_side_state
      +s(4), InitWigwagPattern@left_side_states(4), 
  8277 ;;		 -> NewStage@init_states(4), 
  8278 ;; Auto vars:     Size  Location     Type
  8279 ;;  i               2    7[BANK0 ] unsigned short 
  8280 ;; Return value:  Size  Location     Type
  8281 ;;                  1    wreg      void 
  8282 ;; Registers used:
  8283 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8284 ;; Tracked objects:
  8285 ;;		On entry : 0/0
  8286 ;;		On exit  : 0/0
  8287 ;;		Unchanged: 0/0
  8288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8289 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8291 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;Total ram usage:        9 bytes
  8294 ;; Hardware stack levels used:    1
  8295 ;; Hardware stack levels required when called:    6
  8296 ;; This function calls:
  8297 ;;		Nothing
  8298 ;; This function is called by:
  8299 ;;		_NewStage
  8300 ;;		_ConstructStage
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           
  8305                           ;psect for function _AssignLightStates
  8306  0E18                     _AssignLightStates:	
  8307  0E18                     l1911:	
  8308                           ;incstack = 0
  8309                           ; Regs used in _AssignLightStates: [wreg+fsr1l+fsr1h+status,2+status,0]
  8310                           
  8311                           
  8312                           ;Pattern.c: 14: void AssignLightStates( struct Stage* stage, const _Bool states[ NUM_LIG
      +                          HTS ] );Pattern.c: 15: {;Pattern.c: 16:     for( uint i = 0; i < NUM_LIGHTS; i++ )
  8313  0E18  0020               	movlb	0	; select bank0
  8314  0E19  01A7               	clrf	AssignLightStates@i
  8315  0E1A  01A8               	clrf	AssignLightStates@i+1
  8316  0E1B                     l1917:	
  8317                           
  8318                           ;Pattern.c: 17:     {;Pattern.c: 18:         stage->light_states[i] = states[i];
  8319  0E1B  0827               	movf	AssignLightStates@i,w
  8320  0E1C  0722               	addwf	AssignLightStates@states,w
  8321  0E1D  00A3               	movwf	??_AssignLightStates
  8322  0E1E  0823               	movf	??_AssignLightStates,w
  8323  0E1F  0086               	movwf	6
  8324  0E20  0187               	clrf	7
  8325  0E21  0801               	movf	1,w
  8326  0E22  00A4               	movwf	??_AssignLightStates+1
  8327  0E23  0827               	movf	AssignLightStates@i,w
  8328  0E24  0720               	addwf	AssignLightStates@stage,w
  8329  0E25  00A5               	movwf	??_AssignLightStates+2
  8330  0E26  0828               	movf	AssignLightStates@i+1,w
  8331  0E27  3D21               	addwfc	AssignLightStates@stage+1,w
  8332  0E28  00A6               	movwf	??_AssignLightStates+3
  8333  0E29  0825               	movf	??_AssignLightStates+2,w
  8334  0E2A  0086               	movwf	6
  8335  0E2B  0826               	movf	??_AssignLightStates+3,w
  8336  0E2C  0087               	movwf	7
  8337  0E2D  0824               	movf	??_AssignLightStates+1,w
  8338  0E2E  0081               	movwf	1
  8339  0E2F                     l1919:	
  8340                           
  8341                           ;Pattern.c: 19:     }
  8342  0E2F  3001               	movlw	1
  8343  0E30  07A7               	addwf	AssignLightStates@i,f
  8344  0E31  3000               	movlw	0
  8345  0E32  3DA8               	addwfc	AssignLightStates@i+1,f
  8346  0E33                     l1921:	
  8347  0E33  3000               	movlw	0
  8348  0E34  0228               	subwf	AssignLightStates@i+1,w
  8349  0E35  3004               	movlw	4
  8350  0E36  1903               	skipnz
  8351  0E37  0227               	subwf	AssignLightStates@i,w
  8352  0E38  1C03               	skipc
  8353  0E39  2E3B               	goto	u741
  8354  0E3A  2E3C               	goto	u740
  8355  0E3B                     u741:	
  8356  0E3B  2E1B               	goto	l1917
  8357  0E3C                     u740:	
  8358  0E3C                     l411:	
  8359  0E3C  0008               	return
  8360  0E3D                     __end_of_AssignLightStates:	
  8361                           
  8362                           	psect	text22
  8363  0736                     __ptext22:	
  8364 ;; *************** function _AppendStage *****************
  8365 ;; Defined at:
  8366 ;;		line 66 in file "Pattern.c"
  8367 ;; Parameters:    Size  Location     Type
  8368 ;;  head            2   28[BANK0 ] PTR struct Stage
  8369 ;;		 -> stage_stash(768), NULL(0), 
  8370 ;;  new_stage       2   30[BANK0 ] PTR struct Stage
  8371 ;;		 -> stage_stash(768), NULL(0), 
  8372 ;; Auto vars:     Size  Location     Type
  8373 ;;  last_stage      2   34[BANK0 ] PTR struct Stage
  8374 ;;		 -> stage_stash(768), NULL(0), 
  8375 ;; Return value:  Size  Location     Type
  8376 ;;                  1    wreg      void 
  8377 ;; Registers used:
  8378 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 0/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8384 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8386 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;Total ram usage:        8 bytes
  8389 ;; Hardware stack levels used:    1
  8390 ;; Hardware stack levels required when called:    6
  8391 ;; This function calls:
  8392 ;;		Nothing
  8393 ;; This function is called by:
  8394 ;;		_InitWigwagPattern
  8395 ;;		_InitXStrobePattern
  8396 ;;		_InitUpperLowerPattern
  8397 ;;		_InitLowerPattern
  8398 ;; This function uses a non-reentrant model
  8399 ;;
  8400                           
  8401                           
  8402                           ;psect for function _AppendStage
  8403  0736                     _AppendStage:	
  8404  0736                     l2005:	
  8405                           ;incstack = 0
  8406                           ; Regs used in _AppendStage: [wreg+fsr1l+fsr1h+status,2+status,0]
  8407                           
  8408                           
  8409                           ;Pattern.c: 66: void AppendStage( struct Stage* head, struct Stage* new_stage );Pattern.
      +                          c: 67: {;Pattern.c: 68:     if ( head->next == ((void*)0) )
  8410  0736  0020               	movlb	0	; select bank0
  8411  0737  083C               	movf	AppendStage@head,w
  8412  0738  0086               	movwf	6
  8413  0739  083D               	movf	AppendStage@head+1,w
  8414  073A  0087               	movwf	7
  8415  073B  3146               	addfsr 1,6
  8416  073C  0016               	moviw fsr1++
  8417  073D  0401               	iorwf	1,w
  8418  073E  1D03               	btfss	3,2
  8419  073F  2F41               	goto	u891
  8420  0740  2F42               	goto	u890
  8421  0741                     u891:	
  8422  0741  2F55               	goto	l2009
  8423  0742                     u890:	
  8424  0742                     l2007:	
  8425                           
  8426                           ;Pattern.c: 69:     {;Pattern.c: 70:         head->next = new_stage;
  8427  0742  083C               	movf	AppendStage@head,w
  8428  0743  0086               	movwf	6
  8429  0744  083D               	movf	AppendStage@head+1,w
  8430  0745  0087               	movwf	7
  8431  0746  3146               	addfsr 1,6
  8432  0747  083E               	movf	AppendStage@new_stage,w
  8433  0748  3FC0               	movwi [0]fsr1
  8434  0749  083F               	movf	AppendStage@new_stage+1,w
  8435  074A  3FC1               	movwi [1]fsr1
  8436                           
  8437                           ;Pattern.c: 71:         new_stage->next = head;
  8438  074B  083E               	movf	AppendStage@new_stage,w
  8439  074C  0086               	movwf	6
  8440  074D  083F               	movf	AppendStage@new_stage+1,w
  8441  074E  0087               	movwf	7
  8442  074F  3146               	addfsr 1,6
  8443  0750  083C               	movf	AppendStage@head,w
  8444  0751  3FC0               	movwi [0]fsr1
  8445  0752  083D               	movf	AppendStage@head+1,w
  8446  0753  3FC1               	movwi [1]fsr1
  8447                           
  8448                           ;Pattern.c: 72:     }
  8449  0754  2F8D               	goto	l437
  8450  0755                     l2009:	
  8451                           
  8452                           ;Pattern.c: 74:     {;Pattern.c: 75:         struct Stage* last_stage = head->next;
  8453  0755  083C               	movf	AppendStage@head,w
  8454  0756  0086               	movwf	6
  8455  0757  083D               	movf	AppendStage@head+1,w
  8456  0758  0087               	movwf	7
  8457  0759  3146               	addfsr 1,6
  8458  075A  3F40               	moviw [0]fsr1
  8459  075B  00C2               	movwf	AppendStage@last_stage
  8460  075C  3F41               	moviw [1]fsr1
  8461  075D  00C3               	movwf	AppendStage@last_stage+1
  8462                           
  8463                           ;Pattern.c: 76:         while( last_stage->next != head )
  8464  075E  2F68               	goto	l2013
  8465  075F                     l2011:	
  8466                           
  8467                           ;Pattern.c: 77:             last_stage = last_stage->next;
  8468  075F  0842               	movf	AppendStage@last_stage,w
  8469  0760  0086               	movwf	6
  8470  0761  0843               	movf	AppendStage@last_stage+1,w
  8471  0762  0087               	movwf	7
  8472  0763  3146               	addfsr 1,6
  8473  0764  3F40               	moviw [0]fsr1
  8474  0765  00C2               	movwf	AppendStage@last_stage
  8475  0766  3F41               	moviw [1]fsr1
  8476  0767  00C3               	movwf	AppendStage@last_stage+1
  8477  0768                     l2013:	
  8478                           
  8479                           ;Pattern.c: 76:         while( last_stage->next != head )
  8480  0768  0842               	movf	AppendStage@last_stage,w
  8481  0769  0086               	movwf	6
  8482  076A  0843               	movf	AppendStage@last_stage+1,w
  8483  076B  0087               	movwf	7
  8484  076C  3146               	addfsr 1,6
  8485  076D  3F40               	moviw [0]fsr1
  8486  076E  00C0               	movwf	??_AppendStage
  8487  076F  3F41               	moviw [1]fsr1
  8488  0770  00C1               	movwf	??_AppendStage+1
  8489  0771  083D               	movf	AppendStage@head+1,w
  8490  0772  0641               	xorwf	??_AppendStage+1,w
  8491  0773  1D03               	skipz
  8492  0774  2F77               	goto	u905
  8493  0775  083C               	movf	AppendStage@head,w
  8494  0776  0640               	xorwf	??_AppendStage,w
  8495  0777                     u905:	
  8496  0777  1D03               	skipz
  8497  0778  2F7A               	goto	u901
  8498  0779  2F7B               	goto	u900
  8499  077A                     u901:	
  8500  077A  2F5F               	goto	l2011
  8501  077B                     u900:	
  8502  077B                     l2015:	
  8503                           
  8504                           ;Pattern.c: 80:         last_stage->next = new_stage;
  8505  077B  0842               	movf	AppendStage@last_stage,w
  8506  077C  0086               	movwf	6
  8507  077D  0843               	movf	AppendStage@last_stage+1,w
  8508  077E  0087               	movwf	7
  8509  077F  3146               	addfsr 1,6
  8510  0780  083E               	movf	AppendStage@new_stage,w
  8511  0781  3FC0               	movwi [0]fsr1
  8512  0782  083F               	movf	AppendStage@new_stage+1,w
  8513  0783  3FC1               	movwi [1]fsr1
  8514                           
  8515                           ;Pattern.c: 81:         new_stage->next = head;
  8516  0784  083E               	movf	AppendStage@new_stage,w
  8517  0785  0086               	movwf	6
  8518  0786  083F               	movf	AppendStage@new_stage+1,w
  8519  0787  0087               	movwf	7
  8520  0788  3146               	addfsr 1,6
  8521  0789  083C               	movf	AppendStage@head,w
  8522  078A  3FC0               	movwi [0]fsr1
  8523  078B  083D               	movf	AppendStage@head+1,w
  8524  078C  3FC1               	movwi [1]fsr1
  8525  078D                     l437:	
  8526  078D  0008               	return
  8527  078E                     __end_of_AppendStage:	
  8528                           
  8529                           	psect	text23
  8530  0DF7                     __ptext23:	
  8531 ;; *************** function _EEPROM_GetSavedPattern *****************
  8532 ;; Defined at:
  8533 ;;		line 8 in file "EEPROM.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;		None
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;  saved_patter    1    2[BANK0 ] enum E53
  8538 ;; Return value:  Size  Location     Type
  8539 ;;                  1    wreg      enum E53
  8540 ;; Registers used:
  8541 ;;		wreg, status,2, status,0, pclath, cstack
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8548 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8549 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;Total ram usage:        2 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:    7
  8554 ;; This function calls:
  8555 ;;		_eeprom_read
  8556 ;; This function is called by:
  8557 ;;		_InitPatternSelector
  8558 ;; This function uses a non-reentrant model
  8559 ;;
  8560                           
  8561                           
  8562                           ;psect for function _EEPROM_GetSavedPattern
  8563  0DF7                     _EEPROM_GetSavedPattern:	
  8564  0DF7                     l2705:	
  8565                           ;incstack = 0
  8566                           ; Regs used in _EEPROM_GetSavedPattern: [wreg+status,2+status,0+pclath+cstack]
  8567                           
  8568                           
  8569                           ;EEPROM.c: 10:     enum PatternName saved_pattern = ( enum PatternName )eeprom_read( 0 )
      +                          ;
  8570  0DF7  3000               	movlw	0
  8571  0DF8  318D  2545  318D   	fcall	_eeprom_read
  8572  0DFB  0020               	movlb	0	; select bank0
  8573  0DFC  00A1               	movwf	??_EEPROM_GetSavedPattern
  8574  0DFD  0821               	movf	??_EEPROM_GetSavedPattern,w
  8575  0DFE  00A2               	movwf	EEPROM_GetSavedPattern@saved_pattern
  8576  0DFF                     l2707:	
  8577                           
  8578                           ;EEPROM.c: 11:     if ( saved_pattern != WIGWAG && saved_pattern != XSTROBE && saved_pat
      +                          tern != UPPER_LOWER && saved_pattern != LOWER )
  8579  0DFF  0822               	movf	EEPROM_GetSavedPattern@saved_pattern,w
  8580  0E00  1903               	btfsc	3,2
  8581  0E01  2E03               	goto	u1531
  8582  0E02  2E04               	goto	u1530
  8583  0E03                     u1531:	
  8584  0E03  2E16               	goto	l2717
  8585  0E04                     u1530:	
  8586  0E04                     l2709:	
  8587  0E04  0322               	decf	EEPROM_GetSavedPattern@saved_pattern,w
  8588  0E05  1903               	btfsc	3,2
  8589  0E06  2E08               	goto	u1541
  8590  0E07  2E09               	goto	u1540
  8591  0E08                     u1541:	
  8592  0E08  2E16               	goto	l2717
  8593  0E09                     u1540:	
  8594  0E09                     l2711:	
  8595  0E09  3002               	movlw	2
  8596  0E0A  0622               	xorwf	EEPROM_GetSavedPattern@saved_pattern,w
  8597  0E0B  1903               	btfsc	3,2
  8598  0E0C  2E0E               	goto	u1551
  8599  0E0D  2E0F               	goto	u1550
  8600  0E0E                     u1551:	
  8601  0E0E  2E16               	goto	l2717
  8602  0E0F                     u1550:	
  8603  0E0F                     l2713:	
  8604  0E0F  3003               	movlw	3
  8605  0E10  0622               	xorwf	EEPROM_GetSavedPattern@saved_pattern,w
  8606  0E11  1903               	btfsc	3,2
  8607  0E12  2E14               	goto	u1561
  8608  0E13  2E15               	goto	u1560
  8609  0E14                     u1561:	
  8610  0E14  2E16               	goto	l2717
  8611  0E15                     u1560:	
  8612  0E15                     l2715:	
  8613                           
  8614                           ;EEPROM.c: 12:         saved_pattern = WIGWAG;
  8615  0E15  01A2               	clrf	EEPROM_GetSavedPattern@saved_pattern
  8616  0E16                     l2717:	
  8617                           
  8618                           ;EEPROM.c: 13:     return saved_pattern;
  8619  0E16  0822               	movf	EEPROM_GetSavedPattern@saved_pattern,w
  8620  0E17                     l538:	
  8621  0E17  0008               	return
  8622  0E18                     __end_of_EEPROM_GetSavedPattern:	
  8623                           
  8624                           	psect	text24
  8625  0D45                     __ptext24:	
  8626 ;; *************** function _eeprom_read *****************
  8627 ;; Defined at:
  8628 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\pic\__eeread.c"
  8629 ;; Parameters:    Size  Location     Type
  8630 ;;  addr            1    wreg     unsigned char 
  8631 ;; Auto vars:     Size  Location     Type
  8632 ;;  addr            1    0[BANK0 ] unsigned char 
  8633 ;; Return value:  Size  Location     Type
  8634 ;;                  1    wreg      unsigned char 
  8635 ;; Registers used:
  8636 ;;		wreg
  8637 ;; Tracked objects:
  8638 ;;		On entry : 0/0
  8639 ;;		On exit  : 0/0
  8640 ;;		Unchanged: 0/0
  8641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8645 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8646 ;;Total ram usage:        1 bytes
  8647 ;; Hardware stack levels used:    1
  8648 ;; Hardware stack levels required when called:    6
  8649 ;; This function calls:
  8650 ;;		Nothing
  8651 ;; This function is called by:
  8652 ;;		_EEPROM_GetSavedPattern
  8653 ;; This function uses a non-reentrant model
  8654 ;;
  8655                           
  8656                           
  8657                           ;psect for function _eeprom_read
  8658  0D45                     _eeprom_read:	
  8659                           
  8660                           ;incstack = 0
  8661                           ; Regs used in _eeprom_read: [wreg]
  8662                           ;eeprom_read@addr stored from wreg
  8663  0D45  0020               	movlb	0	; select bank0
  8664  0D46  00A0               	movwf	eeprom_read@addr
  8665  0D47                     l697:	
  8666                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\pic\__eeread.c: 6: eeprom_re
      +                          ad(unsigned char addr);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\pic\__
      +                          eeread.c: 7: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\pic\__eeread.c
      +                          : 8:  do
  8667                           
  8668  0D47  0064               	clrwdt	;# 
  8669  0D48  0031               	movlb	17	; select bank17
  8670  0D49  1895               	btfsc	21,1	;volsfr
  8671  0D4A  2D4C               	goto	u1471
  8672  0D4B  2D4E               	goto	u1470
  8673  0D4C                     u1471:	
  8674  0D4C  0020               	movlb	0	; select bank0
  8675  0D4D  2D47               	goto	l697
  8676  0D4E                     u1470:	
  8677  0D4E                     l2613:	
  8678                           
  8679                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\pic\__eeread.c: 18:  return 
      +                          ( NVMCON1bits.NVMREGS = 1, NVMADRL = (addr) & 0xFFU, NVMADRH = 0x70, NVMCON1bits.RD = 1,
      +                           NVMDATL);
  8680  0D4E  1715               	bsf	21,6	;volsfr
  8681  0D4F  0020               	movlb	0	; select bank0
  8682  0D50  0820               	movf	eeprom_read@addr,w
  8683  0D51  0031               	movlb	17	; select bank17
  8684  0D52  0091               	movwf	17	;volatile
  8685  0D53  3070               	movlw	112
  8686  0D54  0092               	movwf	18	;volatile
  8687  0D55  1415               	bsf	21,0	;volsfr
  8688  0D56  0813               	movf	19,w	;volatile
  8689  0D57                     l699:	
  8690  0D57  0008               	return
  8691  0D58                     __end_of_eeprom_read:	
  8692                           
  8693                           	psect	text25
  8694  0FC1                     __ptext25:	
  8695 ;; *************** function _TurnSignalDone *****************
  8696 ;; Defined at:
  8697 ;;		line 14 in file "TurnSignal.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;		None
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;		None
  8702 ;; Return value:  Size  Location     Type
  8703 ;;                  1    wreg      _Bool 
  8704 ;; Registers used:
  8705 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8706 ;; Tracked objects:
  8707 ;;		On entry : 0/0
  8708 ;;		On exit  : 0/0
  8709 ;;		Unchanged: 0/0
  8710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8714 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;Total ram usage:        1 bytes
  8716 ;; Hardware stack levels used:    1
  8717 ;; Hardware stack levels required when called:    8
  8718 ;; This function calls:
  8719 ;;		_SetOutputs
  8720 ;;		_abs
  8721 ;;		_ms
  8722 ;; This function is called by:
  8723 ;;		_main
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           
  8728                           ;psect for function _TurnSignalDone
  8729  0FC1                     _TurnSignalDone:	
  8730  0FC1                     l2795:	
  8731                           ;incstack = 0
  8732                           ; Regs used in _TurnSignalDone: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8733                           
  8734                           
  8735                           ;TurnSignal.c: 17:     if ( PORTCbits.RC0 == 1 )
  8736  0FC1  0020               	movlb	0	; select bank0
  8737  0FC2  1C0E               	btfss	14,0	;volatile
  8738  0FC3  2FC5               	goto	u1621
  8739  0FC4  2FC6               	goto	u1620
  8740  0FC5                     u1621:	
  8741  0FC5  2FDF               	goto	l2805
  8742  0FC6                     u1620:	
  8743  0FC6                     l2797:	
  8744                           
  8745                           ;TurnSignal.c: 18:     {;TurnSignal.c: 19:         SetOutputs( 0 );
  8746  0FC6  3000               	movlw	0
  8747  0FC7  318E  263D  318F   	fcall	_SetOutputs
  8748  0FCA                     l2799:	
  8749                           
  8750                           ;TurnSignal.c: 20:         ts_trigger_time = ms();
  8751  0FCA  318C  24D8  318F   	fcall	_ms
  8752  0FCD  0020               	movlb	0	; select bank0
  8753  0FCE  0823               	movf	?_ms+3,w
  8754  0FCF  0021               	movlb	1	; select bank1
  8755  0FD0  00A7               	movwf	(_ts_trigger_time+3)^(0+128)
  8756  0FD1  0020               	movlb	0	; select bank0
  8757  0FD2  0822               	movf	?_ms+2,w
  8758  0FD3  0021               	movlb	1	; select bank1
  8759  0FD4  00A6               	movwf	(_ts_trigger_time+2)^(0+128)
  8760  0FD5  0020               	movlb	0	; select bank0
  8761  0FD6  0821               	movf	?_ms+1,w
  8762  0FD7  0021               	movlb	1	; select bank1
  8763  0FD8  00A5               	movwf	(_ts_trigger_time+1)^(0+128)
  8764  0FD9  0020               	movlb	0	; select bank0
  8765  0FDA  0820               	movf	?_ms,w
  8766  0FDB  0021               	movlb	1	; select bank1
  8767  0FDC  00A4               	movwf	_ts_trigger_time^(0+128)
  8768  0FDD                     l2801:	
  8769                           
  8770                           ;TurnSignal.c: 21:         return 0;
  8771  0FDD  3000               	movlw	0
  8772  0FDE  2FFF               	goto	l385
  8773  0FDF                     l2805:	
  8774                           
  8775                           ;TurnSignal.c: 24:     return abs( ms() - ts_trigger_time ) > 2000;;
  8776  0FDF  318C  24D8  318F   	fcall	_ms
  8777  0FE2  0021               	movlb	1	; select bank1
  8778  0FE3  0824               	movf	_ts_trigger_time^(0+128),w
  8779  0FE4  0020               	movlb	0	; select bank0
  8780  0FE5  0220               	subwf	?_ms,w
  8781  0FE6  00A4               	movwf	abs@a
  8782  0FE7  0021               	movlb	1	; select bank1
  8783  0FE8  0825               	movf	(_ts_trigger_time+1)^(0+128),w
  8784  0FE9  0020               	movlb	0	; select bank0
  8785  0FEA  3B21               	subwfb	?_ms+1,w
  8786  0FEB  00A5               	movwf	abs@a+1
  8787  0FEC  318D  259B  318F   	fcall	_abs
  8788  0FEF  0020               	movlb	0	; select bank0
  8789  0FF0  0825               	movf	?_abs+1,w
  8790  0FF1  3A80               	xorlw	128
  8791  0FF2  00A8               	movwf	??_TurnSignalDone
  8792  0FF3  3087               	movlw	135
  8793  0FF4  0228               	subwf	??_TurnSignalDone,w
  8794  0FF5  1D03               	skipz
  8795  0FF6  2FF9               	goto	u1635
  8796  0FF7  30D1               	movlw	209
  8797  0FF8  0224               	subwf	?_abs,w
  8798  0FF9                     u1635:	
  8799  0FF9  1803               	skipnc
  8800  0FFA  2FFC               	goto	u1631
  8801  0FFB  2FFE               	goto	u1630
  8802  0FFC                     u1631:	
  8803  0FFC  3001               	movlw	1
  8804  0FFD  2FFF               	goto	u1640
  8805  0FFE                     u1630:	
  8806  0FFE  3000               	movlw	0
  8807  0FFF                     u1640:	
  8808  0FFF                     l385:	
  8809  0FFF  0008               	return
  8810  1000                     __end_of_TurnSignalDone:	
  8811                           
  8812                           	psect	text26
  8813  0D9B                     __ptext26:	
  8814 ;; *************** function _abs *****************
  8815 ;; Defined at:
  8816 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\abs.c"
  8817 ;; Parameters:    Size  Location     Type
  8818 ;;  a               2    4[BANK0 ] int 
  8819 ;; Auto vars:     Size  Location     Type
  8820 ;;		None
  8821 ;; Return value:  Size  Location     Type
  8822 ;;                  2    4[BANK0 ] int 
  8823 ;; Registers used:
  8824 ;;		wreg, status,2, status,0
  8825 ;; Tracked objects:
  8826 ;;		On entry : 0/0
  8827 ;;		On exit  : 0/0
  8828 ;;		Unchanged: 0/0
  8829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8830 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8832 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8833 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8834 ;;Total ram usage:        4 bytes
  8835 ;; Hardware stack levels used:    1
  8836 ;; Hardware stack levels required when called:    6
  8837 ;; This function calls:
  8838 ;;		Nothing
  8839 ;; This function is called by:
  8840 ;;		_TurnSignalDone
  8841 ;; This function uses a non-reentrant model
  8842 ;;
  8843                           
  8844                           
  8845                           ;psect for function _abs
  8846  0D9B                     _abs:	
  8847  0D9B                     l2409:	
  8848                           ;incstack = 0
  8849                           ; Regs used in _abs: [wreg+status,2+status,0]
  8850                           
  8851  0D9B  0020               	movlb	0	; select bank0
  8852  0D9C  0825               	movf	abs@a+1,w
  8853  0D9D  3A80               	xorlw	128
  8854  0D9E  00A6               	movwf	??_abs
  8855  0D9F  3080               	movlw	128
  8856  0DA0  0226               	subwf	??_abs,w
  8857  0DA1  1D03               	skipz
  8858  0DA2  2DA5               	goto	u1285
  8859  0DA3  3001               	movlw	1
  8860  0DA4  0224               	subwf	abs@a,w
  8861  0DA5                     u1285:	
  8862  0DA5  1803               	skipnc
  8863  0DA6  2DA8               	goto	u1281
  8864  0DA7  2DA9               	goto	u1280
  8865  0DA8                     u1281:	
  8866  0DA8  2DB6               	goto	l1186
  8867  0DA9                     u1280:	
  8868  0DA9                     l2411:	
  8869  0DA9  0020               	movlb	0	; select bank0
  8870  0DAA  0924               	comf	abs@a,w
  8871  0DAB  00A6               	movwf	??_abs
  8872  0DAC  0925               	comf	abs@a+1,w
  8873  0DAD  00A7               	movwf	??_abs+1
  8874  0DAE  0AA6               	incf	??_abs,f
  8875  0DAF  1903               	skipnz
  8876  0DB0  0AA7               	incf	??_abs+1,f
  8877  0DB1  0826               	movf	??_abs,w
  8878  0DB2  00A4               	movwf	?_abs
  8879  0DB3  0827               	movf	??_abs+1,w
  8880  0DB4  00A5               	movwf	?_abs+1
  8881  0DB5  2DB6               	goto	l1189
  8882  0DB6                     l1186:	
  8883  0DB6                     l1189:	
  8884  0DB6  0008               	return
  8885  0DB7                     __end_of_abs:	
  8886                           
  8887                           	psect	text27
  8888  0E3D                     __ptext27:	
  8889 ;; *************** function _SetOutputs *****************
  8890 ;; Defined at:
  8891 ;;		line 39 in file "Lights.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;  state           1    wreg     const _Bool 
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;  state           1    6[BANK0 ] const _Bool 
  8896 ;; Return value:  Size  Location     Type
  8897 ;;                  1    wreg      void 
  8898 ;; Registers used:
  8899 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;Total ram usage:        2 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:    7
  8912 ;; This function calls:
  8913 ;;		_SetLight
  8914 ;; This function is called by:
  8915 ;;		_setup
  8916 ;;		_TurnSignalDone
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           
  8921                           ;psect for function _SetOutputs
  8922  0E3D                     _SetOutputs:	
  8923                           
  8924                           ;incstack = 0
  8925                           ; Regs used in _SetOutputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8926                           ;SetOutputs@state stored from wreg
  8927  0E3D  0020               	movlb	0	; select bank0
  8928  0E3E  00A6               	movwf	SetOutputs@state
  8929  0E3F                     l2375:	
  8930                           
  8931                           ;Lights.c: 39: void SetOutputs( const _Bool state );Lights.c: 40: {;Lights.c: 41:     Se
      +                          tLight( L1, state );
  8932  0E3F  0826               	movf	SetOutputs@state,w
  8933  0E40  00A5               	movwf	??_SetOutputs
  8934  0E41  0825               	movf	??_SetOutputs,w
  8935  0E42  00A0               	movwf	SetLight@_state
  8936  0E43  3000               	movlw	0
  8937  0E44  3186  26C4  318E   	fcall	_SetLight
  8938                           
  8939                           ;Lights.c: 42:     SetLight( L2, state );
  8940  0E47  0020               	movlb	0	; select bank0
  8941  0E48  0826               	movf	SetOutputs@state,w
  8942  0E49  00A5               	movwf	??_SetOutputs
  8943  0E4A  0825               	movf	??_SetOutputs,w
  8944  0E4B  00A0               	movwf	SetLight@_state
  8945  0E4C  3001               	movlw	1
  8946  0E4D  3186  26C4  318E   	fcall	_SetLight
  8947                           
  8948                           ;Lights.c: 43:     SetLight( L3, state );
  8949  0E50  0020               	movlb	0	; select bank0
  8950  0E51  0826               	movf	SetOutputs@state,w
  8951  0E52  00A5               	movwf	??_SetOutputs
  8952  0E53  0825               	movf	??_SetOutputs,w
  8953  0E54  00A0               	movwf	SetLight@_state
  8954  0E55  3002               	movlw	2
  8955  0E56  3186  26C4  318E   	fcall	_SetLight
  8956                           
  8957                           ;Lights.c: 44:     SetLight( L4, state );
  8958  0E59  0020               	movlb	0	; select bank0
  8959  0E5A  0826               	movf	SetOutputs@state,w
  8960  0E5B  00A5               	movwf	??_SetOutputs
  8961  0E5C  0825               	movf	??_SetOutputs,w
  8962  0E5D  00A0               	movwf	SetLight@_state
  8963  0E5E  3003               	movlw	3
  8964  0E5F  3186  26C4  318E   	fcall	_SetLight
  8965  0E62                     l352:	
  8966  0E62  0008               	return
  8967  0E63                     __end_of_SetOutputs:	
  8968                           
  8969                           	psect	text28
  8970  0F16                     __ptext28:	
  8971 ;; *************** function _PatternCycleInputChanged *****************
  8972 ;; Defined at:
  8973 ;;		line 27 in file "TurnSignal.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;		None
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;  delay_count     2    2[BANK0 ] unsigned short 
  8978 ;; Return value:  Size  Location     Type
  8979 ;;                  1    wreg      _Bool 
  8980 ;; Registers used:
  8981 ;;		wreg, status,2, status,0
  8982 ;; Tracked objects:
  8983 ;;		On entry : 0/0
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;Total ram usage:        4 bytes
  8992 ;; Hardware stack levels used:    1
  8993 ;; Hardware stack levels required when called:    6
  8994 ;; This function calls:
  8995 ;;		Nothing
  8996 ;; This function is called by:
  8997 ;;		_main
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           
  9002                           ;psect for function _PatternCycleInputChanged
  9003  0F16                     _PatternCycleInputChanged:	
  9004  0F16                     l2451:	
  9005                           ;incstack = 0
  9006                           ; Regs used in _PatternCycleInputChanged: [wreg+status,2+status,0]
  9007                           
  9008                           
  9009                           ;TurnSignal.c: 29:     cur_pc_input_state = PORTCbits.RC5;
  9010  0F16  3000               	movlw	0
  9011  0F17  0020               	movlb	0	; select bank0
  9012  0F18  1A8E               	btfsc	14,5	;volatile
  9013  0F19  3001               	movlw	1
  9014  0F1A  00EE               	movwf	_cur_pc_input_state
  9015  0F1B                     l2453:	
  9016                           
  9017                           ;TurnSignal.c: 30:     if ( cur_pc_input_state != last_pc_input_state )
  9018  0F1B  086E               	movf	_cur_pc_input_state,w
  9019  0F1C  066D               	xorwf	_last_pc_input_state,w
  9020  0F1D  1903               	skipnz
  9021  0F1E  2F20               	goto	u1341
  9022  0F1F  2F21               	goto	u1340
  9023  0F20                     u1341:	
  9024  0F20  2F36               	goto	l2461
  9025  0F21                     u1340:	
  9026  0F21                     l2455:	
  9027                           
  9028                           ;TurnSignal.c: 31:     {;TurnSignal.c: 32:         uint delay_count = 0;
  9029  0F21  01A2               	clrf	PatternCycleInputChanged@delay_count
  9030  0F22  01A3               	clrf	PatternCycleInputChanged@delay_count+1
  9031                           
  9032                           ;TurnSignal.c: 34:         while ( delay_count++ < 3 )
  9033  0F23  2F38               	goto	l2465
  9034  0F24                     l2457:	
  9035                           
  9036                           ;TurnSignal.c: 35:         {;TurnSignal.c: 36:             _delay((unsigned long)((10)*(
      +                          1000000/4000.0)));
  9037  0F24  3004               	movlw	4
  9038  0F25  0020               	movlb	0	; select bank0
  9039  0F26  00A0               	movwf	??_PatternCycleInputChanged
  9040  0F27  303D               	movlw	61
  9041  0F28                     u1707:	
  9042  0F28  0B89               	decfsz	9,f
  9043  0F29  2F28               	goto	u1707
  9044  0F2A  0BA0               	decfsz	??_PatternCycleInputChanged,f
  9045  0F2B  2F28               	goto	u1707
  9046  0F2C  3200               	nop2
  9047  0F2D                     l2459:	
  9048                           
  9049                           ;TurnSignal.c: 38:             if( PORTCbits.RC5 != cur_pc_input_state )
  9050  0F2D  0020               	movlb	0	; select bank0
  9051  0F2E  0E0E               	swapf	14,w	;volatile
  9052  0F2F  0C89               	rrf	9,f
  9053  0F30  3901               	andlw	1
  9054  0F31  066E               	xorwf	_cur_pc_input_state,w
  9055  0F32  1903               	skipnz
  9056  0F33  2F35               	goto	u1351
  9057  0F34  2F36               	goto	u1350
  9058  0F35                     u1351:	
  9059  0F35  2F38               	goto	l2465
  9060  0F36                     u1350:	
  9061  0F36                     l2461:	
  9062                           
  9063                           ;TurnSignal.c: 39:             {;TurnSignal.c: 40:                 return 0;
  9064  0F36  3000               	movlw	0
  9065  0F37  2F49               	goto	l392
  9066  0F38                     l2465:	
  9067                           
  9068                           ;TurnSignal.c: 34:         while ( delay_count++ < 3 )
  9069  0F38  0823               	movf	PatternCycleInputChanged@delay_count+1,w
  9070  0F39  00A1               	movwf	??_PatternCycleInputChanged+1
  9071  0F3A  0822               	movf	PatternCycleInputChanged@delay_count,w
  9072  0F3B  00A0               	movwf	??_PatternCycleInputChanged
  9073  0F3C  0AA2               	incf	PatternCycleInputChanged@delay_count,f
  9074  0F3D  1903               	skipnz
  9075  0F3E  0AA3               	incf	PatternCycleInputChanged@delay_count+1,f
  9076  0F3F  3000               	movlw	0
  9077  0F40  0221               	subwf	??_PatternCycleInputChanged+1,w
  9078  0F41  3003               	movlw	3
  9079  0F42  1903               	skipnz
  9080  0F43  0220               	subwf	??_PatternCycleInputChanged,w
  9081  0F44  1C03               	skipc
  9082  0F45  2F47               	goto	u1361
  9083  0F46  2F48               	goto	u1360
  9084  0F47                     u1361:	
  9085  0F47  2F24               	goto	l2457
  9086  0F48                     u1360:	
  9087  0F48                     l2471:	
  9088                           
  9089                           ;TurnSignal.c: 49:     return 1;
  9090  0F48  3001               	movlw	1
  9091  0F49                     l392:	
  9092  0F49  0008               	return
  9093  0F4A                     __end_of_PatternCycleInputChanged:	
  9094                           
  9095                           	psect	text29
  9096  05C0                     __ptext29:	
  9097 ;; *************** function _NextPattern *****************
  9098 ;; Defined at:
  9099 ;;		line 26 in file "PatternSelector.c"
  9100 ;; Parameters:    Size  Location     Type
  9101 ;;  p_selector      2    4[BANK0 ] PTR volatile struct Patt
  9102 ;;		 -> pattern_selector(19), 
  9103 ;; Auto vars:     Size  Location     Type
  9104 ;;		None
  9105 ;; Return value:  Size  Location     Type
  9106 ;;                  2    4[BANK0 ] PTR struct Pattern
  9107 ;; Registers used:
  9108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9109 ;; Tracked objects:
  9110 ;;		On entry : 0/0
  9111 ;;		On exit  : 0/0
  9112 ;;		Unchanged: 0/0
  9113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9114 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9116 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9117 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9118 ;;Total ram usage:        6 bytes
  9119 ;; Hardware stack levels used:    1
  9120 ;; Hardware stack levels required when called:    8
  9121 ;; This function calls:
  9122 ;;		_EEPROM_SavePattern
  9123 ;; This function is called by:
  9124 ;;		_main
  9125 ;; This function uses a non-reentrant model
  9126 ;;
  9127                           
  9128                           
  9129                           ;psect for function _NextPattern
  9130  05C0                     _NextPattern:	
  9131  05C0                     l2809:	
  9132                           ;incstack = 0
  9133                           ; Regs used in _NextPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9134                           
  9135                           
  9136                           ;PatternSelector.c: 26: struct Pattern* NextPattern( struct PatternSelector* p_selector 
      +                          );PatternSelector.c: 27: {;PatternSelector.c: 28:     switch( p_selector->active )
  9137  05C0  2DF6               	goto	l2823
  9138  05C1                     l2811:	
  9139                           
  9140                           ;PatternSelector.c: 31:             p_selector->active = XSTROBE;
  9141  05C1  0824               	movf	NextPattern@p_selector,w
  9142  05C2  3E0C               	addlw	12
  9143  05C3  00A6               	movwf	??_NextPattern
  9144  05C4  3000               	movlw	0
  9145  05C5  3D25               	addwfc	NextPattern@p_selector+1,w
  9146  05C6  00A7               	movwf	??_NextPattern+1
  9147  05C7  0826               	movf	??_NextPattern,w
  9148  05C8  0086               	movwf	6
  9149  05C9  0827               	movf	??_NextPattern+1,w
  9150  05CA  0087               	movwf	7
  9151  05CB  3001               	movlw	1
  9152  05CC  0081               	movwf	1
  9153                           
  9154                           ;PatternSelector.c: 32:             break;
  9155  05CD  2E12               	goto	l2825
  9156  05CE                     l2813:	
  9157                           
  9158                           ;PatternSelector.c: 34:             p_selector->active = UPPER_LOWER;
  9159  05CE  0824               	movf	NextPattern@p_selector,w
  9160  05CF  3E0C               	addlw	12
  9161  05D0  00A6               	movwf	??_NextPattern
  9162  05D1  3000               	movlw	0
  9163  05D2  3D25               	addwfc	NextPattern@p_selector+1,w
  9164  05D3  00A7               	movwf	??_NextPattern+1
  9165  05D4  0826               	movf	??_NextPattern,w
  9166  05D5  0086               	movwf	6
  9167  05D6  0827               	movf	??_NextPattern+1,w
  9168  05D7  0087               	movwf	7
  9169  05D8  3002               	movlw	2
  9170  05D9  0081               	movwf	1
  9171                           
  9172                           ;PatternSelector.c: 35:             break;
  9173  05DA  2E12               	goto	l2825
  9174  05DB                     l2815:	
  9175                           
  9176                           ;PatternSelector.c: 37:             p_selector->active = LOWER;
  9177  05DB  0824               	movf	NextPattern@p_selector,w
  9178  05DC  3E0C               	addlw	12
  9179  05DD  00A6               	movwf	??_NextPattern
  9180  05DE  3000               	movlw	0
  9181  05DF  3D25               	addwfc	NextPattern@p_selector+1,w
  9182  05E0  00A7               	movwf	??_NextPattern+1
  9183  05E1  0826               	movf	??_NextPattern,w
  9184  05E2  0086               	movwf	6
  9185  05E3  0827               	movf	??_NextPattern+1,w
  9186  05E4  0087               	movwf	7
  9187  05E5  3003               	movlw	3
  9188  05E6  0081               	movwf	1
  9189                           
  9190                           ;PatternSelector.c: 38:             break;
  9191  05E7  2E12               	goto	l2825
  9192  05E8                     l2817:	
  9193                           
  9194                           ;PatternSelector.c: 40:             p_selector->active = WIGWAG;
  9195  05E8  0824               	movf	NextPattern@p_selector,w
  9196  05E9  0086               	movwf	6
  9197  05EA  0825               	movf	NextPattern@p_selector+1,w
  9198  05EB  0087               	movwf	7
  9199  05EC  314C               	addfsr 1,12
  9200  05ED  0181               	clrf	1
  9201                           
  9202                           ;PatternSelector.c: 41:             break;
  9203  05EE  2E12               	goto	l2825
  9204  05EF                     l2819:	
  9205                           
  9206                           ;PatternSelector.c: 43:             p_selector->active = WIGWAG;
  9207  05EF  0824               	movf	NextPattern@p_selector,w
  9208  05F0  0086               	movwf	6
  9209  05F1  0825               	movf	NextPattern@p_selector+1,w
  9210  05F2  0087               	movwf	7
  9211  05F3  314C               	addfsr 1,12
  9212  05F4  0181               	clrf	1
  9213                           
  9214                           ;PatternSelector.c: 44:             break;
  9215  05F5  2E12               	goto	l2825
  9216  05F6                     l2823:	
  9217  05F6  0020               	movlb	0	; select bank0
  9218  05F7  0824               	movf	NextPattern@p_selector,w
  9219  05F8  0086               	movwf	6
  9220  05F9  0825               	movf	NextPattern@p_selector+1,w
  9221  05FA  0087               	movwf	7
  9222  05FB  314C               	addfsr 1,12
  9223  05FC  0801               	movf	1,w
  9224  05FD  00A6               	movwf	??_NextPattern
  9225  05FE  01A7               	clrf	??_NextPattern+1
  9226                           
  9227                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9228                           ; Switch size 1, requested type "simple"
  9229                           ; Number of cases is 1, Range of values is 0 to 0
  9230                           ; switch strategies available:
  9231                           ; Name         Instructions Cycles
  9232                           ; simple_byte            4     3 (average)
  9233                           ; direct_byte            8     6 (fixed)
  9234                           ; jumptable            260     6 (fixed)
  9235                           ;	Chosen strategy is simple_byte
  9236  05FF  0827               	movf	??_NextPattern+1,w
  9237  0600  3A00               	xorlw	0	; case 0
  9238  0601  1903               	skipnz
  9239  0602  2E04               	goto	l2929
  9240  0603  2DEF               	goto	l2819
  9241  0604                     l2929:	
  9242                           
  9243                           ; Switch size 1, requested type "simple"
  9244                           ; Number of cases is 4, Range of values is 0 to 3
  9245                           ; switch strategies available:
  9246                           ; Name         Instructions Cycles
  9247                           ; simple_byte           13     7 (average)
  9248                           ; direct_byte           14     6 (fixed)
  9249                           ; jumptable            260     6 (fixed)
  9250                           ;	Chosen strategy is simple_byte
  9251  0604  0826               	movf	??_NextPattern,w
  9252  0605  3A00               	xorlw	0	; case 0
  9253  0606  1903               	skipnz
  9254  0607  2DC1               	goto	l2811
  9255  0608  3A01               	xorlw	1	; case 1
  9256  0609  1903               	skipnz
  9257  060A  2DCE               	goto	l2813
  9258  060B  3A03               	xorlw	3	; case 2
  9259  060C  1903               	skipnz
  9260  060D  2DDB               	goto	l2815
  9261  060E  3A01               	xorlw	1	; case 3
  9262  060F  1903               	skipnz
  9263  0610  2DE8               	goto	l2817
  9264  0611  2DEF               	goto	l2819
  9265  0612                     l2825:	
  9266                           
  9267                           ;PatternSelector.c: 47:     p_selector->current_stage = p_selector->patterns[ p_selector
      +                          ->active ]->first_stage;
  9268  0612  0824               	movf	NextPattern@p_selector,w
  9269  0613  0086               	movwf	6
  9270  0614  0825               	movf	NextPattern@p_selector+1,w
  9271  0615  0087               	movwf	7
  9272  0616  314C               	addfsr 1,12
  9273  0617  0801               	movf	1,w
  9274  0618  00A6               	movwf	??_NextPattern
  9275  0619  01A7               	clrf	??_NextPattern+1
  9276  061A  35A6               	lslf	??_NextPattern,f
  9277  061B  0DA7               	rlf	??_NextPattern+1,f
  9278  061C  0826               	movf	??_NextPattern,w
  9279  061D  0724               	addwf	NextPattern@p_selector,w
  9280  061E  0086               	movwf	6
  9281  061F  0827               	movf	??_NextPattern+1,w
  9282  0620  3D25               	addwfc	NextPattern@p_selector+1,w
  9283  0621  0087               	movwf	7
  9284  0622  3F40               	moviw [0]fsr1
  9285  0623  00A8               	movwf	??_NextPattern+2
  9286  0624  3F41               	moviw [1]fsr1
  9287  0625  00A9               	movwf	??_NextPattern+3
  9288  0626  0828               	movf	??_NextPattern+2,w
  9289  0627  0086               	movwf	6
  9290  0628  0829               	movf	??_NextPattern+3,w
  9291  0629  0087               	movwf	7
  9292  062A  3141               	addfsr 1,1
  9293  062B  0824               	movf	NextPattern@p_selector,w
  9294  062C  0084               	movwf	4
  9295  062D  0825               	movf	NextPattern@p_selector+1,w
  9296  062E  0085               	movwf	5
  9297  062F  310D               	addfsr 0,13
  9298  0630  3F40               	moviw [0]fsr1
  9299  0631  3F80               	movwi [0]fsr0
  9300  0632  3F41               	moviw [1]fsr1
  9301  0633  3F81               	movwi [1]fsr0
  9302  0634                     l2827:	
  9303                           
  9304                           ;PatternSelector.c: 49:     EEPROM_SavePattern( p_selector->active );
  9305  0634  0824               	movf	NextPattern@p_selector,w
  9306  0635  0086               	movwf	6
  9307  0636  0825               	movf	NextPattern@p_selector+1,w
  9308  0637  0087               	movwf	7
  9309  0638  314C               	addfsr 1,12
  9310  0639  0801               	movf	1,w
  9311  063A  318C  24E2  3185   	fcall	_EEPROM_SavePattern
  9312  063D                     l2829:	
  9313                           
  9314                           ;PatternSelector.c: 51:     return p_selector->patterns[ p_selector->active ];;	Return v
      +                          alue of _NextPattern is never used
  9315  063D  0020               	movlb	0	; select bank0
  9316  063E  0824               	movf	NextPattern@p_selector,w
  9317  063F  0086               	movwf	6
  9318  0640  0825               	movf	NextPattern@p_selector+1,w
  9319  0641  0087               	movwf	7
  9320  0642  314C               	addfsr 1,12
  9321  0643  0801               	movf	1,w
  9322  0644  00A6               	movwf	??_NextPattern
  9323  0645  01A7               	clrf	??_NextPattern+1
  9324  0646  35A6               	lslf	??_NextPattern,f
  9325  0647  0DA7               	rlf	??_NextPattern+1,f
  9326  0648  0826               	movf	??_NextPattern,w
  9327  0649  0724               	addwf	NextPattern@p_selector,w
  9328  064A  0086               	movwf	6
  9329  064B  0827               	movf	??_NextPattern+1,w
  9330  064C  3D25               	addwfc	NextPattern@p_selector+1,w
  9331  064D  0087               	movwf	7
  9332  064E                     l315:	
  9333  064E  0008               	return
  9334  064F                     __end_of_NextPattern:	
  9335                           
  9336                           	psect	text30
  9337  0CE2                     __ptext30:	
  9338 ;; *************** function _EEPROM_SavePattern *****************
  9339 ;; Defined at:
  9340 ;;		line 3 in file "EEPROM.c"
  9341 ;; Parameters:    Size  Location     Type
  9342 ;;  pattern_name    1    wreg     enum E53
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  pattern_name    1    3[BANK0 ] enum E53
  9345 ;; Return value:  Size  Location     Type
  9346 ;;                  1    wreg      void 
  9347 ;; Registers used:
  9348 ;;		wreg, status,2, status,0, pclath, cstack
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9357 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;Total ram usage:        2 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    7
  9361 ;; This function calls:
  9362 ;;		_eeprom_write
  9363 ;; This function is called by:
  9364 ;;		_NextPattern
  9365 ;; This function uses a non-reentrant model
  9366 ;;
  9367                           
  9368                           
  9369                           ;psect for function _EEPROM_SavePattern
  9370  0CE2                     _EEPROM_SavePattern:	
  9371                           
  9372                           ;incstack = 0
  9373                           ; Regs used in _EEPROM_SavePattern: [wreg+status,2+status,0+pclath+cstack]
  9374                           ;EEPROM_SavePattern@pattern_name stored from wreg
  9375  0CE2  0020               	movlb	0	; select bank0
  9376  0CE3  00A3               	movwf	EEPROM_SavePattern@pattern_name
  9377  0CE4                     l2777:	
  9378                           
  9379                           ;EEPROM.c: 3: void EEPROM_SavePattern( enum PatternName pattern_name );EEPROM.c: 4: {;EE
      +                          PROM.c: 5:     eeprom_write( 0, (byte)pattern_name );
  9380  0CE4  0823               	movf	EEPROM_SavePattern@pattern_name,w
  9381  0CE5  00A2               	movwf	??_EEPROM_SavePattern
  9382  0CE6  0822               	movf	??_EEPROM_SavePattern,w
  9383  0CE7  00A0               	movwf	eeprom_write@value
  9384  0CE8  3000               	movlw	0
  9385  0CE9  318E  26E8  318C   	fcall	_eeprom_write
  9386  0CEC                     l534:	
  9387  0CEC  0008               	return
  9388  0CED                     __end_of_EEPROM_SavePattern:	
  9389                           
  9390                           	psect	text31
  9391  0EE8                     __ptext31:	
  9392 ;; *************** function _eeprom_write *****************
  9393 ;; Defined at:
  9394 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\pic\__eewrite.c"
  9395 ;; Parameters:    Size  Location     Type
  9396 ;;  addr            1    wreg     unsigned char 
  9397 ;;  value           1    0[BANK0 ] unsigned char 
  9398 ;; Auto vars:     Size  Location     Type
  9399 ;;  addr            1    1[BANK0 ] unsigned char 
  9400 ;; Return value:  Size  Location     Type
  9401 ;;                  1    wreg      void 
  9402 ;; Registers used:
  9403 ;;		wreg, status,2
  9404 ;; Tracked objects:
  9405 ;;		On entry : 0/0
  9406 ;;		On exit  : 0/0
  9407 ;;		Unchanged: 0/0
  9408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9409 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;Total ram usage:        2 bytes
  9414 ;; Hardware stack levels used:    1
  9415 ;; Hardware stack levels required when called:    6
  9416 ;; This function calls:
  9417 ;;		Nothing
  9418 ;; This function is called by:
  9419 ;;		_EEPROM_SavePattern
  9420 ;; This function uses a non-reentrant model
  9421 ;;
  9422                           
  9423                           
  9424                           ;psect for function _eeprom_write
  9425  0EE8                     _eeprom_write:	
  9426                           
  9427                           ;incstack = 0
  9428                           ; Regs used in _eeprom_write: [wreg+status,2]
  9429                           ;eeprom_write@addr stored from wreg
  9430  0EE8  0020               	movlb	0	; select bank0
  9431  0EE9  00A1               	movwf	eeprom_write@addr
  9432  0EEA                     l718:	
  9433                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\pic\__eewrite.c: 6: eeprom_w
      +                          rite(unsigned char addr, unsigned char value);C:\Program Files (x86)\Microchip\xc8\v2.10
      +                          \pic\sources\c99\pic\__eewrite.c: 7: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\so
      +                          urces\c99\pic\__eewrite.c: 8:  do { while (NVMCON1bits.WR) { continue; } NVMCON1bits.NVM
      +                          REGS = 1; NVMADRL = (addr) & 0xFFU; NVMADRH = 0x70; NVMDATH = 0; NVMDATL = (value) & 0xF
      +                          FU; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCONbits.GIE =
      +                           0; NVMCON1bits.WREN = 1; NVMCON2 = 0x55; NVMCON2 = 0xAA; NVMCON1bits.WR = 1; while (NVM
      +                          CON1bits.WR) { continue; } NVMCON1bits.WREN = 0; if (STATUSbits.CARRY) { INTCONbits.GIE 
      +                          = 1; } } while (0);
  9434                           
  9435  0EEA                     l719:	
  9436  0EEA  0031               	movlb	17	; select bank17
  9437  0EEB  1895               	btfsc	21,1	;volsfr
  9438  0EEC  2EEE               	goto	u1571
  9439  0EED  2EEF               	goto	u1570
  9440  0EEE                     u1571:	
  9441  0EEE  2EEA               	goto	l719
  9442  0EEF                     u1570:	
  9443  0EEF                     l721:	
  9444  0EEF  1715               	bsf	21,6	;volsfr
  9445  0EF0                     l2721:	
  9446  0EF0  0020               	movlb	0	; select bank0
  9447  0EF1  0821               	movf	eeprom_write@addr,w
  9448  0EF2  0031               	movlb	17	; select bank17
  9449  0EF3  0091               	movwf	17	;volatile
  9450  0EF4  3070               	movlw	112
  9451  0EF5  0092               	movwf	18	;volatile
  9452  0EF6                     l2723:	
  9453  0EF6  0194               	clrf	20	;volatile
  9454  0EF7                     l2725:	
  9455  0EF7  0020               	movlb	0	; select bank0
  9456  0EF8  0820               	movf	eeprom_write@value,w
  9457  0EF9  0031               	movlb	17	; select bank17
  9458  0EFA  0093               	movwf	19	;volatile
  9459  0EFB                     l2727:	
  9460  0EFB  0020               	movlb	0	; select bank0
  9461  0EFC  1003               	bcf	3,0	;volatile
  9462  0EFD                     l2729:	
  9463  0EFD  1F8B               	btfss	11,7	;volatile
  9464  0EFE  2F00               	goto	u1581
  9465  0EFF  2F01               	goto	u1580
  9466  0F00                     u1581:	
  9467  0F00  2F02               	goto	l722
  9468  0F01                     u1580:	
  9469  0F01                     l2731:	
  9470  0F01  1403               	bsf	3,0	;volatile
  9471  0F02                     l722:	
  9472  0F02  138B               	bcf	11,7	;volatile
  9473  0F03  0031               	movlb	17	; select bank17
  9474  0F04  1515               	bsf	21,2	;volsfr
  9475  0F05                     l2733:	
  9476  0F05  3055               	movlw	85
  9477  0F06  0096               	movwf	22	;volsfr
  9478  0F07  30AA               	movlw	170
  9479  0F08  0096               	movwf	22	;volsfr
  9480  0F09                     l2735:	
  9481  0F09  1495               	bsf	21,1	;volsfr
  9482  0F0A                     l723:	
  9483  0F0A  1895               	btfsc	21,1	;volsfr
  9484  0F0B  2F0D               	goto	u1591
  9485  0F0C  2F0E               	goto	u1590
  9486  0F0D                     u1591:	
  9487  0F0D  2F0A               	goto	l723
  9488  0F0E                     u1590:	
  9489  0F0E                     l725:	
  9490  0F0E  1115               	bcf	21,2	;volsfr
  9491  0F0F  0020               	movlb	0	; select bank0
  9492  0F10  1C03               	btfss	3,0	;volatile
  9493  0F11  2F13               	goto	u1601
  9494  0F12  2F14               	goto	u1600
  9495  0F13                     u1601:	
  9496  0F13  2F15               	goto	l728
  9497  0F14                     u1600:	
  9498  0F14                     l2737:	
  9499  0F14  178B               	bsf	11,7	;volatile
  9500  0F15                     l728:	
  9501  0F15  0008               	return
  9502  0F16                     __end_of_eeprom_write:	
  9503                           
  9504                           	psect	text32
  9505  0525                     __ptext32:	
  9506 ;; *************** function _FlashPattern *****************
  9507 ;; Defined at:
  9508 ;;		line 11 in file "PatternFlasher.c"
  9509 ;; Parameters:    Size  Location     Type
  9510 ;;		None
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;  current_time    2   15[BANK0 ] unsigned short 
  9513 ;; Return value:  Size  Location     Type
  9514 ;;                  1    wreg      void 
  9515 ;; Registers used:
  9516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9517 ;; Tracked objects:
  9518 ;;		On entry : 0/0
  9519 ;;		On exit  : 0/0
  9520 ;;		Unchanged: 0/0
  9521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9524 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9525 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9526 ;;Total ram usage:       12 bytes
  9527 ;; Hardware stack levels used:    1
  9528 ;; Hardware stack levels required when called:    7
  9529 ;; This function calls:
  9530 ;;		_SetLight
  9531 ;;		_ms
  9532 ;; This function is called by:
  9533 ;;		_main
  9534 ;; This function uses a non-reentrant model
  9535 ;;
  9536                           
  9537                           
  9538                           ;psect for function _FlashPattern
  9539  0525                     _FlashPattern:	
  9540  0525                     l2837:	
  9541                           ;incstack = 0
  9542                           ; Regs used in _FlashPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9543                           
  9544                           
  9545                           ;PatternFlasher.c: 13:     uint current_time = ms();
  9546  0525  318C  24D8  3185   	fcall	_ms
  9547  0528  0020               	movlb	0	; select bank0
  9548  0529  0821               	movf	?_ms+1,w
  9549  052A  00B0               	movwf	FlashPattern@current_time+1
  9550  052B  0820               	movf	?_ms,w
  9551  052C  00AF               	movwf	FlashPattern@current_time
  9552  052D                     l2839:	
  9553                           
  9554                           ;PatternFlasher.c: 15:     if ( current_time - pattern_selector.start_time > pattern_sel
      +                          ector.current_stage->time_ms )
  9555  052D  082F               	movf	FlashPattern@current_time,w
  9556  052E  00A5               	movwf	??_FlashPattern
  9557  052F  0830               	movf	FlashPattern@current_time+1,w
  9558  0530  00A6               	movwf	??_FlashPattern+1
  9559  0531  01A7               	clrf	??_FlashPattern+2
  9560  0532  01A8               	clrf	??_FlashPattern+3
  9561  0533  0021               	movlb	1	; select bank1
  9562  0534  0837               	movf	(_pattern_selector^(0+128)+15),w	;volatile
  9563  0535  0020               	movlb	0	; select bank0
  9564  0536  02A5               	subwf	??_FlashPattern,f
  9565  0537  0021               	movlb	1	; select bank1
  9566  0538  0838               	movf	((_pattern_selector+1)^(0+128)+15),w	;volatile
  9567  0539  0020               	movlb	0	; select bank0
  9568  053A  3BA6               	subwfb	??_FlashPattern+1,f
  9569  053B  0021               	movlb	1	; select bank1
  9570  053C  0839               	movf	((_pattern_selector+2)^(0+128)+15),w	;volatile
  9571  053D  0020               	movlb	0	; select bank0
  9572  053E  3BA7               	subwfb	??_FlashPattern+2,f
  9573  053F  0021               	movlb	1	; select bank1
  9574  0540  083A               	movf	((_pattern_selector+3)^(0+128)+15),w	;volatile
  9575  0541  0020               	movlb	0	; select bank0
  9576  0542  3BA8               	subwfb	??_FlashPattern+3,f
  9577  0543  0021               	movlb	1	; select bank1
  9578  0544  0835               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  9579  0545  0086               	movwf	6
  9580  0546  0836               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  9581  0547  0087               	movwf	7
  9582  0548  3144               	addfsr 1,4
  9583  0549  3F40               	moviw [0]fsr1
  9584  054A  0020               	movlb	0	; select bank0
  9585  054B  00A9               	movwf	??_FlashPattern+4
  9586  054C  3F41               	moviw [1]fsr1
  9587  054D  00AA               	movwf	??_FlashPattern+5
  9588  054E  0829               	movf	??_FlashPattern+4,w
  9589  054F  00AB               	movwf	??_FlashPattern+6
  9590  0550  082A               	movf	??_FlashPattern+5,w
  9591  0551  00AC               	movwf	??_FlashPattern+7
  9592  0552  01AD               	clrf	??_FlashPattern+8
  9593  0553  01AE               	clrf	??_FlashPattern+9
  9594  0554  0828               	movf	??_FlashPattern+3,w
  9595  0555  022E               	subwf	??_FlashPattern+9,w
  9596  0556  1D03               	skipz
  9597  0557  2D62               	goto	u1655
  9598  0558  0827               	movf	??_FlashPattern+2,w
  9599  0559  022D               	subwf	??_FlashPattern+8,w
  9600  055A  1D03               	skipz
  9601  055B  2D62               	goto	u1655
  9602  055C  0826               	movf	??_FlashPattern+1,w
  9603  055D  022C               	subwf	??_FlashPattern+7,w
  9604  055E  1D03               	skipz
  9605  055F  2D62               	goto	u1655
  9606  0560  0825               	movf	??_FlashPattern,w
  9607  0561  022B               	subwf	??_FlashPattern+6,w
  9608  0562                     u1655:	
  9609  0562  1803               	skipnc
  9610  0563  2D65               	goto	u1651
  9611  0564  2D66               	goto	u1650
  9612  0565                     u1651:	
  9613  0565  2D7D               	goto	l2847
  9614  0566                     u1650:	
  9615  0566                     l2841:	
  9616                           
  9617                           ;PatternFlasher.c: 16:     {;PatternFlasher.c: 17:         pattern_selector.current_stag
      +                          e = pattern_selector.current_stage->next;
  9618  0566  0021               	movlb	1	; select bank1
  9619  0567  0835               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  9620  0568  0086               	movwf	6
  9621  0569  0836               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  9622  056A  0087               	movwf	7
  9623  056B  3146               	addfsr 1,6
  9624  056C  3F40               	moviw [0]fsr1
  9625  056D  00B5               	movwf	(_pattern_selector^(0+128)+13)	;volatile
  9626  056E  3F41               	moviw [1]fsr1
  9627  056F  00B6               	movwf	((_pattern_selector+1)^(0+128)+13)	;volatile
  9628  0570                     l2843:	
  9629                           
  9630                           ;PatternFlasher.c: 18:         pattern_selector.start_time = current_time;
  9631  0570  0020               	movlb	0	; select bank0
  9632  0571  082F               	movf	FlashPattern@current_time,w
  9633  0572  0021               	movlb	1	; select bank1
  9634  0573  00B7               	movwf	(_pattern_selector^(0+128)+15)	;volatile
  9635  0574  0020               	movlb	0	; select bank0
  9636  0575  0830               	movf	FlashPattern@current_time+1,w
  9637  0576  0021               	movlb	1	; select bank1
  9638  0577  00B8               	movwf	(_pattern_selector^(0+128)+16)	;volatile
  9639  0578  01B9               	clrf	(_pattern_selector^(0+128)+17)	;volatile
  9640  0579  01BA               	clrf	(_pattern_selector^(0+128)+18)	;volatile
  9641  057A                     l2845:	
  9642                           
  9643                           ;PatternFlasher.c: 19:         update_stage = 1;
  9644  057A  0020               	movlb	0	; select bank0
  9645  057B  01EC               	clrf	_update_stage
  9646  057C  0AEC               	incf	_update_stage,f
  9647  057D                     l2847:	
  9648                           
  9649                           ;PatternFlasher.c: 23:     if ( update_stage == 1 )
  9650  057D  036C               	decf	_update_stage,w
  9651  057E  1D03               	btfss	3,2
  9652  057F  2D81               	goto	u1661
  9653  0580  2D82               	goto	u1660
  9654  0581                     u1661:	
  9655  0581  2DBF               	goto	l512
  9656  0582                     u1660:	
  9657  0582                     l2849:	
  9658                           
  9659                           ;PatternFlasher.c: 24:     {;PatternFlasher.c: 25:         SetLight( L1, pattern_selecto
      +                          r.current_stage->light_states[L1] );
  9660  0582  0021               	movlb	1	; select bank1
  9661  0583  0835               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  9662  0584  0086               	movwf	6
  9663  0585  0836               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  9664  0586  0087               	movwf	7
  9665  0587  0801               	movf	1,w
  9666  0588  0020               	movlb	0	; select bank0
  9667  0589  00A5               	movwf	??_FlashPattern
  9668  058A  0825               	movf	??_FlashPattern,w
  9669  058B  00A0               	movwf	SetLight@_state
  9670  058C  3000               	movlw	0
  9671  058D  3186  26C4  3185   	fcall	_SetLight
  9672                           
  9673                           ;PatternFlasher.c: 26:         SetLight( L2, pattern_selector.current_stage->light_state
      +                          s[L2] );
  9674  0590  0021               	movlb	1	; select bank1
  9675  0591  0835               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  9676  0592  0086               	movwf	6
  9677  0593  0836               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  9678  0594  0087               	movwf	7
  9679  0595  3141               	addfsr 1,1
  9680  0596  0801               	movf	1,w
  9681  0597  0020               	movlb	0	; select bank0
  9682  0598  00A5               	movwf	??_FlashPattern
  9683  0599  0825               	movf	??_FlashPattern,w
  9684  059A  00A0               	movwf	SetLight@_state
  9685  059B  3001               	movlw	1
  9686  059C  3186  26C4  3185   	fcall	_SetLight
  9687                           
  9688                           ;PatternFlasher.c: 27:         SetLight( L3, pattern_selector.current_stage->light_state
      +                          s[L3] );
  9689  059F  0021               	movlb	1	; select bank1
  9690  05A0  0835               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  9691  05A1  0086               	movwf	6
  9692  05A2  0836               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  9693  05A3  0087               	movwf	7
  9694  05A4  3142               	addfsr 1,2
  9695  05A5  0801               	movf	1,w
  9696  05A6  0020               	movlb	0	; select bank0
  9697  05A7  00A5               	movwf	??_FlashPattern
  9698  05A8  0825               	movf	??_FlashPattern,w
  9699  05A9  00A0               	movwf	SetLight@_state
  9700  05AA  3002               	movlw	2
  9701  05AB  3186  26C4  3185   	fcall	_SetLight
  9702                           
  9703                           ;PatternFlasher.c: 28:         SetLight( L4, pattern_selector.current_stage->light_state
      +                          s[L4] );
  9704  05AE  0021               	movlb	1	; select bank1
  9705  05AF  0835               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  9706  05B0  0086               	movwf	6
  9707  05B1  0836               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  9708  05B2  0087               	movwf	7
  9709  05B3  3143               	addfsr 1,3
  9710  05B4  0801               	movf	1,w
  9711  05B5  0020               	movlb	0	; select bank0
  9712  05B6  00A5               	movwf	??_FlashPattern
  9713  05B7  0825               	movf	??_FlashPattern,w
  9714  05B8  00A0               	movwf	SetLight@_state
  9715  05B9  3003               	movlw	3
  9716  05BA  3186  26C4  3185   	fcall	_SetLight
  9717  05BD                     l2851:	
  9718                           
  9719                           ;PatternFlasher.c: 29:         update_stage = 0;
  9720  05BD  0020               	movlb	0	; select bank0
  9721  05BE  01EC               	clrf	_update_stage
  9722  05BF                     l512:	
  9723  05BF  0008               	return
  9724  05C0                     __end_of_FlashPattern:	
  9725                           
  9726                           	psect	text33
  9727  0CD8                     __ptext33:	
  9728 ;; *************** function _ms *****************
  9729 ;; Defined at:
  9730 ;;		line 11 in file "Time.c"
  9731 ;; Parameters:    Size  Location     Type
  9732 ;;		None
  9733 ;; Auto vars:     Size  Location     Type
  9734 ;;		None
  9735 ;; Return value:  Size  Location     Type
  9736 ;;                  4    0[BANK0 ] unsigned long 
  9737 ;; Registers used:
  9738 ;;		wreg
  9739 ;; Tracked objects:
  9740 ;;		On entry : 0/0
  9741 ;;		On exit  : 0/0
  9742 ;;		Unchanged: 0/0
  9743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9744 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;Total ram usage:        4 bytes
  9749 ;; Hardware stack levels used:    1
  9750 ;; Hardware stack levels required when called:    6
  9751 ;; This function calls:
  9752 ;;		Nothing
  9753 ;; This function is called by:
  9754 ;;		_TurnSignalDone
  9755 ;;		_FlashPattern
  9756 ;; This function uses a non-reentrant model
  9757 ;;
  9758                           
  9759                           
  9760                           ;psect for function _ms
  9761  0CD8                     _ms:	
  9762  0CD8                     l2779:	
  9763                           ;incstack = 0
  9764                           ; Regs used in _ms: [wreg]
  9765                           
  9766                           
  9767                           ;Time.c: 13:     return cur_ms;
  9768  0CD8  0020               	movlb	0	; select bank0
  9769  0CD9  0867               	movf	_cur_ms+3,w	;volatile
  9770  0CDA  00A3               	movwf	?_ms+3
  9771  0CDB  0866               	movf	_cur_ms+2,w	;volatile
  9772  0CDC  00A2               	movwf	?_ms+2
  9773  0CDD  0865               	movf	_cur_ms+1,w	;volatile
  9774  0CDE  00A1               	movwf	?_ms+1
  9775  0CDF  0864               	movf	_cur_ms,w	;volatile
  9776  0CE0  00A0               	movwf	?_ms
  9777  0CE1                     l519:	
  9778  0CE1  0008               	return
  9779  0CE2                     __end_of_ms:	
  9780                           
  9781                           	psect	text34
  9782  06C4                     __ptext34:	
  9783 ;; *************** function _SetLight *****************
  9784 ;; Defined at:
  9785 ;;		line 12 in file "Lights.c"
  9786 ;; Parameters:    Size  Location     Type
  9787 ;;  light           1    wreg     const enum E6338
  9788 ;;  _state          1    0[BANK0 ] const _Bool 
  9789 ;; Auto vars:     Size  Location     Type
  9790 ;;  light           1    3[BANK0 ] const enum E6338
  9791 ;;  state           1    4[BANK0 ] _Bool 
  9792 ;; Return value:  Size  Location     Type
  9793 ;;                  1    wreg      void 
  9794 ;; Registers used:
  9795 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9796 ;; Tracked objects:
  9797 ;;		On entry : 0/0
  9798 ;;		On exit  : 0/0
  9799 ;;		Unchanged: 0/0
  9800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9801 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9802 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9803 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9804 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9805 ;;Total ram usage:        5 bytes
  9806 ;; Hardware stack levels used:    1
  9807 ;; Hardware stack levels required when called:    6
  9808 ;; This function calls:
  9809 ;;		Nothing
  9810 ;; This function is called by:
  9811 ;;		_SetOutputs
  9812 ;;		_FlashPattern
  9813 ;; This function uses a non-reentrant model
  9814 ;;
  9815                           
  9816                           
  9817                           ;psect for function _SetLight
  9818  06C4                     _SetLight:	
  9819                           
  9820                           ;incstack = 0
  9821                           ; Regs used in _SetLight: [wreg-fsr0h+status,2+status,0]
  9822                           ;SetLight@light stored from wreg
  9823  06C4  0020               	movlb	0	; select bank0
  9824  06C5  00A3               	movwf	SetLight@light
  9825  06C6                     l2291:	
  9826                           
  9827                           ;Lights.c: 12: void SetLight( const enum Light light, const _Bool _state );Lights.c: 13:
      +                           {;Lights.c: 14:     _Bool state = ( _state );
  9828  06C6  0820               	movf	SetLight@_state,w
  9829  06C7  00A1               	movwf	??_SetLight
  9830  06C8  0821               	movf	??_SetLight,w
  9831  06C9  00A4               	movwf	SetLight@state
  9832                           
  9833                           ;Lights.c: 16:     switch ( light )
  9834  06CA  2F1F               	goto	l2313
  9835  06CB                     l2293:	
  9836                           
  9837                           ;Lights.c: 19:             if ( PORTCbits.RC4 != state )
  9838  06CB  0E0E               	swapf	14,w	;volatile
  9839  06CC  3901               	andlw	1
  9840  06CD  0624               	xorwf	SetLight@state,w
  9841  06CE  1903               	skipnz
  9842  06CF  2ED1               	goto	u1091
  9843  06D0  2ED2               	goto	u1090
  9844  06D1                     u1091:	
  9845  06D1  2F35               	goto	l349
  9846  06D2                     u1090:	
  9847  06D2                     l2295:	
  9848  06D2  1003               	clrc
  9849  06D3  0022               	movlb	2	; select bank2
  9850  06D4  1E0E               	btfss	14,4	;volatile
  9851  06D5  1403               	setc
  9852  06D6  1803               	btfsc	3,0
  9853  06D7  2ED9               	goto	u1101
  9854  06D8  2EDC               	goto	u1100
  9855  06D9                     u1101:	
  9856  06D9  0022               	movlb	2	; select bank2
  9857  06DA  160E               	bsf	14,4	;volatile
  9858  06DB  2EDE               	goto	u1114
  9859  06DC                     u1100:	
  9860  06DC  0022               	movlb	2	; select bank2
  9861  06DD  120E               	bcf	14,4	;volatile
  9862  06DE                     u1114:	
  9863  06DE  2F35               	goto	l349
  9864  06DF                     l2297:	
  9865                           
  9866                           ;Lights.c: 23:             if ( PORTCbits.RC3 != state )
  9867  06DF  0C0E               	rrf	14,w	;volatile
  9868  06E0  00A1               	movwf	??_SetLight
  9869  06E1  0CA1               	rrf	??_SetLight,f
  9870  06E2  0C21               	rrf	??_SetLight,w
  9871  06E3  3901               	andlw	1
  9872  06E4  0624               	xorwf	SetLight@state,w
  9873  06E5  1903               	skipnz
  9874  06E6  2EE8               	goto	u1121
  9875  06E7  2EE9               	goto	u1120
  9876  06E8                     u1121:	
  9877  06E8  2F35               	goto	l349
  9878  06E9                     u1120:	
  9879  06E9                     l2299:	
  9880  06E9  1003               	clrc
  9881  06EA  0022               	movlb	2	; select bank2
  9882  06EB  1D8E               	btfss	14,3	;volatile
  9883  06EC  1403               	setc
  9884  06ED  1803               	btfsc	3,0
  9885  06EE  2EF0               	goto	u1131
  9886  06EF  2EF3               	goto	u1130
  9887  06F0                     u1131:	
  9888  06F0  0022               	movlb	2	; select bank2
  9889  06F1  158E               	bsf	14,3	;volatile
  9890  06F2  2EF5               	goto	u1144
  9891  06F3                     u1130:	
  9892  06F3  0022               	movlb	2	; select bank2
  9893  06F4  118E               	bcf	14,3	;volatile
  9894  06F5                     u1144:	
  9895  06F5  2F35               	goto	l349
  9896  06F6                     l2301:	
  9897                           
  9898                           ;Lights.c: 27:             if ( PORTCbits.RC2 != state )
  9899  06F6  0C0E               	rrf	14,w	;volatile
  9900  06F7  0C89               	rrf	9,f
  9901  06F8  3901               	andlw	1
  9902  06F9  0624               	xorwf	SetLight@state,w
  9903  06FA  1903               	skipnz
  9904  06FB  2EFD               	goto	u1151
  9905  06FC  2EFE               	goto	u1150
  9906  06FD                     u1151:	
  9907  06FD  2F35               	goto	l349
  9908  06FE                     u1150:	
  9909  06FE                     l2303:	
  9910  06FE  1003               	clrc
  9911  06FF  0022               	movlb	2	; select bank2
  9912  0700  1D0E               	btfss	14,2	;volatile
  9913  0701  1403               	setc
  9914  0702  1803               	btfsc	3,0
  9915  0703  2F05               	goto	u1161
  9916  0704  2F08               	goto	u1160
  9917  0705                     u1161:	
  9918  0705  0022               	movlb	2	; select bank2
  9919  0706  150E               	bsf	14,2	;volatile
  9920  0707  2F0A               	goto	u1174
  9921  0708                     u1160:	
  9922  0708  0022               	movlb	2	; select bank2
  9923  0709  110E               	bcf	14,2	;volatile
  9924  070A                     u1174:	
  9925  070A  2F35               	goto	l349
  9926  070B                     l2305:	
  9927                           
  9928                           ;Lights.c: 32:             if ( PORTCbits.RC1 != state )
  9929  070B  0C0E               	rrf	14,w	;volatile
  9930  070C  3901               	andlw	1
  9931  070D  0624               	xorwf	SetLight@state,w
  9932  070E  1903               	skipnz
  9933  070F  2F11               	goto	u1181
  9934  0710  2F12               	goto	u1180
  9935  0711                     u1181:	
  9936  0711  2F35               	goto	l349
  9937  0712                     u1180:	
  9938  0712                     l2307:	
  9939  0712  1003               	clrc
  9940  0713  0022               	movlb	2	; select bank2
  9941  0714  1C8E               	btfss	14,1	;volatile
  9942  0715  1403               	setc
  9943  0716  1803               	btfsc	3,0
  9944  0717  2F19               	goto	u1191
  9945  0718  2F1C               	goto	u1190
  9946  0719                     u1191:	
  9947  0719  0022               	movlb	2	; select bank2
  9948  071A  148E               	bsf	14,1	;volatile
  9949  071B  2F1E               	goto	u1204
  9950  071C                     u1190:	
  9951  071C  0022               	movlb	2	; select bank2
  9952  071D  108E               	bcf	14,1	;volatile
  9953  071E                     u1204:	
  9954  071E  2F35               	goto	l349
  9955  071F                     l2313:	
  9956  071F  0823               	movf	SetLight@light,w
  9957  0720  00A1               	movwf	??_SetLight
  9958  0721  01A2               	clrf	??_SetLight+1
  9959                           
  9960                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9961                           ; Switch size 1, requested type "simple"
  9962                           ; Number of cases is 1, Range of values is 0 to 0
  9963                           ; switch strategies available:
  9964                           ; Name         Instructions Cycles
  9965                           ; simple_byte            4     3 (average)
  9966                           ; direct_byte            8     6 (fixed)
  9967                           ; jumptable            260     6 (fixed)
  9968                           ;	Chosen strategy is simple_byte
  9969  0722  0822               	movf	??_SetLight+1,w
  9970  0723  3A00               	xorlw	0	; case 0
  9971  0724  1903               	skipnz
  9972  0725  2F27               	goto	l2931
  9973  0726  2F0B               	goto	l2305
  9974  0727                     l2931:	
  9975                           
  9976                           ; Switch size 1, requested type "simple"
  9977                           ; Number of cases is 4, Range of values is 0 to 3
  9978                           ; switch strategies available:
  9979                           ; Name         Instructions Cycles
  9980                           ; simple_byte           13     7 (average)
  9981                           ; direct_byte           14     6 (fixed)
  9982                           ; jumptable            260     6 (fixed)
  9983                           ;	Chosen strategy is simple_byte
  9984  0727  0821               	movf	??_SetLight,w
  9985  0728  3A00               	xorlw	0	; case 0
  9986  0729  1903               	skipnz
  9987  072A  2ECB               	goto	l2293
  9988  072B  3A01               	xorlw	1	; case 1
  9989  072C  1903               	skipnz
  9990  072D  2EDF               	goto	l2297
  9991  072E  3A03               	xorlw	3	; case 2
  9992  072F  1903               	skipnz
  9993  0730  2EF6               	goto	l2301
  9994  0731  3A01               	xorlw	1	; case 3
  9995  0732  1903               	skipnz
  9996  0733  2F0B               	goto	l2305
  9997  0734  2F0B               	goto	l2305
  9998  0735                     l349:	
  9999  0735  0008               	return
 10000  0736                     __end_of_SetLight:	
 10001                           
 10002                           	psect	intentry
 10003  0004                     __pintentry:	
 10004 ;; *************** function _INTERRUPT_InterruptManager *****************
 10005 ;; Defined at:
 10006 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10007 ;; Parameters:    Size  Location     Type
 10008 ;;		None
 10009 ;; Auto vars:     Size  Location     Type
 10010 ;;		None
 10011 ;; Return value:  Size  Location     Type
 10012 ;;                  1    wreg      void 
 10013 ;; Registers used:
 10014 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10015 ;; Tracked objects:
 10016 ;;		On entry : 0/0
 10017 ;;		On exit  : 0/0
 10018 ;;		Unchanged: 0/0
 10019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10024 ;;Total ram usage:        0 bytes
 10025 ;; Hardware stack levels used:    1
 10026 ;; Hardware stack levels required when called:    5
 10027 ;; This function calls:
 10028 ;;		_PIN_MANAGER_IOC
 10029 ;;		_TMR1_ISR
 10030 ;; This function is called by:
 10031 ;;		Interrupt level 1
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035  0004                     _INTERRUPT_InterruptManager:	
 10036                           
 10037                           ;incstack = 0
 10038  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 10039                           
 10040                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10041  0005  3180               	pagesel	$
 10042  0006                     i1l2519:	
 10043                           
 10044                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 10045  0006  0021               	movlb	1	; select bank1
 10046  0007  1E10               	btfss	16,4	;volatile
 10047  0008  280A               	goto	u139_21
 10048  0009  280B               	goto	u139_20
 10049  000A                     u139_21:	
 10050  000A  2814               	goto	i1l150
 10051  000B                     u139_20:	
 10052  000B                     i1l2521:	
 10053  000B  0020               	movlb	0	; select bank0
 10054  000C  1E10               	btfss	16,4	;volatile
 10055  000D  280F               	goto	u140_21
 10056  000E  2810               	goto	u140_20
 10057  000F                     u140_21:	
 10058  000F  2814               	goto	i1l150
 10059  0010                     u140_20:	
 10060  0010                     i1l2523:	
 10061                           
 10062                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 10063  0010  318C  24A9  3180   	fcall	_PIN_MANAGER_IOC
 10064                           
 10065                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 10066  0013  2826               	goto	i1l156
 10067  0014                     i1l150:	
 10068                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 10069                           
 10070  0014  1F0B               	btfss	11,6	;volatile
 10071  0015  2817               	goto	u141_21
 10072  0016  2818               	goto	u141_20
 10073  0017                     u141_21:	
 10074  0017  2826               	goto	i1l156
 10075  0018                     u141_20:	
 10076  0018                     i1l2525:	
 10077                           
 10078                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 10079  0018  0021               	movlb	1	; select bank1
 10080  0019  1C11               	btfss	17,0	;volatile
 10081  001A  281C               	goto	u142_21
 10082  001B  281D               	goto	u142_20
 10083  001C                     u142_21:	
 10084  001C  2826               	goto	i1l155
 10085  001D                     u142_20:	
 10086  001D                     i1l2527:	
 10087  001D  0020               	movlb	0	; select bank0
 10088  001E  1C11               	btfss	17,0	;volatile
 10089  001F  2821               	goto	u143_21
 10090  0020  2822               	goto	u143_20
 10091  0021                     u143_21:	
 10092  0021  2826               	goto	i1l155
 10093  0022                     u143_20:	
 10094  0022                     i1l2529:	
 10095                           
 10096                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR1_ISR();
 10097  0022  318D  256D  3180   	fcall	_TMR1_ISR
 10098                           
 10099                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 10100  0025  2826               	goto	i1l156
 10101  0026                     i1l155:	
 10102                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
 10103                           
 10104  0026                     i1l156:	
 10105  0026  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 10106  0027  0009               	retfie
 10107  0028                     __end_of_INTERRUPT_InterruptManager:	
 10108                           
 10109                           	psect	text36
 10110  0D6D                     __ptext36:	
 10111 ;; *************** function _TMR1_ISR *****************
 10112 ;; Defined at:
 10113 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 10114 ;; Parameters:    Size  Location     Type
 10115 ;;		None
 10116 ;; Auto vars:     Size  Location     Type
 10117 ;;		None
 10118 ;; Return value:  Size  Location     Type
 10119 ;;                  1    wreg      void 
 10120 ;; Registers used:
 10121 ;;		wreg, status,2, status,0, pclath, cstack
 10122 ;; Tracked objects:
 10123 ;;		On entry : 0/0
 10124 ;;		On exit  : 0/0
 10125 ;;		Unchanged: 0/0
 10126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;Total ram usage:        0 bytes
 10132 ;; Hardware stack levels used:    1
 10133 ;; Hardware stack levels required when called:    1
 10134 ;; This function calls:
 10135 ;;		Absolute function
 10136 ;;		_TMR1_DefaultInterruptHandler
 10137 ;;		_TMR1_WriteTimer
 10138 ;; This function is called by:
 10139 ;;		_INTERRUPT_InterruptManager
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           
 10144                           ;psect for function _TMR1_ISR
 10145  0D6D                     _TMR1_ISR:	
 10146  0D6D                     i1l2417:	
 10147                           ;incstack = 0
 10148                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 10149                           
 10150                           
 10151                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
 10152  0D6D  0020               	movlb	0	; select bank0
 10153  0D6E  1011               	bcf	17,0	;volatile
 10154  0D6F                     i1l2419:	
 10155                           
 10156                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
 10157  0D6F  0878               	movf	_timer1ReloadVal+1,w	;volatile
 10158  0D70  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 10159  0D71  0877               	movf	_timer1ReloadVal,w	;volatile
 10160  0D72  00F0               	movwf	TMR1_WriteTimer@timerVal
 10161  0D73  318D  2534  318D   	fcall	_TMR1_WriteTimer
 10162  0D76                     i1l2421:	
 10163                           
 10164                           ;mcc_generated_files/tmr1.c: 165:     if(TMR1_InterruptHandler)
 10165  0D76  0021               	movlb	1	; select bank1
 10166  0D77  086D               	movf	_TMR1_InterruptHandler^(0+128),w
 10167  0D78  046E               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
 10168  0D79  1903               	btfsc	3,2
 10169  0D7A  2D7C               	goto	u130_21
 10170  0D7B  2D7D               	goto	u130_20
 10171  0D7C                     u130_21:	
 10172  0D7C  2D82               	goto	i1l210
 10173  0D7D                     u130_20:	
 10174  0D7D                     i1l2423:	
 10175                           
 10176                           ;mcc_generated_files/tmr1.c: 166:     {;mcc_generated_files/tmr1.c: 167:         TMR1_In
      +                          terruptHandler();
 10177  0D7D  086E               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
 10178  0D7E  008A               	movwf	10
 10179  0D7F  086D               	movf	_TMR1_InterruptHandler^(0+128),w
 10180  0D80  000A               	callw
 10181  0D81  318D               	pagesel	$
 10182  0D82                     i1l210:	
 10183  0D82  0008               	return
 10184  0D83                     __end_of_TMR1_ISR:	
 10185                           
 10186                           	psect	text37
 10187  0D34                     __ptext37:	
 10188 ;; *************** function _TMR1_WriteTimer *****************
 10189 ;; Defined at:
 10190 ;;		line 120 in file "mcc_generated_files/tmr1.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;  timerVal        2    0[COMMON] unsigned short 
 10193 ;; Auto vars:     Size  Location     Type
 10194 ;;		None
 10195 ;; Return value:  Size  Location     Type
 10196 ;;                  1    wreg      void 
 10197 ;; Registers used:
 10198 ;;		wreg, status,2
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10204 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;Total ram usage:        2 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; This function calls:
 10211 ;;		Nothing
 10212 ;; This function is called by:
 10213 ;;		_TMR1_ISR
 10214 ;;		_TMR1_Reload
 10215 ;; This function uses a non-reentrant model
 10216 ;;
 10217                           
 10218                           
 10219                           ;psect for function _TMR1_WriteTimer
 10220  0D34                     _TMR1_WriteTimer:	
 10221  0D34                     i1l2359:	
 10222                           ;incstack = 0
 10223                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 10224                           
 10225                           
 10226                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.T1SYNC == 1)
 10227  0D34  0020               	movlb	0	; select bank0
 10228  0D35  1D1B               	btfss	27,2	;volatile
 10229  0D36  2D38               	goto	u126_21
 10230  0D37  2D39               	goto	u126_20
 10231  0D38                     u126_21:	
 10232  0D38  2D40               	goto	i1l2369
 10233  0D39                     u126_20:	
 10234  0D39                     i1l2361:	
 10235                           
 10236                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
 10237  0D39  101B               	bcf	27,0	;volatile
 10238  0D3A                     i1l2363:	
 10239                           
 10240                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
 10241  0D3A  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 10242  0D3B  009A               	movwf	26	;volatile
 10243  0D3C                     i1l2365:	
 10244                           
 10245                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
 10246  0D3C  0870               	movf	TMR1_WriteTimer@timerVal,w
 10247  0D3D  0099               	movwf	25	;volatile
 10248  0D3E                     i1l2367:	
 10249                           
 10250                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
 10251  0D3E  141B               	bsf	27,0	;volatile
 10252                           
 10253                           ;mcc_generated_files/tmr1.c: 133:     }
 10254  0D3F  2D44               	goto	i1l197
 10255  0D40                     i1l2369:	
 10256                           
 10257                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
 10258  0D40  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 10259  0D41  009A               	movwf	26	;volatile
 10260  0D42                     i1l2371:	
 10261                           
 10262                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
 10263  0D42  0870               	movf	TMR1_WriteTimer@timerVal,w
 10264  0D43  0099               	movwf	25	;volatile
 10265  0D44                     i1l197:	
 10266  0D44  0008               	return
 10267  0D45                     __end_of_TMR1_WriteTimer:	
 10268                           
 10269                           	psect	text38
 10270  0CCE                     __ptext38:	
 10271 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 10272 ;; Defined at:
 10273 ;;		line 176 in file "mcc_generated_files/tmr1.c"
 10274 ;; Parameters:    Size  Location     Type
 10275 ;;		None
 10276 ;; Auto vars:     Size  Location     Type
 10277 ;;		None
 10278 ;; Return value:  Size  Location     Type
 10279 ;;                  1    wreg      void 
 10280 ;; Registers used:
 10281 ;;		wreg
 10282 ;; Tracked objects:
 10283 ;;		On entry : 0/0
 10284 ;;		On exit  : 0/0
 10285 ;;		Unchanged: 0/0
 10286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10291 ;;Total ram usage:        0 bytes
 10292 ;; Hardware stack levels used:    1
 10293 ;; This function calls:
 10294 ;;		Nothing
 10295 ;; This function is called by:
 10296 ;;		_TMR1_Initialize
 10297 ;;		_TMR1_ISR
 10298 ;; This function uses a non-reentrant model
 10299 ;;
 10300                           
 10301                           
 10302                           ;psect for function _TMR1_DefaultInterruptHandler
 10303  0CCE                     _TMR1_DefaultInterruptHandler:	
 10304  0CCE                     i1l2373:	
 10305                           ;incstack = 0
 10306                           ; Regs used in _TMR1_DefaultInterruptHandler: [wreg]
 10307                           
 10308                           
 10309                           ;mcc_generated_files/tmr1.c: 177:     cur_ms++;
 10310  0CCE  3001               	movlw	1
 10311  0CCF  0020               	movlb	0	; select bank0
 10312  0CD0  07E4               	addwf	_cur_ms,f	;volatile
 10313  0CD1  3000               	movlw	0
 10314  0CD2  3DE5               	addwfc	_cur_ms+1,f	;volatile
 10315  0CD3  3000               	movlw	0
 10316  0CD4  3DE6               	addwfc	_cur_ms+2,f	;volatile
 10317  0CD5  3000               	movlw	0
 10318  0CD6  3DE7               	addwfc	_cur_ms+3,f	;volatile
 10319  0CD7                     i1l216:	
 10320  0CD7  0008               	return
 10321  0CD8                     __end_of_TMR1_DefaultInterruptHandler:	
 10322                           
 10323                           	psect	text39
 10324  0CA9                     __ptext39:	
 10325 ;; *************** function _PIN_MANAGER_IOC *****************
 10326 ;; Defined at:
 10327 ;;		line 120 in file "mcc_generated_files/pin_manager.c"
 10328 ;; Parameters:    Size  Location     Type
 10329 ;;		None
 10330 ;; Auto vars:     Size  Location     Type
 10331 ;;		None
 10332 ;; Return value:  Size  Location     Type
 10333 ;;                  1    wreg      void 
 10334 ;; Registers used:
 10335 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10336 ;; Tracked objects:
 10337 ;;		On entry : 0/0
 10338 ;;		On exit  : 0/0
 10339 ;;		Unchanged: 0/0
 10340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10345 ;;Total ram usage:        0 bytes
 10346 ;; Hardware stack levels used:    1
 10347 ;; Hardware stack levels required when called:    4
 10348 ;; This function calls:
 10349 ;;		_IOCCF0_ISR
 10350 ;; This function is called by:
 10351 ;;		_INTERRUPT_InterruptManager
 10352 ;; This function uses a non-reentrant model
 10353 ;;
 10354                           
 10355                           
 10356                           ;psect for function _PIN_MANAGER_IOC
 10357  0CA9                     _PIN_MANAGER_IOC:	
 10358  0CA9                     i1l2413:	
 10359                           ;incstack = 0
 10360                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10361                           
 10362                           
 10363                           ;mcc_generated_files/pin_manager.c: 123:     if(IOCCFbits.IOCCF0 == 1)
 10364  0CA9  0027               	movlb	7	; select bank7
 10365  0CAA  1C19               	btfss	25,0	;volatile
 10366  0CAB  2CAD               	goto	u129_21
 10367  0CAC  2CAE               	goto	u129_20
 10368  0CAD                     u129_21:	
 10369  0CAD  2CB1               	goto	i1l113
 10370  0CAE                     u129_20:	
 10371  0CAE                     i1l2415:	
 10372                           
 10373                           ;mcc_generated_files/pin_manager.c: 124:     {;mcc_generated_files/pin_manager.c: 125:  
      +                                 IOCCF0_ISR();
 10374  0CAE  318D  2505  318C   	fcall	_IOCCF0_ISR
 10375  0CB1                     i1l113:	
 10376  0CB1  0008               	return
 10377  0CB2                     __end_of_PIN_MANAGER_IOC:	
 10378                           
 10379                           	psect	text40
 10380  0D05                     __ptext40:	
 10381 ;; *************** function _IOCCF0_ISR *****************
 10382 ;; Defined at:
 10383 ;;		line 132 in file "mcc_generated_files/pin_manager.c"
 10384 ;; Parameters:    Size  Location     Type
 10385 ;;		None
 10386 ;; Auto vars:     Size  Location     Type
 10387 ;;		None
 10388 ;; Return value:  Size  Location     Type
 10389 ;;                  1    wreg      void 
 10390 ;; Registers used:
 10391 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10392 ;; Tracked objects:
 10393 ;;		On entry : 0/0
 10394 ;;		On exit  : 0/0
 10395 ;;		Unchanged: 0/0
 10396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;Total ram usage:        0 bytes
 10402 ;; Hardware stack levels used:    1
 10403 ;; Hardware stack levels required when called:    3
 10404 ;; This function calls:
 10405 ;;		Absolute function
 10406 ;;		_TripTurnSignal
 10407 ;; This function is called by:
 10408 ;;		_PIN_MANAGER_IOC
 10409 ;; This function uses a non-reentrant model
 10410 ;;
 10411                           
 10412                           
 10413                           ;psect for function _IOCCF0_ISR
 10414  0D05                     _IOCCF0_ISR:	
 10415  0D05                     i1l2351:	
 10416                           ;incstack = 0
 10417                           ; Regs used in _IOCCF0_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10418                           
 10419                           
 10420                           ;mcc_generated_files/pin_manager.c: 137:     if(IOCCF0_InterruptHandler)
 10421  0D05  0879               	movf	_IOCCF0_InterruptHandler,w
 10422  0D06  047A               	iorwf	_IOCCF0_InterruptHandler+1,w
 10423  0D07  1903               	btfsc	3,2
 10424  0D08  2D0A               	goto	u125_21
 10425  0D09  2D0B               	goto	u125_20
 10426  0D0A                     u125_21:	
 10427  0D0A  2D10               	goto	i1l2355
 10428  0D0B                     u125_20:	
 10429  0D0B                     i1l2353:	
 10430                           
 10431                           ;mcc_generated_files/pin_manager.c: 138:     {;mcc_generated_files/pin_manager.c: 139:  
      +                                 IOCCF0_InterruptHandler();
 10432  0D0B  087A               	movf	_IOCCF0_InterruptHandler+1,w
 10433  0D0C  008A               	movwf	10
 10434  0D0D  0879               	movf	_IOCCF0_InterruptHandler,w
 10435  0D0E  000A               	callw
 10436  0D0F  318D               	pagesel	$
 10437  0D10                     i1l2355:	
 10438                           
 10439                           ;mcc_generated_files/pin_manager.c: 141:     IOCCFbits.IOCCF0 = 0;
 10440  0D10  0027               	movlb	7	; select bank7
 10441  0D11  1019               	bcf	25,0	;volatile
 10442  0D12                     i1l117:	
 10443  0D12  0008               	return
 10444  0D13                     __end_of_IOCCF0_ISR:	
 10445                           
 10446                           	psect	text41
 10447  0D23                     __ptext41:	
 10448 ;; *************** function _TripTurnSignal *****************
 10449 ;; Defined at:
 10450 ;;		line 8 in file "TurnSignal.c"
 10451 ;; Parameters:    Size  Location     Type
 10452 ;;		None
 10453 ;; Auto vars:     Size  Location     Type
 10454 ;;		None
 10455 ;; Return value:  Size  Location     Type
 10456 ;;                  1    wreg      void 
 10457 ;; Registers used:
 10458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10459 ;; Tracked objects:
 10460 ;;		On entry : 0/0
 10461 ;;		On exit  : 0/0
 10462 ;;		Unchanged: 0/0
 10463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;Total ram usage:        0 bytes
 10469 ;; Hardware stack levels used:    1
 10470 ;; Hardware stack levels required when called:    2
 10471 ;; This function calls:
 10472 ;;		i1_SetOutputs
 10473 ;;		i1_ms
 10474 ;; This function is called by:
 10475 ;;		_PIN_MANAGER_Initialize
 10476 ;;		_IOCCF0_ISR
 10477 ;; This function uses a non-reentrant model
 10478 ;;
 10479                           
 10480                           
 10481                           ;psect for function _TripTurnSignal
 10482  0D23                     _TripTurnSignal:	
 10483  0D23                     i1l2319:	
 10484                           ;incstack = 0
 10485                           ; Regs used in _TripTurnSignal: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10486                           
 10487                           
 10488                           ;TurnSignal.c: 10:     SetOutputs( 0 );
 10489  0D23  3000               	movlw	0
 10490  0D24  3187  27DD  318D   	fcall	i1_SetOutputs
 10491  0D27                     i1l2321:	
 10492                           
 10493                           ;TurnSignal.c: 11:     ts_trigger_time = ms();
 10494  0D27  318C  24C4  318D   	fcall	i1_ms
 10495  0D2A  0873               	movf	?i1_ms+3,w
 10496  0D2B  0021               	movlb	1	; select bank1
 10497  0D2C  00A7               	movwf	(_ts_trigger_time+3)^(0+128)
 10498  0D2D  0872               	movf	?i1_ms+2,w
 10499  0D2E  00A6               	movwf	(_ts_trigger_time+2)^(0+128)
 10500  0D2F  0871               	movf	?i1_ms+1,w
 10501  0D30  00A5               	movwf	(_ts_trigger_time+1)^(0+128)
 10502  0D31  0870               	movf	?i1_ms,w
 10503  0D32  00A4               	movwf	_ts_trigger_time^(0+128)
 10504  0D33                     i1l381:	
 10505  0D33  0008               	return
 10506  0D34                     __end_of_TripTurnSignal:	
 10507                           
 10508                           	psect	text42
 10509  0CC4                     __ptext42:	
 10510 ;; *************** function i1_ms *****************
 10511 ;; Defined at:
 10512 ;;		line 11 in file "Time.c"
 10513 ;; Parameters:    Size  Location     Type
 10514 ;;		None
 10515 ;; Auto vars:     Size  Location     Type
 10516 ;;		None
 10517 ;; Return value:  Size  Location     Type
 10518 ;;                  4    0[COMMON] unsigned long 
 10519 ;; Registers used:
 10520 ;;		wreg
 10521 ;; Tracked objects:
 10522 ;;		On entry : 0/0
 10523 ;;		On exit  : 0/0
 10524 ;;		Unchanged: 0/0
 10525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10526 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10530 ;;Total ram usage:        4 bytes
 10531 ;; Hardware stack levels used:    1
 10532 ;; This function calls:
 10533 ;;		Nothing
 10534 ;; This function is called by:
 10535 ;;		_TripTurnSignal
 10536 ;; This function uses a non-reentrant model
 10537 ;;
 10538                           
 10539                           
 10540                           ;psect for function i1_ms
 10541  0CC4                     i1_ms:	
 10542  0CC4                     i1l2037:	
 10543                           ;incstack = 0
 10544                           ; Regs used in i1_ms: [wreg]
 10545                           
 10546                           
 10547                           ;Time.c: 13:     return cur_ms;
 10548  0CC4  0020               	movlb	0	; select bank0
 10549  0CC5  0867               	movf	_cur_ms+3,w	;volatile
 10550  0CC6  00F3               	movwf	?i1_ms+3
 10551  0CC7  0866               	movf	_cur_ms+2,w	;volatile
 10552  0CC8  00F2               	movwf	?i1_ms+2
 10553  0CC9  0865               	movf	_cur_ms+1,w	;volatile
 10554  0CCA  00F1               	movwf	?i1_ms+1
 10555  0CCB  0864               	movf	_cur_ms,w	;volatile
 10556  0CCC  00F0               	movwf	?i1_ms
 10557  0CCD                     i1l519:	
 10558  0CCD  0008               	return
 10559  0CCE                     __end_ofi1_ms:	
 10560                           
 10561                           	psect	text43
 10562  07DD                     __ptext43:	
 10563 ;; *************** function i1_SetOutputs *****************
 10564 ;; Defined at:
 10565 ;;		line 39 in file "Lights.c"
 10566 ;; Parameters:    Size  Location     Type
 10567 ;;  state           1    wreg     const _Bool 
 10568 ;; Auto vars:     Size  Location     Type
 10569 ;;  state           1    6[COMMON] const _Bool 
 10570 ;; Return value:  Size  Location     Type
 10571 ;;                  1    wreg      void 
 10572 ;; Registers used:
 10573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10574 ;; Tracked objects:
 10575 ;;		On entry : 0/0
 10576 ;;		On exit  : 0/0
 10577 ;;		Unchanged: 0/0
 10578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10580 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10581 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10582 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10583 ;;Total ram usage:        2 bytes
 10584 ;; Hardware stack levels used:    1
 10585 ;; Hardware stack levels required when called:    1
 10586 ;; This function calls:
 10587 ;;		i1_SetLight
 10588 ;; This function is called by:
 10589 ;;		_TripTurnSignal
 10590 ;; This function uses a non-reentrant model
 10591 ;;
 10592                           
 10593                           
 10594                           ;psect for function i1_SetOutputs
 10595  07DD                     i1_SetOutputs:	
 10596                           
 10597                           ;incstack = 0
 10598                           ; Regs used in i1_SetOutputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10599                           ;i1SetOutputs@state stored from wreg
 10600  07DD  00F6               	movwf	i1SetOutputs@state
 10601  07DE                     i1l2035:	
 10602                           
 10603                           ;Lights.c: 39: void SetOutputs( const _Bool state );Lights.c: 40: {;Lights.c: 41:     Se
      +                          tLight( L1, state );
 10604  07DE  0876               	movf	i1SetOutputs@state,w
 10605  07DF  00F5               	movwf	??i1_SetOutputs
 10606  07E0  0875               	movf	??i1_SetOutputs,w
 10607  07E1  00F0               	movwf	i1SetLight@_state
 10608  07E2  3000               	movlw	0
 10609  07E3  3186  264F  3187   	fcall	i1_SetLight
 10610                           
 10611                           ;Lights.c: 42:     SetLight( L2, state );
 10612  07E6  0876               	movf	i1SetOutputs@state,w
 10613  07E7  00F5               	movwf	??i1_SetOutputs
 10614  07E8  0875               	movf	??i1_SetOutputs,w
 10615  07E9  00F0               	movwf	i1SetLight@_state
 10616  07EA  3001               	movlw	1
 10617  07EB  3186  264F  3187   	fcall	i1_SetLight
 10618                           
 10619                           ;Lights.c: 43:     SetLight( L3, state );
 10620  07EE  0876               	movf	i1SetOutputs@state,w
 10621  07EF  00F5               	movwf	??i1_SetOutputs
 10622  07F0  0875               	movf	??i1_SetOutputs,w
 10623  07F1  00F0               	movwf	i1SetLight@_state
 10624  07F2  3002               	movlw	2
 10625  07F3  3186  264F  3187   	fcall	i1_SetLight
 10626                           
 10627                           ;Lights.c: 44:     SetLight( L4, state );
 10628  07F6  0876               	movf	i1SetOutputs@state,w
 10629  07F7  00F5               	movwf	??i1_SetOutputs
 10630  07F8  0875               	movf	??i1_SetOutputs,w
 10631  07F9  00F0               	movwf	i1SetLight@_state
 10632  07FA  3003               	movlw	3
 10633  07FB  3186  264F  3187   	fcall	i1_SetLight
 10634  07FE                     i1l352:	
 10635  07FE  0008               	return
 10636  07FF                     __end_ofi1_SetOutputs:	
 10637                           
 10638                           	psect	text44
 10639  064F                     __ptext44:	
 10640 ;; *************** function i1_SetLight *****************
 10641 ;; Defined at:
 10642 ;;		line 12 in file "Lights.c"
 10643 ;; Parameters:    Size  Location     Type
 10644 ;;  light           1    wreg     const enum E6338
 10645 ;;  _state          1    0[COMMON] const _Bool 
 10646 ;; Auto vars:     Size  Location     Type
 10647 ;;  light           1    3[COMMON] const enum E6338
 10648 ;;  SetLight        1    4[COMMON] _Bool 
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  1    wreg      void 
 10651 ;; Registers used:
 10652 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10658 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;Total ram usage:        5 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; This function calls:
 10665 ;;		Nothing
 10666 ;; This function is called by:
 10667 ;;		i1_SetOutputs
 10668 ;; This function uses a non-reentrant model
 10669 ;;
 10670                           
 10671                           
 10672                           ;psect for function i1_SetLight
 10673  064F                     i1_SetLight:	
 10674                           
 10675                           ;incstack = 0
 10676                           ; Regs used in i1_SetLight: [wreg-fsr0h+status,2+status,0]
 10677                           ;i1SetLight@light stored from wreg
 10678  064F  00F3               	movwf	i1SetLight@light
 10679  0650                     i1l1945:	
 10680                           
 10681                           ;Lights.c: 12: void SetLight( const enum Light light, const _Bool _state );Lights.c: 13:
      +                           {;Lights.c: 14:     _Bool state = ( _state );
 10682  0650  0870               	movf	i1SetLight@_state,w
 10683  0651  00F1               	movwf	??i1_SetLight
 10684  0652  0871               	movf	??i1_SetLight,w
 10685  0653  00F4               	movwf	i1SetLight@state
 10686                           
 10687                           ;Lights.c: 16:     switch ( light )
 10688  0654  2EAD               	goto	i1l1967
 10689  0655                     i1l1947:	
 10690                           
 10691                           ;Lights.c: 19:             if ( PORTCbits.RC4 != state )
 10692  0655  0020               	movlb	0	; select bank0
 10693  0656  0E0E               	swapf	14,w	;volatile
 10694  0657  3901               	andlw	1
 10695  0658  0674               	xorwf	i1SetLight@state,w
 10696  0659  1903               	skipnz
 10697  065A  2E5C               	goto	u76_21
 10698  065B  2E5D               	goto	u76_20
 10699  065C                     u76_21:	
 10700  065C  2EC3               	goto	i1l349
 10701  065D                     u76_20:	
 10702  065D                     i1l1949:	
 10703  065D  1003               	clrc
 10704  065E  0022               	movlb	2	; select bank2
 10705  065F  1E0E               	btfss	14,4	;volatile
 10706  0660  1403               	setc
 10707  0661  1803               	btfsc	3,0
 10708  0662  2E64               	goto	u77_21
 10709  0663  2E67               	goto	u77_20
 10710  0664                     u77_21:	
 10711  0664  0022               	movlb	2	; select bank2
 10712  0665  160E               	bsf	14,4	;volatile
 10713  0666  2E69               	goto	u78_24
 10714  0667                     u77_20:	
 10715  0667  0022               	movlb	2	; select bank2
 10716  0668  120E               	bcf	14,4	;volatile
 10717  0669                     u78_24:	
 10718  0669  2EC3               	goto	i1l349
 10719  066A                     i1l1951:	
 10720                           
 10721                           ;Lights.c: 23:             if ( PORTCbits.RC3 != state )
 10722  066A  0020               	movlb	0	; select bank0
 10723  066B  0C0E               	rrf	14,w	;volatile
 10724  066C  00F1               	movwf	??i1_SetLight
 10725  066D  0CF1               	rrf	??i1_SetLight,f
 10726  066E  0C71               	rrf	??i1_SetLight,w
 10727  066F  3901               	andlw	1
 10728  0670  0674               	xorwf	i1SetLight@state,w
 10729  0671  1903               	skipnz
 10730  0672  2E74               	goto	u79_21
 10731  0673  2E75               	goto	u79_20
 10732  0674                     u79_21:	
 10733  0674  2EC3               	goto	i1l349
 10734  0675                     u79_20:	
 10735  0675                     i1l1953:	
 10736  0675  1003               	clrc
 10737  0676  0022               	movlb	2	; select bank2
 10738  0677  1D8E               	btfss	14,3	;volatile
 10739  0678  1403               	setc
 10740  0679  1803               	btfsc	3,0
 10741  067A  2E7C               	goto	u80_21
 10742  067B  2E7F               	goto	u80_20
 10743  067C                     u80_21:	
 10744  067C  0022               	movlb	2	; select bank2
 10745  067D  158E               	bsf	14,3	;volatile
 10746  067E  2E81               	goto	u81_24
 10747  067F                     u80_20:	
 10748  067F  0022               	movlb	2	; select bank2
 10749  0680  118E               	bcf	14,3	;volatile
 10750  0681                     u81_24:	
 10751  0681  2EC3               	goto	i1l349
 10752  0682                     i1l1955:	
 10753                           
 10754                           ;Lights.c: 27:             if ( PORTCbits.RC2 != state )
 10755  0682  0020               	movlb	0	; select bank0
 10756  0683  0C0E               	rrf	14,w	;volatile
 10757  0684  0C89               	rrf	9,f
 10758  0685  3901               	andlw	1
 10759  0686  0674               	xorwf	i1SetLight@state,w
 10760  0687  1903               	skipnz
 10761  0688  2E8A               	goto	u82_21
 10762  0689  2E8B               	goto	u82_20
 10763  068A                     u82_21:	
 10764  068A  2EC3               	goto	i1l349
 10765  068B                     u82_20:	
 10766  068B                     i1l1957:	
 10767  068B  1003               	clrc
 10768  068C  0022               	movlb	2	; select bank2
 10769  068D  1D0E               	btfss	14,2	;volatile
 10770  068E  1403               	setc
 10771  068F  1803               	btfsc	3,0
 10772  0690  2E92               	goto	u83_21
 10773  0691  2E95               	goto	u83_20
 10774  0692                     u83_21:	
 10775  0692  0022               	movlb	2	; select bank2
 10776  0693  150E               	bsf	14,2	;volatile
 10777  0694  2E97               	goto	u84_24
 10778  0695                     u83_20:	
 10779  0695  0022               	movlb	2	; select bank2
 10780  0696  110E               	bcf	14,2	;volatile
 10781  0697                     u84_24:	
 10782  0697  2EC3               	goto	i1l349
 10783  0698                     i1l1959:	
 10784                           
 10785                           ;Lights.c: 32:             if ( PORTCbits.RC1 != state )
 10786  0698  0020               	movlb	0	; select bank0
 10787  0699  0C0E               	rrf	14,w	;volatile
 10788  069A  3901               	andlw	1
 10789  069B  0674               	xorwf	i1SetLight@state,w
 10790  069C  1903               	skipnz
 10791  069D  2E9F               	goto	u85_21
 10792  069E  2EA0               	goto	u85_20
 10793  069F                     u85_21:	
 10794  069F  2EC3               	goto	i1l349
 10795  06A0                     u85_20:	
 10796  06A0                     i1l1961:	
 10797  06A0  1003               	clrc
 10798  06A1  0022               	movlb	2	; select bank2
 10799  06A2  1C8E               	btfss	14,1	;volatile
 10800  06A3  1403               	setc
 10801  06A4  1803               	btfsc	3,0
 10802  06A5  2EA7               	goto	u86_21
 10803  06A6  2EAA               	goto	u86_20
 10804  06A7                     u86_21:	
 10805  06A7  0022               	movlb	2	; select bank2
 10806  06A8  148E               	bsf	14,1	;volatile
 10807  06A9  2EAC               	goto	u87_24
 10808  06AA                     u86_20:	
 10809  06AA  0022               	movlb	2	; select bank2
 10810  06AB  108E               	bcf	14,1	;volatile
 10811  06AC                     u87_24:	
 10812  06AC  2EC3               	goto	i1l349
 10813  06AD                     i1l1967:	
 10814  06AD  0873               	movf	i1SetLight@light,w
 10815  06AE  00F1               	movwf	??i1_SetLight
 10816  06AF  01F2               	clrf	??i1_SetLight+1
 10817                           
 10818                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10819                           ; Switch size 1, requested type "simple"
 10820                           ; Number of cases is 1, Range of values is 0 to 0
 10821                           ; switch strategies available:
 10822                           ; Name         Instructions Cycles
 10823                           ; simple_byte            4     3 (average)
 10824                           ; direct_byte            8     6 (fixed)
 10825                           ; jumptable            260     6 (fixed)
 10826                           ;	Chosen strategy is simple_byte
 10827  06B0  0872               	movf	??i1_SetLight+1,w
 10828  06B1  3A00               	xorlw	0	; case 0
 10829  06B2  1903               	skipnz
 10830  06B3  2EB5               	goto	i1l2933
 10831  06B4  2E98               	goto	i1l1959
 10832  06B5                     i1l2933:	
 10833                           
 10834                           ; Switch size 1, requested type "simple"
 10835                           ; Number of cases is 4, Range of values is 0 to 3
 10836                           ; switch strategies available:
 10837                           ; Name         Instructions Cycles
 10838                           ; simple_byte           13     7 (average)
 10839                           ; direct_byte           14     6 (fixed)
 10840                           ; jumptable            260     6 (fixed)
 10841                           ;	Chosen strategy is simple_byte
 10842  06B5  0871               	movf	??i1_SetLight,w
 10843  06B6  3A00               	xorlw	0	; case 0
 10844  06B7  1903               	skipnz
 10845  06B8  2E55               	goto	i1l1947
 10846  06B9  3A01               	xorlw	1	; case 1
 10847  06BA  1903               	skipnz
 10848  06BB  2E6A               	goto	i1l1951
 10849  06BC  3A03               	xorlw	3	; case 2
 10850  06BD  1903               	skipnz
 10851  06BE  2E82               	goto	i1l1955
 10852  06BF  3A01               	xorlw	1	; case 3
 10853  06C0  1903               	skipnz
 10854  06C1  2E98               	goto	i1l1959
 10855  06C2  2E98               	goto	i1l1959
 10856  06C3                     i1l349:	
 10857  06C3  0008               	return
 10858  06C4                     __end_ofi1_SetLight:	
 10859  007E                     btemp	set	126	;btemp
 10860  007E                     int$flags	set	126
 10861  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        32
    BSS         59
    Persistent  38
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     68      79
    BANK1            80      0      79
    BANK2            80      0       0
    BANK3             0      0       0
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0
    BANK7             0      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    ActivePattern@p.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    stage_stash.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_stash.first_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    stage_stash.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_stash.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.patterns.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.patterns.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_CopyStageData.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_ConstructStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewPattern.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewPattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_right.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_right	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_left.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_left	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitUpperLowerPattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@lower.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@lower	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@upper.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@upper	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitXStrobePattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_2_3.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_2_3	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_1_4.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_1_4	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitWigwagPattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@right_side_on.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@right_side_on	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@left_side_on.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@left_side_on	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    AppendStage@last_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@last_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@last_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStageData.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStageData	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@source.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@dest.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@source	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@dest	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__ConstructStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__ConstructStage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@new_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@next	PTR struct Stage size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    ConstructStage@states	PTR const _Bool  size(1) Largest target is 4
		 -> InitLowerPattern@lower_right_states(BANK0[4]), InitLowerPattern@lower_left_states(BANK0[4]), InitUpperLowerPattern@lower_states(BANK0[4]), InitUpperLowerPattern@upper_states(BANK0[4]), 
		 -> InitXStrobePattern@diag_2_3_states(BANK0[4]), InitXStrobePattern@diag_1_4_states(BANK0[4]), InitWigwagPattern@right_side_states(BANK0[4]), InitWigwagPattern@left_side_states(BANK0[4]), 

    ConstructStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern.first_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), 

    sp__NewStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), 

    sp__NewStage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AssignLightStates@stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AssignLightStates@states	PTR const _Bool  size(1) Largest target is 4
		 -> InitLowerPattern@lower_right_states(BANK0[4]), InitLowerPattern@lower_left_states(BANK0[4]), InitUpperLowerPattern@lower_states(BANK0[4]), InitUpperLowerPattern@upper_states(BANK0[4]), 
		 -> InitXStrobePattern@diag_2_3_states(BANK0[4]), InitXStrobePattern@diag_1_4_states(BANK0[4]), InitWigwagPattern@right_side_states(BANK0[4]), InitWigwagPattern@left_side_states(BANK0[4]), 
		 -> NewStage@init_states(BANK0[4]), 

    AssignLightStates@stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NextPattern@p_selector.current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NextPattern@p_selector.patterns.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NextPattern@p_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NextPattern@p_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    NextPattern@p_selector	PTR volatile struct PatternSelector size(2) Largest target is 19
		 -> pattern_selector(BANK1[19]), 

    sp__ActivePattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    ActivePattern@p.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ActivePattern@p.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S443Stage$next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S453Pattern$first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector	PTR volatile struct PatternSelector size(2) Largest target is 19
		 -> pattern_selector(BANK1[19]), 

    sp__NextPattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    S456PatternSelector$current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S456PatternSelector$patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    pattern_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCCF0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TripTurnSignal(), 

    IOCCF0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TripTurnSignal(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    _TripTurnSignal->i1_SetOutputs
    i1_SetOutputs->i1_SetLight

Critical Paths under _main in BANK0

    _setup->_InitPatternSelector
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF0_SetInterruptHandler
    _InitPatternSelector->_InitLowerPattern
    _InitPatternSelector->_InitUpperLowerPattern
    _InitPatternSelector->_InitWigwagPattern
    _InitPatternSelector->_InitXStrobePattern
    _NewPattern->_NewStage
    _InitXStrobePattern->_AppendStage
    _InitWigwagPattern->_AppendStage
    _InitUpperLowerPattern->_AppendStage
    _InitLowerPattern->_AppendStage
    _CopyStageData->_NewStage
    _ConstructStage->_NewStage
    _NewStage->_AssignLightStates
    _AppendStage->_CopyStageData
    _EEPROM_GetSavedPattern->_eeprom_read
    _TurnSignalDone->_abs
    _abs->_ms
    _SetOutputs->_SetLight
    _NextPattern->_EEPROM_SavePattern
    _EEPROM_SavePattern->_eeprom_write
    _FlashPattern->_SetLight

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   46725
                                             67 BANK0      1     1      0
                       _FlashPattern
                        _NextPattern
           _PatternCycleInputChanged
                     _TurnSignalDone
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   44299
                _InitPatternSelector
                  _SYSTEM_Initialize
                         _SetOutputs
                    _TMR1_Initialize
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     242
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     121
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0     121
         _IOCCF0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCCF0_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternSelector                                  8     6      2   43107
                                             59 BANK0      8     6      2
             _EEPROM_GetSavedPattern
                   _InitLowerPattern
              _InitUpperLowerPattern
                  _InitWigwagPattern
                 _InitXStrobePattern
                         _NewPattern
 ---------------------------------------------------------------------------------
 (3) _NewPattern                                           4     4      0    1623
                                             19 BANK0      4     4      0
                           _NewStage
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     976
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _InitXStrobePattern                                  23    21      2   10203
                                             36 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (3) _InitWigwagPattern                                   23    21      2   10203
                                             36 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (3) _InitUpperLowerPattern                               23    21      2   10203
                                             36 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (3) _InitLowerPattern                                    23    21      2   10203
                                             36 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (4) _CopyStageData                                        9     5      4    3240
                                             19 BANK0      9     5      4
                           _NewStage (ARG)
 ---------------------------------------------------------------------------------
 (4) _ConstructStage                                       7     4      3    2624
                                             19 BANK0      7     4      3
                  _AssignLightStates
                           _NewStage
 ---------------------------------------------------------------------------------
 (4) _NewStage                                            10    10      0     551
                                              9 BANK0     10    10      0
                  _AssignLightStates
 ---------------------------------------------------------------------------------
 (5) _AssignLightStates                                    9     6      3     438
                                              0 BANK0      9     6      3
 ---------------------------------------------------------------------------------
 (4) _AppendStage                                          8     4      4    3328
                                             28 BANK0      8     4      4
                      _CopyStageData (ARG)
                           _NewStage (ARG)
 ---------------------------------------------------------------------------------
 (3) _EEPROM_GetSavedPattern                               2     2      0     192
                                              1 BANK0      2     2      0
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (4) _eeprom_read                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TurnSignalDone                                       1     1      0     971
                                              8 BANK0      1     1      0
                         _SetOutputs
                                _abs
                                 _ms
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     142
                                              4 BANK0      4     2      2
                                 _ms (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetOutputs                                           2     2      0     829
                                              5 BANK0      2     2      0
                           _SetLight
 ---------------------------------------------------------------------------------
 (1) _PatternCycleInputChanged                             4     4      0      23
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _NextPattern                                          6     4      2     626
                                              4 BANK0      6     4      2
                 _EEPROM_SavePattern
 ---------------------------------------------------------------------------------
 (2) _EEPROM_SavePattern                                   2     2      0     183
                                              2 BANK0      2     2      0
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         2     1      1     152
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _FlashPattern                                        12    12      0     806
                                              5 BANK0     12    12      0
                           _SetLight
                                 _ms
 ---------------------------------------------------------------------------------
 (2) _ms                                                   4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _SetLight                                             5     4      1     741
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           0     0      0     565
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0     240
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (9) _TMR1_WriteTimer                                      2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (9) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _PIN_MANAGER_IOC                                      0     0      0     325
                         _IOCCF0_ISR
 ---------------------------------------------------------------------------------
 (9) _IOCCF0_ISR                                           0     0      0     325
                   Absolute function *
                     _TripTurnSignal *
 ---------------------------------------------------------------------------------
 (10) _TripTurnSignal                                      0     0      0     325
                       i1_SetOutputs
                               i1_ms
 ---------------------------------------------------------------------------------
 (11) i1_ms                                                4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (11) i1_SetOutputs                                        2     2      0     325
                                              5 COMMON     2     2      0
                         i1_SetLight
 ---------------------------------------------------------------------------------
 (12) i1_SetLight                                          5     4      1     237
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FlashPattern
     _SetLight
     _ms
   _NextPattern
     _EEPROM_SavePattern
       _eeprom_write
   _PatternCycleInputChanged
   _TurnSignalDone
     _SetOutputs
       _SetLight
     _abs
       _ms (ARG)
     _ms
   _setup
     _InitPatternSelector
       _EEPROM_GetSavedPattern
         _eeprom_read
       _InitLowerPattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _InitUpperLowerPattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _InitWigwagPattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _InitXStrobePattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _NewPattern
         _NewStage
           _AssignLightStates
         ___wmul
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCCF0_SetInterruptHandler
       _PMD_Initialize
       _TMR1_Initialize
         _TMR1_SetInterruptHandler
       _WDT_Initialize
     _SetOutputs
       _SetLight
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR1_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCCF0_ISR
       Absolute function(Fake) *
       _TripTurnSignal *
         i1_SetOutputs
           i1_SetLight
         i1_ms
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      AC      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      AC      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue May 12 10:48:29 2020

                              _update_stage 006C                                 __CFG_CP$OFF 0000  
                                        l51 0C9A                                          l45 0D22  
                                        l54 0CA8                                          l48 0CBA  
                        ConstructStage@next 0035                                          _ms 0CD8  
                       ___wmul@multiplicand 0022                     ?_EEPROM_GetSavedPattern 0070  
                               __CFG_LVP$ON 0000                                         l120 0CA0  
                                       l109 0E8E                                         l213 0CC3  
                                       l302 0524                                         ?_ms 0020  
                                       l315 064E                                         l411 0E3C  
                                       l421 0FC0                                         l261 0D9A  
                                       l415 07DC                                         l183 0D6C  
                                       l512 05BF                                         l352 0E62  
                                       l424 0EE7                                         l186 0C96  
                                       l349 0735                                         l437 078D  
                                       l429 0F82                                         l534 0CEC  
                                       l470 0273                                         l519 0CE1  
                                       l392 0F49                                         l448 0486  
                                       l721 0EEF                                         l385 0FFF  
                                       l481 037D                                         l722 0F02  
                                       l538 0E17                                         l723 0F0A  
                                       l459 0169                                         l732 0DC2  
                                       l725 0F0E                                         l718 0EEA  
                                       l734 0DD6                                         l719 0EEA  
                                       l728 0F15                                         l697 0D47  
                                       l699 0D57                                __CFG_CPD$OFF 0000  
                                       u900 077B                                         u740 0E3C  
                                       u901 077A                                         u741 0E3B  
                                       u750 0798                                         u751 0797  
                                       u905 0777                                         u880 0F73  
                                       u881 0F72                                         u890 0742  
                                       u891 0741                                         u885 0F6F  
                           _timer1ReloadVal 0077                                         _abs 0D9B  
                   __size_of_PMD_Initialize 0008                                         wreg 0009  
        __end_of_IOCCF0_SetInterruptHandler 0CA1                  _IOCCF0_SetInterruptHandler 0C9B  
                                      ??_ms 0024                                        l2001 0F82  
                                      l2011 075F                                        ?_abs 0024  
                                      l2013 0768                                        l2005 0736  
                                      l2015 077B                                        l2007 0742  
                                      l2009 0755                                        l2211 016A  
                                      l2131 037E                                        l2301 06F6  
                                      l2221 01AD                                        l2213 0171  
                                      l2141 03C0                                        l2133 0384  
                                      l2205 011F                                        l2303 06FE  
                                      l2231 01C0                                        l2223 01B5  
                                      l2215 0181                                        l2151 03D3  
                                      l2143 03C8                                        l2135 0394  
                                      l2207 0157                                        l2305 070B  
                                      l2313 071F                                        l2233 01F8  
                                      l2225 01BE                                        l2217 018F  
                                      l2153 040B                                        l2145 03D1  
                                      l2137 03A2                                        l2209 015C  
                                      l1186 0DB6                                        l2307 0712  
                                      l2411 0DA9                                        l2251 0274  
                                      l2235 01FD                                        l2219 019F  
                                      l2155 0410                                        l2139 03B2  
                                      l2171 0060                                        l1189 0DB6  
                                      l2261 02B7                                        l2253 027B  
                                      l2245 0229                                        l2237 020A  
                                      l2165 043C                                        l2157 041D  
                                      l2181 00A3                                        l2173 0067  
                                      l2271 02CA                                        l2263 02BF  
                                      l2255 028B                                        l2247 0261  
                                      l2239 0226                                        l2167 0474  
                                      l2159 0439                                        l2191 00B6  
                                      l2183 00AB                                        l2175 0077  
                                      l2409 0D9B                                        l2273 0302  
                                      l2265 02C8                                        l2257 0299  
                                      l2249 0266                                        l2169 0479  
                                      l2193 00EE                                        l2185 00B4  
                                      l2177 0085                                        l2291 06C6  
                                      l2451 0F16                                        l2275 0307  
                                      l2259 02A9                                        l2195 00F3  
                                      l2179 0095                                        l2611 0CBB  
                                      l2293 06CB                                        l2461 0F36  
                                      l2453 0F1B                                        l2613 0D4E  
                                      l2285 0333                                        l2277 0314  
                                      l2197 0100                                        l2621 0DBE  
                                      l2701 0FBC                                        l2295 06D2  
                                      l2471 0F48                                        l2455 0F21  
                                      l2375 0E3F                                        l2711 0E09  
                                      l1911 0E18                                        l2287 036B  
                                      l2279 0330                                        l2199 011C  
                                      l2623 0DC7                                        l2631 0CA1  
                                      l2297 06DF                                        l2721 0EF0  
                                      l2457 0F24                                        l2465 0F38  
                                      l2801 0FDD                                        l2713 0E0F  
                                      l2705 0DF7                                        l1921 0E33  
                                      l2289 0370                                        l2625 0DCC  
                                      l2617 0DB7                                        l2609 0C9B  
                                      l2641 0E6C                                        l2633 0E63  
                                      l2299 06E9                                        l2731 0F01  
                                      l2723 0EF6                                        l2811 05C1  
                                      l2459 0F2D                                        l2715 0E15  
                                      l2707 0DFF                                        l1931 07AF  
                                      l1923 078E                                        l2627 0DD2  
                                      l2619 0DBA                                        l2651 0E7C  
                                      l2643 0E70                                        l2635 0E65  
                                      l2733 0F05                                        l2725 0EF7  
                                      l2813 05CE                                        l2805 0FDF  
                                      l2709 0E04                                        l2717 0E16  
                                      l1917 0E1B                                        l1941 07D8  
                                      l1933 07B3                                        l1925 0798  
                                      l2661 0E84                                        l2653 0E7F  
                                      l2645 0E72                                        l2637 0E67  
                                      l2741 0D16                                        l2735 0F09  
                                      l2727 0EFB                                        l2815 05DB  
                                      l2823 05F6                                        l1919 0E2F  
                                      l1935 07BB                                        l2751 0487  
                                      l2671 0CB9                                        l2663 0E8C  
                                      l2655 0E81                                        l2647 0E77  
                                      l2639 0E6A                                        l2743 0D19  
                                      l2841 0566                                        l2737 0F14  
                                      l2729 0EFD                                        l2817 05E8  
                                      l2825 0612                                        l2809 05C0  
                                      l1937 07C6                                        l1929 079B  
                                      l2761 04A2                                        l2665 0CB2  
                                      l2657 0E82                                        l2649 0E7A  
                                      l2681 0D5D                                        l2673 0C97  
                                      l2745 0D1C                                        l2931 0727  
                                      l2851 05BD                                        l2843 0570  
                                      l2827 0634                                        l2819 05EF  
                                      l1939 07D0                                        l2771 04E5  
                                      l2763 04AF                                        l2667 0CB5  
                                      l2659 0E83                                        l2683 0D62  
                                      l2675 0D58                                        l2747 0D1F  
                                      l2739 0D13                                        l2845 057A  
                                      l2837 0525                                        l2829 063D  
                                      l1981 0EDA                                        l2693 0F90  
                                      l2773 04F2                                        l2765 04C0  
                                      l2757 048A                                        l2669 0CB6  
                                      l2685 0D64                                        l2677 0D5A  
                                      l2749 0C94                                        l2861 0EA3  
                                      l2853 0E8F                                        l2847 057D  
                                      l2839 052D                                        l1983 0EE3  
                                      l2695 0FA6                                        l2687 0F83  
                                      l2775 0515                                        l2767 04CB  
                                      l2759 049E                                        l2679 0D5C  
                                      l2791 0D8E                                        l2783 0D83  
                                      l2863 0EA9                                        l2855 0E92  
                                      l2849 0582                                        l2777 0CE4  
                                      l2929 0604                                        l1977 0EBD  
                                      l1993 0F4D                                        l2697 0FAA  
                                      l2689 0F8D                                        l2769 04D8  
                                      l2793 0D92                                        l2785 0D86  
                                      l2865 0EB0                                        l2779 0CD8  
                                      l2795 0FC1                                        l1979 0ED0  
                                      l1995 0F62                                        l1987 0F4A  
                                      l2699 0FAF                                        l2787 0D87  
                                      l2867 0EB5                                        l2859 0E9B  
                                      l2797 0FC6                                        l1997 0F66  
                                      l2789 0D8B                                        l2799 0FCA  
                                      l1999 0F73                             ?_ConstructStage 0033  
                                      u1010 041D                                        u1011 041C  
                                      u1100 06DC                                        u1020 0486  
                                      u1101 06D9                                        u1021 0485  
                                      u1030 0100                                        u1015 0419  
                                      u1031 00FF                                        u1120 06E9  
                                      u1040 0169                                        u1121 06E8  
                                      u1025 0482                                        u1041 0168  
                                      u1130 06F3                                        u1114 06DE  
                                      u1050 020A                                        u1131 06F0  
                                      u1051 0209                                        u1035 00FC  
                                      u1204 071E                                        u1060 0273  
                                      u1061 0272                                        u1045 0165  
                                      u1150 06FE                                        u1070 0314  
                                      u1151 06FD                                        u1071 0313  
                                      u1055 0206                                        u1160 0708  
                                      u1144 06F5                                        u1080 037D  
                                      u1161 0705                                        u1081 037C  
                                      u1065 026F                                        u1090 06D2  
                                      u1091 06D1                                        u1075 0310  
                                      u1180 0712                                        u1340 0F21  
                                      u1181 0711                                        u1341 0F20  
                                      u1085 0379                                        _LATA 010C  
                                      u1190 071C                                        u1174 070A  
                                      u1350 0F36                                        u1510 0DD2  
                                      u1191 0719                                        u1351 0F35  
                                      u1511 0DD1                                        _LATC 010E  
                                      u1600 0F14                                        u1360 0F48  
                                      u1280 0DA9                                        u1520 0F8D  
                                      u1601 0F13                                        u1361 0F47  
                                      u1281 0DA8                                        u1505 0DC8  
                                      u1521 0F8C                                        u1530 0E04  
                                      u1610 04AF                                        u1531 0E03  
                                      u1611 04AE                                        u1620 0FC6  
                                      u1540 0E09                                        u1285 0DA5  
                                      u1621 0FC5                                        u1541 0E08  
                                      u1630 0FFE                                        u1470 0D4E  
                                      u1550 0E0F                                        u1631 0FFC  
                                      u1471 0D4C                                        u1551 0E0E  
                                      u1615 04AB                                        u1640 0FFF  
                                      u1560 0E15                                        u1480 0DBE  
                                      u1561 0E14                                        u1481 0DBD  
                                      u1650 0566                                        u1570 0EEF  
                                      u1651 0565                                        u1571 0EEE  
                                      u1707 0F28                                        u1635 0FF9  
                                      u1660 0582                                        u1580 0F01  
                                      u1661 0581                                        u1581 0F00  
                                      u1590 0F0E                                        u1670 0E9A  
                                      u1655 0562                                        u1591 0F0D  
                                      u1495 0DC3                                        u1671 0E99  
                                      u1680 0EA3                                        u1681 0EA2  
                                      u1690 0EA9                                        u1691 0EA8  
                                      _PMD0 0911                                        _PMD1 0912  
                                      _PMD2 0913                                        _PMD3 0914  
                                      _PMD4 0915                                        _PMD5 0916  
                                      _WPUA 020C                                        _WPUC 020E  
                            ??_eeprom_write 0021                                        i1_ms 0CC4  
                              __CFG_WRT$OFF 0000                               SetLight@light 0023  
                             __CFG_FCMEN$ON 0000                                        abs@a 0024  
                      ConstructStage@states 0039                               SetLight@state 0024  
                                      _main 0E8F                         __end_of_AppendStage 078E  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                               __CFG_BOREN$ON 0000  
                             __CFG_BORV$LOW 0000                                        start 0028  
                           ?_TripTurnSignal 0070                  ??_TMR1_SetInterruptHandler 0022  
                             __CFG_CSWEN$ON 0000                               __CFG_MCLRE$ON 0000  
                            CopyStageData@i 003A                             ??_CopyStageData 0037  
            __end_of_EEPROM_GetSavedPattern 0E18                                       ??_abs 0026  
                                     ?i1_ms 0070              __size_of_OSCILLATOR_Initialize 0009  
             __end_of_OSCILLATOR_Initialize 0CBB                         __size_of_IOCCF0_ISR 000E  
                                     ?_main 0070                               __CFG_WDTE$OFF 0000  
                           _TMR1_StartTimer 0C94                              __CFG_DEBUG$OFF 0000  
                                     i1l113 0CB1                                       i1l210 0D82  
                                     i1l117 0D12                                       i1l150 0014  
                                     i1l216 0CD7                                       i1l155 0026  
                                     i1l156 0026                                       i1l352 07FE  
                                     i1l349 06C3                                       i1l381 0D33  
                                     i1l197 0D44                                       i1l519 0CCD  
                                     _OSCEN 091D                                       _TMR1H 001A  
                                     _TMR1L 0019                  InitLowerPattern@lower_left 004F  
                                     u80_20 067F                                       u80_21 067C  
                                     _TRISA 008C                                       u81_24 0681  
                                     _TRISC 008E                                       u82_20 068B  
                                     u82_21 068A                                       u83_20 0695  
                                     u83_21 0692                                       u76_20 065D  
                                     u76_21 065C                                       u84_24 0697  
                                     u85_20 06A0                                       u77_20 0667  
                                     u85_21 069F                                       u77_21 0664  
                                     u86_20 06AA                                       u86_21 06A7  
                                     u78_24 0669                                       u79_20 0675  
                                     u79_21 0674                                       u87_24 06AC  
                            SetLight@_state 0020                       ConstructStage@time_ms 0033  
                          __end_of_TMR1_ISR 0D83                     __end_of_PIN_MANAGER_IOC 0CB2  
                            _WDT_Initialize 0C97                                       _setup 0D83  
         InitXStrobePattern@diag_1_4_states 0047                     __end_of_TMR1_Initialize 0D6D  
                                     pclath 000A           InitXStrobePattern@diag_2_3_states 004B  
                               ?i1_SetLight 0070                        __end_of_FlashPattern 05C0  
                                     status 0003               InitPatternSelector@p_selector 005B  
                                     wtemp0 007E                    FlashPattern@current_time 002F  
                  _PatternCycleInputChanged 0F16                             _TMR1_WriteTimer 0D34  
               __size_of_EEPROM_SavePattern 000B                           _pattern_list_iter 0068  
                              __end_ofi1_ms 0CCE                             __initialization 002A  
                   __size_of_TurnSignalDone 003F                         NewStage@init_states 002D  
                             ??_NextPattern 0026                                __end_of_main 0EBB  
                                _NewPattern 0F83                 ?_INTERRUPT_InterruptManager 0070  
                          __end_of_NewStage 07DD                                      ??i1_ms 0074  
                                    ??_main 0063                            __end_of_SetLight 0736  
                         ?_InitLowerPattern 0044                 __end_of_InitPatternSelector 0525  
                        ??_InitLowerPattern 0046                      __end_of_WDT_Initialize 0C9B  
                        _cur_pc_input_state 006E                                 _AppendStage 0736  
                       InitXStrobePattern@i 0053                                      ?_setup 0070  
                                    _ANSELA 018C                                      _ANSELC 018E  
                        __CFG_RSTOSC$HFINT1 0000                                      _T1GCON 001C  
                __end_of_InitXStrobePattern 016A                     TMR1_WriteTimer@timerVal 0070  
                                    i1l2035 07DE                                      i1l2037 0CC4  
                                    i1l2321 0D27                                      _ODCONA 028C  
                                    _ODCONC 028E                                      i1l2413 0CA9  
                                    i1l2421 0D76                                      i1l2319 0D23  
                                    i1l2351 0D05                                      i1l2415 0CAE  
                                    i1l2423 0D7D                                      i1l2353 0D0B  
                                    i1l2361 0D39                                      i1l2417 0D6D  
                                    i1l2521 000B                                      i1l2355 0D10  
                                    i1l2371 0D42                                      i1l2363 0D3A  
                                    i1l2419 0D6F                                      i1l2523 0010  
                                    i1l2373 0CCE                                      i1l2365 0D3C  
                                    i1l2525 0018                                      i1l2367 0D3E  
                                    i1l2359 0D34                                      i1l2527 001D  
                                    i1l2519 0006                                      u130_20 0D7D  
                                    i1l2369 0D40                                      u130_21 0D7C  
                                    i1l2529 0022                                      i1l1951 066A  
                                    i1l1961 06A0                                      i1l1953 0675  
                                    i1l1945 0650                                      i1l1955 0682  
                                    i1l1947 0655                                      i1l2933 06B5  
                                    i1l1957 068B                                      i1l1949 065D  
                                    i1l1959 0698                                      i1l1967 06AD  
                                    u140_20 0010                                      u140_21 000F  
                                    u125_20 0D0B                                      u141_20 0018  
                                    u125_21 0D0A                                      u141_21 0017  
                                    u126_20 0D39                                      u142_20 001D  
                                    u126_21 0D38                                      u142_21 001C  
                                    u143_20 0022                                      u143_21 0021  
                                    _INLVLA 038C                                      _INLVLC 038E  
                                    u129_20 0CAE                                      u129_21 0CAD  
                                    u139_20 000B                                      u139_21 000A  
                                    _OSCFRQ 091F                                      _WDTCON 0097  
                                _SetOutputs 0E3D                   InitUpperLowerPattern@F462 00D9  
                 InitUpperLowerPattern@F465 00D5                              __CFG_PWRTE$OFF 0000  
                           i1SetLight@light 0073                        __size_of_eeprom_read 0013  
      __end_of_TMR1_DefaultInterruptHandler 0CD8       __size_of_TMR1_DefaultInterruptHandler 000A  
              _TMR1_DefaultInterruptHandler 0CCE                             SetOutputs@state 0026  
                           i1SetLight@state 0074                   InitUpperLowerPattern@head 0059  
                     NextPattern@p_selector 0024                     __end_of_TMR1_StartTimer 0C97  
                                    ___wmul 0DB7                              __CFG_STVREN$ON 0000  
         InitWigwagPattern@left_side_states 0047                                      _cur_ms 0064  
         InitUpperLowerPattern@upper_states 0047                        __end_of_eeprom_write 0F16  
                       CopyStageData@source 0035                         __end_of_NextPattern 064F  
                       __size_ofi1_SetLight 0075                              _PMD_Initialize 0CA1  
                           ?_WDT_Initialize 0070    TMR1_SetInterruptHandler@InterruptHandler 0020  
IOCCF0_SetInterruptHandler@InterruptHandler 0020                            ?_PIN_MANAGER_IOC 0070  
                   __end_of_TMR1_WriteTimer 0D45                                ??_IOCCF0_ISR 0077  
                          ?_TMR1_Initialize 0070                      AssignLightStates@stage 0020  
                         _SYSTEM_Initialize 0D13                     __end_of__initialization 005C  
                           eeprom_read@addr 0020                  InitXStrobePattern@diag_1_4 004F  
                InitXStrobePattern@diag_2_3 0051                          ?_SYSTEM_Initialize 0070  
                            __pcstackCOMMON 0070          InitWigwagPattern@right_side_states 004B  
                              __pidataBANK1 0DD7                         ??_SYSTEM_Initialize 0022  
                                 ?_TMR1_ISR 0070               ?_TMR1_DefaultInterruptHandler 0070  
                               ?_NewPattern 0028                               __end_of_setup 0D9B  
                    __end_of_PMD_Initialize 0CA9                                  __end_of_ms 0CE2  
                        __end_of_IOCCF0_ISR 0D13                           NewStage@new_stage 0031  
                          ??_ConstructStage 0036                           eeprom_write@value 0020  
               ?_IOCCF0_SetInterruptHandler 0020                       __size_of_FlashPattern 009B  
         InitLowerPattern@lower_left_states 0047                    InitUpperLowerPattern@off 0057  
                 __end_of_SYSTEM_Initialize 0D23                                     ??_setup 0063  
                              NewStage@F419 00A0                                  __pbssBANK0 0064  
                                __pbssBANK1 00A0                            ??_TripTurnSignal 0077  
                                 ?_NewStage 0020                                  __pnvCOMMON 0077  
                               ?_SetOutputs 0070                       _InitUpperLowerPattern 016A  
                                 ?_SetLight 0020                          AssignLightStates@i 0027  
                      AppendStage@new_stage 003E                              _TurnSignalDone 0FC1  
                                __pmaintext 0E8F                                     ?___wmul 0020  
                          ?_TMR1_StartTimer 0070                                  ??_TMR1_ISR 0072  
                           __CFG_PPS1WAY$ON 0000                                 _NextPattern 05C0  
                                __pintentry 0004                             ?_PMD_Initialize 0070  
                        InitWigwagPattern@i 0053                                _FlashPattern 0525  
                                   _OSCCON1 0919                                     _OSCCON3 091B  
                                   _NVMADRH 0892                                     _NVMADRL 0891  
                                   _NVMDATH 0894                                     _OSCTUNE 091E  
                                   _NVMDATL 0893                                     _NVMCON2 0896  
                ??_PatternCycleInputChanged 0020                                     _SLRCONA 030C  
                                   _SLRCONC 030E                      InitXStrobePattern@F450 00E1  
                    InitXStrobePattern@F453 00DD                            ?_TMR1_WriteTimer 0070  
                    InitXStrobePattern@head 0059                         __size_of_NewPattern 003E  
                   ConstructStage@new_stage 0037                                ??i1_SetLight 0071  
                                ??_NewStage 0029                      __end_of_TurnSignalDone 1000  
                          i1SetLight@_state 0070                InitUpperLowerPattern@pattern 0044  
                                ??_SetLight 0021                  InitUpperLowerPattern@i_909 0055  
                     __size_of_eeprom_write 002E                  InitUpperLowerPattern@lower 0051  
                InitUpperLowerPattern@upper 004F                             __size_of___wmul 0020  
       PatternCycleInputChanged@delay_count 0022                       __end_of_CopyStageData 0F83  
                      InitWigwagPattern@off 0057                                     __ptext1 0D83  
                                   __ptext2 0C94                                     __ptext3 0D13  
                                   __ptext4 0C97                                     __ptext5 0D58  
                                   __ptext6 0CBB                                     __ptext7 0CA1  
                                   __ptext8 0E63                                     __ptext9 0C9B  
            ??_TMR1_DefaultInterruptHandler 0070                                   _T1CONbits 001B  
                      InitLowerPattern@F474 00D1                        InitLowerPattern@F477 00CD  
                     _OSCILLATOR_Initialize 0CB2                                __size_of_abs 001C  
                        __end_ofi1_SetLight 06C4                         __size_of_SetOutputs 0026  
         __size_of_TMR1_SetInterruptHandler 0009                    ??_PIN_MANAGER_Initialize 0022  
                 ?_TMR1_SetInterruptHandler 0020                                   _IOCCFbits 0399  
                      InitLowerPattern@head 0059                                   _IOCCNbits 0398  
                                 _IOCCPbits 0397                                ?_AppendStage 003C  
                __size_of_SYSTEM_Initialize 0010                                     clrloop0 0CEE  
                      end_of_initialization 005C                         _last_pc_input_state 006D  
                __end_of_EEPROM_SavePattern 0CED                                     init_ram 0CF9  
                    ?_InitUpperLowerPattern 0044                   __size_of_InitLowerPattern 010A  
                              _eeprom_write 0EE8                                     initloop 0CFA  
        InitLowerPattern@lower_right_states 004B                             ?_TurnSignalDone 0070  
                        _InitXStrobePattern 0060                            ??_WDT_Initialize 0020  
                                 _PORTCbits 000E                     InitLowerPattern@pattern 0044  
                       ?_InitXStrobePattern 0044                               ?i1_SetOutputs 0070  
                   AssignLightStates@states 0022                             _ts_trigger_time 00A4  
                          __CFG_FEXTOSC$OFF 0000              EEPROM_SavePattern@pattern_name 0023  
                                _start_time 007B                __size_of_InitPatternSelector 009E  
                                _ts_trigger 007D                        ??_InitXStrobePattern 0046  
                             ??_eeprom_read 0020                    ??_EEPROM_GetSavedPattern 0021  
                              ??_NewPattern 0033                              __end_of___wmul 0DD7  
                         __size_of_TMR1_ISR 0016                           CopyStageData@dest 0033  
                            ??i1_SetOutputs 0075                      ?_OSCILLATOR_Initialize 0070  
                      InitPatternSelector@i 0061                         start_initialization 002A  
                          _pattern_selector 00A8             __size_of_PIN_MANAGER_Initialize 002C  
                               __end_of_abs 0DB7                             AppendStage@head 003C  
                             _pattern_stash 00BB                       NewPattern@new_pattern 0035  
                    InitUpperLowerPattern@i 0053                          __end_of_NewPattern 0FC1  
                              ??_SetOutputs 0025                    __size_of_PIN_MANAGER_IOC 0009  
                  InitWigwagPattern@pattern 0044                           __size_of_NewStage 004F  
                          __CFG_LPBOREN$OFF 0000                    __size_of_TMR1_Initialize 0015  
                         __size_of_SetLight 0072                            ??_PMD_Initialize 0020  
                                  ??___wmul 0024                                ?_NextPattern 0024  
                       __end_of_eeprom_read 0D58                                 __pdataBANK1 00CD  
                               __pbssBIGRAM 20F0                                 __pbssCOMMON 007B  
                     AppendStage@last_stage 0042                                   ___latbits 0002  
                        __end_of_SetOutputs 0E63                               __pcstackBANK0 0020  
                    InitWigwagPattern@i_857 0055                   InitXStrobePattern@pattern 0044  
                      __size_of_AppendStage 0058                            eeprom_write@addr 0021  
                          _InitLowerPattern 0274                                   __pnvBANK1 00ED  
           __size_of_EEPROM_GetSavedPattern 0021                      _PIN_MANAGER_Initialize 0E63  
          __end_of_TMR1_SetInterruptHandler 0CC4                           _AssignLightStates 0E18  
                         _InitWigwagPattern 037E                          ?_AssignLightStates 0020  
              ??_INTERRUPT_InterruptManager 0077                          ?_InitWigwagPattern 0044  
                     InitXStrobePattern@off 0057                    __size_of_TMR1_StartTimer 0003  
                       ??_AssignLightStates 0023                         ??_InitWigwagPattern 0046  
                   ??_InitUpperLowerPattern 0046                              __size_of_setup 0018  
                          ??_TurnSignalDone 0028                                 __size_of_ms 000A  
                       InitLowerPattern@off 0057                              ___wmul@product 0024  
                   __size_of_ConstructStage 002D                                    _LATCbits 010E  
                      __end_ofi1_SetOutputs 07FF                                   clear_ram0 0CED  
                               _eeprom_read 0D45                                    _PIE0bits 0090  
                                  _PIE1bits 0091                    __size_of_TMR1_WriteTimer 0011  
                 __end_of_AssignLightStates 0E3D         __size_of_INTERRUPT_InterruptManager 0024  
                                  _PIR0bits 0010                                    _PIR1bits 0011  
         __size_of_PatternCycleInputChanged 0034         EEPROM_GetSavedPattern@saved_pattern 0022  
                 ?_PatternCycleInputChanged 0070                   __end_of_InitWigwagPattern 0487  
                   __size_of_TripTurnSignal 0011                                    _TMR1_ISR 0D6D  
                        _EEPROM_SavePattern 0CE2                           ??_PIN_MANAGER_IOC 0077  
                       _InitPatternSelector 0487                           ??_TMR1_Initialize 0022  
                         ___wmul@multiplier 0020                     InitXStrobePattern@i_883 0055  
                       ?_EEPROM_SavePattern 0070                      _EEPROM_GetSavedPattern 0DF7  
               InitLowerPattern@lower_right 0051                        ?_InitPatternSelector 005B  
                    __size_of_CopyStageData 0039                                    _NewStage 078E  
                      ??_EEPROM_SavePattern 0022                           i1SetOutputs@state 0076  
                                  _SetLight 06C4                             _stage_list_iter 006A  
                   ??_OSCILLATOR_Initialize 0020                       InitWigwagPattern@F441 00E5  
                     InitWigwagPattern@F438 00E9                        __size_of_NextPattern 008F  
                  _TMR1_SetInterruptHandler 0CBB                       InitWigwagPattern@head 0059  
                     _TMR1_InterruptHandler 00ED                     _IOCCF0_InterruptHandler 0079  
                                  __ptext10 0CB2                                    __ptext11 0487  
                                  __ptext20 078E                                    __ptext12 0F83  
                                  __ptext21 0E18                                    __ptext13 0DB7  
                                _T1GCONbits 001C                                    __ptext30 0CE2  
                                  __ptext22 0736                                    __ptext14 0060  
                                  __ptext31 0EE8                                    __ptext23 0DF7  
                                  __ptext15 037E                                    __ptext40 0D05  
                                  __ptext32 0525                                    __ptext24 0D45  
                                  __ptext16 016A                                    __ptext41 0D23  
                                  __ptext33 0CD8                                    __ptext25 0FC1  
                                  __ptext17 0274                                    __ptext42 0CC4  
                                  __ptext34 06C4                                    __ptext26 0D9B  
                                  __ptext18 0F4A                                    __ptext43 07DD  
                                  __ptext27 0E3D                                    __ptext19 0EBB  
                                  __ptext44 064F                                    __ptext36 0D6D  
                                  __ptext28 0F16                                    __ptext37 0D34  
                                  __ptext29 05C0                                    __ptext38 0CCE  
                                  __ptext39 0CA9                ??_IOCCF0_SetInterruptHandler 0022  
            InitWigwagPattern@right_side_on 0051                       ??_InitPatternSelector 005D  
                         ??_TMR1_StartTimer 0020                                  _IOCCF0_ISR 0D05  
                             __size_ofi1_ms 000A                               __size_of_main 002C  
               __size_of_InitXStrobePattern 010A                       InitLowerPattern@i_935 0055  
                __size_of_AssignLightStates 0025               InitWigwagPattern@left_side_on 004F  
                __size_of_InitWigwagPattern 0109                                    int$flags 007E  
        __end_of_INTERRUPT_InterruptManager 0028                  _INTERRUPT_InterruptManager 0004  
                         ??_TMR1_WriteTimer 0072                               _CopyStageData 0F4A  
                             ?_FlashPattern 0070                    __end_of_InitLowerPattern 037E  
       __size_of_IOCCF0_SetInterruptHandler 0006                                  _INTCONbits 000B  
                               _NVMCON1bits 0895                     __size_of_WDT_Initialize 0004  
                     __size_ofi1_SetOutputs 0022                                    intlevel1 0000  
                            _ConstructStage 0EBB                     ?_PIN_MANAGER_Initialize 0070  
                         __CFG_CLKOUTEN$OFF 0000                           InitLowerPattern@i 0053  
                            _TripTurnSignal 0D23                              ?_CopyStageData 0033  
                            ??_FlashPattern 0025           InitUpperLowerPattern@lower_states 004B  
                              i1_SetOutputs 07DD                               ??_AppendStage 0040  
          __end_of_PatternCycleInputChanged 0F4A                      __end_of_ConstructStage 0EE8  
                               ?_IOCCF0_ISR 0070              __end_of_PIN_MANAGER_Initialize 0E8F  
            __size_of_InitUpperLowerPattern 010A               __end_of_InitUpperLowerPattern 0274  
                             ?_eeprom_write 0020                                  i1_SetLight 064F  
                                _STATUSbits 0003                             _PIN_MANAGER_IOC 0CA9  
                               _stage_stash 20F0                                ?_eeprom_read 0070  
                           _TMR1_Initialize 0D58                      __end_of_TripTurnSignal 0D34  
