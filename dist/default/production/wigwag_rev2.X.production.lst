

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu May 07 18:47:51 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F18325
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	intentry,global,class=CODE,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	dabs	1,0x620,48
    60                           	dabs	1,0x5A0,80
    61                           	dabs	1,0x520,80
    62                           	dabs	1,0x4A0,80
    63                           	dabs	1,0x420,80
    64                           	dabs	1,0x3A0,80
    65                           	dabs	1,0x320,80
    66                           	dabs	1,0x2A0,80
    67                           	dabs	1,0x220,80
    68                           	dabs	1,0x1A0,80
    69                           	dabs	1,0x20F0,0,_stage_stash
    70                           	dabs	1,0x7E,2
    71  0000                     
    72                           ; Version 2.10
    73                           ; Generated 31/07/2019 GMT
    74                           ; 
    75                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC16F18325 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106  0000                     	;# 
   107  0001                     	;# 
   108  0002                     	;# 
   109  0003                     	;# 
   110  0004                     	;# 
   111  0005                     	;# 
   112  0006                     	;# 
   113  0007                     	;# 
   114  0008                     	;# 
   115  0009                     	;# 
   116  000A                     	;# 
   117  000B                     	;# 
   118  000C                     	;# 
   119  000E                     	;# 
   120  0010                     	;# 
   121  0011                     	;# 
   122  0012                     	;# 
   123  0013                     	;# 
   124  0014                     	;# 
   125  0015                     	;# 
   126  0015                     	;# 
   127  0016                     	;# 
   128  0016                     	;# 
   129  0017                     	;# 
   130  0018                     	;# 
   131  0019                     	;# 
   132  0019                     	;# 
   133  001A                     	;# 
   134  001B                     	;# 
   135  001C                     	;# 
   136  001D                     	;# 
   137  001E                     	;# 
   138  001F                     	;# 
   139  008C                     	;# 
   140  008E                     	;# 
   141  0090                     	;# 
   142  0091                     	;# 
   143  0092                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0097                     	;# 
   147  009B                     	;# 
   148  009B                     	;# 
   149  009C                     	;# 
   150  009D                     	;# 
   151  009E                     	;# 
   152  009F                     	;# 
   153  010C                     	;# 
   154  010E                     	;# 
   155  0111                     	;# 
   156  0112                     	;# 
   157  0113                     	;# 
   158  0114                     	;# 
   159  0115                     	;# 
   160  0116                     	;# 
   161  0117                     	;# 
   162  0118                     	;# 
   163  0119                     	;# 
   164  018C                     	;# 
   165  018E                     	;# 
   166  0197                     	;# 
   167  0199                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  019A                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019C                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019E                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  020C                     	;# 
   193  020E                     	;# 
   194  0211                     	;# 
   195  0211                     	;# 
   196  0212                     	;# 
   197  0212                     	;# 
   198  0213                     	;# 
   199  0213                     	;# 
   200  0214                     	;# 
   201  0214                     	;# 
   202  0215                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0216                     	;# 
   207  0216                     	;# 
   208  0217                     	;# 
   209  0217                     	;# 
   210  0219                     	;# 
   211  021A                     	;# 
   212  021B                     	;# 
   213  021C                     	;# 
   214  021D                     	;# 
   215  021D                     	;# 
   216  021E                     	;# 
   217  021F                     	;# 
   218  028C                     	;# 
   219  028E                     	;# 
   220  0291                     	;# 
   221  0291                     	;# 
   222  0292                     	;# 
   223  0293                     	;# 
   224  0294                     	;# 
   225  0295                     	;# 
   226  0295                     	;# 
   227  0296                     	;# 
   228  0297                     	;# 
   229  0298                     	;# 
   230  029F                     	;# 
   231  030C                     	;# 
   232  030E                     	;# 
   233  0311                     	;# 
   234  0311                     	;# 
   235  0312                     	;# 
   236  0313                     	;# 
   237  0314                     	;# 
   238  0315                     	;# 
   239  0315                     	;# 
   240  0316                     	;# 
   241  0317                     	;# 
   242  0318                     	;# 
   243  038C                     	;# 
   244  038E                     	;# 
   245  0391                     	;# 
   246  0392                     	;# 
   247  0393                     	;# 
   248  0397                     	;# 
   249  0398                     	;# 
   250  0399                     	;# 
   251  039A                     	;# 
   252  039C                     	;# 
   253  039D                     	;# 
   254  039E                     	;# 
   255  039F                     	;# 
   256  0411                     	;# 
   257  0411                     	;# 
   258  0412                     	;# 
   259  0413                     	;# 
   260  0414                     	;# 
   261  0415                     	;# 
   262  0416                     	;# 
   263  0417                     	;# 
   264  0418                     	;# 
   265  0418                     	;# 
   266  0419                     	;# 
   267  041A                     	;# 
   268  041B                     	;# 
   269  041C                     	;# 
   270  041D                     	;# 
   271  041E                     	;# 
   272  041F                     	;# 
   273  0498                     	;# 
   274  0498                     	;# 
   275  0499                     	;# 
   276  049A                     	;# 
   277  049B                     	;# 
   278  049B                     	;# 
   279  049C                     	;# 
   280  049D                     	;# 
   281  049E                     	;# 
   282  049F                     	;# 
   283  0617                     	;# 
   284  0618                     	;# 
   285  0619                     	;# 
   286  0619                     	;# 
   287  061A                     	;# 
   288  061B                     	;# 
   289  061C                     	;# 
   290  061C                     	;# 
   291  061F                     	;# 
   292  0691                     	;# 
   293  0692                     	;# 
   294  0693                     	;# 
   295  0694                     	;# 
   296  0695                     	;# 
   297  0696                     	;# 
   298  0697                     	;# 
   299  0698                     	;# 
   300  0699                     	;# 
   301  0711                     	;# 
   302  0712                     	;# 
   303  0713                     	;# 
   304  0714                     	;# 
   305  0715                     	;# 
   306  0716                     	;# 
   307  0717                     	;# 
   308  0718                     	;# 
   309  0719                     	;# 
   310  0891                     	;# 
   311  0891                     	;# 
   312  0891                     	;# 
   313  0891                     	;# 
   314  0891                     	;# 
   315  0891                     	;# 
   316  0892                     	;# 
   317  0892                     	;# 
   318  0892                     	;# 
   319  0893                     	;# 
   320  0893                     	;# 
   321  0893                     	;# 
   322  0893                     	;# 
   323  0893                     	;# 
   324  0893                     	;# 
   325  0894                     	;# 
   326  0894                     	;# 
   327  0894                     	;# 
   328  0895                     	;# 
   329  0895                     	;# 
   330  0895                     	;# 
   331  0896                     	;# 
   332  0896                     	;# 
   333  0896                     	;# 
   334  089B                     	;# 
   335  0911                     	;# 
   336  0912                     	;# 
   337  0913                     	;# 
   338  0914                     	;# 
   339  0915                     	;# 
   340  0916                     	;# 
   341  0918                     	;# 
   342  0919                     	;# 
   343  091A                     	;# 
   344  091B                     	;# 
   345  091C                     	;# 
   346  091D                     	;# 
   347  091E                     	;# 
   348  091F                     	;# 
   349  0E0F                     	;# 
   350  0E10                     	;# 
   351  0E11                     	;# 
   352  0E12                     	;# 
   353  0E13                     	;# 
   354  0E14                     	;# 
   355  0E15                     	;# 
   356  0E16                     	;# 
   357  0E17                     	;# 
   358  0E18                     	;# 
   359  0E19                     	;# 
   360  0E1A                     	;# 
   361  0E1B                     	;# 
   362  0E1C                     	;# 
   363  0E1D                     	;# 
   364  0E1E                     	;# 
   365  0E1F                     	;# 
   366  0E20                     	;# 
   367  0E21                     	;# 
   368  0E22                     	;# 
   369  0E24                     	;# 
   370  0E25                     	;# 
   371  0E28                     	;# 
   372  0E29                     	;# 
   373  0E2A                     	;# 
   374  0E2B                     	;# 
   375  0E2C                     	;# 
   376  0E2D                     	;# 
   377  0E2E                     	;# 
   378  0E2F                     	;# 
   379  0E90                     	;# 
   380  0E91                     	;# 
   381  0E92                     	;# 
   382  0E94                     	;# 
   383  0E95                     	;# 
   384  0EA0                     	;# 
   385  0EA1                     	;# 
   386  0EA2                     	;# 
   387  0EA3                     	;# 
   388  0EA4                     	;# 
   389  0EA5                     	;# 
   390  0F0F                     	;# 
   391  0F10                     	;# 
   392  0F11                     	;# 
   393  0F12                     	;# 
   394  0F13                     	;# 
   395  0F14                     	;# 
   396  0F15                     	;# 
   397  0F16                     	;# 
   398  0F17                     	;# 
   399  0F18                     	;# 
   400  0F19                     	;# 
   401  0F1A                     	;# 
   402  0F1B                     	;# 
   403  0F1C                     	;# 
   404  0F1D                     	;# 
   405  0F1E                     	;# 
   406  0F1F                     	;# 
   407  0F20                     	;# 
   408  0F21                     	;# 
   409  0F22                     	;# 
   410  0F23                     	;# 
   411  0F24                     	;# 
   412  0F25                     	;# 
   413  0F26                     	;# 
   414  0F27                     	;# 
   415  0F28                     	;# 
   416  0F29                     	;# 
   417  0F2A                     	;# 
   418  0F2B                     	;# 
   419  0F2C                     	;# 
   420  0F2D                     	;# 
   421  0F2E                     	;# 
   422  0F2F                     	;# 
   423  0F30                     	;# 
   424  0F31                     	;# 
   425  0F32                     	;# 
   426  0F33                     	;# 
   427  0F34                     	;# 
   428  0F35                     	;# 
   429  0F36                     	;# 
   430  0F37                     	;# 
   431  0FE4                     	;# 
   432  0FE5                     	;# 
   433  0FE6                     	;# 
   434  0FE7                     	;# 
   435  0FE8                     	;# 
   436  0FE9                     	;# 
   437  0FEA                     	;# 
   438  0FEB                     	;# 
   439  0FED                     	;# 
   440  0FEE                     	;# 
   441  0FEF                     	;# 
   442  0000                     	;# 
   443  0001                     	;# 
   444  0002                     	;# 
   445  0003                     	;# 
   446  0004                     	;# 
   447  0005                     	;# 
   448  0006                     	;# 
   449  0007                     	;# 
   450  0008                     	;# 
   451  0009                     	;# 
   452  000A                     	;# 
   453  000B                     	;# 
   454  000C                     	;# 
   455  000E                     	;# 
   456  0010                     	;# 
   457  0011                     	;# 
   458  0012                     	;# 
   459  0013                     	;# 
   460  0014                     	;# 
   461  0015                     	;# 
   462  0015                     	;# 
   463  0016                     	;# 
   464  0016                     	;# 
   465  0017                     	;# 
   466  0018                     	;# 
   467  0019                     	;# 
   468  0019                     	;# 
   469  001A                     	;# 
   470  001B                     	;# 
   471  001C                     	;# 
   472  001D                     	;# 
   473  001E                     	;# 
   474  001F                     	;# 
   475  008C                     	;# 
   476  008E                     	;# 
   477  0090                     	;# 
   478  0091                     	;# 
   479  0092                     	;# 
   480  0093                     	;# 
   481  0094                     	;# 
   482  0097                     	;# 
   483  009B                     	;# 
   484  009B                     	;# 
   485  009C                     	;# 
   486  009D                     	;# 
   487  009E                     	;# 
   488  009F                     	;# 
   489  010C                     	;# 
   490  010E                     	;# 
   491  0111                     	;# 
   492  0112                     	;# 
   493  0113                     	;# 
   494  0114                     	;# 
   495  0115                     	;# 
   496  0116                     	;# 
   497  0117                     	;# 
   498  0118                     	;# 
   499  0119                     	;# 
   500  018C                     	;# 
   501  018E                     	;# 
   502  0197                     	;# 
   503  0199                     	;# 
   504  0199                     	;# 
   505  0199                     	;# 
   506  019A                     	;# 
   507  019A                     	;# 
   508  019A                     	;# 
   509  019B                     	;# 
   510  019B                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019C                     	;# 
   515  019C                     	;# 
   516  019C                     	;# 
   517  019D                     	;# 
   518  019D                     	;# 
   519  019D                     	;# 
   520  019E                     	;# 
   521  019E                     	;# 
   522  019E                     	;# 
   523  019F                     	;# 
   524  019F                     	;# 
   525  019F                     	;# 
   526  019F                     	;# 
   527  019F                     	;# 
   528  020C                     	;# 
   529  020E                     	;# 
   530  0211                     	;# 
   531  0211                     	;# 
   532  0212                     	;# 
   533  0212                     	;# 
   534  0213                     	;# 
   535  0213                     	;# 
   536  0214                     	;# 
   537  0214                     	;# 
   538  0215                     	;# 
   539  0215                     	;# 
   540  0215                     	;# 
   541  0215                     	;# 
   542  0216                     	;# 
   543  0216                     	;# 
   544  0217                     	;# 
   545  0217                     	;# 
   546  0219                     	;# 
   547  021A                     	;# 
   548  021B                     	;# 
   549  021C                     	;# 
   550  021D                     	;# 
   551  021D                     	;# 
   552  021E                     	;# 
   553  021F                     	;# 
   554  028C                     	;# 
   555  028E                     	;# 
   556  0291                     	;# 
   557  0291                     	;# 
   558  0292                     	;# 
   559  0293                     	;# 
   560  0294                     	;# 
   561  0295                     	;# 
   562  0295                     	;# 
   563  0296                     	;# 
   564  0297                     	;# 
   565  0298                     	;# 
   566  029F                     	;# 
   567  030C                     	;# 
   568  030E                     	;# 
   569  0311                     	;# 
   570  0311                     	;# 
   571  0312                     	;# 
   572  0313                     	;# 
   573  0314                     	;# 
   574  0315                     	;# 
   575  0315                     	;# 
   576  0316                     	;# 
   577  0317                     	;# 
   578  0318                     	;# 
   579  038C                     	;# 
   580  038E                     	;# 
   581  0391                     	;# 
   582  0392                     	;# 
   583  0393                     	;# 
   584  0397                     	;# 
   585  0398                     	;# 
   586  0399                     	;# 
   587  039A                     	;# 
   588  039C                     	;# 
   589  039D                     	;# 
   590  039E                     	;# 
   591  039F                     	;# 
   592  0411                     	;# 
   593  0411                     	;# 
   594  0412                     	;# 
   595  0413                     	;# 
   596  0414                     	;# 
   597  0415                     	;# 
   598  0416                     	;# 
   599  0417                     	;# 
   600  0418                     	;# 
   601  0418                     	;# 
   602  0419                     	;# 
   603  041A                     	;# 
   604  041B                     	;# 
   605  041C                     	;# 
   606  041D                     	;# 
   607  041E                     	;# 
   608  041F                     	;# 
   609  0498                     	;# 
   610  0498                     	;# 
   611  0499                     	;# 
   612  049A                     	;# 
   613  049B                     	;# 
   614  049B                     	;# 
   615  049C                     	;# 
   616  049D                     	;# 
   617  049E                     	;# 
   618  049F                     	;# 
   619  0617                     	;# 
   620  0618                     	;# 
   621  0619                     	;# 
   622  0619                     	;# 
   623  061A                     	;# 
   624  061B                     	;# 
   625  061C                     	;# 
   626  061C                     	;# 
   627  061F                     	;# 
   628  0691                     	;# 
   629  0692                     	;# 
   630  0693                     	;# 
   631  0694                     	;# 
   632  0695                     	;# 
   633  0696                     	;# 
   634  0697                     	;# 
   635  0698                     	;# 
   636  0699                     	;# 
   637  0711                     	;# 
   638  0712                     	;# 
   639  0713                     	;# 
   640  0714                     	;# 
   641  0715                     	;# 
   642  0716                     	;# 
   643  0717                     	;# 
   644  0718                     	;# 
   645  0719                     	;# 
   646  0891                     	;# 
   647  0891                     	;# 
   648  0891                     	;# 
   649  0891                     	;# 
   650  0891                     	;# 
   651  0891                     	;# 
   652  0892                     	;# 
   653  0892                     	;# 
   654  0892                     	;# 
   655  0893                     	;# 
   656  0893                     	;# 
   657  0893                     	;# 
   658  0893                     	;# 
   659  0893                     	;# 
   660  0893                     	;# 
   661  0894                     	;# 
   662  0894                     	;# 
   663  0894                     	;# 
   664  0895                     	;# 
   665  0895                     	;# 
   666  0895                     	;# 
   667  0896                     	;# 
   668  0896                     	;# 
   669  0896                     	;# 
   670  089B                     	;# 
   671  0911                     	;# 
   672  0912                     	;# 
   673  0913                     	;# 
   674  0914                     	;# 
   675  0915                     	;# 
   676  0916                     	;# 
   677  0918                     	;# 
   678  0919                     	;# 
   679  091A                     	;# 
   680  091B                     	;# 
   681  091C                     	;# 
   682  091D                     	;# 
   683  091E                     	;# 
   684  091F                     	;# 
   685  0E0F                     	;# 
   686  0E10                     	;# 
   687  0E11                     	;# 
   688  0E12                     	;# 
   689  0E13                     	;# 
   690  0E14                     	;# 
   691  0E15                     	;# 
   692  0E16                     	;# 
   693  0E17                     	;# 
   694  0E18                     	;# 
   695  0E19                     	;# 
   696  0E1A                     	;# 
   697  0E1B                     	;# 
   698  0E1C                     	;# 
   699  0E1D                     	;# 
   700  0E1E                     	;# 
   701  0E1F                     	;# 
   702  0E20                     	;# 
   703  0E21                     	;# 
   704  0E22                     	;# 
   705  0E24                     	;# 
   706  0E25                     	;# 
   707  0E28                     	;# 
   708  0E29                     	;# 
   709  0E2A                     	;# 
   710  0E2B                     	;# 
   711  0E2C                     	;# 
   712  0E2D                     	;# 
   713  0E2E                     	;# 
   714  0E2F                     	;# 
   715  0E90                     	;# 
   716  0E91                     	;# 
   717  0E92                     	;# 
   718  0E94                     	;# 
   719  0E95                     	;# 
   720  0EA0                     	;# 
   721  0EA1                     	;# 
   722  0EA2                     	;# 
   723  0EA3                     	;# 
   724  0EA4                     	;# 
   725  0EA5                     	;# 
   726  0F0F                     	;# 
   727  0F10                     	;# 
   728  0F11                     	;# 
   729  0F12                     	;# 
   730  0F13                     	;# 
   731  0F14                     	;# 
   732  0F15                     	;# 
   733  0F16                     	;# 
   734  0F17                     	;# 
   735  0F18                     	;# 
   736  0F19                     	;# 
   737  0F1A                     	;# 
   738  0F1B                     	;# 
   739  0F1C                     	;# 
   740  0F1D                     	;# 
   741  0F1E                     	;# 
   742  0F1F                     	;# 
   743  0F20                     	;# 
   744  0F21                     	;# 
   745  0F22                     	;# 
   746  0F23                     	;# 
   747  0F24                     	;# 
   748  0F25                     	;# 
   749  0F26                     	;# 
   750  0F27                     	;# 
   751  0F28                     	;# 
   752  0F29                     	;# 
   753  0F2A                     	;# 
   754  0F2B                     	;# 
   755  0F2C                     	;# 
   756  0F2D                     	;# 
   757  0F2E                     	;# 
   758  0F2F                     	;# 
   759  0F30                     	;# 
   760  0F31                     	;# 
   761  0F32                     	;# 
   762  0F33                     	;# 
   763  0F34                     	;# 
   764  0F35                     	;# 
   765  0F36                     	;# 
   766  0F37                     	;# 
   767  0FE4                     	;# 
   768  0FE5                     	;# 
   769  0FE6                     	;# 
   770  0FE7                     	;# 
   771  0FE8                     	;# 
   772  0FE9                     	;# 
   773  0FEA                     	;# 
   774  0FEB                     	;# 
   775  0FED                     	;# 
   776  0FEE                     	;# 
   777  0FEF                     	;# 
   778  0000                     	;# 
   779  0001                     	;# 
   780  0002                     	;# 
   781  0003                     	;# 
   782  0004                     	;# 
   783  0005                     	;# 
   784  0006                     	;# 
   785  0007                     	;# 
   786  0008                     	;# 
   787  0009                     	;# 
   788  000A                     	;# 
   789  000B                     	;# 
   790  000C                     	;# 
   791  000E                     	;# 
   792  0010                     	;# 
   793  0011                     	;# 
   794  0012                     	;# 
   795  0013                     	;# 
   796  0014                     	;# 
   797  0015                     	;# 
   798  0015                     	;# 
   799  0016                     	;# 
   800  0016                     	;# 
   801  0017                     	;# 
   802  0018                     	;# 
   803  0019                     	;# 
   804  0019                     	;# 
   805  001A                     	;# 
   806  001B                     	;# 
   807  001C                     	;# 
   808  001D                     	;# 
   809  001E                     	;# 
   810  001F                     	;# 
   811  008C                     	;# 
   812  008E                     	;# 
   813  0090                     	;# 
   814  0091                     	;# 
   815  0092                     	;# 
   816  0093                     	;# 
   817  0094                     	;# 
   818  0097                     	;# 
   819  009B                     	;# 
   820  009B                     	;# 
   821  009C                     	;# 
   822  009D                     	;# 
   823  009E                     	;# 
   824  009F                     	;# 
   825  010C                     	;# 
   826  010E                     	;# 
   827  0111                     	;# 
   828  0112                     	;# 
   829  0113                     	;# 
   830  0114                     	;# 
   831  0115                     	;# 
   832  0116                     	;# 
   833  0117                     	;# 
   834  0118                     	;# 
   835  0119                     	;# 
   836  018C                     	;# 
   837  018E                     	;# 
   838  0197                     	;# 
   839  0199                     	;# 
   840  0199                     	;# 
   841  0199                     	;# 
   842  019A                     	;# 
   843  019A                     	;# 
   844  019A                     	;# 
   845  019B                     	;# 
   846  019B                     	;# 
   847  019B                     	;# 
   848  019B                     	;# 
   849  019B                     	;# 
   850  019C                     	;# 
   851  019C                     	;# 
   852  019C                     	;# 
   853  019D                     	;# 
   854  019D                     	;# 
   855  019D                     	;# 
   856  019E                     	;# 
   857  019E                     	;# 
   858  019E                     	;# 
   859  019F                     	;# 
   860  019F                     	;# 
   861  019F                     	;# 
   862  019F                     	;# 
   863  019F                     	;# 
   864  020C                     	;# 
   865  020E                     	;# 
   866  0211                     	;# 
   867  0211                     	;# 
   868  0212                     	;# 
   869  0212                     	;# 
   870  0213                     	;# 
   871  0213                     	;# 
   872  0214                     	;# 
   873  0214                     	;# 
   874  0215                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0215                     	;# 
   878  0216                     	;# 
   879  0216                     	;# 
   880  0217                     	;# 
   881  0217                     	;# 
   882  0219                     	;# 
   883  021A                     	;# 
   884  021B                     	;# 
   885  021C                     	;# 
   886  021D                     	;# 
   887  021D                     	;# 
   888  021E                     	;# 
   889  021F                     	;# 
   890  028C                     	;# 
   891  028E                     	;# 
   892  0291                     	;# 
   893  0291                     	;# 
   894  0292                     	;# 
   895  0293                     	;# 
   896  0294                     	;# 
   897  0295                     	;# 
   898  0295                     	;# 
   899  0296                     	;# 
   900  0297                     	;# 
   901  0298                     	;# 
   902  029F                     	;# 
   903  030C                     	;# 
   904  030E                     	;# 
   905  0311                     	;# 
   906  0311                     	;# 
   907  0312                     	;# 
   908  0313                     	;# 
   909  0314                     	;# 
   910  0315                     	;# 
   911  0315                     	;# 
   912  0316                     	;# 
   913  0317                     	;# 
   914  0318                     	;# 
   915  038C                     	;# 
   916  038E                     	;# 
   917  0391                     	;# 
   918  0392                     	;# 
   919  0393                     	;# 
   920  0397                     	;# 
   921  0398                     	;# 
   922  0399                     	;# 
   923  039A                     	;# 
   924  039C                     	;# 
   925  039D                     	;# 
   926  039E                     	;# 
   927  039F                     	;# 
   928  0411                     	;# 
   929  0411                     	;# 
   930  0412                     	;# 
   931  0413                     	;# 
   932  0414                     	;# 
   933  0415                     	;# 
   934  0416                     	;# 
   935  0417                     	;# 
   936  0418                     	;# 
   937  0418                     	;# 
   938  0419                     	;# 
   939  041A                     	;# 
   940  041B                     	;# 
   941  041C                     	;# 
   942  041D                     	;# 
   943  041E                     	;# 
   944  041F                     	;# 
   945  0498                     	;# 
   946  0498                     	;# 
   947  0499                     	;# 
   948  049A                     	;# 
   949  049B                     	;# 
   950  049B                     	;# 
   951  049C                     	;# 
   952  049D                     	;# 
   953  049E                     	;# 
   954  049F                     	;# 
   955  0617                     	;# 
   956  0618                     	;# 
   957  0619                     	;# 
   958  0619                     	;# 
   959  061A                     	;# 
   960  061B                     	;# 
   961  061C                     	;# 
   962  061C                     	;# 
   963  061F                     	;# 
   964  0691                     	;# 
   965  0692                     	;# 
   966  0693                     	;# 
   967  0694                     	;# 
   968  0695                     	;# 
   969  0696                     	;# 
   970  0697                     	;# 
   971  0698                     	;# 
   972  0699                     	;# 
   973  0711                     	;# 
   974  0712                     	;# 
   975  0713                     	;# 
   976  0714                     	;# 
   977  0715                     	;# 
   978  0716                     	;# 
   979  0717                     	;# 
   980  0718                     	;# 
   981  0719                     	;# 
   982  0891                     	;# 
   983  0891                     	;# 
   984  0891                     	;# 
   985  0891                     	;# 
   986  0891                     	;# 
   987  0891                     	;# 
   988  0892                     	;# 
   989  0892                     	;# 
   990  0892                     	;# 
   991  0893                     	;# 
   992  0893                     	;# 
   993  0893                     	;# 
   994  0893                     	;# 
   995  0893                     	;# 
   996  0893                     	;# 
   997  0894                     	;# 
   998  0894                     	;# 
   999  0894                     	;# 
  1000  0895                     	;# 
  1001  0895                     	;# 
  1002  0895                     	;# 
  1003  0896                     	;# 
  1004  0896                     	;# 
  1005  0896                     	;# 
  1006  089B                     	;# 
  1007  0911                     	;# 
  1008  0912                     	;# 
  1009  0913                     	;# 
  1010  0914                     	;# 
  1011  0915                     	;# 
  1012  0916                     	;# 
  1013  0918                     	;# 
  1014  0919                     	;# 
  1015  091A                     	;# 
  1016  091B                     	;# 
  1017  091C                     	;# 
  1018  091D                     	;# 
  1019  091E                     	;# 
  1020  091F                     	;# 
  1021  0E0F                     	;# 
  1022  0E10                     	;# 
  1023  0E11                     	;# 
  1024  0E12                     	;# 
  1025  0E13                     	;# 
  1026  0E14                     	;# 
  1027  0E15                     	;# 
  1028  0E16                     	;# 
  1029  0E17                     	;# 
  1030  0E18                     	;# 
  1031  0E19                     	;# 
  1032  0E1A                     	;# 
  1033  0E1B                     	;# 
  1034  0E1C                     	;# 
  1035  0E1D                     	;# 
  1036  0E1E                     	;# 
  1037  0E1F                     	;# 
  1038  0E20                     	;# 
  1039  0E21                     	;# 
  1040  0E22                     	;# 
  1041  0E24                     	;# 
  1042  0E25                     	;# 
  1043  0E28                     	;# 
  1044  0E29                     	;# 
  1045  0E2A                     	;# 
  1046  0E2B                     	;# 
  1047  0E2C                     	;# 
  1048  0E2D                     	;# 
  1049  0E2E                     	;# 
  1050  0E2F                     	;# 
  1051  0E90                     	;# 
  1052  0E91                     	;# 
  1053  0E92                     	;# 
  1054  0E94                     	;# 
  1055  0E95                     	;# 
  1056  0EA0                     	;# 
  1057  0EA1                     	;# 
  1058  0EA2                     	;# 
  1059  0EA3                     	;# 
  1060  0EA4                     	;# 
  1061  0EA5                     	;# 
  1062  0F0F                     	;# 
  1063  0F10                     	;# 
  1064  0F11                     	;# 
  1065  0F12                     	;# 
  1066  0F13                     	;# 
  1067  0F14                     	;# 
  1068  0F15                     	;# 
  1069  0F16                     	;# 
  1070  0F17                     	;# 
  1071  0F18                     	;# 
  1072  0F19                     	;# 
  1073  0F1A                     	;# 
  1074  0F1B                     	;# 
  1075  0F1C                     	;# 
  1076  0F1D                     	;# 
  1077  0F1E                     	;# 
  1078  0F1F                     	;# 
  1079  0F20                     	;# 
  1080  0F21                     	;# 
  1081  0F22                     	;# 
  1082  0F23                     	;# 
  1083  0F24                     	;# 
  1084  0F25                     	;# 
  1085  0F26                     	;# 
  1086  0F27                     	;# 
  1087  0F28                     	;# 
  1088  0F29                     	;# 
  1089  0F2A                     	;# 
  1090  0F2B                     	;# 
  1091  0F2C                     	;# 
  1092  0F2D                     	;# 
  1093  0F2E                     	;# 
  1094  0F2F                     	;# 
  1095  0F30                     	;# 
  1096  0F31                     	;# 
  1097  0F32                     	;# 
  1098  0F33                     	;# 
  1099  0F34                     	;# 
  1100  0F35                     	;# 
  1101  0F36                     	;# 
  1102  0F37                     	;# 
  1103  0FE4                     	;# 
  1104  0FE5                     	;# 
  1105  0FE6                     	;# 
  1106  0FE7                     	;# 
  1107  0FE8                     	;# 
  1108  0FE9                     	;# 
  1109  0FEA                     	;# 
  1110  0FEB                     	;# 
  1111  0FED                     	;# 
  1112  0FEE                     	;# 
  1113  0FEF                     	;# 
  1114  0000                     	;# 
  1115  0001                     	;# 
  1116  0002                     	;# 
  1117  0003                     	;# 
  1118  0004                     	;# 
  1119  0005                     	;# 
  1120  0006                     	;# 
  1121  0007                     	;# 
  1122  0008                     	;# 
  1123  0009                     	;# 
  1124  000A                     	;# 
  1125  000B                     	;# 
  1126  000C                     	;# 
  1127  000E                     	;# 
  1128  0010                     	;# 
  1129  0011                     	;# 
  1130  0012                     	;# 
  1131  0013                     	;# 
  1132  0014                     	;# 
  1133  0015                     	;# 
  1134  0015                     	;# 
  1135  0016                     	;# 
  1136  0016                     	;# 
  1137  0017                     	;# 
  1138  0018                     	;# 
  1139  0019                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  001D                     	;# 
  1145  001E                     	;# 
  1146  001F                     	;# 
  1147  008C                     	;# 
  1148  008E                     	;# 
  1149  0090                     	;# 
  1150  0091                     	;# 
  1151  0092                     	;# 
  1152  0093                     	;# 
  1153  0094                     	;# 
  1154  0097                     	;# 
  1155  009B                     	;# 
  1156  009B                     	;# 
  1157  009C                     	;# 
  1158  009D                     	;# 
  1159  009E                     	;# 
  1160  009F                     	;# 
  1161  010C                     	;# 
  1162  010E                     	;# 
  1163  0111                     	;# 
  1164  0112                     	;# 
  1165  0113                     	;# 
  1166  0114                     	;# 
  1167  0115                     	;# 
  1168  0116                     	;# 
  1169  0117                     	;# 
  1170  0118                     	;# 
  1171  0119                     	;# 
  1172  018C                     	;# 
  1173  018E                     	;# 
  1174  0197                     	;# 
  1175  0199                     	;# 
  1176  0199                     	;# 
  1177  0199                     	;# 
  1178  019A                     	;# 
  1179  019A                     	;# 
  1180  019A                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019C                     	;# 
  1187  019C                     	;# 
  1188  019C                     	;# 
  1189  019D                     	;# 
  1190  019D                     	;# 
  1191  019D                     	;# 
  1192  019E                     	;# 
  1193  019E                     	;# 
  1194  019E                     	;# 
  1195  019F                     	;# 
  1196  019F                     	;# 
  1197  019F                     	;# 
  1198  019F                     	;# 
  1199  019F                     	;# 
  1200  020C                     	;# 
  1201  020E                     	;# 
  1202  0211                     	;# 
  1203  0211                     	;# 
  1204  0212                     	;# 
  1205  0212                     	;# 
  1206  0213                     	;# 
  1207  0213                     	;# 
  1208  0214                     	;# 
  1209  0214                     	;# 
  1210  0215                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0216                     	;# 
  1215  0216                     	;# 
  1216  0217                     	;# 
  1217  0217                     	;# 
  1218  0219                     	;# 
  1219  021A                     	;# 
  1220  021B                     	;# 
  1221  021C                     	;# 
  1222  021D                     	;# 
  1223  021D                     	;# 
  1224  021E                     	;# 
  1225  021F                     	;# 
  1226  028C                     	;# 
  1227  028E                     	;# 
  1228  0291                     	;# 
  1229  0291                     	;# 
  1230  0292                     	;# 
  1231  0293                     	;# 
  1232  0294                     	;# 
  1233  0295                     	;# 
  1234  0295                     	;# 
  1235  0296                     	;# 
  1236  0297                     	;# 
  1237  0298                     	;# 
  1238  029F                     	;# 
  1239  030C                     	;# 
  1240  030E                     	;# 
  1241  0311                     	;# 
  1242  0311                     	;# 
  1243  0312                     	;# 
  1244  0313                     	;# 
  1245  0314                     	;# 
  1246  0315                     	;# 
  1247  0315                     	;# 
  1248  0316                     	;# 
  1249  0317                     	;# 
  1250  0318                     	;# 
  1251  038C                     	;# 
  1252  038E                     	;# 
  1253  0391                     	;# 
  1254  0392                     	;# 
  1255  0393                     	;# 
  1256  0397                     	;# 
  1257  0398                     	;# 
  1258  0399                     	;# 
  1259  039A                     	;# 
  1260  039C                     	;# 
  1261  039D                     	;# 
  1262  039E                     	;# 
  1263  039F                     	;# 
  1264  0411                     	;# 
  1265  0411                     	;# 
  1266  0412                     	;# 
  1267  0413                     	;# 
  1268  0414                     	;# 
  1269  0415                     	;# 
  1270  0416                     	;# 
  1271  0417                     	;# 
  1272  0418                     	;# 
  1273  0418                     	;# 
  1274  0419                     	;# 
  1275  041A                     	;# 
  1276  041B                     	;# 
  1277  041C                     	;# 
  1278  041D                     	;# 
  1279  041E                     	;# 
  1280  041F                     	;# 
  1281  0498                     	;# 
  1282  0498                     	;# 
  1283  0499                     	;# 
  1284  049A                     	;# 
  1285  049B                     	;# 
  1286  049B                     	;# 
  1287  049C                     	;# 
  1288  049D                     	;# 
  1289  049E                     	;# 
  1290  049F                     	;# 
  1291  0617                     	;# 
  1292  0618                     	;# 
  1293  0619                     	;# 
  1294  0619                     	;# 
  1295  061A                     	;# 
  1296  061B                     	;# 
  1297  061C                     	;# 
  1298  061C                     	;# 
  1299  061F                     	;# 
  1300  0691                     	;# 
  1301  0692                     	;# 
  1302  0693                     	;# 
  1303  0694                     	;# 
  1304  0695                     	;# 
  1305  0696                     	;# 
  1306  0697                     	;# 
  1307  0698                     	;# 
  1308  0699                     	;# 
  1309  0711                     	;# 
  1310  0712                     	;# 
  1311  0713                     	;# 
  1312  0714                     	;# 
  1313  0715                     	;# 
  1314  0716                     	;# 
  1315  0717                     	;# 
  1316  0718                     	;# 
  1317  0719                     	;# 
  1318  0891                     	;# 
  1319  0891                     	;# 
  1320  0891                     	;# 
  1321  0891                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0892                     	;# 
  1325  0892                     	;# 
  1326  0892                     	;# 
  1327  0893                     	;# 
  1328  0893                     	;# 
  1329  0893                     	;# 
  1330  0893                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0894                     	;# 
  1334  0894                     	;# 
  1335  0894                     	;# 
  1336  0895                     	;# 
  1337  0895                     	;# 
  1338  0895                     	;# 
  1339  0896                     	;# 
  1340  0896                     	;# 
  1341  0896                     	;# 
  1342  089B                     	;# 
  1343  0911                     	;# 
  1344  0912                     	;# 
  1345  0913                     	;# 
  1346  0914                     	;# 
  1347  0915                     	;# 
  1348  0916                     	;# 
  1349  0918                     	;# 
  1350  0919                     	;# 
  1351  091A                     	;# 
  1352  091B                     	;# 
  1353  091C                     	;# 
  1354  091D                     	;# 
  1355  091E                     	;# 
  1356  091F                     	;# 
  1357  0E0F                     	;# 
  1358  0E10                     	;# 
  1359  0E11                     	;# 
  1360  0E12                     	;# 
  1361  0E13                     	;# 
  1362  0E14                     	;# 
  1363  0E15                     	;# 
  1364  0E16                     	;# 
  1365  0E17                     	;# 
  1366  0E18                     	;# 
  1367  0E19                     	;# 
  1368  0E1A                     	;# 
  1369  0E1B                     	;# 
  1370  0E1C                     	;# 
  1371  0E1D                     	;# 
  1372  0E1E                     	;# 
  1373  0E1F                     	;# 
  1374  0E20                     	;# 
  1375  0E21                     	;# 
  1376  0E22                     	;# 
  1377  0E24                     	;# 
  1378  0E25                     	;# 
  1379  0E28                     	;# 
  1380  0E29                     	;# 
  1381  0E2A                     	;# 
  1382  0E2B                     	;# 
  1383  0E2C                     	;# 
  1384  0E2D                     	;# 
  1385  0E2E                     	;# 
  1386  0E2F                     	;# 
  1387  0E90                     	;# 
  1388  0E91                     	;# 
  1389  0E92                     	;# 
  1390  0E94                     	;# 
  1391  0E95                     	;# 
  1392  0EA0                     	;# 
  1393  0EA1                     	;# 
  1394  0EA2                     	;# 
  1395  0EA3                     	;# 
  1396  0EA4                     	;# 
  1397  0EA5                     	;# 
  1398  0F0F                     	;# 
  1399  0F10                     	;# 
  1400  0F11                     	;# 
  1401  0F12                     	;# 
  1402  0F13                     	;# 
  1403  0F14                     	;# 
  1404  0F15                     	;# 
  1405  0F16                     	;# 
  1406  0F17                     	;# 
  1407  0F18                     	;# 
  1408  0F19                     	;# 
  1409  0F1A                     	;# 
  1410  0F1B                     	;# 
  1411  0F1C                     	;# 
  1412  0F1D                     	;# 
  1413  0F1E                     	;# 
  1414  0F1F                     	;# 
  1415  0F20                     	;# 
  1416  0F21                     	;# 
  1417  0F22                     	;# 
  1418  0F23                     	;# 
  1419  0F24                     	;# 
  1420  0F25                     	;# 
  1421  0F26                     	;# 
  1422  0F27                     	;# 
  1423  0F28                     	;# 
  1424  0F29                     	;# 
  1425  0F2A                     	;# 
  1426  0F2B                     	;# 
  1427  0F2C                     	;# 
  1428  0F2D                     	;# 
  1429  0F2E                     	;# 
  1430  0F2F                     	;# 
  1431  0F30                     	;# 
  1432  0F31                     	;# 
  1433  0F32                     	;# 
  1434  0F33                     	;# 
  1435  0F34                     	;# 
  1436  0F35                     	;# 
  1437  0F36                     	;# 
  1438  0F37                     	;# 
  1439  0FE4                     	;# 
  1440  0FE5                     	;# 
  1441  0FE6                     	;# 
  1442  0FE7                     	;# 
  1443  0FE8                     	;# 
  1444  0FE9                     	;# 
  1445  0FEA                     	;# 
  1446  0FEB                     	;# 
  1447  0FED                     	;# 
  1448  0FEE                     	;# 
  1449  0FEF                     	;# 
  1450  0000                     	;# 
  1451  0001                     	;# 
  1452  0002                     	;# 
  1453  0003                     	;# 
  1454  0004                     	;# 
  1455  0005                     	;# 
  1456  0006                     	;# 
  1457  0007                     	;# 
  1458  0008                     	;# 
  1459  0009                     	;# 
  1460  000A                     	;# 
  1461  000B                     	;# 
  1462  000C                     	;# 
  1463  000E                     	;# 
  1464  0010                     	;# 
  1465  0011                     	;# 
  1466  0012                     	;# 
  1467  0013                     	;# 
  1468  0014                     	;# 
  1469  0015                     	;# 
  1470  0015                     	;# 
  1471  0016                     	;# 
  1472  0016                     	;# 
  1473  0017                     	;# 
  1474  0018                     	;# 
  1475  0019                     	;# 
  1476  0019                     	;# 
  1477  001A                     	;# 
  1478  001B                     	;# 
  1479  001C                     	;# 
  1480  001D                     	;# 
  1481  001E                     	;# 
  1482  001F                     	;# 
  1483  008C                     	;# 
  1484  008E                     	;# 
  1485  0090                     	;# 
  1486  0091                     	;# 
  1487  0092                     	;# 
  1488  0093                     	;# 
  1489  0094                     	;# 
  1490  0097                     	;# 
  1491  009B                     	;# 
  1492  009B                     	;# 
  1493  009C                     	;# 
  1494  009D                     	;# 
  1495  009E                     	;# 
  1496  009F                     	;# 
  1497  010C                     	;# 
  1498  010E                     	;# 
  1499  0111                     	;# 
  1500  0112                     	;# 
  1501  0113                     	;# 
  1502  0114                     	;# 
  1503  0115                     	;# 
  1504  0116                     	;# 
  1505  0117                     	;# 
  1506  0118                     	;# 
  1507  0119                     	;# 
  1508  018C                     	;# 
  1509  018E                     	;# 
  1510  0197                     	;# 
  1511  0199                     	;# 
  1512  0199                     	;# 
  1513  0199                     	;# 
  1514  019A                     	;# 
  1515  019A                     	;# 
  1516  019A                     	;# 
  1517  019B                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019C                     	;# 
  1523  019C                     	;# 
  1524  019C                     	;# 
  1525  019D                     	;# 
  1526  019D                     	;# 
  1527  019D                     	;# 
  1528  019E                     	;# 
  1529  019E                     	;# 
  1530  019E                     	;# 
  1531  019F                     	;# 
  1532  019F                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  020C                     	;# 
  1537  020E                     	;# 
  1538  0211                     	;# 
  1539  0211                     	;# 
  1540  0212                     	;# 
  1541  0212                     	;# 
  1542  0213                     	;# 
  1543  0213                     	;# 
  1544  0214                     	;# 
  1545  0214                     	;# 
  1546  0215                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0216                     	;# 
  1551  0216                     	;# 
  1552  0217                     	;# 
  1553  0217                     	;# 
  1554  0219                     	;# 
  1555  021A                     	;# 
  1556  021B                     	;# 
  1557  021C                     	;# 
  1558  021D                     	;# 
  1559  021D                     	;# 
  1560  021E                     	;# 
  1561  021F                     	;# 
  1562  028C                     	;# 
  1563  028E                     	;# 
  1564  0291                     	;# 
  1565  0291                     	;# 
  1566  0292                     	;# 
  1567  0293                     	;# 
  1568  0294                     	;# 
  1569  0295                     	;# 
  1570  0295                     	;# 
  1571  0296                     	;# 
  1572  0297                     	;# 
  1573  0298                     	;# 
  1574  029F                     	;# 
  1575  030C                     	;# 
  1576  030E                     	;# 
  1577  0311                     	;# 
  1578  0311                     	;# 
  1579  0312                     	;# 
  1580  0313                     	;# 
  1581  0314                     	;# 
  1582  0315                     	;# 
  1583  0315                     	;# 
  1584  0316                     	;# 
  1585  0317                     	;# 
  1586  0318                     	;# 
  1587  038C                     	;# 
  1588  038E                     	;# 
  1589  0391                     	;# 
  1590  0392                     	;# 
  1591  0393                     	;# 
  1592  0397                     	;# 
  1593  0398                     	;# 
  1594  0399                     	;# 
  1595  039A                     	;# 
  1596  039C                     	;# 
  1597  039D                     	;# 
  1598  039E                     	;# 
  1599  039F                     	;# 
  1600  0411                     	;# 
  1601  0411                     	;# 
  1602  0412                     	;# 
  1603  0413                     	;# 
  1604  0414                     	;# 
  1605  0415                     	;# 
  1606  0416                     	;# 
  1607  0417                     	;# 
  1608  0418                     	;# 
  1609  0418                     	;# 
  1610  0419                     	;# 
  1611  041A                     	;# 
  1612  041B                     	;# 
  1613  041C                     	;# 
  1614  041D                     	;# 
  1615  041E                     	;# 
  1616  041F                     	;# 
  1617  0498                     	;# 
  1618  0498                     	;# 
  1619  0499                     	;# 
  1620  049A                     	;# 
  1621  049B                     	;# 
  1622  049B                     	;# 
  1623  049C                     	;# 
  1624  049D                     	;# 
  1625  049E                     	;# 
  1626  049F                     	;# 
  1627  0617                     	;# 
  1628  0618                     	;# 
  1629  0619                     	;# 
  1630  0619                     	;# 
  1631  061A                     	;# 
  1632  061B                     	;# 
  1633  061C                     	;# 
  1634  061C                     	;# 
  1635  061F                     	;# 
  1636  0691                     	;# 
  1637  0692                     	;# 
  1638  0693                     	;# 
  1639  0694                     	;# 
  1640  0695                     	;# 
  1641  0696                     	;# 
  1642  0697                     	;# 
  1643  0698                     	;# 
  1644  0699                     	;# 
  1645  0711                     	;# 
  1646  0712                     	;# 
  1647  0713                     	;# 
  1648  0714                     	;# 
  1649  0715                     	;# 
  1650  0716                     	;# 
  1651  0717                     	;# 
  1652  0718                     	;# 
  1653  0719                     	;# 
  1654  0891                     	;# 
  1655  0891                     	;# 
  1656  0891                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0892                     	;# 
  1661  0892                     	;# 
  1662  0892                     	;# 
  1663  0893                     	;# 
  1664  0893                     	;# 
  1665  0893                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0894                     	;# 
  1670  0894                     	;# 
  1671  0894                     	;# 
  1672  0895                     	;# 
  1673  0895                     	;# 
  1674  0895                     	;# 
  1675  0896                     	;# 
  1676  0896                     	;# 
  1677  0896                     	;# 
  1678  089B                     	;# 
  1679  0911                     	;# 
  1680  0912                     	;# 
  1681  0913                     	;# 
  1682  0914                     	;# 
  1683  0915                     	;# 
  1684  0916                     	;# 
  1685  0918                     	;# 
  1686  0919                     	;# 
  1687  091A                     	;# 
  1688  091B                     	;# 
  1689  091C                     	;# 
  1690  091D                     	;# 
  1691  091E                     	;# 
  1692  091F                     	;# 
  1693  0E0F                     	;# 
  1694  0E10                     	;# 
  1695  0E11                     	;# 
  1696  0E12                     	;# 
  1697  0E13                     	;# 
  1698  0E14                     	;# 
  1699  0E15                     	;# 
  1700  0E16                     	;# 
  1701  0E17                     	;# 
  1702  0E18                     	;# 
  1703  0E19                     	;# 
  1704  0E1A                     	;# 
  1705  0E1B                     	;# 
  1706  0E1C                     	;# 
  1707  0E1D                     	;# 
  1708  0E1E                     	;# 
  1709  0E1F                     	;# 
  1710  0E20                     	;# 
  1711  0E21                     	;# 
  1712  0E22                     	;# 
  1713  0E24                     	;# 
  1714  0E25                     	;# 
  1715  0E28                     	;# 
  1716  0E29                     	;# 
  1717  0E2A                     	;# 
  1718  0E2B                     	;# 
  1719  0E2C                     	;# 
  1720  0E2D                     	;# 
  1721  0E2E                     	;# 
  1722  0E2F                     	;# 
  1723  0E90                     	;# 
  1724  0E91                     	;# 
  1725  0E92                     	;# 
  1726  0E94                     	;# 
  1727  0E95                     	;# 
  1728  0EA0                     	;# 
  1729  0EA1                     	;# 
  1730  0EA2                     	;# 
  1731  0EA3                     	;# 
  1732  0EA4                     	;# 
  1733  0EA5                     	;# 
  1734  0F0F                     	;# 
  1735  0F10                     	;# 
  1736  0F11                     	;# 
  1737  0F12                     	;# 
  1738  0F13                     	;# 
  1739  0F14                     	;# 
  1740  0F15                     	;# 
  1741  0F16                     	;# 
  1742  0F17                     	;# 
  1743  0F18                     	;# 
  1744  0F19                     	;# 
  1745  0F1A                     	;# 
  1746  0F1B                     	;# 
  1747  0F1C                     	;# 
  1748  0F1D                     	;# 
  1749  0F1E                     	;# 
  1750  0F1F                     	;# 
  1751  0F20                     	;# 
  1752  0F21                     	;# 
  1753  0F22                     	;# 
  1754  0F23                     	;# 
  1755  0F24                     	;# 
  1756  0F25                     	;# 
  1757  0F26                     	;# 
  1758  0F27                     	;# 
  1759  0F28                     	;# 
  1760  0F29                     	;# 
  1761  0F2A                     	;# 
  1762  0F2B                     	;# 
  1763  0F2C                     	;# 
  1764  0F2D                     	;# 
  1765  0F2E                     	;# 
  1766  0F2F                     	;# 
  1767  0F30                     	;# 
  1768  0F31                     	;# 
  1769  0F32                     	;# 
  1770  0F33                     	;# 
  1771  0F34                     	;# 
  1772  0F35                     	;# 
  1773  0F36                     	;# 
  1774  0F37                     	;# 
  1775  0FE4                     	;# 
  1776  0FE5                     	;# 
  1777  0FE6                     	;# 
  1778  0FE7                     	;# 
  1779  0FE8                     	;# 
  1780  0FE9                     	;# 
  1781  0FEA                     	;# 
  1782  0FEB                     	;# 
  1783  0FED                     	;# 
  1784  0FEE                     	;# 
  1785  0FEF                     	;# 
  1786  0000                     	;# 
  1787  0001                     	;# 
  1788  0002                     	;# 
  1789  0003                     	;# 
  1790  0004                     	;# 
  1791  0005                     	;# 
  1792  0006                     	;# 
  1793  0007                     	;# 
  1794  0008                     	;# 
  1795  0009                     	;# 
  1796  000A                     	;# 
  1797  000B                     	;# 
  1798  000C                     	;# 
  1799  000E                     	;# 
  1800  0010                     	;# 
  1801  0011                     	;# 
  1802  0012                     	;# 
  1803  0013                     	;# 
  1804  0014                     	;# 
  1805  0015                     	;# 
  1806  0015                     	;# 
  1807  0016                     	;# 
  1808  0016                     	;# 
  1809  0017                     	;# 
  1810  0018                     	;# 
  1811  0019                     	;# 
  1812  0019                     	;# 
  1813  001A                     	;# 
  1814  001B                     	;# 
  1815  001C                     	;# 
  1816  001D                     	;# 
  1817  001E                     	;# 
  1818  001F                     	;# 
  1819  008C                     	;# 
  1820  008E                     	;# 
  1821  0090                     	;# 
  1822  0091                     	;# 
  1823  0092                     	;# 
  1824  0093                     	;# 
  1825  0094                     	;# 
  1826  0097                     	;# 
  1827  009B                     	;# 
  1828  009B                     	;# 
  1829  009C                     	;# 
  1830  009D                     	;# 
  1831  009E                     	;# 
  1832  009F                     	;# 
  1833  010C                     	;# 
  1834  010E                     	;# 
  1835  0111                     	;# 
  1836  0112                     	;# 
  1837  0113                     	;# 
  1838  0114                     	;# 
  1839  0115                     	;# 
  1840  0116                     	;# 
  1841  0117                     	;# 
  1842  0118                     	;# 
  1843  0119                     	;# 
  1844  018C                     	;# 
  1845  018E                     	;# 
  1846  0197                     	;# 
  1847  0199                     	;# 
  1848  0199                     	;# 
  1849  0199                     	;# 
  1850  019A                     	;# 
  1851  019A                     	;# 
  1852  019A                     	;# 
  1853  019B                     	;# 
  1854  019B                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019C                     	;# 
  1859  019C                     	;# 
  1860  019C                     	;# 
  1861  019D                     	;# 
  1862  019D                     	;# 
  1863  019D                     	;# 
  1864  019E                     	;# 
  1865  019E                     	;# 
  1866  019E                     	;# 
  1867  019F                     	;# 
  1868  019F                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  020C                     	;# 
  1873  020E                     	;# 
  1874  0211                     	;# 
  1875  0211                     	;# 
  1876  0212                     	;# 
  1877  0212                     	;# 
  1878  0213                     	;# 
  1879  0213                     	;# 
  1880  0214                     	;# 
  1881  0214                     	;# 
  1882  0215                     	;# 
  1883  0215                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0216                     	;# 
  1887  0216                     	;# 
  1888  0217                     	;# 
  1889  0217                     	;# 
  1890  0219                     	;# 
  1891  021A                     	;# 
  1892  021B                     	;# 
  1893  021C                     	;# 
  1894  021D                     	;# 
  1895  021D                     	;# 
  1896  021E                     	;# 
  1897  021F                     	;# 
  1898  028C                     	;# 
  1899  028E                     	;# 
  1900  0291                     	;# 
  1901  0291                     	;# 
  1902  0292                     	;# 
  1903  0293                     	;# 
  1904  0294                     	;# 
  1905  0295                     	;# 
  1906  0295                     	;# 
  1907  0296                     	;# 
  1908  0297                     	;# 
  1909  0298                     	;# 
  1910  029F                     	;# 
  1911  030C                     	;# 
  1912  030E                     	;# 
  1913  0311                     	;# 
  1914  0311                     	;# 
  1915  0312                     	;# 
  1916  0313                     	;# 
  1917  0314                     	;# 
  1918  0315                     	;# 
  1919  0315                     	;# 
  1920  0316                     	;# 
  1921  0317                     	;# 
  1922  0318                     	;# 
  1923  038C                     	;# 
  1924  038E                     	;# 
  1925  0391                     	;# 
  1926  0392                     	;# 
  1927  0393                     	;# 
  1928  0397                     	;# 
  1929  0398                     	;# 
  1930  0399                     	;# 
  1931  039A                     	;# 
  1932  039C                     	;# 
  1933  039D                     	;# 
  1934  039E                     	;# 
  1935  039F                     	;# 
  1936  0411                     	;# 
  1937  0411                     	;# 
  1938  0412                     	;# 
  1939  0413                     	;# 
  1940  0414                     	;# 
  1941  0415                     	;# 
  1942  0416                     	;# 
  1943  0417                     	;# 
  1944  0418                     	;# 
  1945  0418                     	;# 
  1946  0419                     	;# 
  1947  041A                     	;# 
  1948  041B                     	;# 
  1949  041C                     	;# 
  1950  041D                     	;# 
  1951  041E                     	;# 
  1952  041F                     	;# 
  1953  0498                     	;# 
  1954  0498                     	;# 
  1955  0499                     	;# 
  1956  049A                     	;# 
  1957  049B                     	;# 
  1958  049B                     	;# 
  1959  049C                     	;# 
  1960  049D                     	;# 
  1961  049E                     	;# 
  1962  049F                     	;# 
  1963  0617                     	;# 
  1964  0618                     	;# 
  1965  0619                     	;# 
  1966  0619                     	;# 
  1967  061A                     	;# 
  1968  061B                     	;# 
  1969  061C                     	;# 
  1970  061C                     	;# 
  1971  061F                     	;# 
  1972  0691                     	;# 
  1973  0692                     	;# 
  1974  0693                     	;# 
  1975  0694                     	;# 
  1976  0695                     	;# 
  1977  0696                     	;# 
  1978  0697                     	;# 
  1979  0698                     	;# 
  1980  0699                     	;# 
  1981  0711                     	;# 
  1982  0712                     	;# 
  1983  0713                     	;# 
  1984  0714                     	;# 
  1985  0715                     	;# 
  1986  0716                     	;# 
  1987  0717                     	;# 
  1988  0718                     	;# 
  1989  0719                     	;# 
  1990  0891                     	;# 
  1991  0891                     	;# 
  1992  0891                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0892                     	;# 
  1997  0892                     	;# 
  1998  0892                     	;# 
  1999  0893                     	;# 
  2000  0893                     	;# 
  2001  0893                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0894                     	;# 
  2006  0894                     	;# 
  2007  0894                     	;# 
  2008  0895                     	;# 
  2009  0895                     	;# 
  2010  0895                     	;# 
  2011  0896                     	;# 
  2012  0896                     	;# 
  2013  0896                     	;# 
  2014  089B                     	;# 
  2015  0911                     	;# 
  2016  0912                     	;# 
  2017  0913                     	;# 
  2018  0914                     	;# 
  2019  0915                     	;# 
  2020  0916                     	;# 
  2021  0918                     	;# 
  2022  0919                     	;# 
  2023  091A                     	;# 
  2024  091B                     	;# 
  2025  091C                     	;# 
  2026  091D                     	;# 
  2027  091E                     	;# 
  2028  091F                     	;# 
  2029  0E0F                     	;# 
  2030  0E10                     	;# 
  2031  0E11                     	;# 
  2032  0E12                     	;# 
  2033  0E13                     	;# 
  2034  0E14                     	;# 
  2035  0E15                     	;# 
  2036  0E16                     	;# 
  2037  0E17                     	;# 
  2038  0E18                     	;# 
  2039  0E19                     	;# 
  2040  0E1A                     	;# 
  2041  0E1B                     	;# 
  2042  0E1C                     	;# 
  2043  0E1D                     	;# 
  2044  0E1E                     	;# 
  2045  0E1F                     	;# 
  2046  0E20                     	;# 
  2047  0E21                     	;# 
  2048  0E22                     	;# 
  2049  0E24                     	;# 
  2050  0E25                     	;# 
  2051  0E28                     	;# 
  2052  0E29                     	;# 
  2053  0E2A                     	;# 
  2054  0E2B                     	;# 
  2055  0E2C                     	;# 
  2056  0E2D                     	;# 
  2057  0E2E                     	;# 
  2058  0E2F                     	;# 
  2059  0E90                     	;# 
  2060  0E91                     	;# 
  2061  0E92                     	;# 
  2062  0E94                     	;# 
  2063  0E95                     	;# 
  2064  0EA0                     	;# 
  2065  0EA1                     	;# 
  2066  0EA2                     	;# 
  2067  0EA3                     	;# 
  2068  0EA4                     	;# 
  2069  0EA5                     	;# 
  2070  0F0F                     	;# 
  2071  0F10                     	;# 
  2072  0F11                     	;# 
  2073  0F12                     	;# 
  2074  0F13                     	;# 
  2075  0F14                     	;# 
  2076  0F15                     	;# 
  2077  0F16                     	;# 
  2078  0F17                     	;# 
  2079  0F18                     	;# 
  2080  0F19                     	;# 
  2081  0F1A                     	;# 
  2082  0F1B                     	;# 
  2083  0F1C                     	;# 
  2084  0F1D                     	;# 
  2085  0F1E                     	;# 
  2086  0F1F                     	;# 
  2087  0F20                     	;# 
  2088  0F21                     	;# 
  2089  0F22                     	;# 
  2090  0F23                     	;# 
  2091  0F24                     	;# 
  2092  0F25                     	;# 
  2093  0F26                     	;# 
  2094  0F27                     	;# 
  2095  0F28                     	;# 
  2096  0F29                     	;# 
  2097  0F2A                     	;# 
  2098  0F2B                     	;# 
  2099  0F2C                     	;# 
  2100  0F2D                     	;# 
  2101  0F2E                     	;# 
  2102  0F2F                     	;# 
  2103  0F30                     	;# 
  2104  0F31                     	;# 
  2105  0F32                     	;# 
  2106  0F33                     	;# 
  2107  0F34                     	;# 
  2108  0F35                     	;# 
  2109  0F36                     	;# 
  2110  0F37                     	;# 
  2111  0FE4                     	;# 
  2112  0FE5                     	;# 
  2113  0FE6                     	;# 
  2114  0FE7                     	;# 
  2115  0FE8                     	;# 
  2116  0FE9                     	;# 
  2117  0FEA                     	;# 
  2118  0FEB                     	;# 
  2119  0FED                     	;# 
  2120  0FEE                     	;# 
  2121  0FEF                     	;# 
  2122  0000                     	;# 
  2123  0001                     	;# 
  2124  0002                     	;# 
  2125  0003                     	;# 
  2126  0004                     	;# 
  2127  0005                     	;# 
  2128  0006                     	;# 
  2129  0007                     	;# 
  2130  0008                     	;# 
  2131  0009                     	;# 
  2132  000A                     	;# 
  2133  000B                     	;# 
  2134  000C                     	;# 
  2135  000E                     	;# 
  2136  0010                     	;# 
  2137  0011                     	;# 
  2138  0012                     	;# 
  2139  0013                     	;# 
  2140  0014                     	;# 
  2141  0015                     	;# 
  2142  0015                     	;# 
  2143  0016                     	;# 
  2144  0016                     	;# 
  2145  0017                     	;# 
  2146  0018                     	;# 
  2147  0019                     	;# 
  2148  0019                     	;# 
  2149  001A                     	;# 
  2150  001B                     	;# 
  2151  001C                     	;# 
  2152  001D                     	;# 
  2153  001E                     	;# 
  2154  001F                     	;# 
  2155  008C                     	;# 
  2156  008E                     	;# 
  2157  0090                     	;# 
  2158  0091                     	;# 
  2159  0092                     	;# 
  2160  0093                     	;# 
  2161  0094                     	;# 
  2162  0097                     	;# 
  2163  009B                     	;# 
  2164  009B                     	;# 
  2165  009C                     	;# 
  2166  009D                     	;# 
  2167  009E                     	;# 
  2168  009F                     	;# 
  2169  010C                     	;# 
  2170  010E                     	;# 
  2171  0111                     	;# 
  2172  0112                     	;# 
  2173  0113                     	;# 
  2174  0114                     	;# 
  2175  0115                     	;# 
  2176  0116                     	;# 
  2177  0117                     	;# 
  2178  0118                     	;# 
  2179  0119                     	;# 
  2180  018C                     	;# 
  2181  018E                     	;# 
  2182  0197                     	;# 
  2183  0199                     	;# 
  2184  0199                     	;# 
  2185  0199                     	;# 
  2186  019A                     	;# 
  2187  019A                     	;# 
  2188  019A                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019B                     	;# 
  2194  019C                     	;# 
  2195  019C                     	;# 
  2196  019C                     	;# 
  2197  019D                     	;# 
  2198  019D                     	;# 
  2199  019D                     	;# 
  2200  019E                     	;# 
  2201  019E                     	;# 
  2202  019E                     	;# 
  2203  019F                     	;# 
  2204  019F                     	;# 
  2205  019F                     	;# 
  2206  019F                     	;# 
  2207  019F                     	;# 
  2208  020C                     	;# 
  2209  020E                     	;# 
  2210  0211                     	;# 
  2211  0211                     	;# 
  2212  0212                     	;# 
  2213  0212                     	;# 
  2214  0213                     	;# 
  2215  0213                     	;# 
  2216  0214                     	;# 
  2217  0214                     	;# 
  2218  0215                     	;# 
  2219  0215                     	;# 
  2220  0215                     	;# 
  2221  0215                     	;# 
  2222  0216                     	;# 
  2223  0216                     	;# 
  2224  0217                     	;# 
  2225  0217                     	;# 
  2226  0219                     	;# 
  2227  021A                     	;# 
  2228  021B                     	;# 
  2229  021C                     	;# 
  2230  021D                     	;# 
  2231  021D                     	;# 
  2232  021E                     	;# 
  2233  021F                     	;# 
  2234  028C                     	;# 
  2235  028E                     	;# 
  2236  0291                     	;# 
  2237  0291                     	;# 
  2238  0292                     	;# 
  2239  0293                     	;# 
  2240  0294                     	;# 
  2241  0295                     	;# 
  2242  0295                     	;# 
  2243  0296                     	;# 
  2244  0297                     	;# 
  2245  0298                     	;# 
  2246  029F                     	;# 
  2247  030C                     	;# 
  2248  030E                     	;# 
  2249  0311                     	;# 
  2250  0311                     	;# 
  2251  0312                     	;# 
  2252  0313                     	;# 
  2253  0314                     	;# 
  2254  0315                     	;# 
  2255  0315                     	;# 
  2256  0316                     	;# 
  2257  0317                     	;# 
  2258  0318                     	;# 
  2259  038C                     	;# 
  2260  038E                     	;# 
  2261  0391                     	;# 
  2262  0392                     	;# 
  2263  0393                     	;# 
  2264  0397                     	;# 
  2265  0398                     	;# 
  2266  0399                     	;# 
  2267  039A                     	;# 
  2268  039C                     	;# 
  2269  039D                     	;# 
  2270  039E                     	;# 
  2271  039F                     	;# 
  2272  0411                     	;# 
  2273  0411                     	;# 
  2274  0412                     	;# 
  2275  0413                     	;# 
  2276  0414                     	;# 
  2277  0415                     	;# 
  2278  0416                     	;# 
  2279  0417                     	;# 
  2280  0418                     	;# 
  2281  0418                     	;# 
  2282  0419                     	;# 
  2283  041A                     	;# 
  2284  041B                     	;# 
  2285  041C                     	;# 
  2286  041D                     	;# 
  2287  041E                     	;# 
  2288  041F                     	;# 
  2289  0498                     	;# 
  2290  0498                     	;# 
  2291  0499                     	;# 
  2292  049A                     	;# 
  2293  049B                     	;# 
  2294  049B                     	;# 
  2295  049C                     	;# 
  2296  049D                     	;# 
  2297  049E                     	;# 
  2298  049F                     	;# 
  2299  0617                     	;# 
  2300  0618                     	;# 
  2301  0619                     	;# 
  2302  0619                     	;# 
  2303  061A                     	;# 
  2304  061B                     	;# 
  2305  061C                     	;# 
  2306  061C                     	;# 
  2307  061F                     	;# 
  2308  0691                     	;# 
  2309  0692                     	;# 
  2310  0693                     	;# 
  2311  0694                     	;# 
  2312  0695                     	;# 
  2313  0696                     	;# 
  2314  0697                     	;# 
  2315  0698                     	;# 
  2316  0699                     	;# 
  2317  0711                     	;# 
  2318  0712                     	;# 
  2319  0713                     	;# 
  2320  0714                     	;# 
  2321  0715                     	;# 
  2322  0716                     	;# 
  2323  0717                     	;# 
  2324  0718                     	;# 
  2325  0719                     	;# 
  2326  0891                     	;# 
  2327  0891                     	;# 
  2328  0891                     	;# 
  2329  0891                     	;# 
  2330  0891                     	;# 
  2331  0891                     	;# 
  2332  0892                     	;# 
  2333  0892                     	;# 
  2334  0892                     	;# 
  2335  0893                     	;# 
  2336  0893                     	;# 
  2337  0893                     	;# 
  2338  0893                     	;# 
  2339  0893                     	;# 
  2340  0893                     	;# 
  2341  0894                     	;# 
  2342  0894                     	;# 
  2343  0894                     	;# 
  2344  0895                     	;# 
  2345  0895                     	;# 
  2346  0895                     	;# 
  2347  0896                     	;# 
  2348  0896                     	;# 
  2349  0896                     	;# 
  2350  089B                     	;# 
  2351  0911                     	;# 
  2352  0912                     	;# 
  2353  0913                     	;# 
  2354  0914                     	;# 
  2355  0915                     	;# 
  2356  0916                     	;# 
  2357  0918                     	;# 
  2358  0919                     	;# 
  2359  091A                     	;# 
  2360  091B                     	;# 
  2361  091C                     	;# 
  2362  091D                     	;# 
  2363  091E                     	;# 
  2364  091F                     	;# 
  2365  0E0F                     	;# 
  2366  0E10                     	;# 
  2367  0E11                     	;# 
  2368  0E12                     	;# 
  2369  0E13                     	;# 
  2370  0E14                     	;# 
  2371  0E15                     	;# 
  2372  0E16                     	;# 
  2373  0E17                     	;# 
  2374  0E18                     	;# 
  2375  0E19                     	;# 
  2376  0E1A                     	;# 
  2377  0E1B                     	;# 
  2378  0E1C                     	;# 
  2379  0E1D                     	;# 
  2380  0E1E                     	;# 
  2381  0E1F                     	;# 
  2382  0E20                     	;# 
  2383  0E21                     	;# 
  2384  0E22                     	;# 
  2385  0E24                     	;# 
  2386  0E25                     	;# 
  2387  0E28                     	;# 
  2388  0E29                     	;# 
  2389  0E2A                     	;# 
  2390  0E2B                     	;# 
  2391  0E2C                     	;# 
  2392  0E2D                     	;# 
  2393  0E2E                     	;# 
  2394  0E2F                     	;# 
  2395  0E90                     	;# 
  2396  0E91                     	;# 
  2397  0E92                     	;# 
  2398  0E94                     	;# 
  2399  0E95                     	;# 
  2400  0EA0                     	;# 
  2401  0EA1                     	;# 
  2402  0EA2                     	;# 
  2403  0EA3                     	;# 
  2404  0EA4                     	;# 
  2405  0EA5                     	;# 
  2406  0F0F                     	;# 
  2407  0F10                     	;# 
  2408  0F11                     	;# 
  2409  0F12                     	;# 
  2410  0F13                     	;# 
  2411  0F14                     	;# 
  2412  0F15                     	;# 
  2413  0F16                     	;# 
  2414  0F17                     	;# 
  2415  0F18                     	;# 
  2416  0F19                     	;# 
  2417  0F1A                     	;# 
  2418  0F1B                     	;# 
  2419  0F1C                     	;# 
  2420  0F1D                     	;# 
  2421  0F1E                     	;# 
  2422  0F1F                     	;# 
  2423  0F20                     	;# 
  2424  0F21                     	;# 
  2425  0F22                     	;# 
  2426  0F23                     	;# 
  2427  0F24                     	;# 
  2428  0F25                     	;# 
  2429  0F26                     	;# 
  2430  0F27                     	;# 
  2431  0F28                     	;# 
  2432  0F29                     	;# 
  2433  0F2A                     	;# 
  2434  0F2B                     	;# 
  2435  0F2C                     	;# 
  2436  0F2D                     	;# 
  2437  0F2E                     	;# 
  2438  0F2F                     	;# 
  2439  0F30                     	;# 
  2440  0F31                     	;# 
  2441  0F32                     	;# 
  2442  0F33                     	;# 
  2443  0F34                     	;# 
  2444  0F35                     	;# 
  2445  0F36                     	;# 
  2446  0F37                     	;# 
  2447  0FE4                     	;# 
  2448  0FE5                     	;# 
  2449  0FE6                     	;# 
  2450  0FE7                     	;# 
  2451  0FE8                     	;# 
  2452  0FE9                     	;# 
  2453  0FEA                     	;# 
  2454  0FEB                     	;# 
  2455  0FED                     	;# 
  2456  0FEE                     	;# 
  2457  0FEF                     	;# 
  2458  0000                     	;# 
  2459  0001                     	;# 
  2460  0002                     	;# 
  2461  0003                     	;# 
  2462  0004                     	;# 
  2463  0005                     	;# 
  2464  0006                     	;# 
  2465  0007                     	;# 
  2466  0008                     	;# 
  2467  0009                     	;# 
  2468  000A                     	;# 
  2469  000B                     	;# 
  2470  000C                     	;# 
  2471  000E                     	;# 
  2472  0010                     	;# 
  2473  0011                     	;# 
  2474  0012                     	;# 
  2475  0013                     	;# 
  2476  0014                     	;# 
  2477  0015                     	;# 
  2478  0015                     	;# 
  2479  0016                     	;# 
  2480  0016                     	;# 
  2481  0017                     	;# 
  2482  0018                     	;# 
  2483  0019                     	;# 
  2484  0019                     	;# 
  2485  001A                     	;# 
  2486  001B                     	;# 
  2487  001C                     	;# 
  2488  001D                     	;# 
  2489  001E                     	;# 
  2490  001F                     	;# 
  2491  008C                     	;# 
  2492  008E                     	;# 
  2493  0090                     	;# 
  2494  0091                     	;# 
  2495  0092                     	;# 
  2496  0093                     	;# 
  2497  0094                     	;# 
  2498  0097                     	;# 
  2499  009B                     	;# 
  2500  009B                     	;# 
  2501  009C                     	;# 
  2502  009D                     	;# 
  2503  009E                     	;# 
  2504  009F                     	;# 
  2505  010C                     	;# 
  2506  010E                     	;# 
  2507  0111                     	;# 
  2508  0112                     	;# 
  2509  0113                     	;# 
  2510  0114                     	;# 
  2511  0115                     	;# 
  2512  0116                     	;# 
  2513  0117                     	;# 
  2514  0118                     	;# 
  2515  0119                     	;# 
  2516  018C                     	;# 
  2517  018E                     	;# 
  2518  0197                     	;# 
  2519  0199                     	;# 
  2520  0199                     	;# 
  2521  0199                     	;# 
  2522  019A                     	;# 
  2523  019A                     	;# 
  2524  019A                     	;# 
  2525  019B                     	;# 
  2526  019B                     	;# 
  2527  019B                     	;# 
  2528  019B                     	;# 
  2529  019B                     	;# 
  2530  019C                     	;# 
  2531  019C                     	;# 
  2532  019C                     	;# 
  2533  019D                     	;# 
  2534  019D                     	;# 
  2535  019D                     	;# 
  2536  019E                     	;# 
  2537  019E                     	;# 
  2538  019E                     	;# 
  2539  019F                     	;# 
  2540  019F                     	;# 
  2541  019F                     	;# 
  2542  019F                     	;# 
  2543  019F                     	;# 
  2544  020C                     	;# 
  2545  020E                     	;# 
  2546  0211                     	;# 
  2547  0211                     	;# 
  2548  0212                     	;# 
  2549  0212                     	;# 
  2550  0213                     	;# 
  2551  0213                     	;# 
  2552  0214                     	;# 
  2553  0214                     	;# 
  2554  0215                     	;# 
  2555  0215                     	;# 
  2556  0215                     	;# 
  2557  0215                     	;# 
  2558  0216                     	;# 
  2559  0216                     	;# 
  2560  0217                     	;# 
  2561  0217                     	;# 
  2562  0219                     	;# 
  2563  021A                     	;# 
  2564  021B                     	;# 
  2565  021C                     	;# 
  2566  021D                     	;# 
  2567  021D                     	;# 
  2568  021E                     	;# 
  2569  021F                     	;# 
  2570  028C                     	;# 
  2571  028E                     	;# 
  2572  0291                     	;# 
  2573  0291                     	;# 
  2574  0292                     	;# 
  2575  0293                     	;# 
  2576  0294                     	;# 
  2577  0295                     	;# 
  2578  0295                     	;# 
  2579  0296                     	;# 
  2580  0297                     	;# 
  2581  0298                     	;# 
  2582  029F                     	;# 
  2583  030C                     	;# 
  2584  030E                     	;# 
  2585  0311                     	;# 
  2586  0311                     	;# 
  2587  0312                     	;# 
  2588  0313                     	;# 
  2589  0314                     	;# 
  2590  0315                     	;# 
  2591  0315                     	;# 
  2592  0316                     	;# 
  2593  0317                     	;# 
  2594  0318                     	;# 
  2595  038C                     	;# 
  2596  038E                     	;# 
  2597  0391                     	;# 
  2598  0392                     	;# 
  2599  0393                     	;# 
  2600  0397                     	;# 
  2601  0398                     	;# 
  2602  0399                     	;# 
  2603  039A                     	;# 
  2604  039C                     	;# 
  2605  039D                     	;# 
  2606  039E                     	;# 
  2607  039F                     	;# 
  2608  0411                     	;# 
  2609  0411                     	;# 
  2610  0412                     	;# 
  2611  0413                     	;# 
  2612  0414                     	;# 
  2613  0415                     	;# 
  2614  0416                     	;# 
  2615  0417                     	;# 
  2616  0418                     	;# 
  2617  0418                     	;# 
  2618  0419                     	;# 
  2619  041A                     	;# 
  2620  041B                     	;# 
  2621  041C                     	;# 
  2622  041D                     	;# 
  2623  041E                     	;# 
  2624  041F                     	;# 
  2625  0498                     	;# 
  2626  0498                     	;# 
  2627  0499                     	;# 
  2628  049A                     	;# 
  2629  049B                     	;# 
  2630  049B                     	;# 
  2631  049C                     	;# 
  2632  049D                     	;# 
  2633  049E                     	;# 
  2634  049F                     	;# 
  2635  0617                     	;# 
  2636  0618                     	;# 
  2637  0619                     	;# 
  2638  0619                     	;# 
  2639  061A                     	;# 
  2640  061B                     	;# 
  2641  061C                     	;# 
  2642  061C                     	;# 
  2643  061F                     	;# 
  2644  0691                     	;# 
  2645  0692                     	;# 
  2646  0693                     	;# 
  2647  0694                     	;# 
  2648  0695                     	;# 
  2649  0696                     	;# 
  2650  0697                     	;# 
  2651  0698                     	;# 
  2652  0699                     	;# 
  2653  0711                     	;# 
  2654  0712                     	;# 
  2655  0713                     	;# 
  2656  0714                     	;# 
  2657  0715                     	;# 
  2658  0716                     	;# 
  2659  0717                     	;# 
  2660  0718                     	;# 
  2661  0719                     	;# 
  2662  0891                     	;# 
  2663  0891                     	;# 
  2664  0891                     	;# 
  2665  0891                     	;# 
  2666  0891                     	;# 
  2667  0891                     	;# 
  2668  0892                     	;# 
  2669  0892                     	;# 
  2670  0892                     	;# 
  2671  0893                     	;# 
  2672  0893                     	;# 
  2673  0893                     	;# 
  2674  0893                     	;# 
  2675  0893                     	;# 
  2676  0893                     	;# 
  2677  0894                     	;# 
  2678  0894                     	;# 
  2679  0894                     	;# 
  2680  0895                     	;# 
  2681  0895                     	;# 
  2682  0895                     	;# 
  2683  0896                     	;# 
  2684  0896                     	;# 
  2685  0896                     	;# 
  2686  089B                     	;# 
  2687  0911                     	;# 
  2688  0912                     	;# 
  2689  0913                     	;# 
  2690  0914                     	;# 
  2691  0915                     	;# 
  2692  0916                     	;# 
  2693  0918                     	;# 
  2694  0919                     	;# 
  2695  091A                     	;# 
  2696  091B                     	;# 
  2697  091C                     	;# 
  2698  091D                     	;# 
  2699  091E                     	;# 
  2700  091F                     	;# 
  2701  0E0F                     	;# 
  2702  0E10                     	;# 
  2703  0E11                     	;# 
  2704  0E12                     	;# 
  2705  0E13                     	;# 
  2706  0E14                     	;# 
  2707  0E15                     	;# 
  2708  0E16                     	;# 
  2709  0E17                     	;# 
  2710  0E18                     	;# 
  2711  0E19                     	;# 
  2712  0E1A                     	;# 
  2713  0E1B                     	;# 
  2714  0E1C                     	;# 
  2715  0E1D                     	;# 
  2716  0E1E                     	;# 
  2717  0E1F                     	;# 
  2718  0E20                     	;# 
  2719  0E21                     	;# 
  2720  0E22                     	;# 
  2721  0E24                     	;# 
  2722  0E25                     	;# 
  2723  0E28                     	;# 
  2724  0E29                     	;# 
  2725  0E2A                     	;# 
  2726  0E2B                     	;# 
  2727  0E2C                     	;# 
  2728  0E2D                     	;# 
  2729  0E2E                     	;# 
  2730  0E2F                     	;# 
  2731  0E90                     	;# 
  2732  0E91                     	;# 
  2733  0E92                     	;# 
  2734  0E94                     	;# 
  2735  0E95                     	;# 
  2736  0EA0                     	;# 
  2737  0EA1                     	;# 
  2738  0EA2                     	;# 
  2739  0EA3                     	;# 
  2740  0EA4                     	;# 
  2741  0EA5                     	;# 
  2742  0F0F                     	;# 
  2743  0F10                     	;# 
  2744  0F11                     	;# 
  2745  0F12                     	;# 
  2746  0F13                     	;# 
  2747  0F14                     	;# 
  2748  0F15                     	;# 
  2749  0F16                     	;# 
  2750  0F17                     	;# 
  2751  0F18                     	;# 
  2752  0F19                     	;# 
  2753  0F1A                     	;# 
  2754  0F1B                     	;# 
  2755  0F1C                     	;# 
  2756  0F1D                     	;# 
  2757  0F1E                     	;# 
  2758  0F1F                     	;# 
  2759  0F20                     	;# 
  2760  0F21                     	;# 
  2761  0F22                     	;# 
  2762  0F23                     	;# 
  2763  0F24                     	;# 
  2764  0F25                     	;# 
  2765  0F26                     	;# 
  2766  0F27                     	;# 
  2767  0F28                     	;# 
  2768  0F29                     	;# 
  2769  0F2A                     	;# 
  2770  0F2B                     	;# 
  2771  0F2C                     	;# 
  2772  0F2D                     	;# 
  2773  0F2E                     	;# 
  2774  0F2F                     	;# 
  2775  0F30                     	;# 
  2776  0F31                     	;# 
  2777  0F32                     	;# 
  2778  0F33                     	;# 
  2779  0F34                     	;# 
  2780  0F35                     	;# 
  2781  0F36                     	;# 
  2782  0F37                     	;# 
  2783  0FE4                     	;# 
  2784  0FE5                     	;# 
  2785  0FE6                     	;# 
  2786  0FE7                     	;# 
  2787  0FE8                     	;# 
  2788  0FE9                     	;# 
  2789  0FEA                     	;# 
  2790  0FEB                     	;# 
  2791  0FED                     	;# 
  2792  0FEE                     	;# 
  2793  0FEF                     	;# 
  2794  0000                     	;# 
  2795  0001                     	;# 
  2796  0002                     	;# 
  2797  0003                     	;# 
  2798  0004                     	;# 
  2799  0005                     	;# 
  2800  0006                     	;# 
  2801  0007                     	;# 
  2802  0008                     	;# 
  2803  0009                     	;# 
  2804  000A                     	;# 
  2805  000B                     	;# 
  2806  000C                     	;# 
  2807  000E                     	;# 
  2808  0010                     	;# 
  2809  0011                     	;# 
  2810  0012                     	;# 
  2811  0013                     	;# 
  2812  0014                     	;# 
  2813  0015                     	;# 
  2814  0015                     	;# 
  2815  0016                     	;# 
  2816  0016                     	;# 
  2817  0017                     	;# 
  2818  0018                     	;# 
  2819  0019                     	;# 
  2820  0019                     	;# 
  2821  001A                     	;# 
  2822  001B                     	;# 
  2823  001C                     	;# 
  2824  001D                     	;# 
  2825  001E                     	;# 
  2826  001F                     	;# 
  2827  008C                     	;# 
  2828  008E                     	;# 
  2829  0090                     	;# 
  2830  0091                     	;# 
  2831  0092                     	;# 
  2832  0093                     	;# 
  2833  0094                     	;# 
  2834  0097                     	;# 
  2835  009B                     	;# 
  2836  009B                     	;# 
  2837  009C                     	;# 
  2838  009D                     	;# 
  2839  009E                     	;# 
  2840  009F                     	;# 
  2841  010C                     	;# 
  2842  010E                     	;# 
  2843  0111                     	;# 
  2844  0112                     	;# 
  2845  0113                     	;# 
  2846  0114                     	;# 
  2847  0115                     	;# 
  2848  0116                     	;# 
  2849  0117                     	;# 
  2850  0118                     	;# 
  2851  0119                     	;# 
  2852  018C                     	;# 
  2853  018E                     	;# 
  2854  0197                     	;# 
  2855  0199                     	;# 
  2856  0199                     	;# 
  2857  0199                     	;# 
  2858  019A                     	;# 
  2859  019A                     	;# 
  2860  019A                     	;# 
  2861  019B                     	;# 
  2862  019B                     	;# 
  2863  019B                     	;# 
  2864  019B                     	;# 
  2865  019B                     	;# 
  2866  019C                     	;# 
  2867  019C                     	;# 
  2868  019C                     	;# 
  2869  019D                     	;# 
  2870  019D                     	;# 
  2871  019D                     	;# 
  2872  019E                     	;# 
  2873  019E                     	;# 
  2874  019E                     	;# 
  2875  019F                     	;# 
  2876  019F                     	;# 
  2877  019F                     	;# 
  2878  019F                     	;# 
  2879  019F                     	;# 
  2880  020C                     	;# 
  2881  020E                     	;# 
  2882  0211                     	;# 
  2883  0211                     	;# 
  2884  0212                     	;# 
  2885  0212                     	;# 
  2886  0213                     	;# 
  2887  0213                     	;# 
  2888  0214                     	;# 
  2889  0214                     	;# 
  2890  0215                     	;# 
  2891  0215                     	;# 
  2892  0215                     	;# 
  2893  0215                     	;# 
  2894  0216                     	;# 
  2895  0216                     	;# 
  2896  0217                     	;# 
  2897  0217                     	;# 
  2898  0219                     	;# 
  2899  021A                     	;# 
  2900  021B                     	;# 
  2901  021C                     	;# 
  2902  021D                     	;# 
  2903  021D                     	;# 
  2904  021E                     	;# 
  2905  021F                     	;# 
  2906  028C                     	;# 
  2907  028E                     	;# 
  2908  0291                     	;# 
  2909  0291                     	;# 
  2910  0292                     	;# 
  2911  0293                     	;# 
  2912  0294                     	;# 
  2913  0295                     	;# 
  2914  0295                     	;# 
  2915  0296                     	;# 
  2916  0297                     	;# 
  2917  0298                     	;# 
  2918  029F                     	;# 
  2919  030C                     	;# 
  2920  030E                     	;# 
  2921  0311                     	;# 
  2922  0311                     	;# 
  2923  0312                     	;# 
  2924  0313                     	;# 
  2925  0314                     	;# 
  2926  0315                     	;# 
  2927  0315                     	;# 
  2928  0316                     	;# 
  2929  0317                     	;# 
  2930  0318                     	;# 
  2931  038C                     	;# 
  2932  038E                     	;# 
  2933  0391                     	;# 
  2934  0392                     	;# 
  2935  0393                     	;# 
  2936  0397                     	;# 
  2937  0398                     	;# 
  2938  0399                     	;# 
  2939  039A                     	;# 
  2940  039C                     	;# 
  2941  039D                     	;# 
  2942  039E                     	;# 
  2943  039F                     	;# 
  2944  0411                     	;# 
  2945  0411                     	;# 
  2946  0412                     	;# 
  2947  0413                     	;# 
  2948  0414                     	;# 
  2949  0415                     	;# 
  2950  0416                     	;# 
  2951  0417                     	;# 
  2952  0418                     	;# 
  2953  0418                     	;# 
  2954  0419                     	;# 
  2955  041A                     	;# 
  2956  041B                     	;# 
  2957  041C                     	;# 
  2958  041D                     	;# 
  2959  041E                     	;# 
  2960  041F                     	;# 
  2961  0498                     	;# 
  2962  0498                     	;# 
  2963  0499                     	;# 
  2964  049A                     	;# 
  2965  049B                     	;# 
  2966  049B                     	;# 
  2967  049C                     	;# 
  2968  049D                     	;# 
  2969  049E                     	;# 
  2970  049F                     	;# 
  2971  0617                     	;# 
  2972  0618                     	;# 
  2973  0619                     	;# 
  2974  0619                     	;# 
  2975  061A                     	;# 
  2976  061B                     	;# 
  2977  061C                     	;# 
  2978  061C                     	;# 
  2979  061F                     	;# 
  2980  0691                     	;# 
  2981  0692                     	;# 
  2982  0693                     	;# 
  2983  0694                     	;# 
  2984  0695                     	;# 
  2985  0696                     	;# 
  2986  0697                     	;# 
  2987  0698                     	;# 
  2988  0699                     	;# 
  2989  0711                     	;# 
  2990  0712                     	;# 
  2991  0713                     	;# 
  2992  0714                     	;# 
  2993  0715                     	;# 
  2994  0716                     	;# 
  2995  0717                     	;# 
  2996  0718                     	;# 
  2997  0719                     	;# 
  2998  0891                     	;# 
  2999  0891                     	;# 
  3000  0891                     	;# 
  3001  0891                     	;# 
  3002  0891                     	;# 
  3003  0891                     	;# 
  3004  0892                     	;# 
  3005  0892                     	;# 
  3006  0892                     	;# 
  3007  0893                     	;# 
  3008  0893                     	;# 
  3009  0893                     	;# 
  3010  0893                     	;# 
  3011  0893                     	;# 
  3012  0893                     	;# 
  3013  0894                     	;# 
  3014  0894                     	;# 
  3015  0894                     	;# 
  3016  0895                     	;# 
  3017  0895                     	;# 
  3018  0895                     	;# 
  3019  0896                     	;# 
  3020  0896                     	;# 
  3021  0896                     	;# 
  3022  089B                     	;# 
  3023  0911                     	;# 
  3024  0912                     	;# 
  3025  0913                     	;# 
  3026  0914                     	;# 
  3027  0915                     	;# 
  3028  0916                     	;# 
  3029  0918                     	;# 
  3030  0919                     	;# 
  3031  091A                     	;# 
  3032  091B                     	;# 
  3033  091C                     	;# 
  3034  091D                     	;# 
  3035  091E                     	;# 
  3036  091F                     	;# 
  3037  0E0F                     	;# 
  3038  0E10                     	;# 
  3039  0E11                     	;# 
  3040  0E12                     	;# 
  3041  0E13                     	;# 
  3042  0E14                     	;# 
  3043  0E15                     	;# 
  3044  0E16                     	;# 
  3045  0E17                     	;# 
  3046  0E18                     	;# 
  3047  0E19                     	;# 
  3048  0E1A                     	;# 
  3049  0E1B                     	;# 
  3050  0E1C                     	;# 
  3051  0E1D                     	;# 
  3052  0E1E                     	;# 
  3053  0E1F                     	;# 
  3054  0E20                     	;# 
  3055  0E21                     	;# 
  3056  0E22                     	;# 
  3057  0E24                     	;# 
  3058  0E25                     	;# 
  3059  0E28                     	;# 
  3060  0E29                     	;# 
  3061  0E2A                     	;# 
  3062  0E2B                     	;# 
  3063  0E2C                     	;# 
  3064  0E2D                     	;# 
  3065  0E2E                     	;# 
  3066  0E2F                     	;# 
  3067  0E90                     	;# 
  3068  0E91                     	;# 
  3069  0E92                     	;# 
  3070  0E94                     	;# 
  3071  0E95                     	;# 
  3072  0EA0                     	;# 
  3073  0EA1                     	;# 
  3074  0EA2                     	;# 
  3075  0EA3                     	;# 
  3076  0EA4                     	;# 
  3077  0EA5                     	;# 
  3078  0F0F                     	;# 
  3079  0F10                     	;# 
  3080  0F11                     	;# 
  3081  0F12                     	;# 
  3082  0F13                     	;# 
  3083  0F14                     	;# 
  3084  0F15                     	;# 
  3085  0F16                     	;# 
  3086  0F17                     	;# 
  3087  0F18                     	;# 
  3088  0F19                     	;# 
  3089  0F1A                     	;# 
  3090  0F1B                     	;# 
  3091  0F1C                     	;# 
  3092  0F1D                     	;# 
  3093  0F1E                     	;# 
  3094  0F1F                     	;# 
  3095  0F20                     	;# 
  3096  0F21                     	;# 
  3097  0F22                     	;# 
  3098  0F23                     	;# 
  3099  0F24                     	;# 
  3100  0F25                     	;# 
  3101  0F26                     	;# 
  3102  0F27                     	;# 
  3103  0F28                     	;# 
  3104  0F29                     	;# 
  3105  0F2A                     	;# 
  3106  0F2B                     	;# 
  3107  0F2C                     	;# 
  3108  0F2D                     	;# 
  3109  0F2E                     	;# 
  3110  0F2F                     	;# 
  3111  0F30                     	;# 
  3112  0F31                     	;# 
  3113  0F32                     	;# 
  3114  0F33                     	;# 
  3115  0F34                     	;# 
  3116  0F35                     	;# 
  3117  0F36                     	;# 
  3118  0F37                     	;# 
  3119  0FE4                     	;# 
  3120  0FE5                     	;# 
  3121  0FE6                     	;# 
  3122  0FE7                     	;# 
  3123  0FE8                     	;# 
  3124  0FE9                     	;# 
  3125  0FEA                     	;# 
  3126  0FEB                     	;# 
  3127  0FED                     	;# 
  3128  0FEE                     	;# 
  3129  0FEF                     	;_stage_stash
  3130                           
  3131                           	psect	idataBANK1
  3132  0E38                     __pidataBANK1:	
  3133                           
  3134                           ;initializer for InitLowerPattern@F476
  3135  0E38  3400               	retlw	0
  3136  0E39  3400               	retlw	0
  3137  0E3A  3400               	retlw	0
  3138  0E3B  3401               	retlw	1
  3139                           
  3140                           ;initializer for InitLowerPattern@F473
  3141  0E3C  3400               	retlw	0
  3142  0E3D  3400               	retlw	0
  3143  0E3E  3401               	retlw	1
  3144  0E3F  3400               	retlw	0
  3145                           
  3146                           ;initializer for InitUpperLowerPattern@F464
  3147  0E40  3400               	retlw	0
  3148  0E41  3400               	retlw	0
  3149  0E42  3401               	retlw	1
  3150  0E43  3401               	retlw	1
  3151                           
  3152                           ;initializer for InitUpperLowerPattern@F461
  3153  0E44  3401               	retlw	1
  3154  0E45  3401               	retlw	1
  3155  0E46  3400               	retlw	0
  3156  0E47  3400               	retlw	0
  3157                           
  3158                           ;initializer for InitXStrobePattern@F452
  3159  0E48  3400               	retlw	0
  3160  0E49  3401               	retlw	1
  3161  0E4A  3401               	retlw	1
  3162  0E4B  3400               	retlw	0
  3163                           
  3164                           ;initializer for InitXStrobePattern@F449
  3165  0E4C  3401               	retlw	1
  3166  0E4D  3400               	retlw	0
  3167  0E4E  3400               	retlw	0
  3168  0E4F  3401               	retlw	1
  3169                           
  3170                           ;initializer for InitWigwagPattern@F440
  3171  0E50  3400               	retlw	0
  3172  0E51  3401               	retlw	1
  3173  0E52  3400               	retlw	0
  3174  0E53  3401               	retlw	1
  3175                           
  3176                           ;initializer for InitWigwagPattern@F437
  3177  0E54  3401               	retlw	1
  3178  0E55  3400               	retlw	0
  3179  0E56  3401               	retlw	1
  3180  0E57  3400               	retlw	0
  3181                           
  3182                           	psect	nvCOMMON
  3183  007A                     __pnvCOMMON:	
  3184  007A                     _timer1ReloadVal:	
  3185  007A                     	ds	2
  3186                           
  3187                           	psect	nvBANK0
  3188  006E                     __pnvBANK0:	
  3189  006E                     _IOCCF0_InterruptHandler:	
  3190  006E                     	ds	2
  3191                           
  3192                           	psect	nvBANK1
  3193  00ED                     __pnvBANK1:	
  3194  00ED                     _TMR1_InterruptHandler:	
  3195  00ED                     	ds	2
  3196  000E                     _PORTCbits	set	14
  3197  001C                     _T1GCONbits	set	28
  3198  001B                     _T1CONbits	set	27
  3199  0019                     _TMR1L	set	25
  3200  001A                     _TMR1H	set	26
  3201  001C                     _T1GCON	set	28
  3202  0011                     _PIR1bits	set	17
  3203  000B                     _INTCONbits	set	11
  3204  0010                     _PIR0bits	set	16
  3205  0091                     _PIE1bits	set	145
  3206  0090                     _PIE0bits	set	144
  3207  008E                     _TRISC	set	142
  3208  008C                     _TRISA	set	140
  3209  0097                     _WDTCON	set	151
  3210  010E                     _LATCbits	set	270
  3211  010E                     _LATC	set	270
  3212  010C                     _LATA	set	268
  3213  018C                     _ANSELA	set	396
  3214  018E                     _ANSELC	set	398
  3215  020E                     _WPUC	set	526
  3216  020C                     _WPUA	set	524
  3217  028E                     _ODCONC	set	654
  3218  028C                     _ODCONA	set	652
  3219  030E                     _SLRCONC	set	782
  3220  030C                     _SLRCONA	set	780
  3221  0397                     _IOCCPbits	set	919
  3222  0398                     _IOCCNbits	set	920
  3223  0399                     _IOCCFbits	set	921
  3224  038E                     _INLVLC	set	910
  3225  038C                     _INLVLA	set	908
  3226  0916                     _PMD5	set	2326
  3227  0915                     _PMD4	set	2325
  3228  0914                     _PMD3	set	2324
  3229  0913                     _PMD2	set	2323
  3230  0912                     _PMD1	set	2322
  3231  0911                     _PMD0	set	2321
  3232  091E                     _OSCTUNE	set	2334
  3233  091F                     _OSCFRQ	set	2335
  3234  091D                     _OSCEN	set	2333
  3235  091B                     _OSCCON3	set	2331
  3236  0919                     _OSCCON1	set	2329
  3237                           
  3238                           ; #config settings
  3239  0000                     
  3240                           	psect	cinit
  3241  002A                     start_initialization:	
  3242  002A                     __initialization:		;BIGRAM
  3243                           
  3244                           ; Initialize objects allocated to BANK1
  3245  002A  3038               	movlw	low __pidataBANK1
  3246  002B  0084               	movwf	4
  3247  002C  308E               	movlw	(high __pidataBANK1)| (0+128)
  3248  002D  0085               	movwf	5
  3249  002E  30CD               	movlw	low __pdataBANK1
  3250  002F  0086               	movwf	6
  3251  0030  3000               	movlw	high __pdataBANK1
  3252  0031  0087               	movwf	7
  3253  0032  3000               	movlw	0
  3254  0033  00FF               	movwf	btemp+1
  3255  0034  3020               	movlw	32
  3256  0035  318D  256C  3180   	fcall	init_ram
  3257                           
  3258                           ; Clear objects allocated to BIGRAM
  3259  0038  30F0               	movlw	low (0+8432)
  3260  0039  0084               	movwf	4
  3261  003A  3020               	movlw	high (0+8432)
  3262  003B  0085               	movwf	5
  3263  003C  3000               	movlw	0
  3264  003D  00FE               	movwf	btemp
  3265  003E  3003               	movlw	3
  3266  003F  00FF               	movwf	btemp+1
  3267  0040  318D  2560  3180   	fcall	clear_ram0
  3268                           
  3269                           ; Clear objects allocated to COMMON
  3270  0043  01F6               	clrf	__pbssCOMMON& (0+127)
  3271  0044  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  3272  0045  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  3273  0046  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  3274                           
  3275                           ; Clear objects allocated to BANK0
  3276  0047  3062               	movlw	low __pbssBANK0
  3277  0048  0084               	movwf	4
  3278  0049  3000               	movlw	high __pbssBANK0
  3279  004A  0085               	movwf	5
  3280  004B  300C               	movlw	12
  3281  004C  00FE               	movwf	btemp
  3282  004D  3000               	movlw	0
  3283  004E  00FF               	movwf	btemp+1
  3284  004F  318D  2560  3180   	fcall	clear_ram0
  3285                           
  3286                           ; Clear objects allocated to BANK1
  3287  0052  30A0               	movlw	low __pbssBANK1
  3288  0053  0084               	movwf	4
  3289  0054  3000               	movlw	high __pbssBANK1
  3290  0055  0085               	movwf	5
  3291  0056  302D               	movlw	45
  3292  0057  00FE               	movwf	btemp
  3293  0058  3000               	movlw	0
  3294  0059  00FF               	movwf	btemp+1
  3295  005A  318D  2560  3180   	fcall	clear_ram0
  3296  005D                     end_of_initialization:	
  3297                           ;End of C runtime variable initialization code
  3298                           
  3299  005D                     __end_of__initialization:	
  3300  005D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3301  005E  0020               	movlb	0
  3302  005F  318E  2EF1         	ljmp	_main	;jump to C main() function
  3303                           
  3304                           	psect	bssCOMMON
  3305  0076                     __pbssCOMMON:	
  3306  0076                     _temp_ms:	
  3307  0076                     	ds	2
  3308  0078                     _cur_pc_input_state:	
  3309  0078                     	ds	1
  3310  0079                     _ts_trigger:	
  3311  0079                     	ds	1
  3312                           
  3313                           	psect	bssBANK0
  3314  0062                     __pbssBANK0:	
  3315  0062                     _cur_ms:	
  3316  0062                     	ds	4
  3317  0066                     _start_time:	
  3318  0066                     	ds	2
  3319  0068                     _pattern_list_iter:	
  3320  0068                     	ds	2
  3321  006A                     _stage_list_iter:	
  3322  006A                     	ds	2
  3323  006C                     _update_stage:	
  3324  006C                     	ds	1
  3325  006D                     _last_pc_input_state:	
  3326  006D                     	ds	1
  3327                           
  3328                           	psect	bssBANK1
  3329  00A0                     __pbssBANK1:	
  3330  00A0                     NewStage@F418:	
  3331  00A0                     	ds	4
  3332  00A4                     _ts_trigger_time:	
  3333  00A4                     	ds	4
  3334  00A8                     _pattern_selector:	
  3335  00A8                     	ds	19
  3336  00BB                     _pattern_stash:	
  3337  00BB                     	ds	18
  3338                           
  3339                           	psect	dataBANK1
  3340  00CD                     __pdataBANK1:	
  3341  00CD                     InitLowerPattern@F476:	
  3342  00CD                     	ds	4
  3343  00D1                     InitLowerPattern@F473:	
  3344  00D1                     	ds	4
  3345  00D5                     InitUpperLowerPattern@F464:	
  3346  00D5                     	ds	4
  3347  00D9                     InitUpperLowerPattern@F461:	
  3348  00D9                     	ds	4
  3349  00DD                     InitXStrobePattern@F452:	
  3350  00DD                     	ds	4
  3351  00E1                     InitXStrobePattern@F449:	
  3352  00E1                     	ds	4
  3353  00E5                     InitWigwagPattern@F440:	
  3354  00E5                     	ds	4
  3355  00E9                     InitWigwagPattern@F437:	
  3356  00E9                     	ds	4
  3357                           
  3358                           	psect	inittext
  3359  0D6C                     init_ram:	
  3360  0D6C  00FE               	movwf	btemp
  3361  0D6D                     initloop:	
  3362  0D6D  0012               	moviw fsr0++
  3363  0D6E  001E               	movwi fsr1++
  3364  0D6F  3001               	movlw	1
  3365  0D70  02FE               	subwf	btemp,f
  3366  0D71  3000               	movlw	0
  3367  0D72  3BFF               	subwfb	btemp+1,f
  3368  0D73  087F               	movf	btemp+1,w
  3369  0D74  047E               	iorwf	btemp,w
  3370  0D75  1D03               	skipz
  3371  0D76  2D6D               	goto	initloop
  3372  0D77  3400               	retlw	0
  3373                           
  3374                           	psect	clrtext
  3375  0D60                     clear_ram0:	
  3376                           ;	Called with FSR0 containing the base address, and
  3377                           ;	btemp/btemp+1 has the size to clear
  3378                           
  3379  0D60  0064               	clrwdt	;clear the watchdog before getting into this loop
  3380  0D61                     clrloop0:	
  3381  0D61  0180               	clrf	0	;clear RAM location pointed to by FSR
  3382  0D62  3101               	addfsr 0,1
  3383  0D63  3001               	movlw	1
  3384  0D64  02FE               	subwf	btemp,f
  3385  0D65  3000               	movlw	0
  3386  0D66  3BFF               	subwfb	btemp+1,f
  3387  0D67  087F               	movf	btemp+1,w
  3388  0D68  047E               	iorwf	btemp,w
  3389  0D69  1D03               	skipz
  3390  0D6A  2D61               	goto	clrloop0	;have we reached the end yet?
  3391  0D6B  3400               	retlw	0	;all done for this memory range, return
  3392                           
  3393                           	psect	cstackBANK2
  3394  0120                     __pcstackBANK2:	
  3395  0120                     InitPatternSelector@i:	
  3396                           
  3397                           ; 2 bytes @ 0x0
  3398  0120                     	ds	2
  3399                           
  3400                           	psect	cstackCOMMON
  3401  0070                     __pcstackCOMMON:	
  3402  0070                     ?_PMD_Initialize:	
  3403  0070                     ?_PIN_MANAGER_Initialize:	
  3404                           ; 1 bytes @ 0x0
  3405                           
  3406  0070                     ?_OSCILLATOR_Initialize:	
  3407                           ; 1 bytes @ 0x0
  3408                           
  3409  0070                     ?_WDT_Initialize:	
  3410                           ; 1 bytes @ 0x0
  3411                           
  3412  0070                     ?_TMR1_Initialize:	
  3413                           ; 1 bytes @ 0x0
  3414                           
  3415  0070                     ?_TripTurnSignal:	
  3416                           ; 1 bytes @ 0x0
  3417                           
  3418  0070                     ?_IOCCF0_ISR:	
  3419                           ; 1 bytes @ 0x0
  3420                           
  3421  0070                     ?_TMR1_ISR:	
  3422                           ; 1 bytes @ 0x0
  3423                           
  3424  0070                     ?_TMR1_DefaultInterruptHandler:	
  3425                           ; 1 bytes @ 0x0
  3426                           
  3427  0070                     ??_TMR1_DefaultInterruptHandler:	
  3428                           ; 1 bytes @ 0x0
  3429                           
  3430  0070                     ?_SetOutputs:	
  3431                           ; 1 bytes @ 0x0
  3432                           
  3433  0070                     ?_TurnSignalDone:	
  3434                           ; 1 bytes @ 0x0
  3435                           
  3436  0070                     ?_PatternCycleInputChanged:	
  3437                           ; 1 bytes @ 0x0
  3438                           
  3439  0070                     ?_FlashPattern:	
  3440                           ; 1 bytes @ 0x0
  3441                           
  3442  0070                     ?_SYSTEM_Initialize:	
  3443                           ; 1 bytes @ 0x0
  3444                           
  3445  0070                     ?_PIN_MANAGER_IOC:	
  3446                           ; 1 bytes @ 0x0
  3447                           
  3448  0070                     ?_INTERRUPT_InterruptManager:	
  3449                           ; 1 bytes @ 0x0
  3450                           
  3451  0070                     ?_TMR1_StartTimer:	
  3452                           ; 1 bytes @ 0x0
  3453                           
  3454  0070                     ?_TMR1_WriteTimer:	
  3455                           ; 1 bytes @ 0x0
  3456                           
  3457  0070                     ?_setup:	
  3458                           ; 1 bytes @ 0x0
  3459                           
  3460  0070                     ?_main:	
  3461                           ; 1 bytes @ 0x0
  3462                           
  3463  0070                     ?i1_SetLight:	
  3464                           ; 1 bytes @ 0x0
  3465                           
  3466  0070                     ?i1_SetOutputs:	
  3467                           ; 1 bytes @ 0x0
  3468                           
  3469  0070                     ?i1_ms:	
  3470                           ; 1 bytes @ 0x0
  3471                           
  3472  0070                     i1SetLight@state:	
  3473                           ; 4 bytes @ 0x0
  3474                           
  3475  0070                     TMR1_WriteTimer@timerVal:	
  3476                           ; 1 bytes @ 0x0
  3477                           
  3478                           
  3479                           ; 2 bytes @ 0x0
  3480  0070                     	ds	1
  3481  0071                     ??i1_SetLight:	
  3482                           
  3483                           ; 1 bytes @ 0x1
  3484  0071                     	ds	1
  3485  0072                     ??_TMR1_ISR:	
  3486  0072                     ??_TMR1_WriteTimer:	
  3487                           ; 1 bytes @ 0x2
  3488                           
  3489                           
  3490                           ; 1 bytes @ 0x2
  3491  0072                     	ds	1
  3492  0073                     i1SetLight@light:	
  3493                           
  3494                           ; 1 bytes @ 0x3
  3495  0073                     	ds	1
  3496  0074                     ??i1_SetOutputs:	
  3497  0074                     ??i1_ms:	
  3498                           ; 1 bytes @ 0x4
  3499                           
  3500                           
  3501                           ; 1 bytes @ 0x4
  3502  0074                     	ds	1
  3503  0075                     i1SetOutputs@state:	
  3504                           
  3505                           ; 1 bytes @ 0x5
  3506  0075                     	ds	1
  3507  0076                     ??_TripTurnSignal:	
  3508  0076                     ??_IOCCF0_ISR:	
  3509                           ; 1 bytes @ 0x6
  3510                           
  3511  0076                     ??_PIN_MANAGER_IOC:	
  3512                           ; 1 bytes @ 0x6
  3513                           
  3514  0076                     ??_INTERRUPT_InterruptManager:	
  3515                           ; 1 bytes @ 0x6
  3516                           
  3517                           
  3518                           	psect	cstackBANK0
  3519  0020                     __pcstackBANK0:	
  3520                           ; 1 bytes @ 0x6
  3521                           
  3522  0020                     ??_PMD_Initialize:	
  3523  0020                     ??_OSCILLATOR_Initialize:	
  3524                           ; 1 bytes @ 0x0
  3525                           
  3526  0020                     ??_WDT_Initialize:	
  3527                           ; 1 bytes @ 0x0
  3528                           
  3529  0020                     ?_IOCCF0_SetInterruptHandler:	
  3530                           ; 1 bytes @ 0x0
  3531                           
  3532  0020                     ?_TMR1_SetInterruptHandler:	
  3533                           ; 1 bytes @ 0x0
  3534                           
  3535  0020                     ??_PatternCycleInputChanged:	
  3536                           ; 1 bytes @ 0x0
  3537                           
  3538  0020                     ??_TMR1_StartTimer:	
  3539                           ; 1 bytes @ 0x0
  3540                           
  3541  0020                     ?_SetLight:	
  3542                           ; 1 bytes @ 0x0
  3543                           
  3544  0020                     ?_AssignLightStates:	
  3545                           ; 1 bytes @ 0x0
  3546                           
  3547  0020                     ?_NextPattern:	
  3548                           ; 1 bytes @ 0x0
  3549                           
  3550  0020                     ?_NewStage:	
  3551                           ; 2 bytes @ 0x0
  3552                           
  3553  0020                     ?___wmul:	
  3554                           ; 2 bytes @ 0x0
  3555                           
  3556  0020                     ?_ms:	
  3557                           ; 2 bytes @ 0x0
  3558                           
  3559  0020                     SetLight@state:	
  3560                           ; 4 bytes @ 0x0
  3561                           
  3562  0020                     IOCCF0_SetInterruptHandler@InterruptHandler:	
  3563                           ; 1 bytes @ 0x0
  3564                           
  3565  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  3566                           ; 2 bytes @ 0x0
  3567                           
  3568  0020                     NextPattern@p_selector:	
  3569                           ; 2 bytes @ 0x0
  3570                           
  3571  0020                     AssignLightStates@stage:	
  3572                           ; 2 bytes @ 0x0
  3573                           
  3574  0020                     ___wmul@multiplier:	
  3575                           ; 2 bytes @ 0x0
  3576                           
  3577                           
  3578                           ; 2 bytes @ 0x0
  3579  0020                     	ds	1
  3580  0021                     ??_SetLight:	
  3581                           
  3582                           ; 1 bytes @ 0x1
  3583  0021                     	ds	1
  3584  0022                     ??_PIN_MANAGER_Initialize:	
  3585  0022                     ??_TMR1_Initialize:	
  3586                           ; 1 bytes @ 0x2
  3587                           
  3588  0022                     ??_IOCCF0_SetInterruptHandler:	
  3589                           ; 1 bytes @ 0x2
  3590                           
  3591  0022                     ??_TMR1_SetInterruptHandler:	
  3592                           ; 1 bytes @ 0x2
  3593                           
  3594  0022                     ??_NextPattern:	
  3595                           ; 1 bytes @ 0x2
  3596                           
  3597  0022                     ??_SYSTEM_Initialize:	
  3598                           ; 1 bytes @ 0x2
  3599                           
  3600  0022                     AssignLightStates@states:	
  3601                           ; 1 bytes @ 0x2
  3602                           
  3603  0022                     PatternCycleInputChanged@delay_count:	
  3604                           ; 1 bytes @ 0x2
  3605                           
  3606  0022                     ___wmul@multiplicand:	
  3607                           ; 2 bytes @ 0x2
  3608                           
  3609                           
  3610                           ; 2 bytes @ 0x2
  3611  0022                     	ds	1
  3612  0023                     ??_AssignLightStates:	
  3613  0023                     SetLight@light:	
  3614                           ; 1 bytes @ 0x3
  3615                           
  3616                           
  3617                           ; 1 bytes @ 0x3
  3618  0023                     	ds	1
  3619  0024                     ??_SetOutputs:	
  3620  0024                     ??_FlashPattern:	
  3621                           ; 1 bytes @ 0x4
  3622                           
  3623  0024                     ??_ms:	
  3624                           ; 1 bytes @ 0x4
  3625                           
  3626  0024                     ??___wmul:	
  3627                           ; 1 bytes @ 0x4
  3628                           
  3629  0024                     ?_abs:	
  3630                           ; 1 bytes @ 0x4
  3631                           
  3632  0024                     ___wmul@product:	
  3633                           ; 2 bytes @ 0x4
  3634                           
  3635  0024                     abs@a:	
  3636                           ; 2 bytes @ 0x4
  3637                           
  3638                           
  3639                           ; 2 bytes @ 0x4
  3640  0024                     	ds	1
  3641  0025                     SetOutputs@state:	
  3642                           
  3643                           ; 1 bytes @ 0x5
  3644  0025                     	ds	1
  3645  0026                     ??_abs:	
  3646                           
  3647                           ; 1 bytes @ 0x6
  3648  0026                     	ds	1
  3649  0027                     AssignLightStates@i:	
  3650                           
  3651                           ; 2 bytes @ 0x7
  3652  0027                     	ds	1
  3653  0028                     ??_TurnSignalDone:	
  3654  0028                     ?_NewPattern:	
  3655                           ; 1 bytes @ 0x8
  3656                           
  3657                           
  3658                           ; 2 bytes @ 0x8
  3659  0028                     	ds	1
  3660  0029                     ??_NewStage:	
  3661                           
  3662                           ; 1 bytes @ 0x9
  3663  0029                     	ds	4
  3664  002D                     NewStage@init_states:	
  3665                           
  3666                           ; 4 bytes @ 0xD
  3667  002D                     	ds	1
  3668  002E                     FlashPattern@current_time:	
  3669                           
  3670                           ; 2 bytes @ 0xE
  3671  002E                     	ds	3
  3672  0031                     NewStage@new_stage:	
  3673                           
  3674                           ; 2 bytes @ 0x11
  3675  0031                     	ds	2
  3676  0033                     ??_NewPattern:	
  3677  0033                     ?_ConstructStage:	
  3678                           ; 1 bytes @ 0x13
  3679                           
  3680  0033                     ?_CopyStageData:	
  3681                           ; 2 bytes @ 0x13
  3682                           
  3683  0033                     ConstructStage@time_ms:	
  3684                           ; 2 bytes @ 0x13
  3685                           
  3686  0033                     CopyStageData@dest:	
  3687                           ; 2 bytes @ 0x13
  3688                           
  3689                           
  3690                           ; 2 bytes @ 0x13
  3691  0033                     	ds	2
  3692  0035                     ConstructStage@next:	
  3693  0035                     NewPattern@new_pattern:	
  3694                           ; 1 bytes @ 0x15
  3695                           
  3696  0035                     CopyStageData@source:	
  3697                           ; 2 bytes @ 0x15
  3698                           
  3699                           
  3700                           ; 2 bytes @ 0x15
  3701  0035                     	ds	1
  3702  0036                     ??_ConstructStage:	
  3703                           
  3704                           ; 1 bytes @ 0x16
  3705  0036                     	ds	1
  3706  0037                     ??_CopyStageData:	
  3707  0037                     ConstructStage@states:	
  3708                           ; 1 bytes @ 0x17
  3709                           
  3710                           
  3711                           ; 1 bytes @ 0x17
  3712  0037                     	ds	1
  3713  0038                     ConstructStage@new_stage:	
  3714                           
  3715                           ; 2 bytes @ 0x18
  3716  0038                     	ds	2
  3717  003A                     CopyStageData@i:	
  3718                           
  3719                           ; 2 bytes @ 0x1A
  3720  003A                     	ds	2
  3721  003C                     ?_AppendStage:	
  3722  003C                     AppendStage@head:	
  3723                           ; 1 bytes @ 0x1C
  3724                           
  3725                           
  3726                           ; 2 bytes @ 0x1C
  3727  003C                     	ds	2
  3728  003E                     AppendStage@new_stage:	
  3729                           
  3730                           ; 2 bytes @ 0x1E
  3731  003E                     	ds	2
  3732  0040                     ??_AppendStage:	
  3733                           
  3734                           ; 1 bytes @ 0x20
  3735  0040                     	ds	2
  3736  0042                     AppendStage@last_stage:	
  3737                           
  3738                           ; 2 bytes @ 0x22
  3739  0042                     	ds	2
  3740  0044                     ?_InitWigwagPattern:	
  3741  0044                     ?_InitXStrobePattern:	
  3742                           ; 1 bytes @ 0x24
  3743                           
  3744  0044                     ?_InitUpperLowerPattern:	
  3745                           ; 1 bytes @ 0x24
  3746                           
  3747  0044                     ?_InitLowerPattern:	
  3748                           ; 1 bytes @ 0x24
  3749                           
  3750  0044                     InitWigwagPattern@pattern:	
  3751                           ; 1 bytes @ 0x24
  3752                           
  3753  0044                     InitXStrobePattern@pattern:	
  3754                           ; 2 bytes @ 0x24
  3755                           
  3756  0044                     InitUpperLowerPattern@pattern:	
  3757                           ; 2 bytes @ 0x24
  3758                           
  3759  0044                     InitLowerPattern@pattern:	
  3760                           ; 2 bytes @ 0x24
  3761                           
  3762                           
  3763                           ; 2 bytes @ 0x24
  3764  0044                     	ds	2
  3765  0046                     ??_InitWigwagPattern:	
  3766  0046                     ??_InitXStrobePattern:	
  3767                           ; 1 bytes @ 0x26
  3768                           
  3769  0046                     ??_InitUpperLowerPattern:	
  3770                           ; 1 bytes @ 0x26
  3771                           
  3772  0046                     ??_InitLowerPattern:	
  3773                           ; 1 bytes @ 0x26
  3774                           
  3775                           
  3776                           ; 1 bytes @ 0x26
  3777  0046                     	ds	1
  3778  0047                     InitWigwagPattern@left_side_states:	
  3779  0047                     InitXStrobePattern@diag_1_4_states:	
  3780                           ; 4 bytes @ 0x27
  3781                           
  3782  0047                     InitUpperLowerPattern@upper_states:	
  3783                           ; 4 bytes @ 0x27
  3784                           
  3785  0047                     InitLowerPattern@lower_left_states:	
  3786                           ; 4 bytes @ 0x27
  3787                           
  3788                           
  3789                           ; 4 bytes @ 0x27
  3790  0047                     	ds	4
  3791  004B                     InitWigwagPattern@right_side_states:	
  3792  004B                     InitXStrobePattern@diag_2_3_states:	
  3793                           ; 4 bytes @ 0x2B
  3794                           
  3795  004B                     InitUpperLowerPattern@lower_states:	
  3796                           ; 4 bytes @ 0x2B
  3797                           
  3798  004B                     InitLowerPattern@lower_right_states:	
  3799                           ; 4 bytes @ 0x2B
  3800                           
  3801                           
  3802                           ; 4 bytes @ 0x2B
  3803  004B                     	ds	4
  3804  004F                     InitWigwagPattern@left_side_on:	
  3805  004F                     InitXStrobePattern@diag_1_4:	
  3806                           ; 2 bytes @ 0x2F
  3807                           
  3808  004F                     InitUpperLowerPattern@upper:	
  3809                           ; 2 bytes @ 0x2F
  3810                           
  3811  004F                     InitLowerPattern@lower_left:	
  3812                           ; 2 bytes @ 0x2F
  3813                           
  3814                           
  3815                           ; 2 bytes @ 0x2F
  3816  004F                     	ds	2
  3817  0051                     InitWigwagPattern@right_side_on:	
  3818  0051                     InitXStrobePattern@diag_2_3:	
  3819                           ; 2 bytes @ 0x31
  3820                           
  3821  0051                     InitUpperLowerPattern@lower:	
  3822                           ; 2 bytes @ 0x31
  3823                           
  3824  0051                     InitLowerPattern@lower_right:	
  3825                           ; 2 bytes @ 0x31
  3826                           
  3827                           
  3828                           ; 2 bytes @ 0x31
  3829  0051                     	ds	2
  3830  0053                     InitWigwagPattern@i:	
  3831  0053                     InitXStrobePattern@i:	
  3832                           ; 2 bytes @ 0x33
  3833                           
  3834  0053                     InitUpperLowerPattern@i:	
  3835                           ; 2 bytes @ 0x33
  3836                           
  3837  0053                     InitLowerPattern@i:	
  3838                           ; 2 bytes @ 0x33
  3839                           
  3840                           
  3841                           ; 2 bytes @ 0x33
  3842  0053                     	ds	2
  3843  0055                     InitWigwagPattern@i_854:	
  3844  0055                     InitXStrobePattern@i_880:	
  3845                           ; 2 bytes @ 0x35
  3846                           
  3847  0055                     InitUpperLowerPattern@i_906:	
  3848                           ; 2 bytes @ 0x35
  3849                           
  3850  0055                     InitLowerPattern@i_932:	
  3851                           ; 2 bytes @ 0x35
  3852                           
  3853                           
  3854                           ; 2 bytes @ 0x35
  3855  0055                     	ds	2
  3856  0057                     InitWigwagPattern@off:	
  3857  0057                     InitXStrobePattern@off:	
  3858                           ; 2 bytes @ 0x37
  3859                           
  3860  0057                     InitUpperLowerPattern@off:	
  3861                           ; 2 bytes @ 0x37
  3862                           
  3863  0057                     InitLowerPattern@off:	
  3864                           ; 2 bytes @ 0x37
  3865                           
  3866                           
  3867                           ; 2 bytes @ 0x37
  3868  0057                     	ds	2
  3869  0059                     InitWigwagPattern@head:	
  3870  0059                     InitXStrobePattern@head:	
  3871                           ; 2 bytes @ 0x39
  3872                           
  3873  0059                     InitUpperLowerPattern@head:	
  3874                           ; 2 bytes @ 0x39
  3875                           
  3876  0059                     InitLowerPattern@head:	
  3877                           ; 2 bytes @ 0x39
  3878                           
  3879                           
  3880                           ; 2 bytes @ 0x39
  3881  0059                     	ds	2
  3882  005B                     ?_InitPatternSelector:	
  3883  005B                     InitPatternSelector@p_selector:	
  3884                           ; 1 bytes @ 0x3B
  3885                           
  3886                           
  3887                           ; 2 bytes @ 0x3B
  3888  005B                     	ds	2
  3889  005D                     ??_InitPatternSelector:	
  3890                           
  3891                           ; 1 bytes @ 0x3D
  3892  005D                     	ds	4
  3893  0061                     ??_setup:	
  3894  0061                     ??_main:	
  3895                           ; 1 bytes @ 0x41
  3896                           
  3897                           
  3898                           ; 1 bytes @ 0x41
  3899  0061                     	ds	1
  3900                           
  3901                           	psect	maintext
  3902  0EF1                     __pmaintext:	
  3903 ;;
  3904 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3905 ;;
  3906 ;; *************** function _main *****************
  3907 ;; Defined at:
  3908 ;;		line 32 in file "main.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;		None
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;		None
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  1    wreg      void 
  3915 ;; Registers used:
  3916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : B1F/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3925 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3926 ;;Total ram usage:        1 bytes
  3927 ;; Hardware stack levels required when called:   12
  3928 ;; This function calls:
  3929 ;;		_FlashPattern
  3930 ;;		_NextPattern
  3931 ;;		_PatternCycleInputChanged
  3932 ;;		_TurnSignalDone
  3933 ;;		_setup
  3934 ;; This function is called by:
  3935 ;;		Startup code after reset
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           
  3940                           ;psect for function _main
  3941  0EF1                     _main:	
  3942  0EF1                     l2988:	
  3943                           ;incstack = 0
  3944                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3945                           
  3946                           
  3947                           ;main.c: 34:     setup();
  3948  0EF1  318D  25E4  318E   	fcall	_setup
  3949  0EF4                     l2990:	
  3950                           
  3951                           ;main.c: 37:     {;main.c: 38:         if( !TurnSignalDone() )
  3952  0EF4  318F  27C1  318E   	fcall	_TurnSignalDone
  3953  0EF7  3A00               	xorlw	0
  3954  0EF8  1D03               	skipz
  3955  0EF9  2EFB               	goto	u1691
  3956  0EFA  2EFC               	goto	u1690
  3957  0EFB                     u1691:	
  3958  0EFB  2EFD               	goto	l2994
  3959  0EFC                     u1690:	
  3960  0EFC  2EF4               	goto	l2990
  3961  0EFD                     l2994:	
  3962                           
  3963                           ;main.c: 52:         if ( PatternCycleInputChanged() )
  3964  0EFD  3187  27C8  318E   	fcall	_PatternCycleInputChanged
  3965  0F00  3A00               	xorlw	0
  3966  0F01  1903               	skipnz
  3967  0F02  2F04               	goto	u1701
  3968  0F03  2F05               	goto	u1700
  3969  0F04                     u1701:	
  3970  0F04  2F12               	goto	l3000
  3971  0F05                     u1700:	
  3972  0F05                     l2996:	
  3973                           
  3974                           ;main.c: 53:         {;main.c: 55:             if ( cur_pc_input_state == 0 )
  3975  0F05  0878               	movf	_cur_pc_input_state,w
  3976  0F06  1D03               	btfss	3,2
  3977  0F07  2F09               	goto	u1711
  3978  0F08  2F0A               	goto	u1710
  3979  0F09                     u1711:	
  3980  0F09  2F12               	goto	l3000
  3981  0F0A                     u1710:	
  3982  0F0A                     l2998:	
  3983                           
  3984                           ;main.c: 56:             {;main.c: 57:                 NextPattern( &pattern_selector );
  3985  0F0A  30A8               	movlw	low _pattern_selector
  3986  0F0B  0020               	movlb	0	; select bank0
  3987  0F0C  00A0               	movwf	NextPattern@p_selector
  3988  0F0D  3000               	movlw	high _pattern_selector
  3989  0F0E  00A1               	movwf	NextPattern@p_selector+1
  3990  0F0F  3185  25BD  318E   	fcall	_NextPattern
  3991  0F12                     l3000:	
  3992                           ;main.c: 58:             }
  3993                           
  3994                           
  3995                           ;main.c: 65:         last_pc_input_state = cur_pc_input_state;
  3996  0F12  0878               	movf	_cur_pc_input_state,w
  3997  0F13  0020               	movlb	0	; select bank0
  3998  0F14  00E1               	movwf	??_main
  3999  0F15  0861               	movf	??_main,w
  4000  0F16  00ED               	movwf	_last_pc_input_state
  4001  0F17                     l3002:	
  4002                           
  4003                           ;main.c: 67:         FlashPattern();
  4004  0F17  3184  2488  318E   	fcall	_FlashPattern
  4005  0F1A  2EF4               	goto	l2990
  4006  0F1B  3180  2828         	ljmp	start
  4007  0F1D                     __end_of_main:	
  4008                           
  4009                           	psect	text1
  4010  0DE4                     __ptext1:	
  4011 ;; *************** function _setup *****************
  4012 ;; Defined at:
  4013 ;;		line 12 in file "main.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;		None
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;		None
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  1    wreg      void 
  4020 ;; Registers used:
  4021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4031 ;;Total ram usage:        0 bytes
  4032 ;; Hardware stack levels used:    1
  4033 ;; Hardware stack levels required when called:   11
  4034 ;; This function calls:
  4035 ;;		_InitPatternSelector
  4036 ;;		_SYSTEM_Initialize
  4037 ;;		_SetOutputs
  4038 ;;		_TMR1_Initialize
  4039 ;;		_TMR1_StartTimer
  4040 ;; This function is called by:
  4041 ;;		_main
  4042 ;; This function uses a non-reentrant model
  4043 ;;
  4044                           
  4045                           
  4046                           ;psect for function _setup
  4047  0DE4                     _setup:	
  4048  0DE4                     l2896:	
  4049                           ;incstack = 0
  4050                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4051                           
  4052                           
  4053                           ;main.c: 15:     SYSTEM_Initialize();
  4054  0DE4  318D  2587  318D   	fcall	_SYSTEM_Initialize
  4055  0DE7                     l2898:	
  4056                           
  4057                           ;main.c: 17:     (INTCONbits.GIE = 1);
  4058  0DE7  178B               	bsf	11,7	;volatile
  4059  0DE8                     l2900:	
  4060                           
  4061                           ;main.c: 20:     (INTCONbits.PEIE = 1);
  4062  0DE8  170B               	bsf	11,6	;volatile
  4063                           
  4064                           ;main.c: 23:     TMR1_Initialize();
  4065  0DE9  318D  25B9  318D   	fcall	_TMR1_Initialize
  4066  0DEC                     l2902:	
  4067                           
  4068                           ;main.c: 24:     TMR1_StartTimer();
  4069  0DEC  318D  2516  318D   	fcall	_TMR1_StartTimer
  4070  0DEF                     l2904:	
  4071                           
  4072                           ;main.c: 27:     SetOutputs( 0 );
  4073  0DEF  3000               	movlw	0
  4074  0DF0  318E  269F  318D   	fcall	_SetOutputs
  4075  0DF3                     l2906:	
  4076                           
  4077                           ;main.c: 29:     InitPatternSelector( &pattern_selector );
  4078  0DF3  30A8               	movlw	low _pattern_selector
  4079  0DF4  0020               	movlb	0	; select bank0
  4080  0DF5  00DB               	movwf	InitPatternSelector@p_selector
  4081  0DF6  3000               	movlw	high _pattern_selector
  4082  0DF7  00DC               	movwf	InitPatternSelector@p_selector+1
  4083  0DF8  3185  2523  318D   	fcall	_InitPatternSelector
  4084  0DFB                     l271:	
  4085  0DFB  0008               	return
  4086  0DFC                     __end_of_setup:	
  4087                           
  4088                           	psect	text2
  4089  0D16                     __ptext2:	
  4090 ;; *************** function _TMR1_StartTimer *****************
  4091 ;; Defined at:
  4092 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;		None
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;		None
  4097 ;; Return value:  Size  Location     Type
  4098 ;;                  1    wreg      void 
  4099 ;; Registers used:
  4100 ;;		None
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4110 ;;Total ram usage:        0 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:    6
  4113 ;; This function calls:
  4114 ;;		Nothing
  4115 ;; This function is called by:
  4116 ;;		_setup
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           
  4121                           ;psect for function _TMR1_StartTimer
  4122  0D16                     _TMR1_StartTimer:	
  4123  0D16                     l2858:	
  4124                           ;incstack = 0
  4125                           ; Regs used in _TMR1_StartTimer: []
  4126                           
  4127                           
  4128                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
  4129  0D16  0020               	movlb	0	; select bank0
  4130  0D17  141B               	bsf	27,0	;volatile
  4131  0D18                     l194:	
  4132  0D18  0008               	return
  4133  0D19                     __end_of_TMR1_StartTimer:	
  4134                           
  4135                           	psect	text3
  4136  0D87                     __ptext3:	
  4137 ;; *************** function _SYSTEM_Initialize *****************
  4138 ;; Defined at:
  4139 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;		None
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;		None
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  1    wreg      void 
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, status,0, pclath, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;Total ram usage:        0 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    8
  4160 ;; This function calls:
  4161 ;;		_OSCILLATOR_Initialize
  4162 ;;		_PIN_MANAGER_Initialize
  4163 ;;		_PMD_Initialize
  4164 ;;		_TMR1_Initialize
  4165 ;;		_WDT_Initialize
  4166 ;; This function is called by:
  4167 ;;		_setup
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           
  4172                           ;psect for function _SYSTEM_Initialize
  4173  0D87                     _SYSTEM_Initialize:	
  4174  0D87                     l2848:	
  4175                           ;incstack = 0
  4176                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4177                           
  4178                           
  4179                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
  4180  0D87  318D  251F  318D   	fcall	_PMD_Initialize
  4181  0D8A                     l2850:	
  4182                           
  4183                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  4184  0D8A  318E  26C5  318D   	fcall	_PIN_MANAGER_Initialize
  4185  0D8D                     l2852:	
  4186                           
  4187                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  4188  0D8D  318D  2530  318D   	fcall	_OSCILLATOR_Initialize
  4189  0D90                     l2854:	
  4190                           
  4191                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  4192  0D90  3187  27FC  318D   	fcall	_WDT_Initialize
  4193  0D93                     l2856:	
  4194                           
  4195                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  4196  0D93  318D  25B9  318D   	fcall	_TMR1_Initialize
  4197  0D96                     l47:	
  4198  0D96  0008               	return
  4199  0D97                     __end_of_SYSTEM_Initialize:	
  4200                           
  4201                           	psect	text4
  4202  07FC                     __ptext4:	
  4203 ;; *************** function _WDT_Initialize *****************
  4204 ;; Defined at:
  4205 ;;		line 74 in file "mcc_generated_files/mcc.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;		None
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;		None
  4210 ;; Return value:  Size  Location     Type
  4211 ;;                  1    wreg      void 
  4212 ;; Registers used:
  4213 ;;		wreg
  4214 ;; Tracked objects:
  4215 ;;		On entry : 0/0
  4216 ;;		On exit  : 0/0
  4217 ;;		Unchanged: 0/0
  4218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4223 ;;Total ram usage:        0 bytes
  4224 ;; Hardware stack levels used:    1
  4225 ;; Hardware stack levels required when called:    6
  4226 ;; This function calls:
  4227 ;;		Nothing
  4228 ;; This function is called by:
  4229 ;;		_SYSTEM_Initialize
  4230 ;; This function uses a non-reentrant model
  4231 ;;
  4232                           
  4233                           
  4234                           ;psect for function _WDT_Initialize
  4235  07FC                     _WDT_Initialize:	
  4236  07FC                     l2626:	
  4237                           ;incstack = 0
  4238                           ; Regs used in _WDT_Initialize: [wreg]
  4239                           
  4240                           
  4241                           ;mcc_generated_files/mcc.c: 77:     WDTCON = 0x16;
  4242  07FC  3016               	movlw	22
  4243  07FD  0021               	movlb	1	; select bank1
  4244  07FE  0097               	movwf	23	;volatile
  4245  07FF                     l53:	
  4246  07FF  0008               	return
  4247  0800                     __end_of_WDT_Initialize:	
  4248                           
  4249                           	psect	text5
  4250  0DB9                     __ptext5:	
  4251 ;; *************** function _TMR1_Initialize *****************
  4252 ;; Defined at:
  4253 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;		None
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;		None
  4258 ;; Return value:  Size  Location     Type
  4259 ;;                  1    wreg      void 
  4260 ;; Registers used:
  4261 ;;		wreg, status,2, status,0, pclath, cstack
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/0
  4264 ;;		On exit  : 0/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4271 ;;Total ram usage:        0 bytes
  4272 ;; Hardware stack levels used:    1
  4273 ;; Hardware stack levels required when called:    7
  4274 ;; This function calls:
  4275 ;;		_TMR1_SetInterruptHandler
  4276 ;; This function is called by:
  4277 ;;		_SYSTEM_Initialize
  4278 ;;		_setup
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           
  4283                           ;psect for function _TMR1_Initialize
  4284  0DB9                     _TMR1_Initialize:	
  4285  0DB9                     l2628:	
  4286                           ;incstack = 0
  4287                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4288                           
  4289                           
  4290                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  4291  0DB9  0020               	movlb	0	; select bank0
  4292  0DBA  019C               	clrf	28	;volatile
  4293  0DBB                     l2630:	
  4294                           
  4295                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xFF;
  4296  0DBB  30FF               	movlw	255
  4297  0DBC  009A               	movwf	26	;volatile
  4298  0DBD                     l2632:	
  4299                           
  4300                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0x00;
  4301  0DBD  0199               	clrf	25	;volatile
  4302  0DBE                     l2634:	
  4303                           
  4304                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  4305  0DBE  1011               	bcf	17,0	;volatile
  4306                           
  4307                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  4308  0DBF  081A               	movf	26,w	;volatile
  4309  0DC0  00FB               	movwf	_timer1ReloadVal+1	;volatile
  4310  0DC1  0819               	movf	25,w	;volatile
  4311  0DC2  00FA               	movwf	_timer1ReloadVal	;volatile
  4312  0DC3                     l2636:	
  4313                           
  4314                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  4315  0DC3  0021               	movlb	1	; select bank1
  4316  0DC4  1411               	bsf	17,0	;volatile
  4317  0DC5                     l2638:	
  4318                           
  4319                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  4320  0DC5  304C               	movlw	low _TMR1_DefaultInterruptHandler
  4321  0DC6  0020               	movlb	0	; select bank0
  4322  0DC7  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  4323  0DC8  300D               	movlw	high _TMR1_DefaultInterruptHandler
  4324  0DC9  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  4325  0DCA  318D  2539  318D   	fcall	_TMR1_SetInterruptHandler
  4326  0DCD                     l191:	
  4327  0DCD  0008               	return
  4328  0DCE                     __end_of_TMR1_Initialize:	
  4329                           
  4330                           	psect	text6
  4331  0D39                     __ptext6:	
  4332 ;; *************** function _TMR1_SetInterruptHandler *****************
  4333 ;; Defined at:
  4334 ;;		line 172 in file "mcc_generated_files/tmr1.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4337 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      void 
  4342 ;; Registers used:
  4343 ;;		wreg
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4349 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;Total ram usage:        2 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    6
  4356 ;; This function calls:
  4357 ;;		Nothing
  4358 ;; This function is called by:
  4359 ;;		_TMR1_Initialize
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           
  4364                           ;psect for function _TMR1_SetInterruptHandler
  4365  0D39                     _TMR1_SetInterruptHandler:	
  4366  0D39                     l2528:	
  4367                           ;incstack = 0
  4368                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  4369                           
  4370                           
  4371                           ;mcc_generated_files/tmr1.c: 173:     TMR1_InterruptHandler = InterruptHandler;
  4372  0D39  0020               	movlb	0	; select bank0
  4373  0D3A  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  4374  0D3B  0021               	movlb	1	; select bank1
  4375  0D3C  00EE               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  4376  0D3D  0020               	movlb	0	; select bank0
  4377  0D3E  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  4378  0D3F  0021               	movlb	1	; select bank1
  4379  0D40  00ED               	movwf	_TMR1_InterruptHandler^(0+128)
  4380  0D41                     l221:	
  4381  0D41  0008               	return
  4382  0D42                     __end_of_TMR1_SetInterruptHandler:	
  4383                           
  4384                           	psect	text7
  4385  0D1F                     __ptext7:	
  4386 ;; *************** function _PMD_Initialize *****************
  4387 ;; Defined at:
  4388 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;		None
  4391 ;; Auto vars:     Size  Location     Type
  4392 ;;		None
  4393 ;; Return value:  Size  Location     Type
  4394 ;;                  1    wreg      void 
  4395 ;; Registers used:
  4396 ;;		status,2
  4397 ;; Tracked objects:
  4398 ;;		On entry : 0/0
  4399 ;;		On exit  : 0/0
  4400 ;;		Unchanged: 0/0
  4401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;Total ram usage:        0 bytes
  4407 ;; Hardware stack levels used:    1
  4408 ;; Hardware stack levels required when called:    6
  4409 ;; This function calls:
  4410 ;;		Nothing
  4411 ;; This function is called by:
  4412 ;;		_SYSTEM_Initialize
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           
  4417                           ;psect for function _PMD_Initialize
  4418  0D1F                     _PMD_Initialize:	
  4419  0D1F                     l2584:	
  4420                           ;incstack = 0
  4421                           ; Regs used in _PMD_Initialize: [status,2]
  4422                           
  4423                           
  4424                           ;mcc_generated_files/mcc.c: 83:     PMD0 = 0x00;
  4425  0D1F  0032               	movlb	18	; select bank18
  4426  0D20  0191               	clrf	17	;volatile
  4427                           
  4428                           ;mcc_generated_files/mcc.c: 85:     PMD1 = 0x00;
  4429  0D21  0192               	clrf	18	;volatile
  4430                           
  4431                           ;mcc_generated_files/mcc.c: 87:     PMD2 = 0x00;
  4432  0D22  0193               	clrf	19	;volatile
  4433                           
  4434                           ;mcc_generated_files/mcc.c: 89:     PMD3 = 0x00;
  4435  0D23  0194               	clrf	20	;volatile
  4436                           
  4437                           ;mcc_generated_files/mcc.c: 91:     PMD4 = 0x00;
  4438  0D24  0195               	clrf	21	;volatile
  4439                           
  4440                           ;mcc_generated_files/mcc.c: 93:     PMD5 = 0x00;
  4441  0D25  0196               	clrf	22	;volatile
  4442  0D26                     l56:	
  4443  0D26  0008               	return
  4444  0D27                     __end_of_PMD_Initialize:	
  4445                           
  4446                           	psect	text8
  4447  0EC5                     __ptext8:	
  4448 ;; *************** function _PIN_MANAGER_Initialize *****************
  4449 ;; Defined at:
  4450 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;		None
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  1    wreg      void 
  4457 ;; Registers used:
  4458 ;;		wreg, status,2, status,0, pclath, cstack
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;Total ram usage:        0 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    7
  4471 ;; This function calls:
  4472 ;;		_IOCCF0_SetInterruptHandler
  4473 ;; This function is called by:
  4474 ;;		_SYSTEM_Initialize
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           
  4479                           ;psect for function _PIN_MANAGER_Initialize
  4480  0EC5                     _PIN_MANAGER_Initialize:	
  4481  0EC5                     l2586:	
  4482                           ;incstack = 0
  4483                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4484                           
  4485                           
  4486                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
  4487  0EC5  0022               	movlb	2	; select bank2
  4488  0EC6  018C               	clrf	12	;volatile
  4489  0EC7                     l2588:	
  4490                           
  4491                           ;mcc_generated_files/pin_manager.c: 63:     LATC = 0x20;
  4492  0EC7  3020               	movlw	32
  4493  0EC8  008E               	movwf	14	;volatile
  4494  0EC9                     l2590:	
  4495                           
  4496                           ;mcc_generated_files/pin_manager.c: 68:     TRISA = 0x37;
  4497  0EC9  3037               	movlw	55
  4498  0ECA  0021               	movlb	1	; select bank1
  4499  0ECB  008C               	movwf	12	;volatile
  4500  0ECC                     l2592:	
  4501                           
  4502                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x21;
  4503  0ECC  3021               	movlw	33
  4504  0ECD  008E               	movwf	14	;volatile
  4505  0ECE                     l2594:	
  4506                           
  4507                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  4508  0ECE  0023               	movlb	3	; select bank3
  4509  0ECF  018E               	clrf	14	;volatile
  4510                           
  4511                           ;mcc_generated_files/pin_manager.c: 75:     ANSELA = 0x33;
  4512  0ED0  3033               	movlw	51
  4513  0ED1  008C               	movwf	12	;volatile
  4514  0ED2                     l2596:	
  4515                           
  4516                           ;mcc_generated_files/pin_manager.c: 80:     WPUA = 0x00;
  4517  0ED2  0024               	movlb	4	; select bank4
  4518  0ED3  018C               	clrf	12	;volatile
  4519  0ED4                     l2598:	
  4520                           
  4521                           ;mcc_generated_files/pin_manager.c: 81:     WPUC = 0x1E;
  4522  0ED4  301E               	movlw	30
  4523  0ED5  008E               	movwf	14	;volatile
  4524                           
  4525                           ;mcc_generated_files/pin_manager.c: 86:     ODCONA = 0x00;
  4526  0ED6  0025               	movlb	5	; select bank5
  4527  0ED7  018C               	clrf	12	;volatile
  4528                           
  4529                           ;mcc_generated_files/pin_manager.c: 87:     ODCONC = 0x00;
  4530  0ED8  018E               	clrf	14	;volatile
  4531  0ED9                     l2600:	
  4532                           
  4533                           ;mcc_generated_files/pin_manager.c: 92:     SLRCONA = 0x37;
  4534  0ED9  3037               	movlw	55
  4535  0EDA  0026               	movlb	6	; select bank6
  4536  0EDB  008C               	movwf	12	;volatile
  4537  0EDC                     l2602:	
  4538                           
  4539                           ;mcc_generated_files/pin_manager.c: 93:     SLRCONC = 0x3F;
  4540  0EDC  303F               	movlw	63
  4541  0EDD  008E               	movwf	14	;volatile
  4542  0EDE                     l2604:	
  4543                           
  4544                           ;mcc_generated_files/pin_manager.c: 98:     INLVLA = 0x3F;
  4545  0EDE  303F               	movlw	63
  4546  0EDF  0027               	movlb	7	; select bank7
  4547  0EE0  008C               	movwf	12	;volatile
  4548  0EE1                     l2606:	
  4549                           
  4550                           ;mcc_generated_files/pin_manager.c: 99:     INLVLC = 0x3F;
  4551  0EE1  303F               	movlw	63
  4552  0EE2  008E               	movwf	14	;volatile
  4553  0EE3                     l2608:	
  4554                           
  4555                           ;mcc_generated_files/pin_manager.c: 106:     IOCCFbits.IOCCF0 = 0;
  4556  0EE3  1019               	bcf	25,0	;volatile
  4557  0EE4                     l2610:	
  4558                           
  4559                           ;mcc_generated_files/pin_manager.c: 108:     IOCCNbits.IOCCN0 = 0;
  4560  0EE4  1018               	bcf	24,0	;volatile
  4561  0EE5                     l2612:	
  4562                           
  4563                           ;mcc_generated_files/pin_manager.c: 110:     IOCCPbits.IOCCP0 = 1;
  4564  0EE5  1417               	bsf	23,0	;volatile
  4565  0EE6                     l2614:	
  4566                           
  4567                           ;mcc_generated_files/pin_manager.c: 114:     IOCCF0_SetInterruptHandler( TripTurnSignal 
      +                          );
  4568  0EE6  3097               	movlw	low _TripTurnSignal
  4569  0EE7  0020               	movlb	0	; select bank0
  4570  0EE8  00A0               	movwf	IOCCF0_SetInterruptHandler@InterruptHandler
  4571  0EE9  300D               	movlw	high _TripTurnSignal
  4572  0EEA  00A1               	movwf	IOCCF0_SetInterruptHandler@InterruptHandler+1
  4573  0EEB  318D  2519  318E   	fcall	_IOCCF0_SetInterruptHandler
  4574  0EEE                     l2616:	
  4575                           
  4576                           ;mcc_generated_files/pin_manager.c: 116:     PIE0bits.IOCIE = 1;
  4577  0EEE  0021               	movlb	1	; select bank1
  4578  0EEF  1610               	bsf	16,4	;volatile
  4579  0EF0                     l113:	
  4580  0EF0  0008               	return
  4581  0EF1                     __end_of_PIN_MANAGER_Initialize:	
  4582                           
  4583                           	psect	text9
  4584  0D19                     __ptext9:	
  4585 ;; *************** function _IOCCF0_SetInterruptHandler *****************
  4586 ;; Defined at:
  4587 ;;		line 147 in file "mcc_generated_files/pin_manager.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4590 ;;		 -> TripTurnSignal(1), 
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;		None
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  1    wreg      void 
  4595 ;; Registers used:
  4596 ;;		wreg
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4602 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4605 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4606 ;;Total ram usage:        2 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    6
  4609 ;; This function calls:
  4610 ;;		Nothing
  4611 ;; This function is called by:
  4612 ;;		_PIN_MANAGER_Initialize
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           
  4617                           ;psect for function _IOCCF0_SetInterruptHandler
  4618  0D19                     _IOCCF0_SetInterruptHandler:	
  4619  0D19                     l2526:	
  4620                           ;incstack = 0
  4621                           ; Regs used in _IOCCF0_SetInterruptHandler: [wreg]
  4622                           
  4623                           
  4624                           ;mcc_generated_files/pin_manager.c: 148:     IOCCF0_InterruptHandler = InterruptHandler;
  4625  0D19  0020               	movlb	0	; select bank0
  4626  0D1A  0821               	movf	IOCCF0_SetInterruptHandler@InterruptHandler+1,w
  4627  0D1B  00EF               	movwf	_IOCCF0_InterruptHandler+1
  4628  0D1C  0820               	movf	IOCCF0_SetInterruptHandler@InterruptHandler,w
  4629  0D1D  00EE               	movwf	_IOCCF0_InterruptHandler
  4630  0D1E                     l124:	
  4631  0D1E  0008               	return
  4632  0D1F                     __end_of_IOCCF0_SetInterruptHandler:	
  4633                           
  4634                           	psect	text10
  4635  0D30                     __ptext10:	
  4636 ;; *************** function _OSCILLATOR_Initialize *****************
  4637 ;; Defined at:
  4638 ;;		line 60 in file "mcc_generated_files/mcc.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;		None
  4641 ;; Auto vars:     Size  Location     Type
  4642 ;;		None
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  1    wreg      void 
  4645 ;; Registers used:
  4646 ;;		wreg, status,2
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4656 ;;Total ram usage:        0 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    6
  4659 ;; This function calls:
  4660 ;;		Nothing
  4661 ;; This function is called by:
  4662 ;;		_SYSTEM_Initialize
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666                           
  4667                           ;psect for function _OSCILLATOR_Initialize
  4668  0D30                     _OSCILLATOR_Initialize:	
  4669  0D30                     l2618:	
  4670                           ;incstack = 0
  4671                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4672                           
  4673                           
  4674                           ;mcc_generated_files/mcc.c: 63:     OSCCON1 = 0x62;
  4675  0D30  3062               	movlw	98
  4676  0D31  0032               	movlb	18	; select bank18
  4677  0D32  0099               	movwf	25	;volatile
  4678  0D33                     l2620:	
  4679                           
  4680                           ;mcc_generated_files/mcc.c: 65:     OSCCON3 = 0x00;
  4681  0D33  019B               	clrf	27	;volatile
  4682  0D34                     l2622:	
  4683                           
  4684                           ;mcc_generated_files/mcc.c: 67:     OSCEN = 0x00;
  4685  0D34  019D               	clrf	29	;volatile
  4686                           
  4687                           ;mcc_generated_files/mcc.c: 69:     OSCFRQ = 0x03;
  4688  0D35  3003               	movlw	3
  4689  0D36  009F               	movwf	31	;volatile
  4690  0D37                     l2624:	
  4691                           
  4692                           ;mcc_generated_files/mcc.c: 71:     OSCTUNE = 0x00;
  4693  0D37  019E               	clrf	30	;volatile
  4694  0D38                     l50:	
  4695  0D38  0008               	return
  4696  0D39                     __end_of_OSCILLATOR_Initialize:	
  4697                           
  4698                           	psect	text11
  4699  0523                     __ptext11:	
  4700 ;; *************** function _InitPatternSelector *****************
  4701 ;; Defined at:
  4702 ;;		line 3 in file "PatternSelector.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;  p_selector      2   59[BANK0 ] PTR volatile struct Patt
  4705 ;;		 -> pattern_selector(19), 
  4706 ;; Auto vars:     Size  Location     Type
  4707 ;;  i               2    0[BANK2 ] int 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  1    wreg      void 
  4710 ;; Registers used:
  4711 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4717 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;      Totals:         0       6       0       2       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;Total ram usage:        8 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:   10
  4724 ;; This function calls:
  4725 ;;		_InitLowerPattern
  4726 ;;		_InitUpperLowerPattern
  4727 ;;		_InitWigwagPattern
  4728 ;;		_InitXStrobePattern
  4729 ;;		_NewPattern
  4730 ;; This function is called by:
  4731 ;;		_setup
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           
  4736                           ;psect for function _InitPatternSelector
  4737  0523                     _InitPatternSelector:	
  4738  0523                     l2862:	
  4739                           ;incstack = 0
  4740                           ; Regs used in _InitPatternSelector: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4741                           
  4742                           
  4743                           ;PatternSelector.c: 3: void InitPatternSelector( struct PatternSelector* p_selector );Pa
      +                          tternSelector.c: 4: {;PatternSelector.c: 6:     for ( int i = 0; i < MAX_PATTERNS; i++ )
  4744  0523  0022               	movlb	2	; select bank2
  4745  0524  01A0               	clrf	InitPatternSelector@i^(0+256)
  4746  0525  01A1               	clrf	(InitPatternSelector@i+1)^(0+256)
  4747  0526                     l2868:	
  4748                           
  4749                           ;PatternSelector.c: 7:     {;PatternSelector.c: 8:         p_selector->patterns[i] = New
      +                          Pattern();
  4750  0526  318F  2783  3185   	fcall	_NewPattern
  4751  0529  0022               	movlb	2	; select bank2
  4752  052A  0821               	movf	(InitPatternSelector@i+1)^(0+256),w
  4753  052B  0020               	movlb	0	; select bank0
  4754  052C  00DE               	movwf	??_InitPatternSelector+1
  4755  052D  0022               	movlb	2	; select bank2
  4756  052E  0820               	movf	InitPatternSelector@i^(0+256),w
  4757  052F  0020               	movlb	0	; select bank0
  4758  0530  00DD               	movwf	??_InitPatternSelector
  4759  0531  35DD               	lslf	??_InitPatternSelector,f
  4760  0532  0DDE               	rlf	??_InitPatternSelector+1,f
  4761  0533  085D               	movf	??_InitPatternSelector,w
  4762  0534  075B               	addwf	InitPatternSelector@p_selector,w
  4763  0535  0086               	movwf	6
  4764  0536  085E               	movf	??_InitPatternSelector+1,w
  4765  0537  3D5C               	addwfc	InitPatternSelector@p_selector+1,w
  4766  0538  0087               	movwf	7
  4767  0539  0828               	movf	?_NewPattern,w
  4768  053A  3FC0               	movwi [0]fsr1
  4769  053B  0829               	movf	?_NewPattern+1,w
  4770  053C  3FC1               	movwi [1]fsr1
  4771  053D                     l2870:	
  4772                           
  4773                           ;PatternSelector.c: 9:     }
  4774  053D  3001               	movlw	1
  4775  053E  0022               	movlb	2	; select bank2
  4776  053F  07A0               	addwf	InitPatternSelector@i^(0+256),f
  4777  0540  3000               	movlw	0
  4778  0541  3DA1               	addwfc	(InitPatternSelector@i+1)^(0+256),f
  4779  0542                     l2872:	
  4780  0542  0821               	movf	(InitPatternSelector@i+1)^(0+256),w
  4781  0543  3A80               	xorlw	128
  4782  0544  0020               	movlb	0	; select bank0
  4783  0545  00DD               	movwf	??_InitPatternSelector
  4784  0546  3080               	movlw	128
  4785  0547  025D               	subwf	??_InitPatternSelector,w
  4786  0548  1D03               	skipz
  4787  0549  2D4D               	goto	u1595
  4788  054A  3006               	movlw	6
  4789  054B  0022               	movlb	2	; select bank2
  4790  054C  0220               	subwf	InitPatternSelector@i^(0+256),w
  4791  054D                     u1595:	
  4792  054D  1C03               	skipc
  4793  054E  2D50               	goto	u1591
  4794  054F  2D51               	goto	u1590
  4795  0550                     u1591:	
  4796  0550  2D26               	goto	l2868
  4797  0551                     u1590:	
  4798  0551                     l2874:	
  4799                           
  4800                           ;PatternSelector.c: 10:     p_selector->active = WIGWAG;
  4801  0551  0020               	movlb	0	; select bank0
  4802  0552  085B               	movf	InitPatternSelector@p_selector,w
  4803  0553  0086               	movwf	6
  4804  0554  085C               	movf	InitPatternSelector@p_selector+1,w
  4805  0555  0087               	movwf	7
  4806  0556  314C               	addfsr 1,12
  4807  0557  0181               	clrf	1
  4808  0558                     l2876:	
  4809                           
  4810                           ;PatternSelector.c: 12:     InitWigwagPattern( p_selector->patterns[WIGWAG] );
  4811  0558  085B               	movf	InitPatternSelector@p_selector,w
  4812  0559  0086               	movwf	6
  4813  055A  085C               	movf	InitPatternSelector@p_selector+1,w
  4814  055B  0087               	movwf	7
  4815  055C  3F40               	moviw [0]fsr1
  4816  055D  00C4               	movwf	InitWigwagPattern@pattern
  4817  055E  3F41               	moviw [1]fsr1
  4818  055F  00C5               	movwf	InitWigwagPattern@pattern+1
  4819  0560  3183  237F  3185   	fcall	_InitWigwagPattern
  4820  0563                     l2878:	
  4821                           
  4822                           ;PatternSelector.c: 13:     InitXStrobePattern( p_selector->patterns[XSTROBE] );
  4823  0563  0020               	movlb	0	; select bank0
  4824  0564  085B               	movf	InitPatternSelector@p_selector,w
  4825  0565  0086               	movwf	6
  4826  0566  085C               	movf	InitPatternSelector@p_selector+1,w
  4827  0567  0087               	movwf	7
  4828  0568  3142               	addfsr 1,2
  4829  0569  3F40               	moviw [0]fsr1
  4830  056A  00C4               	movwf	InitXStrobePattern@pattern
  4831  056B  3F41               	moviw [1]fsr1
  4832  056C  00C5               	movwf	InitXStrobePattern@pattern+1
  4833  056D  3180  2061  3185   	fcall	_InitXStrobePattern
  4834  0570                     l2880:	
  4835                           
  4836                           ;PatternSelector.c: 14:     InitUpperLowerPattern( p_selector->patterns[UPPER_LOWER] );
  4837  0570  0020               	movlb	0	; select bank0
  4838  0571  085B               	movf	InitPatternSelector@p_selector,w
  4839  0572  0086               	movwf	6
  4840  0573  085C               	movf	InitPatternSelector@p_selector+1,w
  4841  0574  0087               	movwf	7
  4842  0575  3144               	addfsr 1,4
  4843  0576  3F40               	moviw [0]fsr1
  4844  0577  00C4               	movwf	InitUpperLowerPattern@pattern
  4845  0578  3F41               	moviw [1]fsr1
  4846  0579  00C5               	movwf	InitUpperLowerPattern@pattern+1
  4847  057A  3181  216B  3185   	fcall	_InitUpperLowerPattern
  4848  057D                     l2882:	
  4849                           
  4850                           ;PatternSelector.c: 15:     InitLowerPattern( p_selector->patterns[LOWER] );
  4851  057D  0020               	movlb	0	; select bank0
  4852  057E  085B               	movf	InitPatternSelector@p_selector,w
  4853  057F  0086               	movwf	6
  4854  0580  085C               	movf	InitPatternSelector@p_selector+1,w
  4855  0581  0087               	movwf	7
  4856  0582  3146               	addfsr 1,6
  4857  0583  3F40               	moviw [0]fsr1
  4858  0584  00C4               	movwf	InitLowerPattern@pattern
  4859  0585  3F41               	moviw [1]fsr1
  4860  0586  00C5               	movwf	InitLowerPattern@pattern+1
  4861  0587  3182  2275  3185   	fcall	_InitLowerPattern
  4862  058A                     l2884:	
  4863                           
  4864                           ;PatternSelector.c: 16:     p_selector->current_stage = p_selector->patterns[ p_selector
      +                          ->active ]->first_stage;
  4865  058A  0020               	movlb	0	; select bank0
  4866  058B  085B               	movf	InitPatternSelector@p_selector,w
  4867  058C  0086               	movwf	6
  4868  058D  085C               	movf	InitPatternSelector@p_selector+1,w
  4869  058E  0087               	movwf	7
  4870  058F  314C               	addfsr 1,12
  4871  0590  0801               	movf	1,w
  4872  0591  00DD               	movwf	??_InitPatternSelector
  4873  0592  01DE               	clrf	??_InitPatternSelector+1
  4874  0593  35DD               	lslf	??_InitPatternSelector,f
  4875  0594  0DDE               	rlf	??_InitPatternSelector+1,f
  4876  0595  085D               	movf	??_InitPatternSelector,w
  4877  0596  075B               	addwf	InitPatternSelector@p_selector,w
  4878  0597  0086               	movwf	6
  4879  0598  085E               	movf	??_InitPatternSelector+1,w
  4880  0599  3D5C               	addwfc	InitPatternSelector@p_selector+1,w
  4881  059A  0087               	movwf	7
  4882  059B  3F40               	moviw [0]fsr1
  4883  059C  00DF               	movwf	??_InitPatternSelector+2
  4884  059D  3F41               	moviw [1]fsr1
  4885  059E  00E0               	movwf	??_InitPatternSelector+3
  4886  059F  085F               	movf	??_InitPatternSelector+2,w
  4887  05A0  0086               	movwf	6
  4888  05A1  0860               	movf	??_InitPatternSelector+3,w
  4889  05A2  0087               	movwf	7
  4890  05A3  3141               	addfsr 1,1
  4891  05A4  085B               	movf	InitPatternSelector@p_selector,w
  4892  05A5  0084               	movwf	4
  4893  05A6  085C               	movf	InitPatternSelector@p_selector+1,w
  4894  05A7  0085               	movwf	5
  4895  05A8  310D               	addfsr 0,13
  4896  05A9  3F40               	moviw [0]fsr1
  4897  05AA  3F80               	movwi [0]fsr0
  4898  05AB  3F41               	moviw [1]fsr1
  4899  05AC  3F81               	movwi [1]fsr0
  4900  05AD                     l2886:	
  4901                           
  4902                           ;PatternSelector.c: 18:     p_selector->start_time = 0;
  4903  05AD  085B               	movf	InitPatternSelector@p_selector,w
  4904  05AE  3E0F               	addlw	15
  4905  05AF  00DD               	movwf	??_InitPatternSelector
  4906  05B0  3000               	movlw	0
  4907  05B1  3D5C               	addwfc	InitPatternSelector@p_selector+1,w
  4908  05B2  00DE               	movwf	??_InitPatternSelector+1
  4909  05B3  085D               	movf	??_InitPatternSelector,w
  4910  05B4  0086               	movwf	6
  4911  05B5  085E               	movf	??_InitPatternSelector+1,w
  4912  05B6  0087               	movwf	7
  4913  05B7  3000               	movlw	0
  4914  05B8  3FC0               	movwi [0]fsr1
  4915  05B9  3FC1               	movwi [1]fsr1
  4916  05BA  3FC2               	movwi [2]fsr1
  4917  05BB  3FC3               	movwi [3]fsr1
  4918  05BC                     l308:	
  4919  05BC  0008               	return
  4920  05BD                     __end_of_InitPatternSelector:	
  4921                           
  4922                           	psect	text12
  4923  0F83                     __ptext12:	
  4924 ;; *************** function _NewPattern *****************
  4925 ;; Defined at:
  4926 ;;		line 36 in file "Pattern.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;		None
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;  new_pattern     2   21[BANK0 ] PTR struct Pattern
  4931 ;;		 -> pattern_stash(18), 
  4932 ;; Return value:  Size  Location     Type
  4933 ;;                  2    8[BANK0 ] PTR struct Pattern
  4934 ;; Registers used:
  4935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4942 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4944 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4945 ;;Total ram usage:        4 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; Hardware stack levels required when called:    8
  4948 ;; This function calls:
  4949 ;;		_NewStage
  4950 ;;		___wmul
  4951 ;; This function is called by:
  4952 ;;		_InitPatternSelector
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           
  4957                           ;psect for function _NewPattern
  4958  0F83                     _NewPattern:	
  4959  0F83                     l2640:	
  4960                           ;incstack = 0
  4961                           ; Regs used in _NewPattern: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4962                           
  4963                           
  4964                           ;Pattern.c: 38:     if ( pattern_list_iter >= MAX_PATTERNS )
  4965  0F83  3000               	movlw	0
  4966  0F84  0020               	movlb	0	; select bank0
  4967  0F85  0269               	subwf	_pattern_list_iter+1,w
  4968  0F86  3006               	movlw	6
  4969  0F87  1903               	skipnz
  4970  0F88  0268               	subwf	_pattern_list_iter,w
  4971  0F89  1C03               	skipc
  4972  0F8A  2F8C               	goto	u1381
  4973  0F8B  2F8D               	goto	u1380
  4974  0F8C                     u1381:	
  4975  0F8C  2F90               	goto	l2646
  4976  0F8D                     u1380:	
  4977  0F8D                     l2642:	
  4978                           
  4979                           ;Pattern.c: 39:     {;Pattern.c: 40:         return ((void*)0);
  4980  0F8D  01A8               	clrf	?_NewPattern
  4981  0F8E  01A9               	clrf	?_NewPattern+1
  4982  0F8F  2FC0               	goto	l431
  4983  0F90                     l2646:	
  4984                           
  4985                           ;Pattern.c: 42:     struct Pattern* new_pattern = &pattern_stash[ pattern_list_iter++ ];
  4986  0F90  0869               	movf	_pattern_list_iter+1,w
  4987  0F91  00A1               	movwf	___wmul@multiplier+1
  4988  0F92  0868               	movf	_pattern_list_iter,w
  4989  0F93  00A0               	movwf	___wmul@multiplier
  4990  0F94  3003               	movlw	3
  4991  0F95  00A2               	movwf	___wmul@multiplicand
  4992  0F96  3000               	movlw	0
  4993  0F97  00A3               	movwf	___wmul@multiplicand+1
  4994  0F98  318E  2618  318F   	fcall	___wmul
  4995  0F9B  30BB               	movlw	low _pattern_stash
  4996  0F9C  0020               	movlb	0	; select bank0
  4997  0F9D  00B3               	movwf	??_NewPattern
  4998  0F9E  3000               	movlw	high _pattern_stash
  4999  0F9F  00B4               	movwf	??_NewPattern+1
  5000  0FA0  0820               	movf	?___wmul,w
  5001  0FA1  0733               	addwf	??_NewPattern,w
  5002  0FA2  00B5               	movwf	NewPattern@new_pattern
  5003  0FA3  0821               	movf	?___wmul+1,w
  5004  0FA4  3D34               	addwfc	??_NewPattern+1,w
  5005  0FA5  00B6               	movwf	NewPattern@new_pattern+1
  5006  0FA6                     l2648:	
  5007  0FA6  3001               	movlw	1
  5008  0FA7  07E8               	addwf	_pattern_list_iter,f
  5009  0FA8  3000               	movlw	0
  5010  0FA9  3DE9               	addwfc	_pattern_list_iter+1,f
  5011  0FAA                     l2650:	
  5012                           
  5013                           ;Pattern.c: 43:     new_pattern->name = WIGWAG;
  5014  0FAA  0835               	movf	NewPattern@new_pattern,w
  5015  0FAB  0086               	movwf	6
  5016  0FAC  0836               	movf	NewPattern@new_pattern+1,w
  5017  0FAD  0087               	movwf	7
  5018  0FAE  0181               	clrf	1
  5019  0FAF                     l2652:	
  5020                           
  5021                           ;Pattern.c: 44:     new_pattern->first_stage = NewStage();
  5022  0FAF  3187  2779  318F   	fcall	_NewStage
  5023  0FB2  0020               	movlb	0	; select bank0
  5024  0FB3  0835               	movf	NewPattern@new_pattern,w
  5025  0FB4  0086               	movwf	6
  5026  0FB5  0836               	movf	NewPattern@new_pattern+1,w
  5027  0FB6  0087               	movwf	7
  5028  0FB7  3141               	addfsr 1,1
  5029  0FB8  0820               	movf	?_NewStage,w
  5030  0FB9  3FC0               	movwi [0]fsr1
  5031  0FBA  0821               	movf	?_NewStage+1,w
  5032  0FBB  3FC1               	movwi [1]fsr1
  5033  0FBC                     l2654:	
  5034                           
  5035                           ;Pattern.c: 46:     return new_pattern;
  5036  0FBC  0836               	movf	NewPattern@new_pattern+1,w
  5037  0FBD  00A9               	movwf	?_NewPattern+1
  5038  0FBE  0835               	movf	NewPattern@new_pattern,w
  5039  0FBF  00A8               	movwf	?_NewPattern
  5040  0FC0                     l431:	
  5041  0FC0  0008               	return
  5042  0FC1                     __end_of_NewPattern:	
  5043                           
  5044                           	psect	text13
  5045  0E18                     __ptext13:	
  5046 ;; *************** function ___wmul *****************
  5047 ;; Defined at:
  5048 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5051 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5052 ;; Auto vars:     Size  Location     Type
  5053 ;;  product         2    4[BANK0 ] unsigned int 
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  2    0[BANK0 ] unsigned int 
  5056 ;; Registers used:
  5057 ;;		wreg, status,2, status,0
  5058 ;; Tracked objects:
  5059 ;;		On entry : 0/0
  5060 ;;		On exit  : 0/0
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5063 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5064 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5067 ;;Total ram usage:        6 bytes
  5068 ;; Hardware stack levels used:    1
  5069 ;; Hardware stack levels required when called:    6
  5070 ;; This function calls:
  5071 ;;		Nothing
  5072 ;; This function is called by:
  5073 ;;		_NewPattern
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           
  5078                           ;psect for function ___wmul
  5079  0E18                     ___wmul:	
  5080  0E18                     l2570:	
  5081                           ;incstack = 0
  5082                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5083                           
  5084  0E18  0020               	movlb	0	; select bank0
  5085  0E19  01A4               	clrf	___wmul@product
  5086  0E1A  01A5               	clrf	___wmul@product+1
  5087  0E1B                     l2572:	
  5088  0E1B  1C20               	btfss	___wmul@multiplier,0
  5089  0E1C  2E1E               	goto	u1341
  5090  0E1D  2E1F               	goto	u1340
  5091  0E1E                     u1341:	
  5092  0E1E  2E23               	goto	l687
  5093  0E1F                     u1340:	
  5094  0E1F                     l2574:	
  5095  0E1F  0822               	movf	___wmul@multiplicand,w
  5096  0E20  07A4               	addwf	___wmul@product,f
  5097  0E21  0823               	movf	___wmul@multiplicand+1,w
  5098  0E22  3DA5               	addwfc	___wmul@product+1,f
  5099  0E23                     l687:	
  5100  0E23  3001               	movlw	1
  5101  0E24                     u1355:	
  5102  0E24  35A2               	lslf	___wmul@multiplicand,f
  5103  0E25  0DA3               	rlf	___wmul@multiplicand+1,f
  5104  0E26  0B89               	decfsz	9,f
  5105  0E27  2E24               	goto	u1355
  5106  0E28                     l2576:	
  5107  0E28  3001               	movlw	1
  5108  0E29                     u1365:	
  5109  0E29  36A1               	lsrf	___wmul@multiplier+1,f
  5110  0E2A  0CA0               	rrf	___wmul@multiplier,f
  5111  0E2B  0B89               	decfsz	9,f
  5112  0E2C  2E29               	goto	u1365
  5113  0E2D                     l2578:	
  5114  0E2D  0820               	movf	___wmul@multiplier,w
  5115  0E2E  0421               	iorwf	___wmul@multiplier+1,w
  5116  0E2F  1D03               	btfss	3,2
  5117  0E30  2E32               	goto	u1371
  5118  0E31  2E33               	goto	u1370
  5119  0E32                     u1371:	
  5120  0E32  2E1B               	goto	l2572
  5121  0E33                     u1370:	
  5122  0E33                     l2580:	
  5123  0E33  0825               	movf	___wmul@product+1,w
  5124  0E34  00A1               	movwf	?___wmul+1
  5125  0E35  0824               	movf	___wmul@product,w
  5126  0E36  00A0               	movwf	?___wmul
  5127  0E37                     l689:	
  5128  0E37  0008               	return
  5129  0E38                     __end_of___wmul:	
  5130                           
  5131                           	psect	text14
  5132  0061                     __ptext14:	
  5133 ;; *************** function _InitXStrobePattern *****************
  5134 ;; Defined at:
  5135 ;;		line 118 in file "Pattern.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;  pattern         2   36[BANK0 ] PTR struct Pattern
  5138 ;;		 -> pattern_stash(18), NULL(0), 
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;  i               2   53[BANK0 ] int 
  5141 ;;  i               2   51[BANK0 ] int 
  5142 ;;  diag_2_3_sta    4   43[BANK0 ] _Bool [4]
  5143 ;;  diag_1_4_sta    4   39[BANK0 ] _Bool [4]
  5144 ;;  head            2   57[BANK0 ] PTR struct Stage
  5145 ;;		 -> stage_stash(768), NULL(0), 
  5146 ;;  off             2   55[BANK0 ] PTR struct Stage
  5147 ;;		 -> stage_stash(768), NULL(0), 
  5148 ;;  diag_2_3        2   49[BANK0 ] PTR struct Stage
  5149 ;;		 -> stage_stash(768), NULL(0), 
  5150 ;;  diag_1_4        2   47[BANK0 ] PTR struct Stage
  5151 ;;		 -> stage_stash(768), NULL(0), 
  5152 ;; Return value:  Size  Location     Type
  5153 ;;                  1    wreg      void 
  5154 ;; Registers used:
  5155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5161 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5162 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5164 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5165 ;;Total ram usage:       23 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; Hardware stack levels required when called:    9
  5168 ;; This function calls:
  5169 ;;		_AppendStage
  5170 ;;		_ConstructStage
  5171 ;;		_CopyStageData
  5172 ;;		_NewStage
  5173 ;; This function is called by:
  5174 ;;		_InitPatternSelector
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           
  5179                           ;psect for function _InitXStrobePattern
  5180  0061                     _InitXStrobePattern:	
  5181  0061                     l2698:	
  5182                           ;incstack = 0
  5183                           ; Regs used in _InitXStrobePattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5184                           
  5185                           
  5186                           ;Pattern.c: 118: void InitXStrobePattern( struct Pattern* pattern );Pattern.c: 119: {;Pa
      +                          ttern.c: 120:     pattern->name = XSTROBE;
  5187  0061  0020               	movlb	0	; select bank0
  5188  0062  0844               	movf	InitXStrobePattern@pattern,w
  5189  0063  0086               	movwf	6
  5190  0064  0845               	movf	InitXStrobePattern@pattern+1,w
  5191  0065  0087               	movwf	7
  5192  0066  3001               	movlw	1
  5193  0067  0081               	movwf	1
  5194  0068                     l2700:	
  5195                           
  5196                           ;Pattern.c: 123:     _Bool diag_1_4_states[NUM_LIGHTS] = { 1, 0, 0, 1 };
  5197  0068  0021               	movlb	1	; select bank1
  5198  0069  0864               	movf	(InitXStrobePattern@F449+3)^(0+128),w
  5199  006A  0020               	movlb	0	; select bank0
  5200  006B  00CA               	movwf	InitXStrobePattern@diag_1_4_states+3
  5201  006C  0021               	movlb	1	; select bank1
  5202  006D  0863               	movf	(InitXStrobePattern@F449+2)^(0+128),w
  5203  006E  0020               	movlb	0	; select bank0
  5204  006F  00C9               	movwf	InitXStrobePattern@diag_1_4_states+2
  5205  0070  0021               	movlb	1	; select bank1
  5206  0071  0862               	movf	(InitXStrobePattern@F449+1)^(0+128),w
  5207  0072  0020               	movlb	0	; select bank0
  5208  0073  00C8               	movwf	InitXStrobePattern@diag_1_4_states+1
  5209  0074  0021               	movlb	1	; select bank1
  5210  0075  0861               	movf	InitXStrobePattern@F449^(0+128),w
  5211  0076  0020               	movlb	0	; select bank0
  5212  0077  00C7               	movwf	InitXStrobePattern@diag_1_4_states
  5213  0078                     l2702:	
  5214                           
  5215                           ;Pattern.c: 124:     struct Stage* diag_1_4 = ConstructStage( diag_1_4_states, 60UL, ((v
      +                          oid*)0) );
  5216  0078  303C               	movlw	60
  5217  0079  00B3               	movwf	ConstructStage@time_ms
  5218  007A  3000               	movlw	0
  5219  007B  00B4               	movwf	ConstructStage@time_ms+1
  5220  007C  01B5               	clrf	ConstructStage@next
  5221  007D  3047               	movlw	(low (InitXStrobePattern@diag_1_4_states| 0))& (0+255)
  5222  007E  318F  271D  3180   	fcall	_ConstructStage
  5223  0081  0020               	movlb	0	; select bank0
  5224  0082  0834               	movf	?_ConstructStage+1,w
  5225  0083  00D0               	movwf	InitXStrobePattern@diag_1_4+1
  5226  0084  0833               	movf	?_ConstructStage,w
  5227  0085  00CF               	movwf	InitXStrobePattern@diag_1_4
  5228  0086                     l2704:	
  5229                           
  5230                           ;Pattern.c: 126:     _Bool diag_2_3_states[NUM_LIGHTS] = { 0, 1, 1, 0 };
  5231  0086  0021               	movlb	1	; select bank1
  5232  0087  0860               	movf	(InitXStrobePattern@F452+3)^(0+128),w
  5233  0088  0020               	movlb	0	; select bank0
  5234  0089  00CE               	movwf	InitXStrobePattern@diag_2_3_states+3
  5235  008A  0021               	movlb	1	; select bank1
  5236  008B  085F               	movf	(InitXStrobePattern@F452+2)^(0+128),w
  5237  008C  0020               	movlb	0	; select bank0
  5238  008D  00CD               	movwf	InitXStrobePattern@diag_2_3_states+2
  5239  008E  0021               	movlb	1	; select bank1
  5240  008F  085E               	movf	(InitXStrobePattern@F452+1)^(0+128),w
  5241  0090  0020               	movlb	0	; select bank0
  5242  0091  00CC               	movwf	InitXStrobePattern@diag_2_3_states+1
  5243  0092  0021               	movlb	1	; select bank1
  5244  0093  085D               	movf	InitXStrobePattern@F452^(0+128),w
  5245  0094  0020               	movlb	0	; select bank0
  5246  0095  00CB               	movwf	InitXStrobePattern@diag_2_3_states
  5247  0096                     l2706:	
  5248                           
  5249                           ;Pattern.c: 127:     struct Stage* diag_2_3 = ConstructStage( diag_2_3_states, 60UL, ((v
      +                          oid*)0) );
  5250  0096  303C               	movlw	60
  5251  0097  00B3               	movwf	ConstructStage@time_ms
  5252  0098  3000               	movlw	0
  5253  0099  00B4               	movwf	ConstructStage@time_ms+1
  5254  009A  01B5               	clrf	ConstructStage@next
  5255  009B  304B               	movlw	(low (InitXStrobePattern@diag_2_3_states| 0))& (0+255)
  5256  009C  318F  271D  3180   	fcall	_ConstructStage
  5257  009F  0020               	movlb	0	; select bank0
  5258  00A0  0834               	movf	?_ConstructStage+1,w
  5259  00A1  00D2               	movwf	InitXStrobePattern@diag_2_3+1
  5260  00A2  0833               	movf	?_ConstructStage,w
  5261  00A3  00D1               	movwf	InitXStrobePattern@diag_2_3
  5262  00A4                     l2708:	
  5263                           
  5264                           ;Pattern.c: 129:     struct Stage* off = NewStage();
  5265  00A4  3187  2779  3180   	fcall	_NewStage
  5266  00A7  0020               	movlb	0	; select bank0
  5267  00A8  0821               	movf	?_NewStage+1,w
  5268  00A9  00D8               	movwf	InitXStrobePattern@off+1
  5269  00AA  0820               	movf	?_NewStage,w
  5270  00AB  00D7               	movwf	InitXStrobePattern@off
  5271  00AC                     l2710:	
  5272                           
  5273                           ;Pattern.c: 131:     struct Stage* head = pattern->first_stage;
  5274  00AC  0844               	movf	InitXStrobePattern@pattern,w
  5275  00AD  0086               	movwf	6
  5276  00AE  0845               	movf	InitXStrobePattern@pattern+1,w
  5277  00AF  0087               	movwf	7
  5278  00B0  3141               	addfsr 1,1
  5279  00B1  3F40               	moviw [0]fsr1
  5280  00B2  00D9               	movwf	InitXStrobePattern@head
  5281  00B3  3F41               	moviw [1]fsr1
  5282  00B4  00DA               	movwf	InitXStrobePattern@head+1
  5283  00B5                     l2712:	
  5284                           
  5285                           ;Pattern.c: 134:     for( int i = 0; i < 3; i++ )
  5286  00B5  01D3               	clrf	InitXStrobePattern@i
  5287  00B6  01D4               	clrf	InitXStrobePattern@i+1
  5288  00B7                     l2718:	
  5289                           
  5290                           ;Pattern.c: 135:     {;Pattern.c: 136:         AppendStage( head, CopyStageData( NewStag
      +                          e(), diag_1_4 ) );
  5291  00B7  0020               	movlb	0	; select bank0
  5292  00B8  085A               	movf	InitXStrobePattern@head+1,w
  5293  00B9  00BD               	movwf	AppendStage@head+1
  5294  00BA  0859               	movf	InitXStrobePattern@head,w
  5295  00BB  00BC               	movwf	AppendStage@head
  5296  00BC  3187  2779  3180   	fcall	_NewStage
  5297  00BF  0020               	movlb	0	; select bank0
  5298  00C0  0821               	movf	?_NewStage+1,w
  5299  00C1  00B4               	movwf	CopyStageData@dest+1
  5300  00C2  0820               	movf	?_NewStage,w
  5301  00C3  00B3               	movwf	CopyStageData@dest
  5302  00C4  0850               	movf	InitXStrobePattern@diag_1_4+1,w
  5303  00C5  00B6               	movwf	CopyStageData@source+1
  5304  00C6  084F               	movf	InitXStrobePattern@diag_1_4,w
  5305  00C7  00B5               	movwf	CopyStageData@source
  5306  00C8  318F  274A  3180   	fcall	_CopyStageData
  5307  00CB  0020               	movlb	0	; select bank0
  5308  00CC  0834               	movf	?_CopyStageData+1,w
  5309  00CD  00BF               	movwf	AppendStage@new_stage+1
  5310  00CE  0833               	movf	?_CopyStageData,w
  5311  00CF  00BE               	movwf	AppendStage@new_stage
  5312  00D0  3187  2721  3180   	fcall	_AppendStage
  5313                           
  5314                           ;Pattern.c: 137:         AppendStage( head, CopyStageData( NewStage(), off ) );
  5315  00D3  0020               	movlb	0	; select bank0
  5316  00D4  085A               	movf	InitXStrobePattern@head+1,w
  5317  00D5  00BD               	movwf	AppendStage@head+1
  5318  00D6  0859               	movf	InitXStrobePattern@head,w
  5319  00D7  00BC               	movwf	AppendStage@head
  5320  00D8  3187  2779  3180   	fcall	_NewStage
  5321  00DB  0020               	movlb	0	; select bank0
  5322  00DC  0821               	movf	?_NewStage+1,w
  5323  00DD  00B4               	movwf	CopyStageData@dest+1
  5324  00DE  0820               	movf	?_NewStage,w
  5325  00DF  00B3               	movwf	CopyStageData@dest
  5326  00E0  0858               	movf	InitXStrobePattern@off+1,w
  5327  00E1  00B6               	movwf	CopyStageData@source+1
  5328  00E2  0857               	movf	InitXStrobePattern@off,w
  5329  00E3  00B5               	movwf	CopyStageData@source
  5330  00E4  318F  274A  3180   	fcall	_CopyStageData
  5331  00E7  0020               	movlb	0	; select bank0
  5332  00E8  0834               	movf	?_CopyStageData+1,w
  5333  00E9  00BF               	movwf	AppendStage@new_stage+1
  5334  00EA  0833               	movf	?_CopyStageData,w
  5335  00EB  00BE               	movwf	AppendStage@new_stage
  5336  00EC  3187  2721  3180   	fcall	_AppendStage
  5337  00EF                     l2720:	
  5338                           
  5339                           ;Pattern.c: 138:     }
  5340  00EF  3001               	movlw	1
  5341  00F0  0020               	movlb	0	; select bank0
  5342  00F1  07D3               	addwf	InitXStrobePattern@i,f
  5343  00F2  3000               	movlw	0
  5344  00F3  3DD4               	addwfc	InitXStrobePattern@i+1,f
  5345  00F4                     l2722:	
  5346  00F4  0854               	movf	InitXStrobePattern@i+1,w
  5347  00F5  3A80               	xorlw	128
  5348  00F6  00C6               	movwf	??_InitXStrobePattern
  5349  00F7  3080               	movlw	128
  5350  00F8  0246               	subwf	??_InitXStrobePattern,w
  5351  00F9  1D03               	skipz
  5352  00FA  28FD               	goto	u1415
  5353  00FB  3003               	movlw	3
  5354  00FC  0253               	subwf	InitXStrobePattern@i,w
  5355  00FD                     u1415:	
  5356  00FD  1C03               	skipc
  5357  00FE  2900               	goto	u1411
  5358  00FF  2901               	goto	u1410
  5359  0100                     u1411:	
  5360  0100  28B7               	goto	l2718
  5361  0101                     u1410:	
  5362  0101                     l2724:	
  5363                           
  5364                           ;Pattern.c: 141:     AppendStage( head, CopyStageData( NewStage(), off ) );
  5365  0101  0020               	movlb	0	; select bank0
  5366  0102  085A               	movf	InitXStrobePattern@head+1,w
  5367  0103  00BD               	movwf	AppendStage@head+1
  5368  0104  0859               	movf	InitXStrobePattern@head,w
  5369  0105  00BC               	movwf	AppendStage@head
  5370  0106  3187  2779  3180   	fcall	_NewStage
  5371  0109  0020               	movlb	0	; select bank0
  5372  010A  0821               	movf	?_NewStage+1,w
  5373  010B  00B4               	movwf	CopyStageData@dest+1
  5374  010C  0820               	movf	?_NewStage,w
  5375  010D  00B3               	movwf	CopyStageData@dest
  5376  010E  0858               	movf	InitXStrobePattern@off+1,w
  5377  010F  00B6               	movwf	CopyStageData@source+1
  5378  0110  0857               	movf	InitXStrobePattern@off,w
  5379  0111  00B5               	movwf	CopyStageData@source
  5380  0112  318F  274A  3180   	fcall	_CopyStageData
  5381  0115  0020               	movlb	0	; select bank0
  5382  0116  0834               	movf	?_CopyStageData+1,w
  5383  0117  00BF               	movwf	AppendStage@new_stage+1
  5384  0118  0833               	movf	?_CopyStageData,w
  5385  0119  00BE               	movwf	AppendStage@new_stage
  5386  011A  3187  2721  3180   	fcall	_AppendStage
  5387  011D                     l2726:	
  5388                           
  5389                           ;Pattern.c: 144:     for( int i = 0; i < 3; i++ )
  5390  011D  0020               	movlb	0	; select bank0
  5391  011E  01D5               	clrf	InitXStrobePattern@i_880
  5392  011F  01D6               	clrf	InitXStrobePattern@i_880+1
  5393  0120                     l2732:	
  5394                           
  5395                           ;Pattern.c: 145:     {;Pattern.c: 146:         AppendStage( head, CopyStageData( NewStag
      +                          e(), diag_2_3 ) );
  5396  0120  0020               	movlb	0	; select bank0
  5397  0121  085A               	movf	InitXStrobePattern@head+1,w
  5398  0122  00BD               	movwf	AppendStage@head+1
  5399  0123  0859               	movf	InitXStrobePattern@head,w
  5400  0124  00BC               	movwf	AppendStage@head
  5401  0125  3187  2779  3180   	fcall	_NewStage
  5402  0128  0020               	movlb	0	; select bank0
  5403  0129  0821               	movf	?_NewStage+1,w
  5404  012A  00B4               	movwf	CopyStageData@dest+1
  5405  012B  0820               	movf	?_NewStage,w
  5406  012C  00B3               	movwf	CopyStageData@dest
  5407  012D  0852               	movf	InitXStrobePattern@diag_2_3+1,w
  5408  012E  00B6               	movwf	CopyStageData@source+1
  5409  012F  0851               	movf	InitXStrobePattern@diag_2_3,w
  5410  0130  00B5               	movwf	CopyStageData@source
  5411  0131  318F  274A  3180   	fcall	_CopyStageData
  5412  0134  0020               	movlb	0	; select bank0
  5413  0135  0834               	movf	?_CopyStageData+1,w
  5414  0136  00BF               	movwf	AppendStage@new_stage+1
  5415  0137  0833               	movf	?_CopyStageData,w
  5416  0138  00BE               	movwf	AppendStage@new_stage
  5417  0139  3187  2721  3180   	fcall	_AppendStage
  5418                           
  5419                           ;Pattern.c: 147:         AppendStage( head, CopyStageData( NewStage(), off ) );
  5420  013C  0020               	movlb	0	; select bank0
  5421  013D  085A               	movf	InitXStrobePattern@head+1,w
  5422  013E  00BD               	movwf	AppendStage@head+1
  5423  013F  0859               	movf	InitXStrobePattern@head,w
  5424  0140  00BC               	movwf	AppendStage@head
  5425  0141  3187  2779  3180   	fcall	_NewStage
  5426  0144  0020               	movlb	0	; select bank0
  5427  0145  0821               	movf	?_NewStage+1,w
  5428  0146  00B4               	movwf	CopyStageData@dest+1
  5429  0147  0820               	movf	?_NewStage,w
  5430  0148  00B3               	movwf	CopyStageData@dest
  5431  0149  0858               	movf	InitXStrobePattern@off+1,w
  5432  014A  00B6               	movwf	CopyStageData@source+1
  5433  014B  0857               	movf	InitXStrobePattern@off,w
  5434  014C  00B5               	movwf	CopyStageData@source
  5435  014D  318F  274A  3180   	fcall	_CopyStageData
  5436  0150  0020               	movlb	0	; select bank0
  5437  0151  0834               	movf	?_CopyStageData+1,w
  5438  0152  00BF               	movwf	AppendStage@new_stage+1
  5439  0153  0833               	movf	?_CopyStageData,w
  5440  0154  00BE               	movwf	AppendStage@new_stage
  5441  0155  3187  2721  3180   	fcall	_AppendStage
  5442  0158                     l2734:	
  5443                           
  5444                           ;Pattern.c: 148:     }
  5445  0158  3001               	movlw	1
  5446  0159  0020               	movlb	0	; select bank0
  5447  015A  07D5               	addwf	InitXStrobePattern@i_880,f
  5448  015B  3000               	movlw	0
  5449  015C  3DD6               	addwfc	InitXStrobePattern@i_880+1,f
  5450  015D                     l2736:	
  5451  015D  0856               	movf	InitXStrobePattern@i_880+1,w
  5452  015E  3A80               	xorlw	128
  5453  015F  00C6               	movwf	??_InitXStrobePattern
  5454  0160  3080               	movlw	128
  5455  0161  0246               	subwf	??_InitXStrobePattern,w
  5456  0162  1D03               	skipz
  5457  0163  2966               	goto	u1425
  5458  0164  3003               	movlw	3
  5459  0165  0255               	subwf	InitXStrobePattern@i_880,w
  5460  0166                     u1425:	
  5461  0166  1C03               	skipc
  5462  0167  2969               	goto	u1421
  5463  0168  296A               	goto	u1420
  5464  0169                     u1421:	
  5465  0169  2920               	goto	l2732
  5466  016A                     u1420:	
  5467  016A                     l469:	
  5468  016A  0008               	return
  5469  016B                     __end_of_InitXStrobePattern:	
  5470                           
  5471                           	psect	text15
  5472  037F                     __ptext15:	
  5473 ;; *************** function _InitWigwagPattern *****************
  5474 ;; Defined at:
  5475 ;;		line 85 in file "Pattern.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;  pattern         2   36[BANK0 ] PTR struct Pattern
  5478 ;;		 -> pattern_stash(18), NULL(0), 
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;  i               2   53[BANK0 ] int 
  5481 ;;  i               2   51[BANK0 ] int 
  5482 ;;  right_side_s    4   43[BANK0 ] _Bool [4]
  5483 ;;  left_side_st    4   39[BANK0 ] _Bool [4]
  5484 ;;  head            2   57[BANK0 ] PTR struct Stage
  5485 ;;		 -> stage_stash(768), NULL(0), 
  5486 ;;  off             2   55[BANK0 ] PTR struct Stage
  5487 ;;		 -> stage_stash(768), NULL(0), 
  5488 ;;  right_side_o    2   49[BANK0 ] PTR struct Stage
  5489 ;;		 -> stage_stash(768), NULL(0), 
  5490 ;;  left_side_on    2   47[BANK0 ] PTR struct Stage
  5491 ;;		 -> stage_stash(768), NULL(0), 
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  1    wreg      void 
  5494 ;; Registers used:
  5495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5501 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;Total ram usage:       23 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; Hardware stack levels required when called:    9
  5508 ;; This function calls:
  5509 ;;		_AppendStage
  5510 ;;		_ConstructStage
  5511 ;;		_CopyStageData
  5512 ;;		_NewStage
  5513 ;; This function is called by:
  5514 ;;		_InitPatternSelector
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518                           
  5519                           ;psect for function _InitWigwagPattern
  5520  037F                     _InitWigwagPattern:	
  5521  037F                     l2658:	
  5522                           ;incstack = 0
  5523                           ; Regs used in _InitWigwagPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5524                           
  5525                           
  5526                           ;Pattern.c: 85: void InitWigwagPattern( struct Pattern* pattern );Pattern.c: 86: {;Patte
      +                          rn.c: 87:     pattern->name = WIGWAG;
  5527  037F  0020               	movlb	0	; select bank0
  5528  0380  0844               	movf	InitWigwagPattern@pattern,w
  5529  0381  0086               	movwf	6
  5530  0382  0845               	movf	InitWigwagPattern@pattern+1,w
  5531  0383  0087               	movwf	7
  5532  0384  0181               	clrf	1
  5533  0385                     l2660:	
  5534                           
  5535                           ;Pattern.c: 90:     _Bool left_side_states[NUM_LIGHTS] = { 1, 0, 1, 0 };
  5536  0385  0021               	movlb	1	; select bank1
  5537  0386  086C               	movf	(InitWigwagPattern@F437+3)^(0+128),w
  5538  0387  0020               	movlb	0	; select bank0
  5539  0388  00CA               	movwf	InitWigwagPattern@left_side_states+3
  5540  0389  0021               	movlb	1	; select bank1
  5541  038A  086B               	movf	(InitWigwagPattern@F437+2)^(0+128),w
  5542  038B  0020               	movlb	0	; select bank0
  5543  038C  00C9               	movwf	InitWigwagPattern@left_side_states+2
  5544  038D  0021               	movlb	1	; select bank1
  5545  038E  086A               	movf	(InitWigwagPattern@F437+1)^(0+128),w
  5546  038F  0020               	movlb	0	; select bank0
  5547  0390  00C8               	movwf	InitWigwagPattern@left_side_states+1
  5548  0391  0021               	movlb	1	; select bank1
  5549  0392  0869               	movf	InitWigwagPattern@F437^(0+128),w
  5550  0393  0020               	movlb	0	; select bank0
  5551  0394  00C7               	movwf	InitWigwagPattern@left_side_states
  5552  0395                     l2662:	
  5553                           
  5554                           ;Pattern.c: 91:     struct Stage* left_side_on = ConstructStage( left_side_states, 60UL,
      +                           ((void*)0) );
  5555  0395  303C               	movlw	60
  5556  0396  00B3               	movwf	ConstructStage@time_ms
  5557  0397  3000               	movlw	0
  5558  0398  00B4               	movwf	ConstructStage@time_ms+1
  5559  0399  01B5               	clrf	ConstructStage@next
  5560  039A  3047               	movlw	(low (InitWigwagPattern@left_side_states| 0))& (0+255)
  5561  039B  318F  271D  3183   	fcall	_ConstructStage
  5562  039E  0020               	movlb	0	; select bank0
  5563  039F  0834               	movf	?_ConstructStage+1,w
  5564  03A0  00D0               	movwf	InitWigwagPattern@left_side_on+1
  5565  03A1  0833               	movf	?_ConstructStage,w
  5566  03A2  00CF               	movwf	InitWigwagPattern@left_side_on
  5567  03A3                     l2664:	
  5568                           
  5569                           ;Pattern.c: 93:     _Bool right_side_states[NUM_LIGHTS] = { 0, 1, 0, 1 };
  5570  03A3  0021               	movlb	1	; select bank1
  5571  03A4  0868               	movf	(InitWigwagPattern@F440+3)^(0+128),w
  5572  03A5  0020               	movlb	0	; select bank0
  5573  03A6  00CE               	movwf	InitWigwagPattern@right_side_states+3
  5574  03A7  0021               	movlb	1	; select bank1
  5575  03A8  0867               	movf	(InitWigwagPattern@F440+2)^(0+128),w
  5576  03A9  0020               	movlb	0	; select bank0
  5577  03AA  00CD               	movwf	InitWigwagPattern@right_side_states+2
  5578  03AB  0021               	movlb	1	; select bank1
  5579  03AC  0866               	movf	(InitWigwagPattern@F440+1)^(0+128),w
  5580  03AD  0020               	movlb	0	; select bank0
  5581  03AE  00CC               	movwf	InitWigwagPattern@right_side_states+1
  5582  03AF  0021               	movlb	1	; select bank1
  5583  03B0  0865               	movf	InitWigwagPattern@F440^(0+128),w
  5584  03B1  0020               	movlb	0	; select bank0
  5585  03B2  00CB               	movwf	InitWigwagPattern@right_side_states
  5586  03B3                     l2666:	
  5587                           
  5588                           ;Pattern.c: 94:     struct Stage* right_side_on = ConstructStage( right_side_states, 60U
      +                          L, ((void*)0) );
  5589  03B3  303C               	movlw	60
  5590  03B4  00B3               	movwf	ConstructStage@time_ms
  5591  03B5  3000               	movlw	0
  5592  03B6  00B4               	movwf	ConstructStage@time_ms+1
  5593  03B7  01B5               	clrf	ConstructStage@next
  5594  03B8  304B               	movlw	(low (InitWigwagPattern@right_side_states| 0))& (0+255)
  5595  03B9  318F  271D  3183   	fcall	_ConstructStage
  5596  03BC  0020               	movlb	0	; select bank0
  5597  03BD  0834               	movf	?_ConstructStage+1,w
  5598  03BE  00D2               	movwf	InitWigwagPattern@right_side_on+1
  5599  03BF  0833               	movf	?_ConstructStage,w
  5600  03C0  00D1               	movwf	InitWigwagPattern@right_side_on
  5601  03C1                     l2668:	
  5602                           
  5603                           ;Pattern.c: 96:     struct Stage* off = NewStage();
  5604  03C1  3187  2779  3183   	fcall	_NewStage
  5605  03C4  0020               	movlb	0	; select bank0
  5606  03C5  0821               	movf	?_NewStage+1,w
  5607  03C6  00D8               	movwf	InitWigwagPattern@off+1
  5608  03C7  0820               	movf	?_NewStage,w
  5609  03C8  00D7               	movwf	InitWigwagPattern@off
  5610  03C9                     l2670:	
  5611                           
  5612                           ;Pattern.c: 98:     struct Stage* head = pattern->first_stage;
  5613  03C9  0844               	movf	InitWigwagPattern@pattern,w
  5614  03CA  0086               	movwf	6
  5615  03CB  0845               	movf	InitWigwagPattern@pattern+1,w
  5616  03CC  0087               	movwf	7
  5617  03CD  3141               	addfsr 1,1
  5618  03CE  3F40               	moviw [0]fsr1
  5619  03CF  00D9               	movwf	InitWigwagPattern@head
  5620  03D0  3F41               	moviw [1]fsr1
  5621  03D1  00DA               	movwf	InitWigwagPattern@head+1
  5622  03D2                     l2672:	
  5623                           
  5624                           ;Pattern.c: 101:     for( int i = 0; i < 3; i++ )
  5625  03D2  01D3               	clrf	InitWigwagPattern@i
  5626  03D3  01D4               	clrf	InitWigwagPattern@i+1
  5627  03D4                     l2678:	
  5628                           
  5629                           ;Pattern.c: 102:     {;Pattern.c: 103:         AppendStage( head, CopyStageData( NewStag
      +                          e(), left_side_on ) );
  5630  03D4  0020               	movlb	0	; select bank0
  5631  03D5  085A               	movf	InitWigwagPattern@head+1,w
  5632  03D6  00BD               	movwf	AppendStage@head+1
  5633  03D7  0859               	movf	InitWigwagPattern@head,w
  5634  03D8  00BC               	movwf	AppendStage@head
  5635  03D9  3187  2779  3183   	fcall	_NewStage
  5636  03DC  0020               	movlb	0	; select bank0
  5637  03DD  0821               	movf	?_NewStage+1,w
  5638  03DE  00B4               	movwf	CopyStageData@dest+1
  5639  03DF  0820               	movf	?_NewStage,w
  5640  03E0  00B3               	movwf	CopyStageData@dest
  5641  03E1  0850               	movf	InitWigwagPattern@left_side_on+1,w
  5642  03E2  00B6               	movwf	CopyStageData@source+1
  5643  03E3  084F               	movf	InitWigwagPattern@left_side_on,w
  5644  03E4  00B5               	movwf	CopyStageData@source
  5645  03E5  318F  274A  3183   	fcall	_CopyStageData
  5646  03E8  0020               	movlb	0	; select bank0
  5647  03E9  0834               	movf	?_CopyStageData+1,w
  5648  03EA  00BF               	movwf	AppendStage@new_stage+1
  5649  03EB  0833               	movf	?_CopyStageData,w
  5650  03EC  00BE               	movwf	AppendStage@new_stage
  5651  03ED  3187  2721  3183   	fcall	_AppendStage
  5652                           
  5653                           ;Pattern.c: 104:         AppendStage( head, CopyStageData( NewStage(), off ) );
  5654  03F0  0020               	movlb	0	; select bank0
  5655  03F1  085A               	movf	InitWigwagPattern@head+1,w
  5656  03F2  00BD               	movwf	AppendStage@head+1
  5657  03F3  0859               	movf	InitWigwagPattern@head,w
  5658  03F4  00BC               	movwf	AppendStage@head
  5659  03F5  3187  2779  3183   	fcall	_NewStage
  5660  03F8  0020               	movlb	0	; select bank0
  5661  03F9  0821               	movf	?_NewStage+1,w
  5662  03FA  00B4               	movwf	CopyStageData@dest+1
  5663  03FB  0820               	movf	?_NewStage,w
  5664  03FC  00B3               	movwf	CopyStageData@dest
  5665  03FD  0858               	movf	InitWigwagPattern@off+1,w
  5666  03FE  00B6               	movwf	CopyStageData@source+1
  5667  03FF  0857               	movf	InitWigwagPattern@off,w
  5668  0400  00B5               	movwf	CopyStageData@source
  5669  0401  318F  274A  3183   	fcall	_CopyStageData
  5670  0404  0020               	movlb	0	; select bank0
  5671  0405  0834               	movf	?_CopyStageData+1,w
  5672  0406  00BF               	movwf	AppendStage@new_stage+1
  5673  0407  0833               	movf	?_CopyStageData,w
  5674  0408  00BE               	movwf	AppendStage@new_stage
  5675  0409  3187  2721  3183   	fcall	_AppendStage
  5676  040C                     l2680:	
  5677                           
  5678                           ;Pattern.c: 105:     }
  5679  040C  3001               	movlw	1
  5680  040D  0020               	movlb	0	; select bank0
  5681  040E  07D3               	addwf	InitWigwagPattern@i,f
  5682  040F  3000               	movlw	0
  5683  0410  3DD4               	addwfc	InitWigwagPattern@i+1,f
  5684  0411                     l2682:	
  5685  0411  0854               	movf	InitWigwagPattern@i+1,w
  5686  0412  3A80               	xorlw	128
  5687  0413  00C6               	movwf	??_InitWigwagPattern
  5688  0414  3080               	movlw	128
  5689  0415  0246               	subwf	??_InitWigwagPattern,w
  5690  0416  1D03               	skipz
  5691  0417  2C1A               	goto	u1395
  5692  0418  3003               	movlw	3
  5693  0419  0253               	subwf	InitWigwagPattern@i,w
  5694  041A                     u1395:	
  5695  041A  1C03               	skipc
  5696  041B  2C1D               	goto	u1391
  5697  041C  2C1E               	goto	u1390
  5698  041D                     u1391:	
  5699  041D  2BD4               	goto	l2678
  5700  041E                     u1390:	
  5701  041E                     l2684:	
  5702                           
  5703                           ;Pattern.c: 108:     AppendStage( head, CopyStageData( NewStage(), off ) );
  5704  041E  0020               	movlb	0	; select bank0
  5705  041F  085A               	movf	InitWigwagPattern@head+1,w
  5706  0420  00BD               	movwf	AppendStage@head+1
  5707  0421  0859               	movf	InitWigwagPattern@head,w
  5708  0422  00BC               	movwf	AppendStage@head
  5709  0423  3187  2779  3183   	fcall	_NewStage
  5710  0426  0020               	movlb	0	; select bank0
  5711  0427  0821               	movf	?_NewStage+1,w
  5712  0428  00B4               	movwf	CopyStageData@dest+1
  5713  0429  0820               	movf	?_NewStage,w
  5714  042A  00B3               	movwf	CopyStageData@dest
  5715  042B  0858               	movf	InitWigwagPattern@off+1,w
  5716  042C  00B6               	movwf	CopyStageData@source+1
  5717  042D  0857               	movf	InitWigwagPattern@off,w
  5718  042E  00B5               	movwf	CopyStageData@source
  5719  042F  318F  274A  3183   	fcall	_CopyStageData
  5720  0432  0020               	movlb	0	; select bank0
  5721  0433  0834               	movf	?_CopyStageData+1,w
  5722  0434  00BF               	movwf	AppendStage@new_stage+1
  5723  0435  0833               	movf	?_CopyStageData,w
  5724  0436  00BE               	movwf	AppendStage@new_stage
  5725  0437  3187  2721  3183   	fcall	_AppendStage
  5726  043A                     l2686:	
  5727                           
  5728                           ;Pattern.c: 111:     for( int i = 0; i < 3; i++ )
  5729  043A  0020               	movlb	0	; select bank0
  5730  043B  01D5               	clrf	InitWigwagPattern@i_854
  5731  043C  01D6               	clrf	InitWigwagPattern@i_854+1
  5732  043D                     l2692:	
  5733                           
  5734                           ;Pattern.c: 112:     {;Pattern.c: 113:         AppendStage( head, CopyStageData( NewStag
      +                          e(), right_side_on ) );
  5735  043D  0020               	movlb	0	; select bank0
  5736  043E  085A               	movf	InitWigwagPattern@head+1,w
  5737  043F  00BD               	movwf	AppendStage@head+1
  5738  0440  0859               	movf	InitWigwagPattern@head,w
  5739  0441  00BC               	movwf	AppendStage@head
  5740  0442  3187  2779  3183   	fcall	_NewStage
  5741  0445  0020               	movlb	0	; select bank0
  5742  0446  0821               	movf	?_NewStage+1,w
  5743  0447  00B4               	movwf	CopyStageData@dest+1
  5744  0448  0820               	movf	?_NewStage,w
  5745  0449  00B3               	movwf	CopyStageData@dest
  5746  044A  0852               	movf	InitWigwagPattern@right_side_on+1,w
  5747  044B  00B6               	movwf	CopyStageData@source+1
  5748  044C  0851               	movf	InitWigwagPattern@right_side_on,w
  5749  044D  00B5               	movwf	CopyStageData@source
  5750  044E  318F  274A  3183   	fcall	_CopyStageData
  5751  0451  0020               	movlb	0	; select bank0
  5752  0452  0834               	movf	?_CopyStageData+1,w
  5753  0453  00BF               	movwf	AppendStage@new_stage+1
  5754  0454  0833               	movf	?_CopyStageData,w
  5755  0455  00BE               	movwf	AppendStage@new_stage
  5756  0456  3187  2721  3183   	fcall	_AppendStage
  5757                           
  5758                           ;Pattern.c: 114:         AppendStage( head, CopyStageData( NewStage(), off ) );
  5759  0459  0020               	movlb	0	; select bank0
  5760  045A  085A               	movf	InitWigwagPattern@head+1,w
  5761  045B  00BD               	movwf	AppendStage@head+1
  5762  045C  0859               	movf	InitWigwagPattern@head,w
  5763  045D  00BC               	movwf	AppendStage@head
  5764  045E  3187  2779  3183   	fcall	_NewStage
  5765  0461  0020               	movlb	0	; select bank0
  5766  0462  0821               	movf	?_NewStage+1,w
  5767  0463  00B4               	movwf	CopyStageData@dest+1
  5768  0464  0820               	movf	?_NewStage,w
  5769  0465  00B3               	movwf	CopyStageData@dest
  5770  0466  0858               	movf	InitWigwagPattern@off+1,w
  5771  0467  00B6               	movwf	CopyStageData@source+1
  5772  0468  0857               	movf	InitWigwagPattern@off,w
  5773  0469  00B5               	movwf	CopyStageData@source
  5774  046A  318F  274A  3183   	fcall	_CopyStageData
  5775  046D  0020               	movlb	0	; select bank0
  5776  046E  0834               	movf	?_CopyStageData+1,w
  5777  046F  00BF               	movwf	AppendStage@new_stage+1
  5778  0470  0833               	movf	?_CopyStageData,w
  5779  0471  00BE               	movwf	AppendStage@new_stage
  5780  0472  3187  2721  3183   	fcall	_AppendStage
  5781  0475                     l2694:	
  5782                           
  5783                           ;Pattern.c: 115:     }
  5784  0475  3001               	movlw	1
  5785  0476  0020               	movlb	0	; select bank0
  5786  0477  07D5               	addwf	InitWigwagPattern@i_854,f
  5787  0478  3000               	movlw	0
  5788  0479  3DD6               	addwfc	InitWigwagPattern@i_854+1,f
  5789  047A                     l2696:	
  5790  047A  0856               	movf	InitWigwagPattern@i_854+1,w
  5791  047B  3A80               	xorlw	128
  5792  047C  00C6               	movwf	??_InitWigwagPattern
  5793  047D  3080               	movlw	128
  5794  047E  0246               	subwf	??_InitWigwagPattern,w
  5795  047F  1D03               	skipz
  5796  0480  2C83               	goto	u1405
  5797  0481  3003               	movlw	3
  5798  0482  0255               	subwf	InitWigwagPattern@i_854,w
  5799  0483                     u1405:	
  5800  0483  1C03               	skipc
  5801  0484  2C86               	goto	u1401
  5802  0485  2C87               	goto	u1400
  5803  0486                     u1401:	
  5804  0486  2C3D               	goto	l2692
  5805  0487                     u1400:	
  5806  0487                     l458:	
  5807  0487  0008               	return
  5808  0488                     __end_of_InitWigwagPattern:	
  5809                           
  5810                           	psect	text16
  5811  016B                     __ptext16:	
  5812 ;; *************** function _InitUpperLowerPattern *****************
  5813 ;; Defined at:
  5814 ;;		line 151 in file "Pattern.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;  pattern         2   36[BANK0 ] PTR struct Pattern
  5817 ;;		 -> pattern_stash(18), NULL(0), 
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;  i               2   53[BANK0 ] int 
  5820 ;;  i               2   51[BANK0 ] int 
  5821 ;;  lower_states    4   43[BANK0 ] _Bool [4]
  5822 ;;  upper_states    4   39[BANK0 ] _Bool [4]
  5823 ;;  head            2   57[BANK0 ] PTR struct Stage
  5824 ;;		 -> stage_stash(768), NULL(0), 
  5825 ;;  off             2   55[BANK0 ] PTR struct Stage
  5826 ;;		 -> stage_stash(768), NULL(0), 
  5827 ;;  lower           2   49[BANK0 ] PTR struct Stage
  5828 ;;		 -> stage_stash(768), NULL(0), 
  5829 ;;  upper           2   47[BANK0 ] PTR struct Stage
  5830 ;;		 -> stage_stash(768), NULL(0), 
  5831 ;; Return value:  Size  Location     Type
  5832 ;;                  1    wreg      void 
  5833 ;; Registers used:
  5834 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5840 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5844 ;;Total ram usage:       23 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:    9
  5847 ;; This function calls:
  5848 ;;		_AppendStage
  5849 ;;		_ConstructStage
  5850 ;;		_CopyStageData
  5851 ;;		_NewStage
  5852 ;; This function is called by:
  5853 ;;		_InitPatternSelector
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           
  5858                           ;psect for function _InitUpperLowerPattern
  5859  016B                     _InitUpperLowerPattern:	
  5860  016B                     l2738:	
  5861                           ;incstack = 0
  5862                           ; Regs used in _InitUpperLowerPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5863                           
  5864                           
  5865                           ;Pattern.c: 151: void InitUpperLowerPattern( struct Pattern* pattern );Pattern.c: 152: {
      +                          ;Pattern.c: 153:     pattern->name = UPPER_LOWER;
  5866  016B  0020               	movlb	0	; select bank0
  5867  016C  0844               	movf	InitUpperLowerPattern@pattern,w
  5868  016D  0086               	movwf	6
  5869  016E  0845               	movf	InitUpperLowerPattern@pattern+1,w
  5870  016F  0087               	movwf	7
  5871  0170  3002               	movlw	2
  5872  0171  0081               	movwf	1
  5873  0172                     l2740:	
  5874                           
  5875                           ;Pattern.c: 156:     _Bool upper_states[NUM_LIGHTS] = { 1, 1, 0, 0 };
  5876  0172  0021               	movlb	1	; select bank1
  5877  0173  085C               	movf	(InitUpperLowerPattern@F461+3)^(0+128),w
  5878  0174  0020               	movlb	0	; select bank0
  5879  0175  00CA               	movwf	InitUpperLowerPattern@upper_states+3
  5880  0176  0021               	movlb	1	; select bank1
  5881  0177  085B               	movf	(InitUpperLowerPattern@F461+2)^(0+128),w
  5882  0178  0020               	movlb	0	; select bank0
  5883  0179  00C9               	movwf	InitUpperLowerPattern@upper_states+2
  5884  017A  0021               	movlb	1	; select bank1
  5885  017B  085A               	movf	(InitUpperLowerPattern@F461+1)^(0+128),w
  5886  017C  0020               	movlb	0	; select bank0
  5887  017D  00C8               	movwf	InitUpperLowerPattern@upper_states+1
  5888  017E  0021               	movlb	1	; select bank1
  5889  017F  0859               	movf	InitUpperLowerPattern@F461^(0+128),w
  5890  0180  0020               	movlb	0	; select bank0
  5891  0181  00C7               	movwf	InitUpperLowerPattern@upper_states
  5892  0182                     l2742:	
  5893                           
  5894                           ;Pattern.c: 157:     struct Stage* upper = ConstructStage( upper_states, 60UL, ((void*)0
      +                          ) );
  5895  0182  303C               	movlw	60
  5896  0183  00B3               	movwf	ConstructStage@time_ms
  5897  0184  3000               	movlw	0
  5898  0185  00B4               	movwf	ConstructStage@time_ms+1
  5899  0186  01B5               	clrf	ConstructStage@next
  5900  0187  3047               	movlw	(low (InitUpperLowerPattern@upper_states| 0))& (0+255)
  5901  0188  318F  271D  3181   	fcall	_ConstructStage
  5902  018B  0020               	movlb	0	; select bank0
  5903  018C  0834               	movf	?_ConstructStage+1,w
  5904  018D  00D0               	movwf	InitUpperLowerPattern@upper+1
  5905  018E  0833               	movf	?_ConstructStage,w
  5906  018F  00CF               	movwf	InitUpperLowerPattern@upper
  5907  0190                     l2744:	
  5908                           
  5909                           ;Pattern.c: 159:     _Bool lower_states[NUM_LIGHTS] = { 0, 0, 1, 1 };
  5910  0190  0021               	movlb	1	; select bank1
  5911  0191  0858               	movf	(InitUpperLowerPattern@F464+3)^(0+128),w
  5912  0192  0020               	movlb	0	; select bank0
  5913  0193  00CE               	movwf	InitUpperLowerPattern@lower_states+3
  5914  0194  0021               	movlb	1	; select bank1
  5915  0195  0857               	movf	(InitUpperLowerPattern@F464+2)^(0+128),w
  5916  0196  0020               	movlb	0	; select bank0
  5917  0197  00CD               	movwf	InitUpperLowerPattern@lower_states+2
  5918  0198  0021               	movlb	1	; select bank1
  5919  0199  0856               	movf	(InitUpperLowerPattern@F464+1)^(0+128),w
  5920  019A  0020               	movlb	0	; select bank0
  5921  019B  00CC               	movwf	InitUpperLowerPattern@lower_states+1
  5922  019C  0021               	movlb	1	; select bank1
  5923  019D  0855               	movf	InitUpperLowerPattern@F464^(0+128),w
  5924  019E  0020               	movlb	0	; select bank0
  5925  019F  00CB               	movwf	InitUpperLowerPattern@lower_states
  5926  01A0                     l2746:	
  5927                           
  5928                           ;Pattern.c: 160:     struct Stage* lower = ConstructStage( lower_states, 60UL, ((void*)0
      +                          ) );
  5929  01A0  303C               	movlw	60
  5930  01A1  00B3               	movwf	ConstructStage@time_ms
  5931  01A2  3000               	movlw	0
  5932  01A3  00B4               	movwf	ConstructStage@time_ms+1
  5933  01A4  01B5               	clrf	ConstructStage@next
  5934  01A5  304B               	movlw	(low (InitUpperLowerPattern@lower_states| 0))& (0+255)
  5935  01A6  318F  271D  3181   	fcall	_ConstructStage
  5936  01A9  0020               	movlb	0	; select bank0
  5937  01AA  0834               	movf	?_ConstructStage+1,w
  5938  01AB  00D2               	movwf	InitUpperLowerPattern@lower+1
  5939  01AC  0833               	movf	?_ConstructStage,w
  5940  01AD  00D1               	movwf	InitUpperLowerPattern@lower
  5941  01AE                     l2748:	
  5942                           
  5943                           ;Pattern.c: 162:     struct Stage* off = NewStage();
  5944  01AE  3187  2779  3181   	fcall	_NewStage
  5945  01B1  0020               	movlb	0	; select bank0
  5946  01B2  0821               	movf	?_NewStage+1,w
  5947  01B3  00D8               	movwf	InitUpperLowerPattern@off+1
  5948  01B4  0820               	movf	?_NewStage,w
  5949  01B5  00D7               	movwf	InitUpperLowerPattern@off
  5950  01B6                     l2750:	
  5951                           
  5952                           ;Pattern.c: 165:     struct Stage* head = pattern->first_stage;
  5953  01B6  0844               	movf	InitUpperLowerPattern@pattern,w
  5954  01B7  0086               	movwf	6
  5955  01B8  0845               	movf	InitUpperLowerPattern@pattern+1,w
  5956  01B9  0087               	movwf	7
  5957  01BA  3141               	addfsr 1,1
  5958  01BB  3F40               	moviw [0]fsr1
  5959  01BC  00D9               	movwf	InitUpperLowerPattern@head
  5960  01BD  3F41               	moviw [1]fsr1
  5961  01BE  00DA               	movwf	InitUpperLowerPattern@head+1
  5962  01BF                     l2752:	
  5963                           
  5964                           ;Pattern.c: 168:     for( int i = 0; i < 3; i++ )
  5965  01BF  01D3               	clrf	InitUpperLowerPattern@i
  5966  01C0  01D4               	clrf	InitUpperLowerPattern@i+1
  5967  01C1                     l2758:	
  5968                           
  5969                           ;Pattern.c: 169:     {;Pattern.c: 170:         AppendStage( head, CopyStageData( NewStag
      +                          e(), upper ) );
  5970  01C1  0020               	movlb	0	; select bank0
  5971  01C2  085A               	movf	InitUpperLowerPattern@head+1,w
  5972  01C3  00BD               	movwf	AppendStage@head+1
  5973  01C4  0859               	movf	InitUpperLowerPattern@head,w
  5974  01C5  00BC               	movwf	AppendStage@head
  5975  01C6  3187  2779  3181   	fcall	_NewStage
  5976  01C9  0020               	movlb	0	; select bank0
  5977  01CA  0821               	movf	?_NewStage+1,w
  5978  01CB  00B4               	movwf	CopyStageData@dest+1
  5979  01CC  0820               	movf	?_NewStage,w
  5980  01CD  00B3               	movwf	CopyStageData@dest
  5981  01CE  0850               	movf	InitUpperLowerPattern@upper+1,w
  5982  01CF  00B6               	movwf	CopyStageData@source+1
  5983  01D0  084F               	movf	InitUpperLowerPattern@upper,w
  5984  01D1  00B5               	movwf	CopyStageData@source
  5985  01D2  318F  274A  3181   	fcall	_CopyStageData
  5986  01D5  0020               	movlb	0	; select bank0
  5987  01D6  0834               	movf	?_CopyStageData+1,w
  5988  01D7  00BF               	movwf	AppendStage@new_stage+1
  5989  01D8  0833               	movf	?_CopyStageData,w
  5990  01D9  00BE               	movwf	AppendStage@new_stage
  5991  01DA  3187  2721  3181   	fcall	_AppendStage
  5992                           
  5993                           ;Pattern.c: 171:         AppendStage( head, CopyStageData( NewStage(), off ) );
  5994  01DD  0020               	movlb	0	; select bank0
  5995  01DE  085A               	movf	InitUpperLowerPattern@head+1,w
  5996  01DF  00BD               	movwf	AppendStage@head+1
  5997  01E0  0859               	movf	InitUpperLowerPattern@head,w
  5998  01E1  00BC               	movwf	AppendStage@head
  5999  01E2  3187  2779  3181   	fcall	_NewStage
  6000  01E5  0020               	movlb	0	; select bank0
  6001  01E6  0821               	movf	?_NewStage+1,w
  6002  01E7  00B4               	movwf	CopyStageData@dest+1
  6003  01E8  0820               	movf	?_NewStage,w
  6004  01E9  00B3               	movwf	CopyStageData@dest
  6005  01EA  0858               	movf	InitUpperLowerPattern@off+1,w
  6006  01EB  00B6               	movwf	CopyStageData@source+1
  6007  01EC  0857               	movf	InitUpperLowerPattern@off,w
  6008  01ED  00B5               	movwf	CopyStageData@source
  6009  01EE  318F  274A  3181   	fcall	_CopyStageData
  6010  01F1  0020               	movlb	0	; select bank0
  6011  01F2  0834               	movf	?_CopyStageData+1,w
  6012  01F3  00BF               	movwf	AppendStage@new_stage+1
  6013  01F4  0833               	movf	?_CopyStageData,w
  6014  01F5  00BE               	movwf	AppendStage@new_stage
  6015  01F6  3187  2721  3181   	fcall	_AppendStage
  6016  01F9                     l2760:	
  6017                           
  6018                           ;Pattern.c: 172:     }
  6019  01F9  3001               	movlw	1
  6020  01FA  0020               	movlb	0	; select bank0
  6021  01FB  07D3               	addwf	InitUpperLowerPattern@i,f
  6022  01FC  3000               	movlw	0
  6023  01FD  3DD4               	addwfc	InitUpperLowerPattern@i+1,f
  6024  01FE                     l2762:	
  6025  01FE  0854               	movf	InitUpperLowerPattern@i+1,w
  6026  01FF  3A80               	xorlw	128
  6027  0200  00C6               	movwf	??_InitUpperLowerPattern
  6028  0201  3080               	movlw	128
  6029  0202  0246               	subwf	??_InitUpperLowerPattern,w
  6030  0203  1D03               	skipz
  6031  0204  2A07               	goto	u1435
  6032  0205  3003               	movlw	3
  6033  0206  0253               	subwf	InitUpperLowerPattern@i,w
  6034  0207                     u1435:	
  6035  0207  1C03               	skipc
  6036  0208  2A0A               	goto	u1431
  6037  0209  2A0B               	goto	u1430
  6038  020A                     u1431:	
  6039  020A  29C1               	goto	l2758
  6040  020B                     u1430:	
  6041  020B                     l2764:	
  6042                           
  6043                           ;Pattern.c: 175:     AppendStage( head, CopyStageData( NewStage(), off ) );
  6044  020B  0020               	movlb	0	; select bank0
  6045  020C  085A               	movf	InitUpperLowerPattern@head+1,w
  6046  020D  00BD               	movwf	AppendStage@head+1
  6047  020E  0859               	movf	InitUpperLowerPattern@head,w
  6048  020F  00BC               	movwf	AppendStage@head
  6049  0210  3187  2779  3181   	fcall	_NewStage
  6050  0213  0020               	movlb	0	; select bank0
  6051  0214  0821               	movf	?_NewStage+1,w
  6052  0215  00B4               	movwf	CopyStageData@dest+1
  6053  0216  0820               	movf	?_NewStage,w
  6054  0217  00B3               	movwf	CopyStageData@dest
  6055  0218  0858               	movf	InitUpperLowerPattern@off+1,w
  6056  0219  00B6               	movwf	CopyStageData@source+1
  6057  021A  0857               	movf	InitUpperLowerPattern@off,w
  6058  021B  00B5               	movwf	CopyStageData@source
  6059  021C  318F  274A  3181   	fcall	_CopyStageData
  6060  021F  0020               	movlb	0	; select bank0
  6061  0220  0834               	movf	?_CopyStageData+1,w
  6062  0221  00BF               	movwf	AppendStage@new_stage+1
  6063  0222  0833               	movf	?_CopyStageData,w
  6064  0223  00BE               	movwf	AppendStage@new_stage
  6065  0224  3187  2721  3181   	fcall	_AppendStage
  6066  0227                     l2766:	
  6067                           
  6068                           ;Pattern.c: 178:     for( int i = 0; i < 3; i++ )
  6069  0227  0020               	movlb	0	; select bank0
  6070  0228  01D5               	clrf	InitUpperLowerPattern@i_906
  6071  0229  01D6               	clrf	InitUpperLowerPattern@i_906+1
  6072  022A                     l2772:	
  6073                           
  6074                           ;Pattern.c: 179:     {;Pattern.c: 180:         AppendStage( head, CopyStageData( NewStag
      +                          e(), lower ) );
  6075  022A  0020               	movlb	0	; select bank0
  6076  022B  085A               	movf	InitUpperLowerPattern@head+1,w
  6077  022C  00BD               	movwf	AppendStage@head+1
  6078  022D  0859               	movf	InitUpperLowerPattern@head,w
  6079  022E  00BC               	movwf	AppendStage@head
  6080  022F  3187  2779  3181   	fcall	_NewStage
  6081  0232  0020               	movlb	0	; select bank0
  6082  0233  0821               	movf	?_NewStage+1,w
  6083  0234  00B4               	movwf	CopyStageData@dest+1
  6084  0235  0820               	movf	?_NewStage,w
  6085  0236  00B3               	movwf	CopyStageData@dest
  6086  0237  0852               	movf	InitUpperLowerPattern@lower+1,w
  6087  0238  00B6               	movwf	CopyStageData@source+1
  6088  0239  0851               	movf	InitUpperLowerPattern@lower,w
  6089  023A  00B5               	movwf	CopyStageData@source
  6090  023B  318F  274A  3181   	fcall	_CopyStageData
  6091  023E  0020               	movlb	0	; select bank0
  6092  023F  0834               	movf	?_CopyStageData+1,w
  6093  0240  00BF               	movwf	AppendStage@new_stage+1
  6094  0241  0833               	movf	?_CopyStageData,w
  6095  0242  00BE               	movwf	AppendStage@new_stage
  6096  0243  3187  2721  3181   	fcall	_AppendStage
  6097                           
  6098                           ;Pattern.c: 181:         AppendStage( head, CopyStageData( NewStage(), off ) );
  6099  0246  0020               	movlb	0	; select bank0
  6100  0247  085A               	movf	InitUpperLowerPattern@head+1,w
  6101  0248  00BD               	movwf	AppendStage@head+1
  6102  0249  0859               	movf	InitUpperLowerPattern@head,w
  6103  024A  00BC               	movwf	AppendStage@head
  6104  024B  3187  2779  3181   	fcall	_NewStage
  6105  024E  0020               	movlb	0	; select bank0
  6106  024F  0821               	movf	?_NewStage+1,w
  6107  0250  00B4               	movwf	CopyStageData@dest+1
  6108  0251  0820               	movf	?_NewStage,w
  6109  0252  00B3               	movwf	CopyStageData@dest
  6110  0253  0858               	movf	InitUpperLowerPattern@off+1,w
  6111  0254  00B6               	movwf	CopyStageData@source+1
  6112  0255  0857               	movf	InitUpperLowerPattern@off,w
  6113  0256  00B5               	movwf	CopyStageData@source
  6114  0257  318F  274A  3181   	fcall	_CopyStageData
  6115  025A  0020               	movlb	0	; select bank0
  6116  025B  0834               	movf	?_CopyStageData+1,w
  6117  025C  00BF               	movwf	AppendStage@new_stage+1
  6118  025D  0833               	movf	?_CopyStageData,w
  6119  025E  00BE               	movwf	AppendStage@new_stage
  6120  025F  3187  2721  3181   	fcall	_AppendStage
  6121  0262                     l2774:	
  6122                           
  6123                           ;Pattern.c: 182:     }
  6124  0262  3001               	movlw	1
  6125  0263  0020               	movlb	0	; select bank0
  6126  0264  07D5               	addwf	InitUpperLowerPattern@i_906,f
  6127  0265  3000               	movlw	0
  6128  0266  3DD6               	addwfc	InitUpperLowerPattern@i_906+1,f
  6129  0267                     l2776:	
  6130  0267  0856               	movf	InitUpperLowerPattern@i_906+1,w
  6131  0268  3A80               	xorlw	128
  6132  0269  00C6               	movwf	??_InitUpperLowerPattern
  6133  026A  3080               	movlw	128
  6134  026B  0246               	subwf	??_InitUpperLowerPattern,w
  6135  026C  1D03               	skipz
  6136  026D  2A70               	goto	u1445
  6137  026E  3003               	movlw	3
  6138  026F  0255               	subwf	InitUpperLowerPattern@i_906,w
  6139  0270                     u1445:	
  6140  0270  1C03               	skipc
  6141  0271  2A73               	goto	u1441
  6142  0272  2A74               	goto	u1440
  6143  0273                     u1441:	
  6144  0273  2A2A               	goto	l2772
  6145  0274                     u1440:	
  6146  0274                     l480:	
  6147  0274  0008               	return
  6148  0275                     __end_of_InitUpperLowerPattern:	
  6149                           
  6150                           	psect	text17
  6151  0275                     __ptext17:	
  6152 ;; *************** function _InitLowerPattern *****************
  6153 ;; Defined at:
  6154 ;;		line 185 in file "Pattern.c"
  6155 ;; Parameters:    Size  Location     Type
  6156 ;;  pattern         2   36[BANK0 ] PTR struct Pattern
  6157 ;;		 -> pattern_stash(18), NULL(0), 
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;  i               2   53[BANK0 ] int 
  6160 ;;  i               2   51[BANK0 ] int 
  6161 ;;  lower_right_    4   43[BANK0 ] _Bool [4]
  6162 ;;  lower_left_s    4   39[BANK0 ] _Bool [4]
  6163 ;;  head            2   57[BANK0 ] PTR struct Stage
  6164 ;;		 -> stage_stash(768), NULL(0), 
  6165 ;;  off             2   55[BANK0 ] PTR struct Stage
  6166 ;;		 -> stage_stash(768), NULL(0), 
  6167 ;;  lower_right     2   49[BANK0 ] PTR struct Stage
  6168 ;;		 -> stage_stash(768), NULL(0), 
  6169 ;;  lower_left      2   47[BANK0 ] PTR struct Stage
  6170 ;;		 -> stage_stash(768), NULL(0), 
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  1    wreg      void 
  6173 ;; Registers used:
  6174 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6180 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6181 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;Total ram usage:       23 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:    9
  6187 ;; This function calls:
  6188 ;;		_AppendStage
  6189 ;;		_ConstructStage
  6190 ;;		_CopyStageData
  6191 ;;		_NewStage
  6192 ;; This function is called by:
  6193 ;;		_InitPatternSelector
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           
  6198                           ;psect for function _InitLowerPattern
  6199  0275                     _InitLowerPattern:	
  6200  0275                     l2778:	
  6201                           ;incstack = 0
  6202                           ; Regs used in _InitLowerPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6203                           
  6204                           
  6205                           ;Pattern.c: 185: void InitLowerPattern( struct Pattern* pattern );Pattern.c: 186: {;Patt
      +                          ern.c: 187:     pattern->name = LOWER;
  6206  0275  0020               	movlb	0	; select bank0
  6207  0276  0844               	movf	InitLowerPattern@pattern,w
  6208  0277  0086               	movwf	6
  6209  0278  0845               	movf	InitLowerPattern@pattern+1,w
  6210  0279  0087               	movwf	7
  6211  027A  3003               	movlw	3
  6212  027B  0081               	movwf	1
  6213  027C                     l2780:	
  6214                           
  6215                           ;Pattern.c: 190:     _Bool lower_left_states[NUM_LIGHTS] = { 0, 0, 1, 0 };
  6216  027C  0021               	movlb	1	; select bank1
  6217  027D  0854               	movf	(InitLowerPattern@F473+3)^(0+128),w
  6218  027E  0020               	movlb	0	; select bank0
  6219  027F  00CA               	movwf	InitLowerPattern@lower_left_states+3
  6220  0280  0021               	movlb	1	; select bank1
  6221  0281  0853               	movf	(InitLowerPattern@F473+2)^(0+128),w
  6222  0282  0020               	movlb	0	; select bank0
  6223  0283  00C9               	movwf	InitLowerPattern@lower_left_states+2
  6224  0284  0021               	movlb	1	; select bank1
  6225  0285  0852               	movf	(InitLowerPattern@F473+1)^(0+128),w
  6226  0286  0020               	movlb	0	; select bank0
  6227  0287  00C8               	movwf	InitLowerPattern@lower_left_states+1
  6228  0288  0021               	movlb	1	; select bank1
  6229  0289  0851               	movf	InitLowerPattern@F473^(0+128),w
  6230  028A  0020               	movlb	0	; select bank0
  6231  028B  00C7               	movwf	InitLowerPattern@lower_left_states
  6232  028C                     l2782:	
  6233                           
  6234                           ;Pattern.c: 191:     struct Stage* lower_left = ConstructStage( lower_left_states, 60UL,
      +                           ((void*)0) );
  6235  028C  303C               	movlw	60
  6236  028D  00B3               	movwf	ConstructStage@time_ms
  6237  028E  3000               	movlw	0
  6238  028F  00B4               	movwf	ConstructStage@time_ms+1
  6239  0290  01B5               	clrf	ConstructStage@next
  6240  0291  3047               	movlw	(low (InitLowerPattern@lower_left_states| 0))& (0+255)
  6241  0292  318F  271D  3182   	fcall	_ConstructStage
  6242  0295  0020               	movlb	0	; select bank0
  6243  0296  0834               	movf	?_ConstructStage+1,w
  6244  0297  00D0               	movwf	InitLowerPattern@lower_left+1
  6245  0298  0833               	movf	?_ConstructStage,w
  6246  0299  00CF               	movwf	InitLowerPattern@lower_left
  6247  029A                     l2784:	
  6248                           
  6249                           ;Pattern.c: 193:     _Bool lower_right_states[NUM_LIGHTS] = { 0, 0, 0, 1 };
  6250  029A  0021               	movlb	1	; select bank1
  6251  029B  0850               	movf	(InitLowerPattern@F476+3)^(0+128),w
  6252  029C  0020               	movlb	0	; select bank0
  6253  029D  00CE               	movwf	InitLowerPattern@lower_right_states+3
  6254  029E  0021               	movlb	1	; select bank1
  6255  029F  084F               	movf	(InitLowerPattern@F476+2)^(0+128),w
  6256  02A0  0020               	movlb	0	; select bank0
  6257  02A1  00CD               	movwf	InitLowerPattern@lower_right_states+2
  6258  02A2  0021               	movlb	1	; select bank1
  6259  02A3  084E               	movf	(InitLowerPattern@F476+1)^(0+128),w
  6260  02A4  0020               	movlb	0	; select bank0
  6261  02A5  00CC               	movwf	InitLowerPattern@lower_right_states+1
  6262  02A6  0021               	movlb	1	; select bank1
  6263  02A7  084D               	movf	InitLowerPattern@F476^(0+128),w
  6264  02A8  0020               	movlb	0	; select bank0
  6265  02A9  00CB               	movwf	InitLowerPattern@lower_right_states
  6266  02AA                     l2786:	
  6267                           
  6268                           ;Pattern.c: 194:     struct Stage* lower_right = ConstructStage( lower_right_states, 60U
      +                          L, ((void*)0) );
  6269  02AA  303C               	movlw	60
  6270  02AB  00B3               	movwf	ConstructStage@time_ms
  6271  02AC  3000               	movlw	0
  6272  02AD  00B4               	movwf	ConstructStage@time_ms+1
  6273  02AE  01B5               	clrf	ConstructStage@next
  6274  02AF  304B               	movlw	(low (InitLowerPattern@lower_right_states| 0))& (0+255)
  6275  02B0  318F  271D  3182   	fcall	_ConstructStage
  6276  02B3  0020               	movlb	0	; select bank0
  6277  02B4  0834               	movf	?_ConstructStage+1,w
  6278  02B5  00D2               	movwf	InitLowerPattern@lower_right+1
  6279  02B6  0833               	movf	?_ConstructStage,w
  6280  02B7  00D1               	movwf	InitLowerPattern@lower_right
  6281  02B8                     l2788:	
  6282                           
  6283                           ;Pattern.c: 196:     struct Stage* off = NewStage();
  6284  02B8  3187  2779  3182   	fcall	_NewStage
  6285  02BB  0020               	movlb	0	; select bank0
  6286  02BC  0821               	movf	?_NewStage+1,w
  6287  02BD  00D8               	movwf	InitLowerPattern@off+1
  6288  02BE  0820               	movf	?_NewStage,w
  6289  02BF  00D7               	movwf	InitLowerPattern@off
  6290  02C0                     l2790:	
  6291                           
  6292                           ;Pattern.c: 198:     struct Stage* head = pattern->first_stage;
  6293  02C0  0844               	movf	InitLowerPattern@pattern,w
  6294  02C1  0086               	movwf	6
  6295  02C2  0845               	movf	InitLowerPattern@pattern+1,w
  6296  02C3  0087               	movwf	7
  6297  02C4  3141               	addfsr 1,1
  6298  02C5  3F40               	moviw [0]fsr1
  6299  02C6  00D9               	movwf	InitLowerPattern@head
  6300  02C7  3F41               	moviw [1]fsr1
  6301  02C8  00DA               	movwf	InitLowerPattern@head+1
  6302  02C9                     l2792:	
  6303                           
  6304                           ;Pattern.c: 201:     for( int i = 0; i < 3; i++ )
  6305  02C9  01D3               	clrf	InitLowerPattern@i
  6306  02CA  01D4               	clrf	InitLowerPattern@i+1
  6307  02CB                     l2798:	
  6308                           
  6309                           ;Pattern.c: 202:     {;Pattern.c: 203:         AppendStage( head, CopyStageData( NewStag
      +                          e(), lower_left ) );
  6310  02CB  0020               	movlb	0	; select bank0
  6311  02CC  085A               	movf	InitLowerPattern@head+1,w
  6312  02CD  00BD               	movwf	AppendStage@head+1
  6313  02CE  0859               	movf	InitLowerPattern@head,w
  6314  02CF  00BC               	movwf	AppendStage@head
  6315  02D0  3187  2779  3182   	fcall	_NewStage
  6316  02D3  0020               	movlb	0	; select bank0
  6317  02D4  0821               	movf	?_NewStage+1,w
  6318  02D5  00B4               	movwf	CopyStageData@dest+1
  6319  02D6  0820               	movf	?_NewStage,w
  6320  02D7  00B3               	movwf	CopyStageData@dest
  6321  02D8  0850               	movf	InitLowerPattern@lower_left+1,w
  6322  02D9  00B6               	movwf	CopyStageData@source+1
  6323  02DA  084F               	movf	InitLowerPattern@lower_left,w
  6324  02DB  00B5               	movwf	CopyStageData@source
  6325  02DC  318F  274A  3182   	fcall	_CopyStageData
  6326  02DF  0020               	movlb	0	; select bank0
  6327  02E0  0834               	movf	?_CopyStageData+1,w
  6328  02E1  00BF               	movwf	AppendStage@new_stage+1
  6329  02E2  0833               	movf	?_CopyStageData,w
  6330  02E3  00BE               	movwf	AppendStage@new_stage
  6331  02E4  3187  2721  3182   	fcall	_AppendStage
  6332                           
  6333                           ;Pattern.c: 204:         AppendStage( head, CopyStageData( NewStage(), off ) );
  6334  02E7  0020               	movlb	0	; select bank0
  6335  02E8  085A               	movf	InitLowerPattern@head+1,w
  6336  02E9  00BD               	movwf	AppendStage@head+1
  6337  02EA  0859               	movf	InitLowerPattern@head,w
  6338  02EB  00BC               	movwf	AppendStage@head
  6339  02EC  3187  2779  3182   	fcall	_NewStage
  6340  02EF  0020               	movlb	0	; select bank0
  6341  02F0  0821               	movf	?_NewStage+1,w
  6342  02F1  00B4               	movwf	CopyStageData@dest+1
  6343  02F2  0820               	movf	?_NewStage,w
  6344  02F3  00B3               	movwf	CopyStageData@dest
  6345  02F4  0858               	movf	InitLowerPattern@off+1,w
  6346  02F5  00B6               	movwf	CopyStageData@source+1
  6347  02F6  0857               	movf	InitLowerPattern@off,w
  6348  02F7  00B5               	movwf	CopyStageData@source
  6349  02F8  318F  274A  3182   	fcall	_CopyStageData
  6350  02FB  0020               	movlb	0	; select bank0
  6351  02FC  0834               	movf	?_CopyStageData+1,w
  6352  02FD  00BF               	movwf	AppendStage@new_stage+1
  6353  02FE  0833               	movf	?_CopyStageData,w
  6354  02FF  00BE               	movwf	AppendStage@new_stage
  6355  0300  3187  2721  3182   	fcall	_AppendStage
  6356  0303                     l2800:	
  6357                           
  6358                           ;Pattern.c: 205:     }
  6359  0303  3001               	movlw	1
  6360  0304  0020               	movlb	0	; select bank0
  6361  0305  07D3               	addwf	InitLowerPattern@i,f
  6362  0306  3000               	movlw	0
  6363  0307  3DD4               	addwfc	InitLowerPattern@i+1,f
  6364  0308                     l2802:	
  6365  0308  0854               	movf	InitLowerPattern@i+1,w
  6366  0309  3A80               	xorlw	128
  6367  030A  00C6               	movwf	??_InitLowerPattern
  6368  030B  3080               	movlw	128
  6369  030C  0246               	subwf	??_InitLowerPattern,w
  6370  030D  1D03               	skipz
  6371  030E  2B11               	goto	u1455
  6372  030F  3003               	movlw	3
  6373  0310  0253               	subwf	InitLowerPattern@i,w
  6374  0311                     u1455:	
  6375  0311  1C03               	skipc
  6376  0312  2B14               	goto	u1451
  6377  0313  2B15               	goto	u1450
  6378  0314                     u1451:	
  6379  0314  2ACB               	goto	l2798
  6380  0315                     u1450:	
  6381  0315                     l2804:	
  6382                           
  6383                           ;Pattern.c: 208:     AppendStage( head, CopyStageData( NewStage(), off ) );
  6384  0315  0020               	movlb	0	; select bank0
  6385  0316  085A               	movf	InitLowerPattern@head+1,w
  6386  0317  00BD               	movwf	AppendStage@head+1
  6387  0318  0859               	movf	InitLowerPattern@head,w
  6388  0319  00BC               	movwf	AppendStage@head
  6389  031A  3187  2779  3182   	fcall	_NewStage
  6390  031D  0020               	movlb	0	; select bank0
  6391  031E  0821               	movf	?_NewStage+1,w
  6392  031F  00B4               	movwf	CopyStageData@dest+1
  6393  0320  0820               	movf	?_NewStage,w
  6394  0321  00B3               	movwf	CopyStageData@dest
  6395  0322  0858               	movf	InitLowerPattern@off+1,w
  6396  0323  00B6               	movwf	CopyStageData@source+1
  6397  0324  0857               	movf	InitLowerPattern@off,w
  6398  0325  00B5               	movwf	CopyStageData@source
  6399  0326  318F  274A  3182   	fcall	_CopyStageData
  6400  0329  0020               	movlb	0	; select bank0
  6401  032A  0834               	movf	?_CopyStageData+1,w
  6402  032B  00BF               	movwf	AppendStage@new_stage+1
  6403  032C  0833               	movf	?_CopyStageData,w
  6404  032D  00BE               	movwf	AppendStage@new_stage
  6405  032E  3187  2721  3182   	fcall	_AppendStage
  6406  0331                     l2806:	
  6407                           
  6408                           ;Pattern.c: 211:     for( int i = 0; i < 3; i++ )
  6409  0331  0020               	movlb	0	; select bank0
  6410  0332  01D5               	clrf	InitLowerPattern@i_932
  6411  0333  01D6               	clrf	InitLowerPattern@i_932+1
  6412  0334                     l2812:	
  6413                           
  6414                           ;Pattern.c: 212:     {;Pattern.c: 213:         AppendStage( head, CopyStageData( NewStag
      +                          e(), lower_right ) );
  6415  0334  0020               	movlb	0	; select bank0
  6416  0335  085A               	movf	InitLowerPattern@head+1,w
  6417  0336  00BD               	movwf	AppendStage@head+1
  6418  0337  0859               	movf	InitLowerPattern@head,w
  6419  0338  00BC               	movwf	AppendStage@head
  6420  0339  3187  2779  3182   	fcall	_NewStage
  6421  033C  0020               	movlb	0	; select bank0
  6422  033D  0821               	movf	?_NewStage+1,w
  6423  033E  00B4               	movwf	CopyStageData@dest+1
  6424  033F  0820               	movf	?_NewStage,w
  6425  0340  00B3               	movwf	CopyStageData@dest
  6426  0341  0852               	movf	InitLowerPattern@lower_right+1,w
  6427  0342  00B6               	movwf	CopyStageData@source+1
  6428  0343  0851               	movf	InitLowerPattern@lower_right,w
  6429  0344  00B5               	movwf	CopyStageData@source
  6430  0345  318F  274A  3182   	fcall	_CopyStageData
  6431  0348  0020               	movlb	0	; select bank0
  6432  0349  0834               	movf	?_CopyStageData+1,w
  6433  034A  00BF               	movwf	AppendStage@new_stage+1
  6434  034B  0833               	movf	?_CopyStageData,w
  6435  034C  00BE               	movwf	AppendStage@new_stage
  6436  034D  3187  2721  3182   	fcall	_AppendStage
  6437                           
  6438                           ;Pattern.c: 214:         AppendStage( head, CopyStageData( NewStage(), off ) );
  6439  0350  0020               	movlb	0	; select bank0
  6440  0351  085A               	movf	InitLowerPattern@head+1,w
  6441  0352  00BD               	movwf	AppendStage@head+1
  6442  0353  0859               	movf	InitLowerPattern@head,w
  6443  0354  00BC               	movwf	AppendStage@head
  6444  0355  3187  2779  3182   	fcall	_NewStage
  6445  0358  0020               	movlb	0	; select bank0
  6446  0359  0821               	movf	?_NewStage+1,w
  6447  035A  00B4               	movwf	CopyStageData@dest+1
  6448  035B  0820               	movf	?_NewStage,w
  6449  035C  00B3               	movwf	CopyStageData@dest
  6450  035D  0858               	movf	InitLowerPattern@off+1,w
  6451  035E  00B6               	movwf	CopyStageData@source+1
  6452  035F  0857               	movf	InitLowerPattern@off,w
  6453  0360  00B5               	movwf	CopyStageData@source
  6454  0361  318F  274A  3182   	fcall	_CopyStageData
  6455  0364  0020               	movlb	0	; select bank0
  6456  0365  0834               	movf	?_CopyStageData+1,w
  6457  0366  00BF               	movwf	AppendStage@new_stage+1
  6458  0367  0833               	movf	?_CopyStageData,w
  6459  0368  00BE               	movwf	AppendStage@new_stage
  6460  0369  3187  2721  3182   	fcall	_AppendStage
  6461  036C                     l2814:	
  6462                           
  6463                           ;Pattern.c: 215:     }
  6464  036C  3001               	movlw	1
  6465  036D  0020               	movlb	0	; select bank0
  6466  036E  07D5               	addwf	InitLowerPattern@i_932,f
  6467  036F  3000               	movlw	0
  6468  0370  3DD6               	addwfc	InitLowerPattern@i_932+1,f
  6469  0371                     l2816:	
  6470  0371  0856               	movf	InitLowerPattern@i_932+1,w
  6471  0372  3A80               	xorlw	128
  6472  0373  00C6               	movwf	??_InitLowerPattern
  6473  0374  3080               	movlw	128
  6474  0375  0246               	subwf	??_InitLowerPattern,w
  6475  0376  1D03               	skipz
  6476  0377  2B7A               	goto	u1465
  6477  0378  3003               	movlw	3
  6478  0379  0255               	subwf	InitLowerPattern@i_932,w
  6479  037A                     u1465:	
  6480  037A  1C03               	skipc
  6481  037B  2B7D               	goto	u1461
  6482  037C  2B7E               	goto	u1460
  6483  037D                     u1461:	
  6484  037D  2B34               	goto	l2812
  6485  037E                     u1460:	
  6486  037E                     l491:	
  6487  037E  0008               	return
  6488  037F                     __end_of_InitLowerPattern:	
  6489                           
  6490                           	psect	text18
  6491  0F4A                     __ptext18:	
  6492 ;; *************** function _CopyStageData *****************
  6493 ;; Defined at:
  6494 ;;		line 58 in file "Pattern.c"
  6495 ;; Parameters:    Size  Location     Type
  6496 ;;  dest            2   19[BANK0 ] PTR struct Stage
  6497 ;;		 -> stage_stash(768), NULL(0), 
  6498 ;;  source          2   21[BANK0 ] PTR struct Stage
  6499 ;;		 -> stage_stash(768), NULL(0), 
  6500 ;; Auto vars:     Size  Location     Type
  6501 ;;  i               2   26[BANK0 ] int 
  6502 ;; Return value:  Size  Location     Type
  6503 ;;                  2   19[BANK0 ] PTR struct Stage
  6504 ;; Registers used:
  6505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6506 ;; Tracked objects:
  6507 ;;		On entry : 0/0
  6508 ;;		On exit  : 0/0
  6509 ;;		Unchanged: 0/0
  6510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6511 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6512 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6513 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6514 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6515 ;;Total ram usage:        9 bytes
  6516 ;; Hardware stack levels used:    1
  6517 ;; Hardware stack levels required when called:    6
  6518 ;; This function calls:
  6519 ;;		Nothing
  6520 ;; This function is called by:
  6521 ;;		_InitWigwagPattern
  6522 ;;		_InitXStrobePattern
  6523 ;;		_InitUpperLowerPattern
  6524 ;;		_InitLowerPattern
  6525 ;; This function uses a non-reentrant model
  6526 ;;
  6527                           
  6528                           
  6529                           ;psect for function _CopyStageData
  6530  0F4A                     _CopyStageData:	
  6531  0F4A                     l2540:	
  6532                           ;incstack = 0
  6533                           ; Regs used in _CopyStageData: [wreg-fsr1h+status,2+status,0]
  6534                           
  6535                           
  6536                           ;Pattern.c: 58: struct Stage* CopyStageData( struct Stage* dest, struct Stage* source );
      +                          Pattern.c: 59: {;Pattern.c: 60:     for( int i = 0; i < NUM_LIGHTS; i++ )
  6537  0F4A  0020               	movlb	0	; select bank0
  6538  0F4B  01BA               	clrf	CopyStageData@i
  6539  0F4C  01BB               	clrf	CopyStageData@i+1
  6540  0F4D                     l2546:	
  6541                           
  6542                           ;Pattern.c: 61:         dest->light_states[i] = source->light_states[i];
  6543  0F4D  0020               	movlb	0	; select bank0
  6544  0F4E  083A               	movf	CopyStageData@i,w
  6545  0F4F  0735               	addwf	CopyStageData@source,w
  6546  0F50  0086               	movwf	6
  6547  0F51  083B               	movf	CopyStageData@i+1,w
  6548  0F52  3D36               	addwfc	CopyStageData@source+1,w
  6549  0F53  0087               	movwf	7
  6550  0F54  0801               	movf	1,w
  6551  0F55  00B7               	movwf	??_CopyStageData
  6552  0F56  083A               	movf	CopyStageData@i,w
  6553  0F57  0733               	addwf	CopyStageData@dest,w
  6554  0F58  00B8               	movwf	??_CopyStageData+1
  6555  0F59  083B               	movf	CopyStageData@i+1,w
  6556  0F5A  3D34               	addwfc	CopyStageData@dest+1,w
  6557  0F5B  00B9               	movwf	??_CopyStageData+2
  6558  0F5C  0838               	movf	??_CopyStageData+1,w
  6559  0F5D  0086               	movwf	6
  6560  0F5E  0839               	movf	??_CopyStageData+2,w
  6561  0F5F  0087               	movwf	7
  6562  0F60  0837               	movf	??_CopyStageData,w
  6563  0F61  0081               	movwf	1
  6564  0F62                     l2548:	
  6565  0F62  3001               	movlw	1
  6566  0F63  07BA               	addwf	CopyStageData@i,f
  6567  0F64  3000               	movlw	0
  6568  0F65  3DBB               	addwfc	CopyStageData@i+1,f
  6569  0F66                     l2550:	
  6570  0F66  083B               	movf	CopyStageData@i+1,w
  6571  0F67  3A80               	xorlw	128
  6572  0F68  00B7               	movwf	??_CopyStageData
  6573  0F69  3080               	movlw	128
  6574  0F6A  0237               	subwf	??_CopyStageData,w
  6575  0F6B  1D03               	skipz
  6576  0F6C  2F6F               	goto	u1315
  6577  0F6D  3004               	movlw	4
  6578  0F6E  023A               	subwf	CopyStageData@i,w
  6579  0F6F                     u1315:	
  6580  0F6F  1C03               	skipc
  6581  0F70  2F72               	goto	u1311
  6582  0F71  2F73               	goto	u1310
  6583  0F72                     u1311:	
  6584  0F72  2F4D               	goto	l2546
  6585  0F73                     u1310:	
  6586  0F73                     l2552:	
  6587                           
  6588                           ;Pattern.c: 62:     dest->time_ms = source->time_ms;
  6589  0F73  0020               	movlb	0	; select bank0
  6590  0F74  0835               	movf	CopyStageData@source,w
  6591  0F75  0086               	movwf	6
  6592  0F76  0836               	movf	CopyStageData@source+1,w
  6593  0F77  0087               	movwf	7
  6594  0F78  3144               	addfsr 1,4
  6595  0F79  0833               	movf	CopyStageData@dest,w
  6596  0F7A  0084               	movwf	4
  6597  0F7B  0834               	movf	CopyStageData@dest+1,w
  6598  0F7C  0085               	movwf	5
  6599  0F7D  3104               	addfsr 0,4
  6600  0F7E  3F40               	moviw [0]fsr1
  6601  0F7F  3F80               	movwi [0]fsr0
  6602  0F80  3F41               	moviw [1]fsr1
  6603  0F81  3F81               	movwi [1]fsr0
  6604  0F82                     l2554:	
  6605  0F82                     l439:	
  6606                           ;Pattern.c: 63:     return dest;
  6607                           
  6608  0F82  0008               	return
  6609  0F83                     __end_of_CopyStageData:	
  6610                           
  6611                           	psect	text19
  6612  0F1D                     __ptext19:	
  6613 ;; *************** function _ConstructStage *****************
  6614 ;; Defined at:
  6615 ;;		line 49 in file "Pattern.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;  states          1    wreg     PTR const _Bool 
  6618 ;;		 -> InitLowerPattern@lower_right_states(4), InitLowerPattern@lower_left_states(4), InitUpperLowerPattern@lower_state
      +s(4), InitUpperLowerPattern@upper_states(4), 
  6619 ;;		 -> InitXStrobePattern@diag_2_3_states(4), InitXStrobePattern@diag_1_4_states(4), InitWigwagPattern@right_side_state
      +s(4), InitWigwagPattern@left_side_states(4), 
  6620 ;;  time_ms         2   19[BANK0 ] const unsigned short 
  6621 ;;  next            1   21[BANK0 ] PTR struct Stage
  6622 ;;		 -> NULL(0), 
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;  states          1   23[BANK0 ] PTR const _Bool 
  6625 ;;		 -> InitLowerPattern@lower_right_states(4), InitLowerPattern@lower_left_states(4), InitUpperLowerPattern@lower_state
      +s(4), InitUpperLowerPattern@upper_states(4), 
  6626 ;;		 -> InitXStrobePattern@diag_2_3_states(4), InitXStrobePattern@diag_1_4_states(4), InitWigwagPattern@right_side_state
      +s(4), InitWigwagPattern@left_side_states(4), 
  6627 ;;  new_stage       2   24[BANK0 ] PTR struct Stage
  6628 ;;		 -> stage_stash(768), NULL(0), 
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  2   19[BANK0 ] PTR struct Stage
  6631 ;; Registers used:
  6632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6638 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6639 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6640 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;Total ram usage:        7 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:    8
  6645 ;; This function calls:
  6646 ;;		_AssignLightStates
  6647 ;;		_NewStage
  6648 ;; This function is called by:
  6649 ;;		_InitWigwagPattern
  6650 ;;		_InitXStrobePattern
  6651 ;;		_InitUpperLowerPattern
  6652 ;;		_InitLowerPattern
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           
  6657                           ;psect for function _ConstructStage
  6658  0F1D                     _ConstructStage:	
  6659                           
  6660                           ;incstack = 0
  6661                           ; Regs used in _ConstructStage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6662                           ;ConstructStage@states stored from wreg
  6663  0F1D  0020               	movlb	0	; select bank0
  6664  0F1E  00B7               	movwf	ConstructStage@states
  6665  0F1F                     l2530:	
  6666                           
  6667                           ;Pattern.c: 49: struct Stage* ConstructStage( const _Bool states[NUM_LIGHTS], const uint
      +                           time_ms, struct Stage* next );Pattern.c: 50: {;Pattern.c: 51:     struct Stage* new_sta
      +                          ge = NewStage();
  6668  0F1F  3187  2779  318F   	fcall	_NewStage
  6669  0F22  0020               	movlb	0	; select bank0
  6670  0F23  0821               	movf	?_NewStage+1,w
  6671  0F24  00B9               	movwf	ConstructStage@new_stage+1
  6672  0F25  0820               	movf	?_NewStage,w
  6673  0F26  00B8               	movwf	ConstructStage@new_stage
  6674                           
  6675                           ;Pattern.c: 52:     AssignLightStates( new_stage, states );
  6676  0F27  0839               	movf	ConstructStage@new_stage+1,w
  6677  0F28  00A1               	movwf	AssignLightStates@stage+1
  6678  0F29  0838               	movf	ConstructStage@new_stage,w
  6679  0F2A  00A0               	movwf	AssignLightStates@stage
  6680  0F2B  0837               	movf	ConstructStage@states,w
  6681  0F2C  00B6               	movwf	??_ConstructStage
  6682  0F2D  0836               	movf	??_ConstructStage,w
  6683  0F2E  00A2               	movwf	AssignLightStates@states
  6684  0F2F  318E  267A  318F   	fcall	_AssignLightStates
  6685  0F32                     l2532:	
  6686                           
  6687                           ;Pattern.c: 53:     new_stage->time_ms = time_ms;
  6688  0F32  0020               	movlb	0	; select bank0
  6689  0F33  0838               	movf	ConstructStage@new_stage,w
  6690  0F34  0086               	movwf	6
  6691  0F35  0839               	movf	ConstructStage@new_stage+1,w
  6692  0F36  0087               	movwf	7
  6693  0F37  3144               	addfsr 1,4
  6694  0F38  0833               	movf	ConstructStage@time_ms,w
  6695  0F39  3FC0               	movwi [0]fsr1
  6696  0F3A  0834               	movf	ConstructStage@time_ms+1,w
  6697  0F3B  3FC1               	movwi [1]fsr1
  6698  0F3C                     l2534:	
  6699                           
  6700                           ;Pattern.c: 54:     new_stage->next = next;
  6701  0F3C  0838               	movf	ConstructStage@new_stage,w
  6702  0F3D  0086               	movwf	6
  6703  0F3E  0839               	movf	ConstructStage@new_stage+1,w
  6704  0F3F  0087               	movwf	7
  6705  0F40  3146               	addfsr 1,6
  6706  0F41  0835               	movf	ConstructStage@next,w
  6707  0F42  3FC0               	movwi [0]fsr1
  6708  0F43  3000               	movlw	0
  6709  0F44  3FC1               	movwi [1]fsr1
  6710  0F45                     l2536:	
  6711                           
  6712                           ;Pattern.c: 55:     return new_stage;
  6713  0F45  0839               	movf	ConstructStage@new_stage+1,w
  6714  0F46  00B4               	movwf	?_ConstructStage+1
  6715  0F47  0838               	movf	ConstructStage@new_stage,w
  6716  0F48  00B3               	movwf	?_ConstructStage
  6717  0F49                     l434:	
  6718  0F49  0008               	return
  6719  0F4A                     __end_of_ConstructStage:	
  6720                           
  6721                           	psect	text20
  6722  0779                     __ptext20:	
  6723 ;; *************** function _NewStage *****************
  6724 ;; Defined at:
  6725 ;;		line 22 in file "Pattern.c"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;		None
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;  init_states     4   13[BANK0 ] _Bool [4]
  6730 ;;  new_stage       2   17[BANK0 ] PTR struct Stage
  6731 ;;		 -> stage_stash(768), 
  6732 ;; Return value:  Size  Location     Type
  6733 ;;                  2    0[BANK0 ] PTR struct Stage
  6734 ;; Registers used:
  6735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6736 ;; Tracked objects:
  6737 ;;		On entry : 0/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6744 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;Total ram usage:       10 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:    7
  6748 ;; This function calls:
  6749 ;;		_AssignLightStates
  6750 ;; This function is called by:
  6751 ;;		_NewPattern
  6752 ;;		_ConstructStage
  6753 ;;		_InitWigwagPattern
  6754 ;;		_InitXStrobePattern
  6755 ;;		_InitUpperLowerPattern
  6756 ;;		_InitLowerPattern
  6757 ;; This function uses a non-reentrant model
  6758 ;;
  6759                           
  6760                           
  6761                           ;psect for function _NewStage
  6762  0779                     _NewStage:	
  6763  0779                     l2504:	
  6764                           ;incstack = 0
  6765                           ; Regs used in _NewStage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6766                           
  6767                           
  6768                           ;Pattern.c: 24:     if ( stage_list_iter >= MAX_STAGES )
  6769  0779  3000               	movlw	0
  6770  077A  0020               	movlb	0	; select bank0
  6771  077B  026B               	subwf	_stage_list_iter+1,w
  6772  077C  3060               	movlw	96
  6773  077D  1903               	skipnz
  6774  077E  026A               	subwf	_stage_list_iter,w
  6775  077F  1C03               	skipc
  6776  0780  2F82               	goto	u1301
  6777  0781  2F83               	goto	u1300
  6778  0782                     u1301:	
  6779  0782  2F86               	goto	l2510
  6780  0783                     u1300:	
  6781  0783                     l2506:	
  6782                           
  6783                           ;Pattern.c: 25:         return ((void*)0);
  6784  0783  01A0               	clrf	?_NewStage
  6785  0784  01A1               	clrf	?_NewStage+1
  6786  0785  2FC7               	goto	l425
  6787  0786                     l2510:	
  6788                           
  6789                           ;Pattern.c: 27:     struct Stage* new_stage = &stage_stash[ stage_list_iter++ ];
  6790  0786  086B               	movf	_stage_list_iter+1,w
  6791  0787  00AA               	movwf	??_NewStage+1
  6792  0788  086A               	movf	_stage_list_iter,w
  6793  0789  00A9               	movwf	??_NewStage
  6794  078A  35A9               	lslf	??_NewStage,f
  6795  078B  0DAA               	rlf	??_NewStage+1,f
  6796  078C  35A9               	lslf	??_NewStage,f
  6797  078D  0DAA               	rlf	??_NewStage+1,f
  6798  078E  35A9               	lslf	??_NewStage,f
  6799  078F  0DAA               	rlf	??_NewStage+1,f
  6800  0790  30F0               	movlw	240
  6801  0791  00AB               	movwf	??_NewStage+2
  6802  0792  3020               	movlw	32
  6803  0793  00AC               	movwf	??_NewStage+3
  6804  0794  0829               	movf	??_NewStage,w
  6805  0795  072B               	addwf	??_NewStage+2,w
  6806  0796  00B1               	movwf	NewStage@new_stage
  6807  0797  082A               	movf	??_NewStage+1,w
  6808  0798  3D2C               	addwfc	??_NewStage+3,w
  6809  0799  00B2               	movwf	NewStage@new_stage+1
  6810  079A                     l2512:	
  6811  079A  3001               	movlw	1
  6812  079B  07EA               	addwf	_stage_list_iter,f
  6813  079C  3000               	movlw	0
  6814  079D  3DEB               	addwfc	_stage_list_iter+1,f
  6815  079E                     l2514:	
  6816                           
  6817                           ;Pattern.c: 28:     _Bool init_states[NUM_LIGHTS] = { 0, 0, 0, 0 };
  6818  079E  3000               	movlw	0
  6819  079F  00B0               	movwf	NewStage@init_states+3
  6820  07A0  3000               	movlw	0
  6821  07A1  00AF               	movwf	NewStage@init_states+2
  6822  07A2  3000               	movlw	0
  6823  07A3  00AE               	movwf	NewStage@init_states+1
  6824  07A4  3000               	movlw	0
  6825  07A5  00AD               	movwf	NewStage@init_states
  6826  07A6                     l2516:	
  6827                           
  6828                           ;Pattern.c: 29:     AssignLightStates( new_stage, init_states );
  6829  07A6  0832               	movf	NewStage@new_stage+1,w
  6830  07A7  00A1               	movwf	AssignLightStates@stage+1
  6831  07A8  0831               	movf	NewStage@new_stage,w
  6832  07A9  00A0               	movwf	AssignLightStates@stage
  6833  07AA  302D               	movlw	(low (NewStage@init_states| 0))& (0+255)
  6834  07AB  00A9               	movwf	??_NewStage
  6835  07AC  0829               	movf	??_NewStage,w
  6836  07AD  00A2               	movwf	AssignLightStates@states
  6837  07AE  318E  267A  3187   	fcall	_AssignLightStates
  6838  07B1                     l2518:	
  6839                           
  6840                           ;Pattern.c: 30:     new_stage->time_ms = 60UL;
  6841  07B1  0020               	movlb	0	; select bank0
  6842  07B2  0831               	movf	NewStage@new_stage,w
  6843  07B3  0086               	movwf	6
  6844  07B4  0832               	movf	NewStage@new_stage+1,w
  6845  07B5  0087               	movwf	7
  6846  07B6  3144               	addfsr 1,4
  6847  07B7  303C               	movlw	60
  6848  07B8  3FC0               	movwi [0]fsr1
  6849  07B9  3000               	movlw	0
  6850  07BA  3FC1               	movwi [1]fsr1
  6851  07BB                     l2520:	
  6852                           
  6853                           ;Pattern.c: 31:     new_stage->next = ((void*)0);
  6854  07BB  0831               	movf	NewStage@new_stage,w
  6855  07BC  0086               	movwf	6
  6856  07BD  0832               	movf	NewStage@new_stage+1,w
  6857  07BE  0087               	movwf	7
  6858  07BF  3146               	addfsr 1,6
  6859  07C0  3000               	movlw	0
  6860  07C1  3FC0               	movwi [0]fsr1
  6861  07C2  3FC1               	movwi [1]fsr1
  6862  07C3                     l2522:	
  6863                           
  6864                           ;Pattern.c: 33:     return new_stage;
  6865  07C3  0832               	movf	NewStage@new_stage+1,w
  6866  07C4  00A1               	movwf	?_NewStage+1
  6867  07C5  0831               	movf	NewStage@new_stage,w
  6868  07C6  00A0               	movwf	?_NewStage
  6869  07C7                     l425:	
  6870  07C7  0008               	return
  6871  07C8                     __end_of_NewStage:	
  6872                           
  6873                           	psect	text21
  6874  0E7A                     __ptext21:	
  6875 ;; *************** function _AssignLightStates *****************
  6876 ;; Defined at:
  6877 ;;		line 14 in file "Pattern.c"
  6878 ;; Parameters:    Size  Location     Type
  6879 ;;  stage           2    0[BANK0 ] PTR struct Stage
  6880 ;;		 -> stage_stash(768), NULL(0), 
  6881 ;;  states          1    2[BANK0 ] PTR const _Bool 
  6882 ;;		 -> InitLowerPattern@lower_right_states(4), InitLowerPattern@lower_left_states(4), InitUpperLowerPattern@lower_state
      +s(4), InitUpperLowerPattern@upper_states(4), 
  6883 ;;		 -> InitXStrobePattern@diag_2_3_states(4), InitXStrobePattern@diag_1_4_states(4), InitWigwagPattern@right_side_state
      +s(4), InitWigwagPattern@left_side_states(4), 
  6884 ;;		 -> NewStage@init_states(4), 
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;  i               2    7[BANK0 ] unsigned short 
  6887 ;; Return value:  Size  Location     Type
  6888 ;;                  1    wreg      void 
  6889 ;; Registers used:
  6890 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6891 ;; Tracked objects:
  6892 ;;		On entry : 0/0
  6893 ;;		On exit  : 0/0
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6896 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6899 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6900 ;;Total ram usage:        9 bytes
  6901 ;; Hardware stack levels used:    1
  6902 ;; Hardware stack levels required when called:    6
  6903 ;; This function calls:
  6904 ;;		Nothing
  6905 ;; This function is called by:
  6906 ;;		_NewStage
  6907 ;;		_ConstructStage
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           
  6912                           ;psect for function _AssignLightStates
  6913  0E7A                     _AssignLightStates:	
  6914  0E7A                     l2492:	
  6915                           ;incstack = 0
  6916                           ; Regs used in _AssignLightStates: [wreg+fsr1l+fsr1h+status,2+status,0]
  6917                           
  6918                           
  6919                           ;Pattern.c: 14: void AssignLightStates( struct Stage* stage, const _Bool states[ NUM_LIG
      +                          HTS ] );Pattern.c: 15: {;Pattern.c: 16:     for( uint i = 0; i < NUM_LIGHTS; i++ )
  6920  0E7A  0020               	movlb	0	; select bank0
  6921  0E7B  01A7               	clrf	AssignLightStates@i
  6922  0E7C  01A8               	clrf	AssignLightStates@i+1
  6923  0E7D                     l2498:	
  6924                           
  6925                           ;Pattern.c: 17:     {;Pattern.c: 18:         stage->light_states[i] = states[i];
  6926  0E7D  0827               	movf	AssignLightStates@i,w
  6927  0E7E  0722               	addwf	AssignLightStates@states,w
  6928  0E7F  00A3               	movwf	??_AssignLightStates
  6929  0E80  0823               	movf	??_AssignLightStates,w
  6930  0E81  0086               	movwf	6
  6931  0E82  0187               	clrf	7
  6932  0E83  0801               	movf	1,w
  6933  0E84  00A4               	movwf	??_AssignLightStates+1
  6934  0E85  0827               	movf	AssignLightStates@i,w
  6935  0E86  0720               	addwf	AssignLightStates@stage,w
  6936  0E87  00A5               	movwf	??_AssignLightStates+2
  6937  0E88  0828               	movf	AssignLightStates@i+1,w
  6938  0E89  3D21               	addwfc	AssignLightStates@stage+1,w
  6939  0E8A  00A6               	movwf	??_AssignLightStates+3
  6940  0E8B  0825               	movf	??_AssignLightStates+2,w
  6941  0E8C  0086               	movwf	6
  6942  0E8D  0826               	movf	??_AssignLightStates+3,w
  6943  0E8E  0087               	movwf	7
  6944  0E8F  0824               	movf	??_AssignLightStates+1,w
  6945  0E90  0081               	movwf	1
  6946  0E91                     l2500:	
  6947                           
  6948                           ;Pattern.c: 19:     }
  6949  0E91  3001               	movlw	1
  6950  0E92  07A7               	addwf	AssignLightStates@i,f
  6951  0E93  3000               	movlw	0
  6952  0E94  3DA8               	addwfc	AssignLightStates@i+1,f
  6953  0E95                     l2502:	
  6954  0E95  3000               	movlw	0
  6955  0E96  0228               	subwf	AssignLightStates@i+1,w
  6956  0E97  3004               	movlw	4
  6957  0E98  1903               	skipnz
  6958  0E99  0227               	subwf	AssignLightStates@i,w
  6959  0E9A  1C03               	skipc
  6960  0E9B  2E9D               	goto	u1291
  6961  0E9C  2E9E               	goto	u1290
  6962  0E9D                     u1291:	
  6963  0E9D  2E7D               	goto	l2498
  6964  0E9E                     u1290:	
  6965  0E9E                     l421:	
  6966  0E9E  0008               	return
  6967  0E9F                     __end_of_AssignLightStates:	
  6968                           
  6969                           	psect	text22
  6970  0721                     __ptext22:	
  6971 ;; *************** function _AppendStage *****************
  6972 ;; Defined at:
  6973 ;;		line 66 in file "Pattern.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;  head            2   28[BANK0 ] PTR struct Stage
  6976 ;;		 -> stage_stash(768), NULL(0), 
  6977 ;;  new_stage       2   30[BANK0 ] PTR struct Stage
  6978 ;;		 -> stage_stash(768), NULL(0), 
  6979 ;; Auto vars:     Size  Location     Type
  6980 ;;  last_stage      2   34[BANK0 ] PTR struct Stage
  6981 ;;		 -> stage_stash(768), NULL(0), 
  6982 ;; Return value:  Size  Location     Type
  6983 ;;                  1    wreg      void 
  6984 ;; Registers used:
  6985 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6986 ;; Tracked objects:
  6987 ;;		On entry : 0/0
  6988 ;;		On exit  : 0/0
  6989 ;;		Unchanged: 0/0
  6990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6991 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;Total ram usage:        8 bytes
  6996 ;; Hardware stack levels used:    1
  6997 ;; Hardware stack levels required when called:    6
  6998 ;; This function calls:
  6999 ;;		Nothing
  7000 ;; This function is called by:
  7001 ;;		_InitWigwagPattern
  7002 ;;		_InitXStrobePattern
  7003 ;;		_InitUpperLowerPattern
  7004 ;;		_InitLowerPattern
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           
  7009                           ;psect for function _AppendStage
  7010  0721                     _AppendStage:	
  7011  0721                     l2558:	
  7012                           ;incstack = 0
  7013                           ; Regs used in _AppendStage: [wreg+fsr1l+fsr1h+status,2+status,0]
  7014                           
  7015                           
  7016                           ;Pattern.c: 66: void AppendStage( struct Stage* head, struct Stage* new_stage );Pattern.
      +                          c: 67: {;Pattern.c: 68:     if ( head->next == ((void*)0) )
  7017  0721  0020               	movlb	0	; select bank0
  7018  0722  083C               	movf	AppendStage@head,w
  7019  0723  0086               	movwf	6
  7020  0724  083D               	movf	AppendStage@head+1,w
  7021  0725  0087               	movwf	7
  7022  0726  3146               	addfsr 1,6
  7023  0727  0016               	moviw fsr1++
  7024  0728  0401               	iorwf	1,w
  7025  0729  1D03               	btfss	3,2
  7026  072A  2F2C               	goto	u1321
  7027  072B  2F2D               	goto	u1320
  7028  072C                     u1321:	
  7029  072C  2F40               	goto	l2562
  7030  072D                     u1320:	
  7031  072D                     l2560:	
  7032                           
  7033                           ;Pattern.c: 69:     {;Pattern.c: 70:         head->next = new_stage;
  7034  072D  083C               	movf	AppendStage@head,w
  7035  072E  0086               	movwf	6
  7036  072F  083D               	movf	AppendStage@head+1,w
  7037  0730  0087               	movwf	7
  7038  0731  3146               	addfsr 1,6
  7039  0732  083E               	movf	AppendStage@new_stage,w
  7040  0733  3FC0               	movwi [0]fsr1
  7041  0734  083F               	movf	AppendStage@new_stage+1,w
  7042  0735  3FC1               	movwi [1]fsr1
  7043                           
  7044                           ;Pattern.c: 71:         new_stage->next = head;
  7045  0736  083E               	movf	AppendStage@new_stage,w
  7046  0737  0086               	movwf	6
  7047  0738  083F               	movf	AppendStage@new_stage+1,w
  7048  0739  0087               	movwf	7
  7049  073A  3146               	addfsr 1,6
  7050  073B  083C               	movf	AppendStage@head,w
  7051  073C  3FC0               	movwi [0]fsr1
  7052  073D  083D               	movf	AppendStage@head+1,w
  7053  073E  3FC1               	movwi [1]fsr1
  7054                           
  7055                           ;Pattern.c: 72:     }
  7056  073F  2F78               	goto	l447
  7057  0740                     l2562:	
  7058                           
  7059                           ;Pattern.c: 74:     {;Pattern.c: 75:         struct Stage* last_stage = head->next;
  7060  0740  083C               	movf	AppendStage@head,w
  7061  0741  0086               	movwf	6
  7062  0742  083D               	movf	AppendStage@head+1,w
  7063  0743  0087               	movwf	7
  7064  0744  3146               	addfsr 1,6
  7065  0745  3F40               	moviw [0]fsr1
  7066  0746  00C2               	movwf	AppendStage@last_stage
  7067  0747  3F41               	moviw [1]fsr1
  7068  0748  00C3               	movwf	AppendStage@last_stage+1
  7069                           
  7070                           ;Pattern.c: 76:         while( last_stage->next != head )
  7071  0749  2F53               	goto	l2566
  7072  074A                     l2564:	
  7073                           
  7074                           ;Pattern.c: 77:             last_stage = last_stage->next;
  7075  074A  0842               	movf	AppendStage@last_stage,w
  7076  074B  0086               	movwf	6
  7077  074C  0843               	movf	AppendStage@last_stage+1,w
  7078  074D  0087               	movwf	7
  7079  074E  3146               	addfsr 1,6
  7080  074F  3F40               	moviw [0]fsr1
  7081  0750  00C2               	movwf	AppendStage@last_stage
  7082  0751  3F41               	moviw [1]fsr1
  7083  0752  00C3               	movwf	AppendStage@last_stage+1
  7084  0753                     l2566:	
  7085                           
  7086                           ;Pattern.c: 76:         while( last_stage->next != head )
  7087  0753  0842               	movf	AppendStage@last_stage,w
  7088  0754  0086               	movwf	6
  7089  0755  0843               	movf	AppendStage@last_stage+1,w
  7090  0756  0087               	movwf	7
  7091  0757  3146               	addfsr 1,6
  7092  0758  3F40               	moviw [0]fsr1
  7093  0759  00C0               	movwf	??_AppendStage
  7094  075A  3F41               	moviw [1]fsr1
  7095  075B  00C1               	movwf	??_AppendStage+1
  7096  075C  083D               	movf	AppendStage@head+1,w
  7097  075D  0641               	xorwf	??_AppendStage+1,w
  7098  075E  1D03               	skipz
  7099  075F  2F62               	goto	u1335
  7100  0760  083C               	movf	AppendStage@head,w
  7101  0761  0640               	xorwf	??_AppendStage,w
  7102  0762                     u1335:	
  7103  0762  1D03               	skipz
  7104  0763  2F65               	goto	u1331
  7105  0764  2F66               	goto	u1330
  7106  0765                     u1331:	
  7107  0765  2F4A               	goto	l2564
  7108  0766                     u1330:	
  7109  0766                     l2568:	
  7110                           
  7111                           ;Pattern.c: 80:         last_stage->next = new_stage;
  7112  0766  0842               	movf	AppendStage@last_stage,w
  7113  0767  0086               	movwf	6
  7114  0768  0843               	movf	AppendStage@last_stage+1,w
  7115  0769  0087               	movwf	7
  7116  076A  3146               	addfsr 1,6
  7117  076B  083E               	movf	AppendStage@new_stage,w
  7118  076C  3FC0               	movwi [0]fsr1
  7119  076D  083F               	movf	AppendStage@new_stage+1,w
  7120  076E  3FC1               	movwi [1]fsr1
  7121                           
  7122                           ;Pattern.c: 81:         new_stage->next = head;
  7123  076F  083E               	movf	AppendStage@new_stage,w
  7124  0770  0086               	movwf	6
  7125  0771  083F               	movf	AppendStage@new_stage+1,w
  7126  0772  0087               	movwf	7
  7127  0773  3146               	addfsr 1,6
  7128  0774  083C               	movf	AppendStage@head,w
  7129  0775  3FC0               	movwi [0]fsr1
  7130  0776  083D               	movf	AppendStage@head+1,w
  7131  0777  3FC1               	movwi [1]fsr1
  7132  0778                     l447:	
  7133  0778  0008               	return
  7134  0779                     __end_of_AppendStage:	
  7135                           
  7136                           	psect	text23
  7137  0FC1                     __ptext23:	
  7138 ;; *************** function _TurnSignalDone *****************
  7139 ;; Defined at:
  7140 ;;		line 14 in file "TurnSignal.c"
  7141 ;; Parameters:    Size  Location     Type
  7142 ;;		None
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;		None
  7145 ;; Return value:  Size  Location     Type
  7146 ;;                  1    wreg      _Bool 
  7147 ;; Registers used:
  7148 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7149 ;; Tracked objects:
  7150 ;;		On entry : 0/0
  7151 ;;		On exit  : 0/0
  7152 ;;		Unchanged: 0/0
  7153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7157 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7158 ;;Total ram usage:        1 bytes
  7159 ;; Hardware stack levels used:    1
  7160 ;; Hardware stack levels required when called:    8
  7161 ;; This function calls:
  7162 ;;		_SetOutputs
  7163 ;;		_abs
  7164 ;;		_ms
  7165 ;; This function is called by:
  7166 ;;		_main
  7167 ;; This function uses a non-reentrant model
  7168 ;;
  7169                           
  7170                           
  7171                           ;psect for function _TurnSignalDone
  7172  0FC1                     _TurnSignalDone:	
  7173  0FC1                     l2908:	
  7174                           ;incstack = 0
  7175                           ; Regs used in _TurnSignalDone: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7176                           
  7177                           
  7178                           ;TurnSignal.c: 17:     if ( PORTCbits.RC0 == 1 )
  7179  0FC1  0020               	movlb	0	; select bank0
  7180  0FC2  1C0E               	btfss	14,0	;volatile
  7181  0FC3  2FC5               	goto	u1611
  7182  0FC4  2FC6               	goto	u1610
  7183  0FC5                     u1611:	
  7184  0FC5  2FDF               	goto	l2918
  7185  0FC6                     u1610:	
  7186  0FC6                     l2910:	
  7187                           
  7188                           ;TurnSignal.c: 18:     {;TurnSignal.c: 19:         SetOutputs( 0 );
  7189  0FC6  3000               	movlw	0
  7190  0FC7  318E  269F  318F   	fcall	_SetOutputs
  7191  0FCA                     l2912:	
  7192                           
  7193                           ;TurnSignal.c: 20:         ts_trigger_time = ms();
  7194  0FCA  318D  2556  318F   	fcall	_ms
  7195  0FCD  0020               	movlb	0	; select bank0
  7196  0FCE  0823               	movf	?_ms+3,w
  7197  0FCF  0021               	movlb	1	; select bank1
  7198  0FD0  00A7               	movwf	(_ts_trigger_time+3)^(0+128)
  7199  0FD1  0020               	movlb	0	; select bank0
  7200  0FD2  0822               	movf	?_ms+2,w
  7201  0FD3  0021               	movlb	1	; select bank1
  7202  0FD4  00A6               	movwf	(_ts_trigger_time+2)^(0+128)
  7203  0FD5  0020               	movlb	0	; select bank0
  7204  0FD6  0821               	movf	?_ms+1,w
  7205  0FD7  0021               	movlb	1	; select bank1
  7206  0FD8  00A5               	movwf	(_ts_trigger_time+1)^(0+128)
  7207  0FD9  0020               	movlb	0	; select bank0
  7208  0FDA  0820               	movf	?_ms,w
  7209  0FDB  0021               	movlb	1	; select bank1
  7210  0FDC  00A4               	movwf	_ts_trigger_time^(0+128)
  7211  0FDD                     l2914:	
  7212                           
  7213                           ;TurnSignal.c: 21:         return 0;
  7214  0FDD  3000               	movlw	0
  7215  0FDE  2FFF               	goto	l395
  7216  0FDF                     l2918:	
  7217                           
  7218                           ;TurnSignal.c: 24:     return abs( ms() - ts_trigger_time ) > 2000;;
  7219  0FDF  318D  2556  318F   	fcall	_ms
  7220  0FE2  0021               	movlb	1	; select bank1
  7221  0FE3  0824               	movf	_ts_trigger_time^(0+128),w
  7222  0FE4  0020               	movlb	0	; select bank0
  7223  0FE5  0220               	subwf	?_ms,w
  7224  0FE6  00A4               	movwf	abs@a
  7225  0FE7  0021               	movlb	1	; select bank1
  7226  0FE8  0825               	movf	(_ts_trigger_time+1)^(0+128),w
  7227  0FE9  0020               	movlb	0	; select bank0
  7228  0FEA  3B21               	subwfb	?_ms+1,w
  7229  0FEB  00A5               	movwf	abs@a+1
  7230  0FEC  318D  25FC  318F   	fcall	_abs
  7231  0FEF  0020               	movlb	0	; select bank0
  7232  0FF0  0825               	movf	?_abs+1,w
  7233  0FF1  3A80               	xorlw	128
  7234  0FF2  00A8               	movwf	??_TurnSignalDone
  7235  0FF3  3087               	movlw	135
  7236  0FF4  0228               	subwf	??_TurnSignalDone,w
  7237  0FF5  1D03               	skipz
  7238  0FF6  2FF9               	goto	u1625
  7239  0FF7  30D1               	movlw	209
  7240  0FF8  0224               	subwf	?_abs,w
  7241  0FF9                     u1625:	
  7242  0FF9  1803               	skipnc
  7243  0FFA  2FFC               	goto	u1621
  7244  0FFB  2FFE               	goto	u1620
  7245  0FFC                     u1621:	
  7246  0FFC  3001               	movlw	1
  7247  0FFD  2FFF               	goto	u1630
  7248  0FFE                     u1620:	
  7249  0FFE  3000               	movlw	0
  7250  0FFF                     u1630:	
  7251  0FFF                     l395:	
  7252  0FFF  0008               	return
  7253  1000                     __end_of_TurnSignalDone:	
  7254                           
  7255                           	psect	text24
  7256  0DFC                     __ptext24:	
  7257 ;; *************** function _abs *****************
  7258 ;; Defined at:
  7259 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\abs.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;  a               2    4[BANK0 ] int 
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;		None
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  2    4[BANK0 ] int 
  7266 ;; Registers used:
  7267 ;;		wreg, status,2, status,0
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7273 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;Total ram usage:        4 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; Hardware stack levels required when called:    6
  7280 ;; This function calls:
  7281 ;;		Nothing
  7282 ;; This function is called by:
  7283 ;;		_TurnSignalDone
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           
  7288                           ;psect for function _abs
  7289  0DFC                     _abs:	
  7290  0DFC                     l2892:	
  7291                           ;incstack = 0
  7292                           ; Regs used in _abs: [wreg+status,2+status,0]
  7293                           
  7294  0DFC  0020               	movlb	0	; select bank0
  7295  0DFD  0825               	movf	abs@a+1,w
  7296  0DFE  3A80               	xorlw	128
  7297  0DFF  00A6               	movwf	??_abs
  7298  0E00  3080               	movlw	128
  7299  0E01  0226               	subwf	??_abs,w
  7300  0E02  1D03               	skipz
  7301  0E03  2E06               	goto	u1605
  7302  0E04  3001               	movlw	1
  7303  0E05  0224               	subwf	abs@a,w
  7304  0E06                     u1605:	
  7305  0E06  1803               	skipnc
  7306  0E07  2E09               	goto	u1601
  7307  0E08  2E0A               	goto	u1600
  7308  0E09                     u1601:	
  7309  0E09  2E17               	goto	l1141
  7310  0E0A                     u1600:	
  7311  0E0A                     l2894:	
  7312  0E0A  0020               	movlb	0	; select bank0
  7313  0E0B  0924               	comf	abs@a,w
  7314  0E0C  00A6               	movwf	??_abs
  7315  0E0D  0925               	comf	abs@a+1,w
  7316  0E0E  00A7               	movwf	??_abs+1
  7317  0E0F  0AA6               	incf	??_abs,f
  7318  0E10  1903               	skipnz
  7319  0E11  0AA7               	incf	??_abs+1,f
  7320  0E12  0826               	movf	??_abs,w
  7321  0E13  00A4               	movwf	?_abs
  7322  0E14  0827               	movf	??_abs+1,w
  7323  0E15  00A5               	movwf	?_abs+1
  7324  0E16  2E17               	goto	l1144
  7325  0E17                     l1141:	
  7326  0E17                     l1144:	
  7327  0E17  0008               	return
  7328  0E18                     __end_of_abs:	
  7329                           
  7330                           	psect	text25
  7331  0E9F                     __ptext25:	
  7332 ;; *************** function _SetOutputs *****************
  7333 ;; Defined at:
  7334 ;;		line 38 in file "Lights.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;  state           1    wreg     const _Bool 
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;  state           1    5[BANK0 ] const _Bool 
  7339 ;; Return value:  Size  Location     Type
  7340 ;;                  1    wreg      void 
  7341 ;; Registers used:
  7342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7343 ;; Tracked objects:
  7344 ;;		On entry : 0/0
  7345 ;;		On exit  : 0/0
  7346 ;;		Unchanged: 0/0
  7347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7350 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7351 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7352 ;;Total ram usage:        2 bytes
  7353 ;; Hardware stack levels used:    1
  7354 ;; Hardware stack levels required when called:    7
  7355 ;; This function calls:
  7356 ;;		_SetLight
  7357 ;; This function is called by:
  7358 ;;		_setup
  7359 ;;		_TurnSignalDone
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           
  7364                           ;psect for function _SetOutputs
  7365  0E9F                     _SetOutputs:	
  7366                           
  7367                           ;incstack = 0
  7368                           ; Regs used in _SetOutputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7369                           ;SetOutputs@state stored from wreg
  7370  0E9F  0020               	movlb	0	; select bank0
  7371  0EA0  00A5               	movwf	SetOutputs@state
  7372  0EA1                     l2860:	
  7373                           
  7374                           ;Lights.c: 38: void SetOutputs( const _Bool state );Lights.c: 39: {;Lights.c: 40:     Se
      +                          tLight( L1, state );
  7375  0EA1  0825               	movf	SetOutputs@state,w
  7376  0EA2  00A4               	movwf	??_SetOutputs
  7377  0EA3  0824               	movf	??_SetOutputs,w
  7378  0EA4  00A0               	movwf	SetLight@state
  7379  0EA5  3000               	movlw	0
  7380  0EA6  3186  26B3  318E   	fcall	_SetLight
  7381                           
  7382                           ;Lights.c: 41:     SetLight( L2, state );
  7383  0EA9  0020               	movlb	0	; select bank0
  7384  0EAA  0825               	movf	SetOutputs@state,w
  7385  0EAB  00A4               	movwf	??_SetOutputs
  7386  0EAC  0824               	movf	??_SetOutputs,w
  7387  0EAD  00A0               	movwf	SetLight@state
  7388  0EAE  3001               	movlw	1
  7389  0EAF  3186  26B3  318E   	fcall	_SetLight
  7390                           
  7391                           ;Lights.c: 42:     SetLight( L3, state );
  7392  0EB2  0020               	movlb	0	; select bank0
  7393  0EB3  0825               	movf	SetOutputs@state,w
  7394  0EB4  00A4               	movwf	??_SetOutputs
  7395  0EB5  0824               	movf	??_SetOutputs,w
  7396  0EB6  00A0               	movwf	SetLight@state
  7397  0EB7  3002               	movlw	2
  7398  0EB8  3186  26B3  318E   	fcall	_SetLight
  7399                           
  7400                           ;Lights.c: 43:     SetLight( L4, state );
  7401  0EBB  0020               	movlb	0	; select bank0
  7402  0EBC  0825               	movf	SetOutputs@state,w
  7403  0EBD  00A4               	movwf	??_SetOutputs
  7404  0EBE  0824               	movf	??_SetOutputs,w
  7405  0EBF  00A0               	movwf	SetLight@state
  7406  0EC0  3003               	movlw	3
  7407  0EC1  3186  26B3  318E   	fcall	_SetLight
  7408  0EC4                     l360:	
  7409  0EC4  0008               	return
  7410  0EC5                     __end_of_SetOutputs:	
  7411                           
  7412                           	psect	text26
  7413  07C8                     __ptext26:	
  7414 ;; *************** function _PatternCycleInputChanged *****************
  7415 ;; Defined at:
  7416 ;;		line 27 in file "TurnSignal.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;		None
  7419 ;; Auto vars:     Size  Location     Type
  7420 ;;  delay_count     2    2[BANK0 ] unsigned short 
  7421 ;; Return value:  Size  Location     Type
  7422 ;;                  1    wreg      _Bool 
  7423 ;; Registers used:
  7424 ;;		wreg, status,2, status,0
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7431 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7432 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7433 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7434 ;;Total ram usage:        4 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    6
  7437 ;; This function calls:
  7438 ;;		Nothing
  7439 ;; This function is called by:
  7440 ;;		_main
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           
  7445                           ;psect for function _PatternCycleInputChanged
  7446  07C8                     _PatternCycleInputChanged:	
  7447  07C8                     l2922:	
  7448                           ;incstack = 0
  7449                           ; Regs used in _PatternCycleInputChanged: [wreg+status,2+status,0]
  7450                           
  7451                           
  7452                           ;TurnSignal.c: 29:     cur_pc_input_state = PORTCbits.RC5;
  7453  07C8  3000               	movlw	0
  7454  07C9  0020               	movlb	0	; select bank0
  7455  07CA  1A8E               	btfsc	14,5	;volatile
  7456  07CB  3001               	movlw	1
  7457  07CC  00F8               	movwf	_cur_pc_input_state
  7458  07CD                     l2924:	
  7459                           
  7460                           ;TurnSignal.c: 30:     if ( cur_pc_input_state != last_pc_input_state )
  7461  07CD  0878               	movf	_cur_pc_input_state,w
  7462  07CE  066D               	xorwf	_last_pc_input_state,w
  7463  07CF  1903               	skipnz
  7464  07D0  2FD2               	goto	u1641
  7465  07D1  2FD3               	goto	u1640
  7466  07D2                     u1641:	
  7467  07D2  2FE8               	goto	l2932
  7468  07D3                     u1640:	
  7469  07D3                     l2926:	
  7470                           
  7471                           ;TurnSignal.c: 31:     {;TurnSignal.c: 32:         uint delay_count = 0;
  7472  07D3  01A2               	clrf	PatternCycleInputChanged@delay_count
  7473  07D4  01A3               	clrf	PatternCycleInputChanged@delay_count+1
  7474                           
  7475                           ;TurnSignal.c: 34:         while ( delay_count++ < 3 )
  7476  07D5  2FEA               	goto	l2936
  7477  07D6                     l2928:	
  7478                           
  7479                           ;TurnSignal.c: 35:         {;TurnSignal.c: 36:             _delay((unsigned long)((10)*(
      +                          1000000/4000.0)));
  7480  07D6  3004               	movlw	4
  7481  07D7  0020               	movlb	0	; select bank0
  7482  07D8  00A0               	movwf	??_PatternCycleInputChanged
  7483  07D9  303D               	movlw	61
  7484  07DA                     u1727:	
  7485  07DA  0B89               	decfsz	9,f
  7486  07DB  2FDA               	goto	u1727
  7487  07DC  0BA0               	decfsz	??_PatternCycleInputChanged,f
  7488  07DD  2FDA               	goto	u1727
  7489  07DE  3200               	nop2
  7490  07DF                     l2930:	
  7491                           
  7492                           ;TurnSignal.c: 38:             if( PORTCbits.RC5 != cur_pc_input_state )
  7493  07DF  0020               	movlb	0	; select bank0
  7494  07E0  0E0E               	swapf	14,w	;volatile
  7495  07E1  0C89               	rrf	9,f
  7496  07E2  3901               	andlw	1
  7497  07E3  0678               	xorwf	_cur_pc_input_state,w
  7498  07E4  1903               	skipnz
  7499  07E5  2FE7               	goto	u1651
  7500  07E6  2FE8               	goto	u1650
  7501  07E7                     u1651:	
  7502  07E7  2FEA               	goto	l2936
  7503  07E8                     u1650:	
  7504  07E8                     l2932:	
  7505                           
  7506                           ;TurnSignal.c: 39:             {;TurnSignal.c: 40:                 return 0;
  7507  07E8  3000               	movlw	0
  7508  07E9  2FFB               	goto	l402
  7509  07EA                     l2936:	
  7510                           
  7511                           ;TurnSignal.c: 34:         while ( delay_count++ < 3 )
  7512  07EA  0823               	movf	PatternCycleInputChanged@delay_count+1,w
  7513  07EB  00A1               	movwf	??_PatternCycleInputChanged+1
  7514  07EC  0822               	movf	PatternCycleInputChanged@delay_count,w
  7515  07ED  00A0               	movwf	??_PatternCycleInputChanged
  7516  07EE  0AA2               	incf	PatternCycleInputChanged@delay_count,f
  7517  07EF  1903               	skipnz
  7518  07F0  0AA3               	incf	PatternCycleInputChanged@delay_count+1,f
  7519  07F1  3000               	movlw	0
  7520  07F2  0221               	subwf	??_PatternCycleInputChanged+1,w
  7521  07F3  3003               	movlw	3
  7522  07F4  1903               	skipnz
  7523  07F5  0220               	subwf	??_PatternCycleInputChanged,w
  7524  07F6  1C03               	skipc
  7525  07F7  2FF9               	goto	u1661
  7526  07F8  2FFA               	goto	u1660
  7527  07F9                     u1661:	
  7528  07F9  2FD6               	goto	l2928
  7529  07FA                     u1660:	
  7530  07FA                     l2942:	
  7531                           
  7532                           ;TurnSignal.c: 49:     return 1;
  7533  07FA  3001               	movlw	1
  7534  07FB                     l402:	
  7535  07FB  0008               	return
  7536  07FC                     __end_of_PatternCycleInputChanged:	
  7537                           
  7538                           	psect	text27
  7539  05BD                     __ptext27:	
  7540 ;; *************** function _NextPattern *****************
  7541 ;; Defined at:
  7542 ;;		line 26 in file "PatternSelector.c"
  7543 ;; Parameters:    Size  Location     Type
  7544 ;;  p_selector      2    0[BANK0 ] PTR volatile struct Patt
  7545 ;;		 -> pattern_selector(19), 
  7546 ;; Auto vars:     Size  Location     Type
  7547 ;;		None
  7548 ;; Return value:  Size  Location     Type
  7549 ;;                  2    0[BANK0 ] PTR struct Pattern
  7550 ;; Registers used:
  7551 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7552 ;; Tracked objects:
  7553 ;;		On entry : 0/0
  7554 ;;		On exit  : 0/0
  7555 ;;		Unchanged: 0/0
  7556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7557 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7559 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7560 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7561 ;;Total ram usage:        6 bytes
  7562 ;; Hardware stack levels used:    1
  7563 ;; Hardware stack levels required when called:    6
  7564 ;; This function calls:
  7565 ;;		Nothing
  7566 ;; This function is called by:
  7567 ;;		_main
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           
  7572                           ;psect for function _NextPattern
  7573  05BD                     _NextPattern:	
  7574  05BD                     l2946:	
  7575                           ;incstack = 0
  7576                           ; Regs used in _NextPattern: [wreg-fsr1h+status,2+status,0]
  7577                           
  7578                           
  7579                           ;PatternSelector.c: 26: struct Pattern* NextPattern( struct PatternSelector* p_selector 
      +                          );PatternSelector.c: 27: {;PatternSelector.c: 28:     switch( p_selector->active )
  7580  05BD  2DF3               	goto	l2960
  7581  05BE                     l2948:	
  7582                           
  7583                           ;PatternSelector.c: 31:             p_selector->active = XSTROBE;
  7584  05BE  0820               	movf	NextPattern@p_selector,w
  7585  05BF  3E0C               	addlw	12
  7586  05C0  00A2               	movwf	??_NextPattern
  7587  05C1  3000               	movlw	0
  7588  05C2  3D21               	addwfc	NextPattern@p_selector+1,w
  7589  05C3  00A3               	movwf	??_NextPattern+1
  7590  05C4  0822               	movf	??_NextPattern,w
  7591  05C5  0086               	movwf	6
  7592  05C6  0823               	movf	??_NextPattern+1,w
  7593  05C7  0087               	movwf	7
  7594  05C8  3001               	movlw	1
  7595  05C9  0081               	movwf	1
  7596                           
  7597                           ;PatternSelector.c: 32:             break;
  7598  05CA  2E0F               	goto	l2962
  7599  05CB                     l2950:	
  7600                           
  7601                           ;PatternSelector.c: 34:             p_selector->active = UPPER_LOWER;
  7602  05CB  0820               	movf	NextPattern@p_selector,w
  7603  05CC  3E0C               	addlw	12
  7604  05CD  00A2               	movwf	??_NextPattern
  7605  05CE  3000               	movlw	0
  7606  05CF  3D21               	addwfc	NextPattern@p_selector+1,w
  7607  05D0  00A3               	movwf	??_NextPattern+1
  7608  05D1  0822               	movf	??_NextPattern,w
  7609  05D2  0086               	movwf	6
  7610  05D3  0823               	movf	??_NextPattern+1,w
  7611  05D4  0087               	movwf	7
  7612  05D5  3002               	movlw	2
  7613  05D6  0081               	movwf	1
  7614                           
  7615                           ;PatternSelector.c: 35:             break;
  7616  05D7  2E0F               	goto	l2962
  7617  05D8                     l2952:	
  7618                           
  7619                           ;PatternSelector.c: 37:             p_selector->active = LOWER;
  7620  05D8  0820               	movf	NextPattern@p_selector,w
  7621  05D9  3E0C               	addlw	12
  7622  05DA  00A2               	movwf	??_NextPattern
  7623  05DB  3000               	movlw	0
  7624  05DC  3D21               	addwfc	NextPattern@p_selector+1,w
  7625  05DD  00A3               	movwf	??_NextPattern+1
  7626  05DE  0822               	movf	??_NextPattern,w
  7627  05DF  0086               	movwf	6
  7628  05E0  0823               	movf	??_NextPattern+1,w
  7629  05E1  0087               	movwf	7
  7630  05E2  3003               	movlw	3
  7631  05E3  0081               	movwf	1
  7632                           
  7633                           ;PatternSelector.c: 38:             break;
  7634  05E4  2E0F               	goto	l2962
  7635  05E5                     l2954:	
  7636                           
  7637                           ;PatternSelector.c: 40:             p_selector->active = WIGWAG;
  7638  05E5  0820               	movf	NextPattern@p_selector,w
  7639  05E6  0086               	movwf	6
  7640  05E7  0821               	movf	NextPattern@p_selector+1,w
  7641  05E8  0087               	movwf	7
  7642  05E9  314C               	addfsr 1,12
  7643  05EA  0181               	clrf	1
  7644                           
  7645                           ;PatternSelector.c: 41:             break;
  7646  05EB  2E0F               	goto	l2962
  7647  05EC                     l2956:	
  7648                           
  7649                           ;PatternSelector.c: 43:             p_selector->active = WIGWAG;
  7650  05EC  0820               	movf	NextPattern@p_selector,w
  7651  05ED  0086               	movwf	6
  7652  05EE  0821               	movf	NextPattern@p_selector+1,w
  7653  05EF  0087               	movwf	7
  7654  05F0  314C               	addfsr 1,12
  7655  05F1  0181               	clrf	1
  7656                           
  7657                           ;PatternSelector.c: 44:             break;
  7658  05F2  2E0F               	goto	l2962
  7659  05F3                     l2960:	
  7660  05F3  0020               	movlb	0	; select bank0
  7661  05F4  0820               	movf	NextPattern@p_selector,w
  7662  05F5  0086               	movwf	6
  7663  05F6  0821               	movf	NextPattern@p_selector+1,w
  7664  05F7  0087               	movwf	7
  7665  05F8  314C               	addfsr 1,12
  7666  05F9  0801               	movf	1,w
  7667  05FA  00A2               	movwf	??_NextPattern
  7668  05FB  01A3               	clrf	??_NextPattern+1
  7669                           
  7670                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7671                           ; Switch size 1, requested type "simple"
  7672                           ; Number of cases is 1, Range of values is 0 to 0
  7673                           ; switch strategies available:
  7674                           ; Name         Instructions Cycles
  7675                           ; simple_byte            4     3 (average)
  7676                           ; direct_byte            8     6 (fixed)
  7677                           ; jumptable            260     6 (fixed)
  7678                           ;	Chosen strategy is simple_byte
  7679  05FC  0823               	movf	??_NextPattern+1,w
  7680  05FD  3A00               	xorlw	0	; case 0
  7681  05FE  1903               	skipnz
  7682  05FF  2E01               	goto	l3074
  7683  0600  2DEC               	goto	l2956
  7684  0601                     l3074:	
  7685                           
  7686                           ; Switch size 1, requested type "simple"
  7687                           ; Number of cases is 4, Range of values is 0 to 3
  7688                           ; switch strategies available:
  7689                           ; Name         Instructions Cycles
  7690                           ; simple_byte           13     7 (average)
  7691                           ; direct_byte           14     6 (fixed)
  7692                           ; jumptable            260     6 (fixed)
  7693                           ;	Chosen strategy is simple_byte
  7694  0601  0822               	movf	??_NextPattern,w
  7695  0602  3A00               	xorlw	0	; case 0
  7696  0603  1903               	skipnz
  7697  0604  2DBE               	goto	l2948
  7698  0605  3A01               	xorlw	1	; case 1
  7699  0606  1903               	skipnz
  7700  0607  2DCB               	goto	l2950
  7701  0608  3A03               	xorlw	3	; case 2
  7702  0609  1903               	skipnz
  7703  060A  2DD8               	goto	l2952
  7704  060B  3A01               	xorlw	1	; case 3
  7705  060C  1903               	skipnz
  7706  060D  2DE5               	goto	l2954
  7707  060E  2DEC               	goto	l2956
  7708  060F                     l2962:	
  7709                           
  7710                           ;PatternSelector.c: 47:     p_selector->current_stage = p_selector->patterns[ p_selector
      +                          ->active ]->first_stage;
  7711  060F  0820               	movf	NextPattern@p_selector,w
  7712  0610  0086               	movwf	6
  7713  0611  0821               	movf	NextPattern@p_selector+1,w
  7714  0612  0087               	movwf	7
  7715  0613  314C               	addfsr 1,12
  7716  0614  0801               	movf	1,w
  7717  0615  00A2               	movwf	??_NextPattern
  7718  0616  01A3               	clrf	??_NextPattern+1
  7719  0617  35A2               	lslf	??_NextPattern,f
  7720  0618  0DA3               	rlf	??_NextPattern+1,f
  7721  0619  0822               	movf	??_NextPattern,w
  7722  061A  0720               	addwf	NextPattern@p_selector,w
  7723  061B  0086               	movwf	6
  7724  061C  0823               	movf	??_NextPattern+1,w
  7725  061D  3D21               	addwfc	NextPattern@p_selector+1,w
  7726  061E  0087               	movwf	7
  7727  061F  3F40               	moviw [0]fsr1
  7728  0620  00A4               	movwf	??_NextPattern+2
  7729  0621  3F41               	moviw [1]fsr1
  7730  0622  00A5               	movwf	??_NextPattern+3
  7731  0623  0824               	movf	??_NextPattern+2,w
  7732  0624  0086               	movwf	6
  7733  0625  0825               	movf	??_NextPattern+3,w
  7734  0626  0087               	movwf	7
  7735  0627  3141               	addfsr 1,1
  7736  0628  0820               	movf	NextPattern@p_selector,w
  7737  0629  0084               	movwf	4
  7738  062A  0821               	movf	NextPattern@p_selector+1,w
  7739  062B  0085               	movwf	5
  7740  062C  310D               	addfsr 0,13
  7741  062D  3F40               	moviw [0]fsr1
  7742  062E  3F80               	movwi [0]fsr0
  7743  062F  3F41               	moviw [1]fsr1
  7744  0630  3F81               	movwi [1]fsr0
  7745  0631                     l2964:	
  7746                           
  7747                           ;PatternSelector.c: 49:     return p_selector->patterns[ p_selector->active ];;	Return v
      +                          alue of _NextPattern is never used
  7748  0631  0820               	movf	NextPattern@p_selector,w
  7749  0632  0086               	movwf	6
  7750  0633  0821               	movf	NextPattern@p_selector+1,w
  7751  0634  0087               	movwf	7
  7752  0635  314C               	addfsr 1,12
  7753  0636  0801               	movf	1,w
  7754  0637  00A2               	movwf	??_NextPattern
  7755  0638  01A3               	clrf	??_NextPattern+1
  7756  0639  35A2               	lslf	??_NextPattern,f
  7757  063A  0DA3               	rlf	??_NextPattern+1,f
  7758  063B  0822               	movf	??_NextPattern,w
  7759  063C  0720               	addwf	NextPattern@p_selector,w
  7760  063D  0086               	movwf	6
  7761  063E  0823               	movf	??_NextPattern+1,w
  7762  063F  3D21               	addwfc	NextPattern@p_selector+1,w
  7763  0640  0087               	movwf	7
  7764  0641                     l321:	
  7765  0641  0008               	return
  7766  0642                     __end_of_NextPattern:	
  7767                           
  7768                           	psect	text28
  7769  0488                     __ptext28:	
  7770 ;; *************** function _FlashPattern *****************
  7771 ;; Defined at:
  7772 ;;		line 11 in file "PatternFlasher.c"
  7773 ;; Parameters:    Size  Location     Type
  7774 ;;		None
  7775 ;; Auto vars:     Size  Location     Type
  7776 ;;  current_time    2   14[BANK0 ] unsigned short 
  7777 ;; Return value:  Size  Location     Type
  7778 ;;                  1    wreg      void 
  7779 ;; Registers used:
  7780 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7781 ;; Tracked objects:
  7782 ;;		On entry : 0/0
  7783 ;;		On exit  : 0/0
  7784 ;;		Unchanged: 0/0
  7785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7787 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7789 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7790 ;;Total ram usage:       12 bytes
  7791 ;; Hardware stack levels used:    1
  7792 ;; Hardware stack levels required when called:    7
  7793 ;; This function calls:
  7794 ;;		_SetLight
  7795 ;;		_ms
  7796 ;; This function is called by:
  7797 ;;		_main
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           
  7802                           ;psect for function _FlashPattern
  7803  0488                     _FlashPattern:	
  7804  0488                     l2972:	
  7805                           ;incstack = 0
  7806                           ; Regs used in _FlashPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7807                           
  7808                           
  7809                           ;PatternFlasher.c: 13:     uint current_time = ms();
  7810  0488  318D  2556  3184   	fcall	_ms
  7811  048B  0020               	movlb	0	; select bank0
  7812  048C  0821               	movf	?_ms+1,w
  7813  048D  00AF               	movwf	FlashPattern@current_time+1
  7814  048E  0820               	movf	?_ms,w
  7815  048F  00AE               	movwf	FlashPattern@current_time
  7816  0490                     l2974:	
  7817                           
  7818                           ;PatternFlasher.c: 15:     if ( current_time - pattern_selector.start_time > pattern_sel
      +                          ector.current_stage->time_ms )
  7819  0490  082E               	movf	FlashPattern@current_time,w
  7820  0491  00A4               	movwf	??_FlashPattern
  7821  0492  082F               	movf	FlashPattern@current_time+1,w
  7822  0493  00A5               	movwf	??_FlashPattern+1
  7823  0494  01A6               	clrf	??_FlashPattern+2
  7824  0495  01A7               	clrf	??_FlashPattern+3
  7825  0496  0021               	movlb	1	; select bank1
  7826  0497  0837               	movf	(_pattern_selector^(0+128)+15),w	;volatile
  7827  0498  0020               	movlb	0	; select bank0
  7828  0499  02A4               	subwf	??_FlashPattern,f
  7829  049A  0021               	movlb	1	; select bank1
  7830  049B  0838               	movf	((_pattern_selector+1)^(0+128)+15),w	;volatile
  7831  049C  0020               	movlb	0	; select bank0
  7832  049D  3BA5               	subwfb	??_FlashPattern+1,f
  7833  049E  0021               	movlb	1	; select bank1
  7834  049F  0839               	movf	((_pattern_selector+2)^(0+128)+15),w	;volatile
  7835  04A0  0020               	movlb	0	; select bank0
  7836  04A1  3BA6               	subwfb	??_FlashPattern+2,f
  7837  04A2  0021               	movlb	1	; select bank1
  7838  04A3  083A               	movf	((_pattern_selector+3)^(0+128)+15),w	;volatile
  7839  04A4  0020               	movlb	0	; select bank0
  7840  04A5  3BA7               	subwfb	??_FlashPattern+3,f
  7841  04A6  0021               	movlb	1	; select bank1
  7842  04A7  0835               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  7843  04A8  0086               	movwf	6
  7844  04A9  0836               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  7845  04AA  0087               	movwf	7
  7846  04AB  3144               	addfsr 1,4
  7847  04AC  3F40               	moviw [0]fsr1
  7848  04AD  0020               	movlb	0	; select bank0
  7849  04AE  00A8               	movwf	??_FlashPattern+4
  7850  04AF  3F41               	moviw [1]fsr1
  7851  04B0  00A9               	movwf	??_FlashPattern+5
  7852  04B1  0828               	movf	??_FlashPattern+4,w
  7853  04B2  00AA               	movwf	??_FlashPattern+6
  7854  04B3  0829               	movf	??_FlashPattern+5,w
  7855  04B4  00AB               	movwf	??_FlashPattern+7
  7856  04B5  01AC               	clrf	??_FlashPattern+8
  7857  04B6  01AD               	clrf	??_FlashPattern+9
  7858  04B7  0827               	movf	??_FlashPattern+3,w
  7859  04B8  022D               	subwf	??_FlashPattern+9,w
  7860  04B9  1D03               	skipz
  7861  04BA  2CC5               	goto	u1675
  7862  04BB  0826               	movf	??_FlashPattern+2,w
  7863  04BC  022C               	subwf	??_FlashPattern+8,w
  7864  04BD  1D03               	skipz
  7865  04BE  2CC5               	goto	u1675
  7866  04BF  0825               	movf	??_FlashPattern+1,w
  7867  04C0  022B               	subwf	??_FlashPattern+7,w
  7868  04C1  1D03               	skipz
  7869  04C2  2CC5               	goto	u1675
  7870  04C3  0824               	movf	??_FlashPattern,w
  7871  04C4  022A               	subwf	??_FlashPattern+6,w
  7872  04C5                     u1675:	
  7873  04C5  1803               	skipnc
  7874  04C6  2CC8               	goto	u1671
  7875  04C7  2CC9               	goto	u1670
  7876  04C8                     u1671:	
  7877  04C8  2CE0               	goto	l2982
  7878  04C9                     u1670:	
  7879  04C9                     l2976:	
  7880                           
  7881                           ;PatternFlasher.c: 16:     {;PatternFlasher.c: 17:         pattern_selector.current_stag
      +                          e = pattern_selector.current_stage->next;
  7882  04C9  0021               	movlb	1	; select bank1
  7883  04CA  0835               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  7884  04CB  0086               	movwf	6
  7885  04CC  0836               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  7886  04CD  0087               	movwf	7
  7887  04CE  3146               	addfsr 1,6
  7888  04CF  3F40               	moviw [0]fsr1
  7889  04D0  00B5               	movwf	(_pattern_selector^(0+128)+13)	;volatile
  7890  04D1  3F41               	moviw [1]fsr1
  7891  04D2  00B6               	movwf	((_pattern_selector+1)^(0+128)+13)	;volatile
  7892  04D3                     l2978:	
  7893                           
  7894                           ;PatternFlasher.c: 18:         pattern_selector.start_time = current_time;
  7895  04D3  0020               	movlb	0	; select bank0
  7896  04D4  082E               	movf	FlashPattern@current_time,w
  7897  04D5  0021               	movlb	1	; select bank1
  7898  04D6  00B7               	movwf	(_pattern_selector^(0+128)+15)	;volatile
  7899  04D7  0020               	movlb	0	; select bank0
  7900  04D8  082F               	movf	FlashPattern@current_time+1,w
  7901  04D9  0021               	movlb	1	; select bank1
  7902  04DA  00B8               	movwf	(_pattern_selector^(0+128)+16)	;volatile
  7903  04DB  01B9               	clrf	(_pattern_selector^(0+128)+17)	;volatile
  7904  04DC  01BA               	clrf	(_pattern_selector^(0+128)+18)	;volatile
  7905  04DD                     l2980:	
  7906                           
  7907                           ;PatternFlasher.c: 19:         update_stage = 1;
  7908  04DD  0020               	movlb	0	; select bank0
  7909  04DE  01EC               	clrf	_update_stage
  7910  04DF  0AEC               	incf	_update_stage,f
  7911  04E0                     l2982:	
  7912                           
  7913                           ;PatternFlasher.c: 23:     if ( update_stage == 1 )
  7914  04E0  036C               	decf	_update_stage,w
  7915  04E1  1D03               	btfss	3,2
  7916  04E2  2CE4               	goto	u1681
  7917  04E3  2CE5               	goto	u1680
  7918  04E4                     u1681:	
  7919  04E4  2D22               	goto	l524
  7920  04E5                     u1680:	
  7921  04E5                     l2984:	
  7922                           
  7923                           ;PatternFlasher.c: 24:     {;PatternFlasher.c: 25:         SetLight( L1, pattern_selecto
      +                          r.current_stage->light_states[L1] );
  7924  04E5  0021               	movlb	1	; select bank1
  7925  04E6  0835               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  7926  04E7  0086               	movwf	6
  7927  04E8  0836               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  7928  04E9  0087               	movwf	7
  7929  04EA  0801               	movf	1,w
  7930  04EB  0020               	movlb	0	; select bank0
  7931  04EC  00A4               	movwf	??_FlashPattern
  7932  04ED  0824               	movf	??_FlashPattern,w
  7933  04EE  00A0               	movwf	SetLight@state
  7934  04EF  3000               	movlw	0
  7935  04F0  3186  26B3  3184   	fcall	_SetLight
  7936                           
  7937                           ;PatternFlasher.c: 26:         SetLight( L2, pattern_selector.current_stage->light_state
      +                          s[L2] );
  7938  04F3  0021               	movlb	1	; select bank1
  7939  04F4  0835               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  7940  04F5  0086               	movwf	6
  7941  04F6  0836               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  7942  04F7  0087               	movwf	7
  7943  04F8  3141               	addfsr 1,1
  7944  04F9  0801               	movf	1,w
  7945  04FA  0020               	movlb	0	; select bank0
  7946  04FB  00A4               	movwf	??_FlashPattern
  7947  04FC  0824               	movf	??_FlashPattern,w
  7948  04FD  00A0               	movwf	SetLight@state
  7949  04FE  3001               	movlw	1
  7950  04FF  3186  26B3  3184   	fcall	_SetLight
  7951                           
  7952                           ;PatternFlasher.c: 27:         SetLight( L3, pattern_selector.current_stage->light_state
      +                          s[L3] );
  7953  0502  0021               	movlb	1	; select bank1
  7954  0503  0835               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  7955  0504  0086               	movwf	6
  7956  0505  0836               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  7957  0506  0087               	movwf	7
  7958  0507  3142               	addfsr 1,2
  7959  0508  0801               	movf	1,w
  7960  0509  0020               	movlb	0	; select bank0
  7961  050A  00A4               	movwf	??_FlashPattern
  7962  050B  0824               	movf	??_FlashPattern,w
  7963  050C  00A0               	movwf	SetLight@state
  7964  050D  3002               	movlw	2
  7965  050E  3186  26B3  3184   	fcall	_SetLight
  7966                           
  7967                           ;PatternFlasher.c: 28:         SetLight( L4, pattern_selector.current_stage->light_state
      +                          s[L4] );
  7968  0511  0021               	movlb	1	; select bank1
  7969  0512  0835               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  7970  0513  0086               	movwf	6
  7971  0514  0836               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  7972  0515  0087               	movwf	7
  7973  0516  3143               	addfsr 1,3
  7974  0517  0801               	movf	1,w
  7975  0518  0020               	movlb	0	; select bank0
  7976  0519  00A4               	movwf	??_FlashPattern
  7977  051A  0824               	movf	??_FlashPattern,w
  7978  051B  00A0               	movwf	SetLight@state
  7979  051C  3003               	movlw	3
  7980  051D  3186  26B3  3184   	fcall	_SetLight
  7981  0520                     l2986:	
  7982                           
  7983                           ;PatternFlasher.c: 29:         update_stage = 0;
  7984  0520  0020               	movlb	0	; select bank0
  7985  0521  01EC               	clrf	_update_stage
  7986  0522                     l524:	
  7987  0522  0008               	return
  7988  0523                     __end_of_FlashPattern:	
  7989                           
  7990                           	psect	text29
  7991  0D56                     __ptext29:	
  7992 ;; *************** function _ms *****************
  7993 ;; Defined at:
  7994 ;;		line 7 in file "Time.c"
  7995 ;; Parameters:    Size  Location     Type
  7996 ;;		None
  7997 ;; Auto vars:     Size  Location     Type
  7998 ;;		None
  7999 ;; Return value:  Size  Location     Type
  8000 ;;                  4    0[BANK0 ] unsigned long 
  8001 ;; Registers used:
  8002 ;;		wreg
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8008 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8011 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;Total ram usage:        4 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; Hardware stack levels required when called:    6
  8015 ;; This function calls:
  8016 ;;		Nothing
  8017 ;; This function is called by:
  8018 ;;		_TurnSignalDone
  8019 ;;		_FlashPattern
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           
  8024                           ;psect for function _ms
  8025  0D56                     _ms:	
  8026  0D56                     l2888:	
  8027                           ;incstack = 0
  8028                           ; Regs used in _ms: [wreg]
  8029                           
  8030                           
  8031                           ;Time.c: 9:     return cur_ms;
  8032  0D56  0020               	movlb	0	; select bank0
  8033  0D57  0865               	movf	_cur_ms+3,w	;volatile
  8034  0D58  00A3               	movwf	?_ms+3
  8035  0D59  0864               	movf	_cur_ms+2,w	;volatile
  8036  0D5A  00A2               	movwf	?_ms+2
  8037  0D5B  0863               	movf	_cur_ms+1,w	;volatile
  8038  0D5C  00A1               	movwf	?_ms+1
  8039  0D5D  0862               	movf	_cur_ms,w	;volatile
  8040  0D5E  00A0               	movwf	?_ms
  8041  0D5F                     l535:	
  8042  0D5F  0008               	return
  8043  0D60                     __end_of_ms:	
  8044                           
  8045                           	psect	text30
  8046  06B3                     __ptext30:	
  8047 ;; *************** function _SetLight *****************
  8048 ;; Defined at:
  8049 ;;		line 12 in file "Lights.c"
  8050 ;; Parameters:    Size  Location     Type
  8051 ;;  light           1    wreg     const enum E6337
  8052 ;;  state           1    0[BANK0 ] const _Bool 
  8053 ;; Auto vars:     Size  Location     Type
  8054 ;;  light           1    3[BANK0 ] const enum E6337
  8055 ;; Return value:  Size  Location     Type
  8056 ;;                  1    wreg      void 
  8057 ;; Registers used:
  8058 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8059 ;; Tracked objects:
  8060 ;;		On entry : 0/0
  8061 ;;		On exit  : 0/0
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8064 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8065 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8066 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;Total ram usage:        4 bytes
  8069 ;; Hardware stack levels used:    1
  8070 ;; Hardware stack levels required when called:    6
  8071 ;; This function calls:
  8072 ;;		Nothing
  8073 ;; This function is called by:
  8074 ;;		_SetOutputs
  8075 ;;		_FlashPattern
  8076 ;; This function uses a non-reentrant model
  8077 ;;
  8078                           
  8079                           
  8080                           ;psect for function _SetLight
  8081  06B3                     _SetLight:	
  8082                           
  8083                           ;incstack = 0
  8084                           ; Regs used in _SetLight: [wreg-fsr0h+status,2+status,0]
  8085                           ;SetLight@light stored from wreg
  8086  06B3  0020               	movlb	0	; select bank0
  8087  06B4  00A3               	movwf	SetLight@light
  8088  06B5                     l2818:	
  8089                           
  8090                           ;Lights.c: 12: void SetLight( const enum Light light, const _Bool state );Lights.c: 13: 
      +                          {;Lights.c: 15:     switch ( light )
  8091  06B5  2F0A               	goto	l2840
  8092  06B6                     l2820:	
  8093                           
  8094                           ;Lights.c: 18:             if ( PORTCbits.RC1 != state )
  8095  06B6  0C0E               	rrf	14,w	;volatile
  8096  06B7  3901               	andlw	1
  8097  06B8  0620               	xorwf	SetLight@state,w
  8098  06B9  1903               	skipnz
  8099  06BA  2EBC               	goto	u1471
  8100  06BB  2EBD               	goto	u1470
  8101  06BC                     u1471:	
  8102  06BC  2F20               	goto	l357
  8103  06BD                     u1470:	
  8104  06BD                     l2822:	
  8105  06BD  1003               	clrc
  8106  06BE  0022               	movlb	2	; select bank2
  8107  06BF  1C8E               	btfss	14,1	;volatile
  8108  06C0  1403               	setc
  8109  06C1  1803               	btfsc	3,0
  8110  06C2  2EC4               	goto	u1481
  8111  06C3  2EC7               	goto	u1480
  8112  06C4                     u1481:	
  8113  06C4  0022               	movlb	2	; select bank2
  8114  06C5  148E               	bsf	14,1	;volatile
  8115  06C6  2EC9               	goto	u1494
  8116  06C7                     u1480:	
  8117  06C7  0022               	movlb	2	; select bank2
  8118  06C8  108E               	bcf	14,1	;volatile
  8119  06C9                     u1494:	
  8120  06C9  2F20               	goto	l357
  8121  06CA                     l2824:	
  8122                           
  8123                           ;Lights.c: 22:             if ( PORTCbits.RC2 != state )
  8124  06CA  0C0E               	rrf	14,w	;volatile
  8125  06CB  0C89               	rrf	9,f
  8126  06CC  3901               	andlw	1
  8127  06CD  0620               	xorwf	SetLight@state,w
  8128  06CE  1903               	skipnz
  8129  06CF  2ED1               	goto	u1501
  8130  06D0  2ED2               	goto	u1500
  8131  06D1                     u1501:	
  8132  06D1  2F20               	goto	l357
  8133  06D2                     u1500:	
  8134  06D2                     l2826:	
  8135  06D2  1003               	clrc
  8136  06D3  0022               	movlb	2	; select bank2
  8137  06D4  1D0E               	btfss	14,2	;volatile
  8138  06D5  1403               	setc
  8139  06D6  1803               	btfsc	3,0
  8140  06D7  2ED9               	goto	u1511
  8141  06D8  2EDC               	goto	u1510
  8142  06D9                     u1511:	
  8143  06D9  0022               	movlb	2	; select bank2
  8144  06DA  150E               	bsf	14,2	;volatile
  8145  06DB  2EDE               	goto	u1524
  8146  06DC                     u1510:	
  8147  06DC  0022               	movlb	2	; select bank2
  8148  06DD  110E               	bcf	14,2	;volatile
  8149  06DE                     u1524:	
  8150  06DE  2F20               	goto	l357
  8151  06DF                     l2828:	
  8152                           
  8153                           ;Lights.c: 26:             if ( PORTCbits.RC3 != state )
  8154  06DF  0C0E               	rrf	14,w	;volatile
  8155  06E0  00A1               	movwf	??_SetLight
  8156  06E1  0CA1               	rrf	??_SetLight,f
  8157  06E2  0C21               	rrf	??_SetLight,w
  8158  06E3  3901               	andlw	1
  8159  06E4  0620               	xorwf	SetLight@state,w
  8160  06E5  1903               	skipnz
  8161  06E6  2EE8               	goto	u1531
  8162  06E7  2EE9               	goto	u1530
  8163  06E8                     u1531:	
  8164  06E8  2F20               	goto	l357
  8165  06E9                     u1530:	
  8166  06E9                     l2830:	
  8167  06E9  1003               	clrc
  8168  06EA  0022               	movlb	2	; select bank2
  8169  06EB  1D8E               	btfss	14,3	;volatile
  8170  06EC  1403               	setc
  8171  06ED  1803               	btfsc	3,0
  8172  06EE  2EF0               	goto	u1541
  8173  06EF  2EF3               	goto	u1540
  8174  06F0                     u1541:	
  8175  06F0  0022               	movlb	2	; select bank2
  8176  06F1  158E               	bsf	14,3	;volatile
  8177  06F2  2EF5               	goto	u1554
  8178  06F3                     u1540:	
  8179  06F3  0022               	movlb	2	; select bank2
  8180  06F4  118E               	bcf	14,3	;volatile
  8181  06F5                     u1554:	
  8182  06F5  2F20               	goto	l357
  8183  06F6                     l2832:	
  8184                           
  8185                           ;Lights.c: 31:             if ( PORTCbits.RC4 != state )
  8186  06F6  0E0E               	swapf	14,w	;volatile
  8187  06F7  3901               	andlw	1
  8188  06F8  0620               	xorwf	SetLight@state,w
  8189  06F9  1903               	skipnz
  8190  06FA  2EFC               	goto	u1561
  8191  06FB  2EFD               	goto	u1560
  8192  06FC                     u1561:	
  8193  06FC  2F20               	goto	l357
  8194  06FD                     u1560:	
  8195  06FD                     l2834:	
  8196  06FD  1003               	clrc
  8197  06FE  0022               	movlb	2	; select bank2
  8198  06FF  1E0E               	btfss	14,4	;volatile
  8199  0700  1403               	setc
  8200  0701  1803               	btfsc	3,0
  8201  0702  2F04               	goto	u1571
  8202  0703  2F07               	goto	u1570
  8203  0704                     u1571:	
  8204  0704  0022               	movlb	2	; select bank2
  8205  0705  160E               	bsf	14,4	;volatile
  8206  0706  2F09               	goto	u1584
  8207  0707                     u1570:	
  8208  0707  0022               	movlb	2	; select bank2
  8209  0708  120E               	bcf	14,4	;volatile
  8210  0709                     u1584:	
  8211  0709  2F20               	goto	l357
  8212  070A                     l2840:	
  8213  070A  0823               	movf	SetLight@light,w
  8214  070B  00A1               	movwf	??_SetLight
  8215  070C  01A2               	clrf	??_SetLight+1
  8216                           
  8217                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8218                           ; Switch size 1, requested type "simple"
  8219                           ; Number of cases is 1, Range of values is 0 to 0
  8220                           ; switch strategies available:
  8221                           ; Name         Instructions Cycles
  8222                           ; simple_byte            4     3 (average)
  8223                           ; direct_byte            8     6 (fixed)
  8224                           ; jumptable            260     6 (fixed)
  8225                           ;	Chosen strategy is simple_byte
  8226  070D  0822               	movf	??_SetLight+1,w
  8227  070E  3A00               	xorlw	0	; case 0
  8228  070F  1903               	skipnz
  8229  0710  2F12               	goto	l3076
  8230  0711  2EF6               	goto	l2832
  8231  0712                     l3076:	
  8232                           
  8233                           ; Switch size 1, requested type "simple"
  8234                           ; Number of cases is 4, Range of values is 0 to 3
  8235                           ; switch strategies available:
  8236                           ; Name         Instructions Cycles
  8237                           ; simple_byte           13     7 (average)
  8238                           ; direct_byte           14     6 (fixed)
  8239                           ; jumptable            260     6 (fixed)
  8240                           ;	Chosen strategy is simple_byte
  8241  0712  0821               	movf	??_SetLight,w
  8242  0713  3A00               	xorlw	0	; case 0
  8243  0714  1903               	skipnz
  8244  0715  2EB6               	goto	l2820
  8245  0716  3A01               	xorlw	1	; case 1
  8246  0717  1903               	skipnz
  8247  0718  2ECA               	goto	l2824
  8248  0719  3A03               	xorlw	3	; case 2
  8249  071A  1903               	skipnz
  8250  071B  2EDF               	goto	l2828
  8251  071C  3A01               	xorlw	1	; case 3
  8252  071D  1903               	skipnz
  8253  071E  2EF6               	goto	l2832
  8254  071F  2EF6               	goto	l2832
  8255  0720                     l357:	
  8256  0720  0008               	return
  8257  0721                     __end_of_SetLight:	
  8258                           
  8259                           	psect	intentry
  8260  0004                     __pintentry:	
  8261 ;; *************** function _INTERRUPT_InterruptManager *****************
  8262 ;; Defined at:
  8263 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8264 ;; Parameters:    Size  Location     Type
  8265 ;;		None
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;		None
  8268 ;; Return value:  Size  Location     Type
  8269 ;;                  1    wreg      void 
  8270 ;; Registers used:
  8271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8272 ;; Tracked objects:
  8273 ;;		On entry : 0/0
  8274 ;;		On exit  : 0/0
  8275 ;;		Unchanged: 0/0
  8276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;Total ram usage:        0 bytes
  8282 ;; Hardware stack levels used:    1
  8283 ;; Hardware stack levels required when called:    5
  8284 ;; This function calls:
  8285 ;;		_PIN_MANAGER_IOC
  8286 ;;		_TMR1_ISR
  8287 ;; This function is called by:
  8288 ;;		Interrupt level 1
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292  0004                     _INTERRUPT_InterruptManager:	
  8293                           
  8294                           ;incstack = 0
  8295  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  8296                           
  8297                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8298  0005  3180               	pagesel	$
  8299  0006                     i1l2392:	
  8300                           
  8301                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
  8302  0006  0021               	movlb	1	; select bank1
  8303  0007  1E10               	btfss	16,4	;volatile
  8304  0008  280A               	goto	u121_21
  8305  0009  280B               	goto	u121_20
  8306  000A                     u121_21:	
  8307  000A  2814               	goto	i1l156
  8308  000B                     u121_20:	
  8309  000B                     i1l2394:	
  8310  000B  0020               	movlb	0	; select bank0
  8311  000C  1E10               	btfss	16,4	;volatile
  8312  000D  280F               	goto	u122_21
  8313  000E  2810               	goto	u122_20
  8314  000F                     u122_21:	
  8315  000F  2814               	goto	i1l156
  8316  0010                     u122_20:	
  8317  0010                     i1l2396:	
  8318                           
  8319                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
  8320  0010  318D  2527  3180   	fcall	_PIN_MANAGER_IOC
  8321                           
  8322                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  8323  0013  2826               	goto	i1l162
  8324  0014                     i1l156:	
  8325                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  8326                           
  8327  0014  1F0B               	btfss	11,6	;volatile
  8328  0015  2817               	goto	u123_21
  8329  0016  2818               	goto	u123_20
  8330  0017                     u123_21:	
  8331  0017  2826               	goto	i1l162
  8332  0018                     u123_20:	
  8333  0018                     i1l2398:	
  8334                           
  8335                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  8336  0018  0021               	movlb	1	; select bank1
  8337  0019  1C11               	btfss	17,0	;volatile
  8338  001A  281C               	goto	u124_21
  8339  001B  281D               	goto	u124_20
  8340  001C                     u124_21:	
  8341  001C  2826               	goto	i1l161
  8342  001D                     u124_20:	
  8343  001D                     i1l2400:	
  8344  001D  0020               	movlb	0	; select bank0
  8345  001E  1C11               	btfss	17,0	;volatile
  8346  001F  2821               	goto	u125_21
  8347  0020  2822               	goto	u125_20
  8348  0021                     u125_21:	
  8349  0021  2826               	goto	i1l161
  8350  0022                     u125_20:	
  8351  0022                     i1l2402:	
  8352                           
  8353                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR1_ISR();
  8354  0022  318D  25CE  3180   	fcall	_TMR1_ISR
  8355                           
  8356                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  8357  0025  2826               	goto	i1l162
  8358  0026                     i1l161:	
  8359                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
  8360                           
  8361  0026                     i1l162:	
  8362  0026  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  8363  0027  0009               	retfie
  8364  0028                     __end_of_INTERRUPT_InterruptManager:	
  8365                           
  8366                           	psect	text32
  8367  0DCE                     __ptext32:	
  8368 ;; *************** function _TMR1_ISR *****************
  8369 ;; Defined at:
  8370 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  8371 ;; Parameters:    Size  Location     Type
  8372 ;;		None
  8373 ;; Auto vars:     Size  Location     Type
  8374 ;;		None
  8375 ;; Return value:  Size  Location     Type
  8376 ;;                  1    wreg      void 
  8377 ;; Registers used:
  8378 ;;		wreg, status,2, status,0, pclath, cstack
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 0/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;Total ram usage:        0 bytes
  8389 ;; Hardware stack levels used:    1
  8390 ;; Hardware stack levels required when called:    1
  8391 ;; This function calls:
  8392 ;;		Absolute function
  8393 ;;		_TMR1_DefaultInterruptHandler
  8394 ;;		_TMR1_WriteTimer
  8395 ;; This function is called by:
  8396 ;;		_INTERRUPT_InterruptManager
  8397 ;; This function uses a non-reentrant model
  8398 ;;
  8399                           
  8400                           
  8401                           ;psect for function _TMR1_ISR
  8402  0DCE                     _TMR1_ISR:	
  8403  0DCE                     i1l2290:	
  8404                           ;incstack = 0
  8405                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  8406                           
  8407                           
  8408                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
  8409  0DCE  0020               	movlb	0	; select bank0
  8410  0DCF  1011               	bcf	17,0	;volatile
  8411  0DD0                     i1l2292:	
  8412                           
  8413                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
  8414  0DD0  087B               	movf	_timer1ReloadVal+1,w	;volatile
  8415  0DD1  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  8416  0DD2  087A               	movf	_timer1ReloadVal,w	;volatile
  8417  0DD3  00F0               	movwf	TMR1_WriteTimer@timerVal
  8418  0DD4  318D  25A8  318D   	fcall	_TMR1_WriteTimer
  8419  0DD7                     i1l2294:	
  8420                           
  8421                           ;mcc_generated_files/tmr1.c: 165:     if(TMR1_InterruptHandler)
  8422  0DD7  0021               	movlb	1	; select bank1
  8423  0DD8  086D               	movf	_TMR1_InterruptHandler^(0+128),w
  8424  0DD9  046E               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
  8425  0DDA  1903               	btfsc	3,2
  8426  0DDB  2DDD               	goto	u112_21
  8427  0DDC  2DDE               	goto	u112_20
  8428  0DDD                     u112_21:	
  8429  0DDD  2DE3               	goto	i1l218
  8430  0DDE                     u112_20:	
  8431  0DDE                     i1l2296:	
  8432                           
  8433                           ;mcc_generated_files/tmr1.c: 166:     {;mcc_generated_files/tmr1.c: 167:         TMR1_In
      +                          terruptHandler();
  8434  0DDE  086E               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
  8435  0DDF  008A               	movwf	10
  8436  0DE0  086D               	movf	_TMR1_InterruptHandler^(0+128),w
  8437  0DE1  000A               	callw
  8438  0DE2  318D               	pagesel	$
  8439  0DE3                     i1l218:	
  8440  0DE3  0008               	return
  8441  0DE4                     __end_of_TMR1_ISR:	
  8442                           
  8443                           	psect	text33
  8444  0DA8                     __ptext33:	
  8445 ;; *************** function _TMR1_WriteTimer *****************
  8446 ;; Defined at:
  8447 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  8448 ;; Parameters:    Size  Location     Type
  8449 ;;  timerVal        2    0[COMMON] unsigned short 
  8450 ;; Auto vars:     Size  Location     Type
  8451 ;;		None
  8452 ;; Return value:  Size  Location     Type
  8453 ;;                  1    wreg      void 
  8454 ;; Registers used:
  8455 ;;		wreg, status,2
  8456 ;; Tracked objects:
  8457 ;;		On entry : 0/0
  8458 ;;		On exit  : 0/0
  8459 ;;		Unchanged: 0/0
  8460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8461 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8464 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8465 ;;Total ram usage:        2 bytes
  8466 ;; Hardware stack levels used:    1
  8467 ;; This function calls:
  8468 ;;		Nothing
  8469 ;; This function is called by:
  8470 ;;		_TMR1_ISR
  8471 ;;		_TMR1_Reload
  8472 ;; This function uses a non-reentrant model
  8473 ;;
  8474                           
  8475                           
  8476                           ;psect for function _TMR1_WriteTimer
  8477  0DA8                     _TMR1_WriteTimer:	
  8478  0DA8                     i1l2234:	
  8479                           ;incstack = 0
  8480                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
  8481                           
  8482                           
  8483                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.T1SYNC == 1)
  8484  0DA8  0020               	movlb	0	; select bank0
  8485  0DA9  1D1B               	btfss	27,2	;volatile
  8486  0DAA  2DAC               	goto	u108_21
  8487  0DAB  2DAD               	goto	u108_20
  8488  0DAC                     u108_21:	
  8489  0DAC  2DB4               	goto	i1l2244
  8490  0DAD                     u108_20:	
  8491  0DAD                     i1l2236:	
  8492                           
  8493                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  8494  0DAD  101B               	bcf	27,0	;volatile
  8495  0DAE                     i1l2238:	
  8496                           
  8497                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
  8498  0DAE  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  8499  0DAF  009A               	movwf	26	;volatile
  8500  0DB0                     i1l2240:	
  8501                           
  8502                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
  8503  0DB0  0870               	movf	TMR1_WriteTimer@timerVal,w
  8504  0DB1  0099               	movwf	25	;volatile
  8505  0DB2                     i1l2242:	
  8506                           
  8507                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  8508  0DB2  141B               	bsf	27,0	;volatile
  8509                           
  8510                           ;mcc_generated_files/tmr1.c: 133:     }
  8511  0DB3  2DB8               	goto	i1l205
  8512  0DB4                     i1l2244:	
  8513                           
  8514                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
  8515  0DB4  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  8516  0DB5  009A               	movwf	26	;volatile
  8517  0DB6                     i1l2246:	
  8518                           
  8519                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
  8520  0DB6  0870               	movf	TMR1_WriteTimer@timerVal,w
  8521  0DB7  0099               	movwf	25	;volatile
  8522  0DB8                     i1l205:	
  8523  0DB8  0008               	return
  8524  0DB9                     __end_of_TMR1_WriteTimer:	
  8525                           
  8526                           	psect	text34
  8527  0D4C                     __ptext34:	
  8528 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  8529 ;; Defined at:
  8530 ;;		line 176 in file "mcc_generated_files/tmr1.c"
  8531 ;; Parameters:    Size  Location     Type
  8532 ;;		None
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;		None
  8535 ;; Return value:  Size  Location     Type
  8536 ;;                  1    wreg      void 
  8537 ;; Registers used:
  8538 ;;		wreg
  8539 ;; Tracked objects:
  8540 ;;		On entry : 0/0
  8541 ;;		On exit  : 0/0
  8542 ;;		Unchanged: 0/0
  8543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8548 ;;Total ram usage:        0 bytes
  8549 ;; Hardware stack levels used:    1
  8550 ;; This function calls:
  8551 ;;		Nothing
  8552 ;; This function is called by:
  8553 ;;		_TMR1_Initialize
  8554 ;;		_TMR1_ISR
  8555 ;; This function uses a non-reentrant model
  8556 ;;
  8557                           
  8558                           
  8559                           ;psect for function _TMR1_DefaultInterruptHandler
  8560  0D4C                     _TMR1_DefaultInterruptHandler:	
  8561  0D4C                     i1l2248:	
  8562                           ;incstack = 0
  8563                           ; Regs used in _TMR1_DefaultInterruptHandler: [wreg]
  8564                           
  8565                           
  8566                           ;mcc_generated_files/tmr1.c: 177:     cur_ms++;
  8567  0D4C  3001               	movlw	1
  8568  0D4D  0020               	movlb	0	; select bank0
  8569  0D4E  07E2               	addwf	_cur_ms,f	;volatile
  8570  0D4F  3000               	movlw	0
  8571  0D50  3DE3               	addwfc	_cur_ms+1,f	;volatile
  8572  0D51  3000               	movlw	0
  8573  0D52  3DE4               	addwfc	_cur_ms+2,f	;volatile
  8574  0D53  3000               	movlw	0
  8575  0D54  3DE5               	addwfc	_cur_ms+3,f	;volatile
  8576  0D55                     i1l224:	
  8577  0D55  0008               	return
  8578  0D56                     __end_of_TMR1_DefaultInterruptHandler:	
  8579                           
  8580                           	psect	text35
  8581  0D27                     __ptext35:	
  8582 ;; *************** function _PIN_MANAGER_IOC *****************
  8583 ;; Defined at:
  8584 ;;		line 120 in file "mcc_generated_files/pin_manager.c"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;		None
  8587 ;; Auto vars:     Size  Location     Type
  8588 ;;		None
  8589 ;; Return value:  Size  Location     Type
  8590 ;;                  1    wreg      void 
  8591 ;; Registers used:
  8592 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8593 ;; Tracked objects:
  8594 ;;		On entry : 0/0
  8595 ;;		On exit  : 0/0
  8596 ;;		Unchanged: 0/0
  8597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;Total ram usage:        0 bytes
  8603 ;; Hardware stack levels used:    1
  8604 ;; Hardware stack levels required when called:    4
  8605 ;; This function calls:
  8606 ;;		_IOCCF0_ISR
  8607 ;; This function is called by:
  8608 ;;		_INTERRUPT_InterruptManager
  8609 ;; This function uses a non-reentrant model
  8610 ;;
  8611                           
  8612                           
  8613                           ;psect for function _PIN_MANAGER_IOC
  8614  0D27                     _PIN_MANAGER_IOC:	
  8615  0D27                     i1l2286:	
  8616                           ;incstack = 0
  8617                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8618                           
  8619                           
  8620                           ;mcc_generated_files/pin_manager.c: 123:     if(IOCCFbits.IOCCF0 == 1)
  8621  0D27  0027               	movlb	7	; select bank7
  8622  0D28  1C19               	btfss	25,0	;volatile
  8623  0D29  2D2B               	goto	u111_21
  8624  0D2A  2D2C               	goto	u111_20
  8625  0D2B                     u111_21:	
  8626  0D2B  2D2F               	goto	i1l117
  8627  0D2C                     u111_20:	
  8628  0D2C                     i1l2288:	
  8629                           
  8630                           ;mcc_generated_files/pin_manager.c: 124:     {;mcc_generated_files/pin_manager.c: 125:  
      +                                 IOCCF0_ISR();
  8631  0D2C  318D  2578  318D   	fcall	_IOCCF0_ISR
  8632  0D2F                     i1l117:	
  8633  0D2F  0008               	return
  8634  0D30                     __end_of_PIN_MANAGER_IOC:	
  8635                           
  8636                           	psect	text36
  8637  0D78                     __ptext36:	
  8638 ;; *************** function _IOCCF0_ISR *****************
  8639 ;; Defined at:
  8640 ;;		line 132 in file "mcc_generated_files/pin_manager.c"
  8641 ;; Parameters:    Size  Location     Type
  8642 ;;		None
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;		None
  8645 ;; Return value:  Size  Location     Type
  8646 ;;                  1    wreg      void 
  8647 ;; Registers used:
  8648 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8649 ;; Tracked objects:
  8650 ;;		On entry : 0/0
  8651 ;;		On exit  : 0/0
  8652 ;;		Unchanged: 0/0
  8653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;Total ram usage:        0 bytes
  8659 ;; Hardware stack levels used:    1
  8660 ;; Hardware stack levels required when called:    3
  8661 ;; This function calls:
  8662 ;;		Absolute function
  8663 ;;		_TripTurnSignal
  8664 ;; This function is called by:
  8665 ;;		_PIN_MANAGER_IOC
  8666 ;; This function uses a non-reentrant model
  8667 ;;
  8668                           
  8669                           
  8670                           ;psect for function _IOCCF0_ISR
  8671  0D78                     _IOCCF0_ISR:	
  8672  0D78                     i1l2226:	
  8673                           ;incstack = 0
  8674                           ; Regs used in _IOCCF0_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8675                           
  8676                           
  8677                           ;mcc_generated_files/pin_manager.c: 137:     if(IOCCF0_InterruptHandler)
  8678  0D78  0020               	movlb	0	; select bank0
  8679  0D79  086E               	movf	_IOCCF0_InterruptHandler,w
  8680  0D7A  046F               	iorwf	_IOCCF0_InterruptHandler+1,w
  8681  0D7B  1903               	btfsc	3,2
  8682  0D7C  2D7E               	goto	u107_21
  8683  0D7D  2D7F               	goto	u107_20
  8684  0D7E                     u107_21:	
  8685  0D7E  2D84               	goto	i1l2230
  8686  0D7F                     u107_20:	
  8687  0D7F                     i1l2228:	
  8688                           
  8689                           ;mcc_generated_files/pin_manager.c: 138:     {;mcc_generated_files/pin_manager.c: 139:  
      +                                 IOCCF0_InterruptHandler();
  8690  0D7F  086F               	movf	_IOCCF0_InterruptHandler+1,w
  8691  0D80  008A               	movwf	10
  8692  0D81  086E               	movf	_IOCCF0_InterruptHandler,w
  8693  0D82  000A               	callw
  8694  0D83  318D               	pagesel	$
  8695  0D84                     i1l2230:	
  8696                           
  8697                           ;mcc_generated_files/pin_manager.c: 141:     IOCCFbits.IOCCF0 = 0;
  8698  0D84  0027               	movlb	7	; select bank7
  8699  0D85  1019               	bcf	25,0	;volatile
  8700  0D86                     i1l121:	
  8701  0D86  0008               	return
  8702  0D87                     __end_of_IOCCF0_ISR:	
  8703                           
  8704                           	psect	text37
  8705  0D97                     __ptext37:	
  8706 ;; *************** function _TripTurnSignal *****************
  8707 ;; Defined at:
  8708 ;;		line 8 in file "TurnSignal.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;		None
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;		None
  8713 ;; Return value:  Size  Location     Type
  8714 ;;                  1    wreg      void 
  8715 ;; Registers used:
  8716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;Total ram usage:        0 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; Hardware stack levels required when called:    2
  8729 ;; This function calls:
  8730 ;;		i1_SetOutputs
  8731 ;;		i1_ms
  8732 ;; This function is called by:
  8733 ;;		_PIN_MANAGER_Initialize
  8734 ;;		_IOCCF0_ISR
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           
  8739                           ;psect for function _TripTurnSignal
  8740  0D97                     _TripTurnSignal:	
  8741  0D97                     i1l2212:	
  8742                           ;incstack = 0
  8743                           ; Regs used in _TripTurnSignal: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8744                           
  8745                           
  8746                           ;TurnSignal.c: 10:     SetOutputs( 0 );
  8747  0D97  3000               	movlw	0
  8748  0D98  318E  2658  318D   	fcall	i1_SetOutputs
  8749  0D9B                     i1l2214:	
  8750                           
  8751                           ;TurnSignal.c: 11:     ts_trigger_time = ms();
  8752  0D9B  318D  2542  318D   	fcall	i1_ms
  8753  0D9E  0873               	movf	?i1_ms+3,w
  8754  0D9F  0021               	movlb	1	; select bank1
  8755  0DA0  00A7               	movwf	(_ts_trigger_time+3)^(0+128)
  8756  0DA1  0872               	movf	?i1_ms+2,w
  8757  0DA2  00A6               	movwf	(_ts_trigger_time+2)^(0+128)
  8758  0DA3  0871               	movf	?i1_ms+1,w
  8759  0DA4  00A5               	movwf	(_ts_trigger_time+1)^(0+128)
  8760  0DA5  0870               	movf	?i1_ms,w
  8761  0DA6  00A4               	movwf	_ts_trigger_time^(0+128)
  8762  0DA7                     i1l391:	
  8763  0DA7  0008               	return
  8764  0DA8                     __end_of_TripTurnSignal:	
  8765                           
  8766                           	psect	text38
  8767  0D42                     __ptext38:	
  8768 ;; *************** function i1_ms *****************
  8769 ;; Defined at:
  8770 ;;		line 7 in file "Time.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;		None
  8773 ;; Auto vars:     Size  Location     Type
  8774 ;;		None
  8775 ;; Return value:  Size  Location     Type
  8776 ;;                  4    0[COMMON] unsigned long 
  8777 ;; Registers used:
  8778 ;;		wreg
  8779 ;; Tracked objects:
  8780 ;;		On entry : 0/0
  8781 ;;		On exit  : 0/0
  8782 ;;		Unchanged: 0/0
  8783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8784 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8788 ;;Total ram usage:        4 bytes
  8789 ;; Hardware stack levels used:    1
  8790 ;; This function calls:
  8791 ;;		Nothing
  8792 ;; This function is called by:
  8793 ;;		_TripTurnSignal
  8794 ;; This function uses a non-reentrant model
  8795 ;;
  8796                           
  8797                           
  8798                           ;psect for function i1_ms
  8799  0D42                     i1_ms:	
  8800  0D42                     i1l1946:	
  8801                           ;incstack = 0
  8802                           ; Regs used in i1_ms: [wreg]
  8803                           
  8804                           
  8805                           ;Time.c: 9:     return cur_ms;
  8806  0D42  0020               	movlb	0	; select bank0
  8807  0D43  0865               	movf	_cur_ms+3,w	;volatile
  8808  0D44  00F3               	movwf	?i1_ms+3
  8809  0D45  0864               	movf	_cur_ms+2,w	;volatile
  8810  0D46  00F2               	movwf	?i1_ms+2
  8811  0D47  0863               	movf	_cur_ms+1,w	;volatile
  8812  0D48  00F1               	movwf	?i1_ms+1
  8813  0D49  0862               	movf	_cur_ms,w	;volatile
  8814  0D4A  00F0               	movwf	?i1_ms
  8815  0D4B                     i1l535:	
  8816  0D4B  0008               	return
  8817  0D4C                     __end_ofi1_ms:	
  8818                           
  8819                           	psect	text39
  8820  0E58                     __ptext39:	
  8821 ;; *************** function i1_SetOutputs *****************
  8822 ;; Defined at:
  8823 ;;		line 38 in file "Lights.c"
  8824 ;; Parameters:    Size  Location     Type
  8825 ;;  state           1    wreg     const _Bool 
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;  state           1    5[COMMON] const _Bool 
  8828 ;; Return value:  Size  Location     Type
  8829 ;;                  1    wreg      void 
  8830 ;; Registers used:
  8831 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8832 ;; Tracked objects:
  8833 ;;		On entry : 0/0
  8834 ;;		On exit  : 0/0
  8835 ;;		Unchanged: 0/0
  8836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8839 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8840 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8841 ;;Total ram usage:        2 bytes
  8842 ;; Hardware stack levels used:    1
  8843 ;; Hardware stack levels required when called:    1
  8844 ;; This function calls:
  8845 ;;		i1_SetLight
  8846 ;; This function is called by:
  8847 ;;		_TripTurnSignal
  8848 ;; This function uses a non-reentrant model
  8849 ;;
  8850                           
  8851                           
  8852                           ;psect for function i1_SetOutputs
  8853  0E58                     i1_SetOutputs:	
  8854                           
  8855                           ;incstack = 0
  8856                           ; Regs used in i1_SetOutputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8857                           ;i1SetOutputs@state stored from wreg
  8858  0E58  00F5               	movwf	i1SetOutputs@state
  8859  0E59                     i1l1944:	
  8860                           
  8861                           ;Lights.c: 38: void SetOutputs( const _Bool state );Lights.c: 39: {;Lights.c: 40:     Se
      +                          tLight( L1, state );
  8862  0E59  0875               	movf	i1SetOutputs@state,w
  8863  0E5A  00F4               	movwf	??i1_SetOutputs
  8864  0E5B  0874               	movf	??i1_SetOutputs,w
  8865  0E5C  00F0               	movwf	i1SetLight@state
  8866  0E5D  3000               	movlw	0
  8867  0E5E  3186  2642  318E   	fcall	i1_SetLight
  8868                           
  8869                           ;Lights.c: 41:     SetLight( L2, state );
  8870  0E61  0875               	movf	i1SetOutputs@state,w
  8871  0E62  00F4               	movwf	??i1_SetOutputs
  8872  0E63  0874               	movf	??i1_SetOutputs,w
  8873  0E64  00F0               	movwf	i1SetLight@state
  8874  0E65  3001               	movlw	1
  8875  0E66  3186  2642  318E   	fcall	i1_SetLight
  8876                           
  8877                           ;Lights.c: 42:     SetLight( L3, state );
  8878  0E69  0875               	movf	i1SetOutputs@state,w
  8879  0E6A  00F4               	movwf	??i1_SetOutputs
  8880  0E6B  0874               	movf	??i1_SetOutputs,w
  8881  0E6C  00F0               	movwf	i1SetLight@state
  8882  0E6D  3002               	movlw	2
  8883  0E6E  3186  2642  318E   	fcall	i1_SetLight
  8884                           
  8885                           ;Lights.c: 43:     SetLight( L4, state );
  8886  0E71  0875               	movf	i1SetOutputs@state,w
  8887  0E72  00F4               	movwf	??i1_SetOutputs
  8888  0E73  0874               	movf	??i1_SetOutputs,w
  8889  0E74  00F0               	movwf	i1SetLight@state
  8890  0E75  3003               	movlw	3
  8891  0E76  3186  2642  318E   	fcall	i1_SetLight
  8892  0E79                     i1l360:	
  8893  0E79  0008               	return
  8894  0E7A                     __end_ofi1_SetOutputs:	
  8895                           
  8896                           	psect	text40
  8897  0642                     __ptext40:	
  8898 ;; *************** function i1_SetLight *****************
  8899 ;; Defined at:
  8900 ;;		line 12 in file "Lights.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;  light           1    wreg     const enum E6337
  8903 ;;  state           1    0[COMMON] const _Bool 
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;  light           1    3[COMMON] const enum E6337
  8906 ;; Return value:  Size  Location     Type
  8907 ;;                  1    wreg      void 
  8908 ;; Registers used:
  8909 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8910 ;; Tracked objects:
  8911 ;;		On entry : 0/0
  8912 ;;		On exit  : 0/0
  8913 ;;		Unchanged: 0/0
  8914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8915 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8919 ;;Total ram usage:        4 bytes
  8920 ;; Hardware stack levels used:    1
  8921 ;; This function calls:
  8922 ;;		Nothing
  8923 ;; This function is called by:
  8924 ;;		i1_SetOutputs
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           
  8929                           ;psect for function i1_SetLight
  8930  0642                     i1_SetLight:	
  8931                           
  8932                           ;incstack = 0
  8933                           ; Regs used in i1_SetLight: [wreg-fsr0h+status,2+status,0]
  8934                           ;i1SetLight@light stored from wreg
  8935  0642  00F3               	movwf	i1SetLight@light
  8936  0643                     i1l1858:	
  8937                           
  8938                           ;Lights.c: 12: void SetLight( const enum Light light, const _Bool state );Lights.c: 13: 
      +                          {;Lights.c: 15:     switch ( light )
  8939  0643  2E9C               	goto	i1l1880
  8940  0644                     i1l1860:	
  8941                           
  8942                           ;Lights.c: 18:             if ( PORTCbits.RC1 != state )
  8943  0644  0020               	movlb	0	; select bank0
  8944  0645  0C0E               	rrf	14,w	;volatile
  8945  0646  3901               	andlw	1
  8946  0647  0670               	xorwf	i1SetLight@state,w
  8947  0648  1903               	skipnz
  8948  0649  2E4B               	goto	u67_21
  8949  064A  2E4C               	goto	u67_20
  8950  064B                     u67_21:	
  8951  064B  2EB2               	goto	i1l357
  8952  064C                     u67_20:	
  8953  064C                     i1l1862:	
  8954  064C  1003               	clrc
  8955  064D  0022               	movlb	2	; select bank2
  8956  064E  1C8E               	btfss	14,1	;volatile
  8957  064F  1403               	setc
  8958  0650  1803               	btfsc	3,0
  8959  0651  2E53               	goto	u68_21
  8960  0652  2E56               	goto	u68_20
  8961  0653                     u68_21:	
  8962  0653  0022               	movlb	2	; select bank2
  8963  0654  148E               	bsf	14,1	;volatile
  8964  0655  2E58               	goto	u69_24
  8965  0656                     u68_20:	
  8966  0656  0022               	movlb	2	; select bank2
  8967  0657  108E               	bcf	14,1	;volatile
  8968  0658                     u69_24:	
  8969  0658  2EB2               	goto	i1l357
  8970  0659                     i1l1864:	
  8971                           
  8972                           ;Lights.c: 22:             if ( PORTCbits.RC2 != state )
  8973  0659  0020               	movlb	0	; select bank0
  8974  065A  0C0E               	rrf	14,w	;volatile
  8975  065B  0C89               	rrf	9,f
  8976  065C  3901               	andlw	1
  8977  065D  0670               	xorwf	i1SetLight@state,w
  8978  065E  1903               	skipnz
  8979  065F  2E61               	goto	u70_21
  8980  0660  2E62               	goto	u70_20
  8981  0661                     u70_21:	
  8982  0661  2EB2               	goto	i1l357
  8983  0662                     u70_20:	
  8984  0662                     i1l1866:	
  8985  0662  1003               	clrc
  8986  0663  0022               	movlb	2	; select bank2
  8987  0664  1D0E               	btfss	14,2	;volatile
  8988  0665  1403               	setc
  8989  0666  1803               	btfsc	3,0
  8990  0667  2E69               	goto	u71_21
  8991  0668  2E6C               	goto	u71_20
  8992  0669                     u71_21:	
  8993  0669  0022               	movlb	2	; select bank2
  8994  066A  150E               	bsf	14,2	;volatile
  8995  066B  2E6E               	goto	u72_24
  8996  066C                     u71_20:	
  8997  066C  0022               	movlb	2	; select bank2
  8998  066D  110E               	bcf	14,2	;volatile
  8999  066E                     u72_24:	
  9000  066E  2EB2               	goto	i1l357
  9001  066F                     i1l1868:	
  9002                           
  9003                           ;Lights.c: 26:             if ( PORTCbits.RC3 != state )
  9004  066F  0020               	movlb	0	; select bank0
  9005  0670  0C0E               	rrf	14,w	;volatile
  9006  0671  00F1               	movwf	??i1_SetLight
  9007  0672  0CF1               	rrf	??i1_SetLight,f
  9008  0673  0C71               	rrf	??i1_SetLight,w
  9009  0674  3901               	andlw	1
  9010  0675  0670               	xorwf	i1SetLight@state,w
  9011  0676  1903               	skipnz
  9012  0677  2E79               	goto	u73_21
  9013  0678  2E7A               	goto	u73_20
  9014  0679                     u73_21:	
  9015  0679  2EB2               	goto	i1l357
  9016  067A                     u73_20:	
  9017  067A                     i1l1870:	
  9018  067A  1003               	clrc
  9019  067B  0022               	movlb	2	; select bank2
  9020  067C  1D8E               	btfss	14,3	;volatile
  9021  067D  1403               	setc
  9022  067E  1803               	btfsc	3,0
  9023  067F  2E81               	goto	u74_21
  9024  0680  2E84               	goto	u74_20
  9025  0681                     u74_21:	
  9026  0681  0022               	movlb	2	; select bank2
  9027  0682  158E               	bsf	14,3	;volatile
  9028  0683  2E86               	goto	u75_24
  9029  0684                     u74_20:	
  9030  0684  0022               	movlb	2	; select bank2
  9031  0685  118E               	bcf	14,3	;volatile
  9032  0686                     u75_24:	
  9033  0686  2EB2               	goto	i1l357
  9034  0687                     i1l1872:	
  9035                           
  9036                           ;Lights.c: 31:             if ( PORTCbits.RC4 != state )
  9037  0687  0020               	movlb	0	; select bank0
  9038  0688  0E0E               	swapf	14,w	;volatile
  9039  0689  3901               	andlw	1
  9040  068A  0670               	xorwf	i1SetLight@state,w
  9041  068B  1903               	skipnz
  9042  068C  2E8E               	goto	u76_21
  9043  068D  2E8F               	goto	u76_20
  9044  068E                     u76_21:	
  9045  068E  2EB2               	goto	i1l357
  9046  068F                     u76_20:	
  9047  068F                     i1l1874:	
  9048  068F  1003               	clrc
  9049  0690  0022               	movlb	2	; select bank2
  9050  0691  1E0E               	btfss	14,4	;volatile
  9051  0692  1403               	setc
  9052  0693  1803               	btfsc	3,0
  9053  0694  2E96               	goto	u77_21
  9054  0695  2E99               	goto	u77_20
  9055  0696                     u77_21:	
  9056  0696  0022               	movlb	2	; select bank2
  9057  0697  160E               	bsf	14,4	;volatile
  9058  0698  2E9B               	goto	u78_24
  9059  0699                     u77_20:	
  9060  0699  0022               	movlb	2	; select bank2
  9061  069A  120E               	bcf	14,4	;volatile
  9062  069B                     u78_24:	
  9063  069B  2EB2               	goto	i1l357
  9064  069C                     i1l1880:	
  9065  069C  0873               	movf	i1SetLight@light,w
  9066  069D  00F1               	movwf	??i1_SetLight
  9067  069E  01F2               	clrf	??i1_SetLight+1
  9068                           
  9069                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9070                           ; Switch size 1, requested type "simple"
  9071                           ; Number of cases is 1, Range of values is 0 to 0
  9072                           ; switch strategies available:
  9073                           ; Name         Instructions Cycles
  9074                           ; simple_byte            4     3 (average)
  9075                           ; direct_byte            8     6 (fixed)
  9076                           ; jumptable            260     6 (fixed)
  9077                           ;	Chosen strategy is simple_byte
  9078  069F  0872               	movf	??i1_SetLight+1,w
  9079  06A0  3A00               	xorlw	0	; case 0
  9080  06A1  1903               	skipnz
  9081  06A2  2EA4               	goto	i1l3078
  9082  06A3  2E87               	goto	i1l1872
  9083  06A4                     i1l3078:	
  9084                           
  9085                           ; Switch size 1, requested type "simple"
  9086                           ; Number of cases is 4, Range of values is 0 to 3
  9087                           ; switch strategies available:
  9088                           ; Name         Instructions Cycles
  9089                           ; simple_byte           13     7 (average)
  9090                           ; direct_byte           14     6 (fixed)
  9091                           ; jumptable            260     6 (fixed)
  9092                           ;	Chosen strategy is simple_byte
  9093  06A4  0871               	movf	??i1_SetLight,w
  9094  06A5  3A00               	xorlw	0	; case 0
  9095  06A6  1903               	skipnz
  9096  06A7  2E44               	goto	i1l1860
  9097  06A8  3A01               	xorlw	1	; case 1
  9098  06A9  1903               	skipnz
  9099  06AA  2E59               	goto	i1l1864
  9100  06AB  3A03               	xorlw	3	; case 2
  9101  06AC  1903               	skipnz
  9102  06AD  2E6F               	goto	i1l1868
  9103  06AE  3A01               	xorlw	1	; case 3
  9104  06AF  1903               	skipnz
  9105  06B0  2E87               	goto	i1l1872
  9106  06B1  2E87               	goto	i1l1872
  9107  06B2                     i1l357:	
  9108  06B2  0008               	return
  9109  06B3                     __end_ofi1_SetLight:	
  9110  007E                     btemp	set	126	;btemp
  9111  007E                     int$flags	set	126
  9112  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        32
    BSS         61
    Persistent  38
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     66      80
    BANK1            80      0      79
    BANK2            80      2       2
    BANK3             0      0       0
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0
    BANK7             0      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    ActivePattern@p.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    stage_stash.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_stash.first_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    stage_stash.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_stash.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.patterns.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.patterns.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_CopyStageData.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_ConstructStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewPattern.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewPattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_right.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_right	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_left.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_left	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitUpperLowerPattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@lower.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@lower	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@upper.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@upper	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitXStrobePattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_2_3.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_2_3	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_1_4.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_1_4	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitWigwagPattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@right_side_on.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@right_side_on	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@left_side_on.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@left_side_on	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    AppendStage@last_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@last_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@last_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStageData.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStageData	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@source.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@dest.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@source	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@dest	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__ConstructStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__ConstructStage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@new_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@next	PTR struct Stage size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    ConstructStage@states	PTR const _Bool  size(1) Largest target is 4
		 -> InitLowerPattern@lower_right_states(BANK0[4]), InitLowerPattern@lower_left_states(BANK0[4]), InitUpperLowerPattern@lower_states(BANK0[4]), InitUpperLowerPattern@upper_states(BANK0[4]), 
		 -> InitXStrobePattern@diag_2_3_states(BANK0[4]), InitXStrobePattern@diag_1_4_states(BANK0[4]), InitWigwagPattern@right_side_states(BANK0[4]), InitWigwagPattern@left_side_states(BANK0[4]), 

    ConstructStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern.first_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), 

    sp__NewStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), 

    sp__NewStage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AssignLightStates@stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AssignLightStates@states	PTR const _Bool  size(1) Largest target is 4
		 -> InitLowerPattern@lower_right_states(BANK0[4]), InitLowerPattern@lower_left_states(BANK0[4]), InitUpperLowerPattern@lower_states(BANK0[4]), InitUpperLowerPattern@upper_states(BANK0[4]), 
		 -> InitXStrobePattern@diag_2_3_states(BANK0[4]), InitXStrobePattern@diag_1_4_states(BANK0[4]), InitWigwagPattern@right_side_states(BANK0[4]), InitWigwagPattern@left_side_states(BANK0[4]), 
		 -> NewStage@init_states(BANK0[4]), 

    AssignLightStates@stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NextPattern@p_selector.current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NextPattern@p_selector.patterns.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NextPattern@p_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NextPattern@p_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    NextPattern@p_selector	PTR volatile struct PatternSelector size(2) Largest target is 19
		 -> pattern_selector(BANK1[19]), 

    sp__ActivePattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    ActivePattern@p.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ActivePattern@p.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S447Stage$next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S457Pattern$first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector	PTR volatile struct PatternSelector size(2) Largest target is 19
		 -> pattern_selector(BANK1[19]), 

    sp__NextPattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    S460PatternSelector$current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S460PatternSelector$patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    pattern_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCCF0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TripTurnSignal(), 

    IOCCF0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TripTurnSignal(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    _TripTurnSignal->i1_SetOutputs
    i1_SetOutputs->i1_SetLight

Critical Paths under _main in BANK0

    _setup->_InitPatternSelector
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF0_SetInterruptHandler
    _InitPatternSelector->_InitLowerPattern
    _InitPatternSelector->_InitUpperLowerPattern
    _InitPatternSelector->_InitWigwagPattern
    _InitPatternSelector->_InitXStrobePattern
    _NewPattern->_NewStage
    _InitXStrobePattern->_AppendStage
    _InitWigwagPattern->_AppendStage
    _InitUpperLowerPattern->_AppendStage
    _InitLowerPattern->_AppendStage
    _CopyStageData->_NewStage
    _ConstructStage->_NewStage
    _NewStage->_AssignLightStates
    _AppendStage->_CopyStageData
    _TurnSignalDone->_abs
    _abs->_ms
    _SetOutputs->_SetLight
    _FlashPattern->_SetLight
    _FlashPattern->_ms

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _setup->_InitPatternSelector

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   56130
                                             65 BANK0      1     1      0
                       _FlashPattern
                        _NextPattern
           _PatternCycleInputChanged
                     _TurnSignalDone
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   53562
                _InitPatternSelector
                  _SYSTEM_Initialize
                         _SetOutputs
                    _TMR1_Initialize
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     242
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     121
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0     121
         _IOCCF0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCCF0_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternSelector                                  8     6      2   52200
                                             59 BANK0      6     4      2
                                              0 BANK2      2     2      0
                   _InitLowerPattern
              _InitUpperLowerPattern
                  _InitWigwagPattern
                 _InitXStrobePattern
                         _NewPattern
 ---------------------------------------------------------------------------------
 (3) _NewPattern                                           4     4      0    1788
                                             19 BANK0      4     4      0
                           _NewStage
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     976
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _InitXStrobePattern                                  23    21      2   12483
                                             36 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (3) _InitWigwagPattern                                   23    21      2   12483
                                             36 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (3) _InitUpperLowerPattern                               23    21      2   12483
                                             36 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (3) _InitLowerPattern                                    23    21      2   12483
                                             36 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (4) _CopyStageData                                        9     5      4    3885
                                             19 BANK0      9     5      4
                           _NewStage (ARG)
 ---------------------------------------------------------------------------------
 (4) _ConstructStage                                       7     4      3    3216
                                             19 BANK0      7     4      3
                  _AssignLightStates
                           _NewStage
 ---------------------------------------------------------------------------------
 (4) _NewStage                                            10    10      0     716
                                              9 BANK0     10    10      0
                  _AssignLightStates
 ---------------------------------------------------------------------------------
 (5) _AssignLightStates                                    9     6      3     552
                                              0 BANK0      9     6      3
 ---------------------------------------------------------------------------------
 (4) _AppendStage                                          8     4      4    4009
                                             28 BANK0      8     4      4
                      _CopyStageData (ARG)
                           _NewStage (ARG)
 ---------------------------------------------------------------------------------
 (1) _TurnSignalDone                                       1     1      0    1182
                                              8 BANK0      1     1      0
                         _SetOutputs
                                _abs
                                 _ms
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     183
                                              4 BANK0      4     2      2
                                 _ms (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetOutputs                                           2     2      0     999
                                              4 BANK0      2     2      0
                           _SetLight
 ---------------------------------------------------------------------------------
 (1) _PatternCycleInputChanged                             4     4      0      34
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _NextPattern                                          6     4      2     412
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _FlashPattern                                        12    12      0     940
                                              4 BANK0     12    12      0
                           _SetLight
                                 _ms
 ---------------------------------------------------------------------------------
 (2) _ms                                                   4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _SetLight                                             4     3      1     875
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           0     0      0     542
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0     240
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (9) _TMR1_WriteTimer                                      2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (9) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _PIN_MANAGER_IOC                                      0     0      0     302
                         _IOCCF0_ISR
 ---------------------------------------------------------------------------------
 (9) _IOCCF0_ISR                                           0     0      0     302
                   Absolute function *
                     _TripTurnSignal *
 ---------------------------------------------------------------------------------
 (10) _TripTurnSignal                                      0     0      0     302
                       i1_SetOutputs
                               i1_ms
 ---------------------------------------------------------------------------------
 (11) i1_ms                                                4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (11) i1_SetOutputs                                        2     2      0     302
                                              4 COMMON     2     2      0
                         i1_SetLight
 ---------------------------------------------------------------------------------
 (12) i1_SetLight                                          4     3      1     214
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FlashPattern
     _SetLight
     _ms
   _NextPattern
   _PatternCycleInputChanged
   _TurnSignalDone
     _SetOutputs
       _SetLight
     _abs
       _ms (ARG)
     _ms
   _setup
     _InitPatternSelector
       _InitLowerPattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _InitUpperLowerPattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _InitWigwagPattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _InitXStrobePattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _NewPattern
         _NewStage
           _AssignLightStates
         ___wmul
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCCF0_SetInterruptHandler
       _PMD_Initialize
       _TMR1_Initialize
         _TMR1_SetInterruptHandler
       _WDT_Initialize
     _SetOutputs
       _SetLight
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR1_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCCF0_ISR
       Absolute function(Fake) *
       _TripTurnSignal *
         i1_SetOutputs
           i1_SetLight
         i1_ms
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     42      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      2       2       9        2.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      AD      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      AD      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu May 07 18:47:51 2020

                              _update_stage 006C                                 __CFG_CP$OFF 0000  
                                        l50 0D38                                          l53 07FF  
                                        l47 0D96                                          l56 0D26  
                        ConstructStage@next 0035                                          _ms 0D56  
                       ___wmul@multiplicand 0022                                 __CFG_LVP$ON 0000  
                                       l113 0EF0                                         l124 0D1E  
                                       l221 0D41                                         l321 0641  
                                       ?_ms 0020                                         l402 07FB  
                                       l308 05BC                                         l421 0E9E  
                                       l431 0FC0                                         l191 0DCD  
                                       l271 0DFB                                         l360 0EC4  
                                       l425 07C7                                         l434 0F49  
                                       l194 0D18                                         l524 0522  
                                       l357 0720                                         l535 0D5F  
                                       l447 0778                                         l439 0F82  
                                       l480 0274                                         l458 0487  
                                       l395 0FFF                                         l491 037E  
                                       l469 016A                                         l687 0E23  
                                       l689 0E37                                __CFG_CPD$OFF 0000  
                           _timer1ReloadVal 007A                                         _abs 0DFC  
                   __size_of_PMD_Initialize 0008                                         wreg 0009  
        __end_of_IOCCF0_SetInterruptHandler 0D1F                  _IOCCF0_SetInterruptHandler 0D19  
                                      ??_ms 0024                                        ?_abs 0024  
                                      l1141 0E17                                        l1144 0E17  
                                      l3000 0F12                                        l3002 0F17  
                                      l2500 0E91                                        l2502 0E95  
                                      l2510 0786                                        l2520 07BB  
                                      l2512 079A                                        l2504 0779  
                                      l2600 0ED9                                        l3074 0601  
                                      l2522 07C3                                        l2514 079E  
                                      l2506 0783                                        l2530 0F1F  
                                      l2610 0EE4                                        l2602 0EDC  
                                      l3076 0712                                        l2516 07A6  
                                      l2532 0F32                                        l2540 0F4A  
                                      l2700 0068                                        l2620 0D33  
                                      l2612 0EE5                                        l2604 0EDE  
                                      l2518 07B1                                        l2534 0F3C  
                                      l2550 0F66                                        l2710 00AC  
                                      l2702 0078                                        l2622 0D34  
                                      l2526 0D19                                        l2614 0EE6  
                                      l2606 0EE1                                        l2630 0DBB  
                                      l2560 072D                                        l2536 0F45  
                                      l2552 0F73                                        l2800 0303  
                                      l2720 00EF                                        l2712 00B5  
                                      l2704 0086                                        l2640 0F83  
                                      l2624 0D37                                        l2616 0EEE  
                                      l2608 0EE3                                        l2528 0D39  
                                      l2632 0DBD                                        l2562 0740  
                                      l2554 0F82                                        l2546 0F4D  
                                      l2802 0308                                        l2722 00F4  
                                      l2706 0096                                        l2570 0E18  
                                      l2650 0FAA                                        l2642 0F8D  
                                      l2618 0D30                                        l2634 0DBE  
                                      l2626 07FC                                        l2820 06B6  
                                      l2564 074A                                        l2492 0E7A  
                                      l2548 0F62                                        l2812 0334  
                                      l2804 0315                                        l2740 0172  
                                      l2660 0385                                        l2732 0120  
                                      l2724 0101                                        l2708 00A4  
                                      l2580 0E33                                        l2572 0E1B  
                                      l2652 0FAF                                        l2636 0DC3  
                                      l2628 0DB9                                        l2900 0DE8  
                                      l2830 06E9                                        l2822 06BD  
                                      l2910 0FC6                                        l2566 0753  
                                      l2558 0721                                        l2814 036C  
                                      l2806 0331                                        l2750 01B6  
                                      l2742 0182                                        l2670 03C9  
                                      l2662 0395                                        l2734 0158  
                                      l2726 011D                                        l2718 00B7  
                                      l2574 0E1F                                        l2654 0FBC  
                                      l2646 0F90                                        l2590 0EC9  
                                      l2638 0DC5                                        l2902 0DEC  
                                      l2832 06F6                                        l2824 06CA  
                                      l2840 070A                                        l2912 0FCA  
                                      l2568 0766                                        l2816 0371  
                                      l2760 01F9                                        l2752 01BF  
                                      l2744 0190                                        l2680 040C  
                                      l2672 03D2                                        l2664 03A3  
                                      l2736 015D                                        l2576 0E28  
                                      l2648 0FA6                                        l2592 0ECC  
                                      l2584 0D1F                                        l2904 0DEF  
                                      l2834 06FD                                        l2826 06D2  
                                      l2818 06B5                                        l2930 07DF  
                                      l2922 07C8                                        l2914 0FDD  
                                      l2498 0E7D                                        l2762 01FE  
                                      l2746 01A0                                        l2738 016B  
                                      l2682 0411                                        l2666 03B3  
                                      l2658 037F                                        l2578 0E2D  
                                      l2594 0ECE                                        l2586 0EC5  
                                      l2850 0D8A                                        l2906 0DF3  
                                      l2828 06DF                                        l2932 07E8  
                                      l2924 07CD                                        l2860 0EA1  
                                      l2908 0FC1                                        l2780 027C  
                                      l2772 022A                                        l2764 020B  
                                      l2748 01AE                                        l2692 043D  
                                      l2684 041E                                        l2668 03C1  
                                      l2596 0ED2                                        l2588 0EC7  
                                      l2852 0D8D                                        l2950 05CB  
                                      l2942 07FA                                        l2926 07D3  
                                      l2918 0FDF                                        l2790 02C0  
                                      l2782 028C                                        l2774 0262  
                                      l2766 0227                                        l2758 01C1  
                                      l2694 0475                                        l2686 043A  
                                      l2678 03D4                                        l2870 053D  
                                      l2862 0523                                        l2598 0ED4  
                                      l2854 0D90                                        l2952 05D8  
                                      l2960 05F3                                        l2928 07D6  
                                      l2936 07EA                                        l2792 02C9  
                                      l2784 029A                                        l2776 0267  
                                      l2696 047A                                        l2880 0570  
                                      l2872 0542                                        l2856 0D93  
                                      l2848 0D87                                        l2954 05E5  
                                      l2962 060F                                        l2946 05BD  
                                      l2786 02AA                                        l2778 0275  
                                      l2698 0061                                        l2882 057D  
                                      l2874 0551                                        l2858 0D16  
                                      l2980 04DD                                        l2972 0488  
                                      l2964 0631                                        l2956 05EC  
                                      l2948 05BE                                        l2892 0DFC  
                                      l2788 02B8                                        l2884 058A  
                                      l2876 0558                                        l2868 0526  
                                      l2982 04E0                                        l2974 0490  
                                      l2894 0E0A                                        l2798 02CB  
                                      l2886 05AD                                        l2878 0563  
                                      l2990 0EF4                                        l2888 0D56  
                                      l2984 04E5                                        l2976 04C9  
                                      l2896 0DE4                                        l2986 0520  
                                      l2978 04D3                                        l2898 0DE7  
                                      l2994 0EFD                                        l2996 0F05  
                                      l2988 0EF1                                        l2998 0F0A  
                           ?_ConstructStage 0033                                        u1300 0783  
                                      u1301 0782                                        u1310 0F73  
                                      u1311 0F72                                        u1320 072D  
                                      u1400 0487                                        u1321 072C  
                                      u1401 0486                                        u1330 0766  
                                      u1410 0101                                        u1331 0765  
                                      u1315 0F6F                                        u1411 0100  
                                      u1500 06D2                                        u1420 016A  
                                      u1340 0E1F                                        u1501 06D1  
                                      u1405 0483                                        u1421 0169  
                                      u1341 0E1E                                        _LATA 010C  
                                      u1510 06DC                                        u1430 020B  
                                      u1511 06D9                                        u1335 0762  
                                      u1431 020A                                        u1415 00FD  
                                      _LATC 010E                                        u1600 0E0A  
                                      u1440 0274                                        u1601 0E09  
                                      u1441 0273                                        u1425 0166  
                                      u1530 06E9                                        u1610 0FC6  
                                      u1290 0E9E                                        u1450 0315  
                                      u1370 0E33                                        u1531 06E8  
                                      u1611 0FC5                                        u1291 0E9D  
                                      u1451 0314                                        u1435 0207  
                                      u1371 0E32                                        u1355 0E24  
                                      u1540 06F3                                        u1524 06DE  
                                      u1620 0FFE                                        u1460 037E  
                                      u1380 0F8D                                        u1700 0F05  
                                      u1541 06F0                                        u1605 0E06  
                                      u1621 0FFC                                        u1461 037D  
                                      u1445 0270                                        u1365 0E29  
                                      u1381 0F8C                                        u1701 0F04  
                                      u1470 06BD                                        u1630 0FFF  
                                      u1390 041E                                        u1710 0F0A  
                                      u1471 06BC                                        u1455 0311  
                                      u1391 041D                                        u1711 0F09  
                                      u1560 06FD                                        u1480 06C7  
                                      u1640 07D3                                        u1561 06FC  
                                      u1481 06C4                                        u1641 07D2  
                                      u1625 0FF9                                        u1465 037A  
                                      u1570 0707                                        u1554 06F5  
                                      u1650 07E8                                        u1571 0704  
                                      u1651 07E7                                        u1395 041A  
                                      u1660 07FA                                        u1661 07F9  
                                      u1494 06C9                                        u1670 04C9  
                                      u1590 0551                                        u1671 04C8  
                                      u1727 07DA                                        u1591 0550  
                                      u1584 0709                                        u1680 04E5  
                                      u1681 04E4                                        u1690 0EFC  
                                      u1675 04C5                                        u1595 054D  
                                      u1691 0EFB                                        _PMD0 0911  
                                      _PMD1 0912                                        _PMD2 0913  
                                      _PMD3 0914                                        _PMD4 0915  
                                      _PMD5 0916                                        _WPUA 020C  
                                      _WPUC 020E                                        i1_ms 0D42  
                              __CFG_WRT$OFF 0000                               SetLight@light 0023  
                             __CFG_FCMEN$ON 0000                                        abs@a 0024  
                      ConstructStage@states 0037                               SetLight@state 0020  
                                      _main 0EF1                         __end_of_AppendStage 0779  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                               __CFG_BOREN$ON 0000  
                             __CFG_BORV$LOW 0000                                        start 0028  
                           ?_TripTurnSignal 0070                  ??_TMR1_SetInterruptHandler 0022  
                             __CFG_CSWEN$ON 0000                               __CFG_MCLRE$ON 0000  
                            CopyStageData@i 003A                             ??_CopyStageData 0037  
                                     ??_abs 0026                                       ?i1_ms 0070  
            __size_of_OSCILLATOR_Initialize 0009               __end_of_OSCILLATOR_Initialize 0D39  
                       __size_of_IOCCF0_ISR 000F                                       ?_main 0070  
                             __CFG_WDTE$OFF 0000                             _TMR1_StartTimer 0D16  
                            __CFG_DEBUG$OFF 0000                                       i1l121 0D86  
                                     i1l117 0D2F                                       i1l205 0DB8  
                                     i1l224 0D55                                       i1l161 0026  
                                     i1l218 0DE3                                       i1l162 0026  
                                     i1l156 0014                                       i1l360 0E79  
                                     i1l357 06B2                                       i1l535 0D4B  
                                     i1l391 0DA7                                       _OSCEN 091D  
                                     _TMR1H 001A                                       _TMR1L 0019  
                InitLowerPattern@lower_left 004F                                       u70_20 0662  
                                     u70_21 0661                                       u71_20 066C  
                                     u71_21 0669                                       u72_24 066E  
                                     u73_20 067A                                       u73_21 0679  
                                     _TRISA 008C                                       _TRISC 008E  
                                     u74_20 0684                                       u74_21 0681  
                                     u67_20 064C                                       u67_21 064B  
                                     u75_24 0686                                       u76_20 068F  
                                     u68_20 0656                                       u76_21 068E  
                                     u68_21 0653                                       u77_20 0699  
                                     u77_21 0696                                       u69_24 0658  
                                     u78_24 069B                       ConstructStage@time_ms 0033  
                          __end_of_TMR1_ISR 0DE4                     __end_of_PIN_MANAGER_IOC 0D30  
                            _WDT_Initialize 07FC                                       _setup 0DE4  
         InitXStrobePattern@diag_1_4_states 0047                     __end_of_TMR1_Initialize 0DCE  
                                     pclath 000A           InitXStrobePattern@diag_2_3_states 004B  
                               ?i1_SetLight 0070                        __end_of_FlashPattern 0523  
                                     status 0003               InitPatternSelector@p_selector 005B  
                                     wtemp0 007E                    FlashPattern@current_time 002E  
                  _PatternCycleInputChanged 07C8                             _TMR1_WriteTimer 0DA8  
                         _pattern_list_iter 0068                                __end_ofi1_ms 0D4C  
                           __initialization 002A                     __size_of_TurnSignalDone 003F  
                       NewStage@init_states 002D                               ??_NextPattern 0022  
                              __end_of_main 0F1D                                  _NewPattern 0F83  
               ?_INTERRUPT_InterruptManager 0070                            __end_of_NewStage 07C8  
                                    ??i1_ms 0074                                      ??_main 0061  
                          __end_of_SetLight 0721                           ?_InitLowerPattern 0044  
               __end_of_InitPatternSelector 05BD                          ??_InitLowerPattern 0046  
                    __end_of_WDT_Initialize 0800                          _cur_pc_input_state 0078  
                               _AppendStage 0721                         InitXStrobePattern@i 0053  
                                    ?_setup 0070                                      _ANSELA 018C  
                                    _ANSELC 018E                          __CFG_RSTOSC$HFINT1 0000  
                                    _T1GCON 001C                  __end_of_InitXStrobePattern 016B  
                   TMR1_WriteTimer@timerVal 0070                                      u111_20 0D2C  
                                    u111_21 0D2B                                      i1l2212 0D97  
                                    i1l2214 0D9B                                      i1l2230 0D84  
                                    i1l2240 0DB0                                      u112_20 0DDE  
                                    i1l2400 001D                                      u112_21 0DDD  
                                    _ODCONA 028C                                      i1l2226 0D78  
                                    i1l2242 0DB2                                      i1l2234 0DA8  
                                    i1l2402 0022                                      _ODCONC 028E  
                                    i1l2228 0D7F                                      i1l2236 0DAD  
                                    i1l2244 0DB4                                      i1l2246 0DB6  
                                    i1l2238 0DAE                                      i1l2248 0D4C  
                                    u121_20 000B                                      u121_21 000A  
                                    i1l2290 0DCE                                      i1l2292 0DD0  
                                    i1l3078 06A4                                      i1l2286 0D27  
                                    i1l2294 0DD7                                      i1l2288 0D2C  
                                    i1l2296 0DDE                                      u122_20 0010  
                                    i1l2392 0006                                      u122_21 000F  
                                    i1l2394 000B                                      i1l1860 0644  
                                    i1l2396 0010                                      i1l1870 067A  
                                    i1l1862 064C                                      i1l2398 0018  
                                    i1l1872 0687                                      i1l1864 0659  
                                    i1l1880 069C                                      i1l1944 0E59  
                                    u107_20 0D7F                                      u123_20 0018  
                                    u107_21 0D7E                                      u123_21 0017  
                                    i1l1874 068F                                      i1l1866 0662  
                                    i1l1858 0643                                      i1l1946 0D42  
                                    i1l1868 066F                                      u108_20 0DAD  
                                    u124_20 001D                                      u108_21 0DAC  
                                    u124_21 001C                                      u125_20 0022  
                                    u125_21 0021                                      _INLVLA 038C  
                                    _INLVLC 038E                                      _OSCFRQ 091F  
                                    _WDTCON 0097                                  _SetOutputs 0E9F  
                 InitUpperLowerPattern@F461 00D9                   InitUpperLowerPattern@F464 00D5  
                            __CFG_PWRTE$OFF 0000                             i1SetLight@light 0073  
      __end_of_TMR1_DefaultInterruptHandler 0D56       __size_of_TMR1_DefaultInterruptHandler 000A  
              _TMR1_DefaultInterruptHandler 0D4C                             SetOutputs@state 0025  
                           i1SetLight@state 0070                   InitUpperLowerPattern@head 0059  
                     NextPattern@p_selector 0020                     __end_of_TMR1_StartTimer 0D19  
                                    ___wmul 0E18                              __CFG_STVREN$ON 0000  
         InitWigwagPattern@left_side_states 0047                                      _cur_ms 0062  
         InitUpperLowerPattern@upper_states 0047                         CopyStageData@source 0035  
                       __end_of_NextPattern 0642                         __size_ofi1_SetLight 0071  
                            _PMD_Initialize 0D1F                             ?_WDT_Initialize 0070  
  TMR1_SetInterruptHandler@InterruptHandler 0020  IOCCF0_SetInterruptHandler@InterruptHandler 0020  
                          ?_PIN_MANAGER_IOC 0070                     __end_of_TMR1_WriteTimer 0DB9  
                              ??_IOCCF0_ISR 0076                            ?_TMR1_Initialize 0070  
                    AssignLightStates@stage 0020                           _SYSTEM_Initialize 0D87  
                   __end_of__initialization 005D                  InitXStrobePattern@diag_1_4 004F  
                InitXStrobePattern@diag_2_3 0051                          ?_SYSTEM_Initialize 0070  
                            __pcstackCOMMON 0070          InitWigwagPattern@right_side_states 004B  
                              __pidataBANK1 0E38                         ??_SYSTEM_Initialize 0022  
                                 ?_TMR1_ISR 0070               ?_TMR1_DefaultInterruptHandler 0070  
                               ?_NewPattern 0028                               __end_of_setup 0DFC  
                    __end_of_PMD_Initialize 0D27                                  __end_of_ms 0D60  
                        __end_of_IOCCF0_ISR 0D87                           NewStage@new_stage 0031  
                          ??_ConstructStage 0036                 ?_IOCCF0_SetInterruptHandler 0020  
                     __size_of_FlashPattern 009B           InitLowerPattern@lower_left_states 0047  
                  InitUpperLowerPattern@off 0057                   __end_of_SYSTEM_Initialize 0D97  
                                   ??_setup 0061                                NewStage@F418 00A0  
                                __pbssBANK0 0062                                  __pbssBANK1 00A0  
                          ??_TripTurnSignal 0076                                   ?_NewStage 0020  
                                __pnvCOMMON 007A                                 ?_SetOutputs 0070  
                     _InitUpperLowerPattern 016B                                   ?_SetLight 0020  
                        AssignLightStates@i 0027                        AppendStage@new_stage 003E  
                            _TurnSignalDone 0FC1                                  __pmaintext 0EF1  
                                   ?___wmul 0020                            ?_TMR1_StartTimer 0070  
                                ??_TMR1_ISR 0072                             __CFG_PPS1WAY$ON 0000  
                               _NextPattern 05BD                                  __pintentry 0004  
                           ?_PMD_Initialize 0070                          InitWigwagPattern@i 0053  
                              _FlashPattern 0488                                     _OSCCON1 0919  
                                   _OSCCON3 091B                                     _OSCTUNE 091E  
                ??_PatternCycleInputChanged 0020                                     _SLRCONA 030C  
                                   _SLRCONC 030E                      InitXStrobePattern@F452 00DD  
                    InitXStrobePattern@F449 00E1                            ?_TMR1_WriteTimer 0070  
                    InitXStrobePattern@head 0059                         __size_of_NewPattern 003E  
                   ConstructStage@new_stage 0038                                ??i1_SetLight 0071  
                                ??_NewStage 0029                      __end_of_TurnSignalDone 1000  
              InitUpperLowerPattern@pattern 0044                                  ??_SetLight 0021  
                InitUpperLowerPattern@i_906 0055                  InitUpperLowerPattern@lower 0051  
                InitUpperLowerPattern@upper 004F                             __size_of___wmul 0020  
       PatternCycleInputChanged@delay_count 0022                       __end_of_CopyStageData 0F83  
                      InitWigwagPattern@off 0057                                     __ptext1 0DE4  
                                   __ptext2 0D16                                     __ptext3 0D87  
                                   __ptext4 07FC                                     __ptext5 0DB9  
                                   __ptext6 0D39                                     __ptext7 0D1F  
                                   __ptext8 0EC5                                     __ptext9 0D19  
            ??_TMR1_DefaultInterruptHandler 0070                                   _T1CONbits 001B  
                      InitLowerPattern@F473 00D1                        InitLowerPattern@F476 00CD  
                     _OSCILLATOR_Initialize 0D30                                __size_of_abs 001C  
                        __end_ofi1_SetLight 06B3                         __size_of_SetOutputs 0026  
         __size_of_TMR1_SetInterruptHandler 0009                    ??_PIN_MANAGER_Initialize 0022  
                 ?_TMR1_SetInterruptHandler 0020                                   _IOCCFbits 0399  
                      InitLowerPattern@head 0059                                     _temp_ms 0076  
                                 _IOCCNbits 0398                                   _IOCCPbits 0397  
                              ?_AppendStage 003C                  __size_of_SYSTEM_Initialize 0010  
                                   clrloop0 0D61                        end_of_initialization 005D  
                       _last_pc_input_state 006D                                     init_ram 0D6C  
                    ?_InitUpperLowerPattern 0044                   __size_of_InitLowerPattern 010A  
                                   initloop 0D6D          InitLowerPattern@lower_right_states 004B  
                           ?_TurnSignalDone 0070                          _InitXStrobePattern 0061  
                          ??_WDT_Initialize 0020                                   _PORTCbits 000E  
                   InitLowerPattern@pattern 0044                         ?_InitXStrobePattern 0044  
                             ?i1_SetOutputs 0070                     AssignLightStates@states 0022  
                           _ts_trigger_time 00A4                            __CFG_FEXTOSC$OFF 0000  
                                _start_time 0066                __size_of_InitPatternSelector 009A  
                                _ts_trigger 0079                        ??_InitXStrobePattern 0046  
                              ??_NewPattern 0033                              __end_of___wmul 0E38  
                         __size_of_TMR1_ISR 0016                           CopyStageData@dest 0033  
                            ??i1_SetOutputs 0074                      ?_OSCILLATOR_Initialize 0070  
                      InitPatternSelector@i 0120                         start_initialization 002A  
                          _pattern_selector 00A8             __size_of_PIN_MANAGER_Initialize 002C  
                               __end_of_abs 0E18                             AppendStage@head 003C  
                             _pattern_stash 00BB                       NewPattern@new_pattern 0035  
                    InitUpperLowerPattern@i 0053                          __end_of_NewPattern 0FC1  
                              ??_SetOutputs 0024                    __size_of_PIN_MANAGER_IOC 0009  
                  InitWigwagPattern@pattern 0044                           __size_of_NewStage 004F  
                          __CFG_LPBOREN$OFF 0000                    __size_of_TMR1_Initialize 0015  
                         __size_of_SetLight 006E                            ??_PMD_Initialize 0020  
                                  ??___wmul 0024                                ?_NextPattern 0020  
                               __pdataBANK1 00CD                                 __pbssBIGRAM 20F0  
                               __pbssCOMMON 0076                       AppendStage@last_stage 0042  
                                 ___latbits 0002                          __end_of_SetOutputs 0EC5  
                             __pcstackBANK0 0020                               __pcstackBANK2 0120  
                    InitWigwagPattern@i_854 0055                   InitXStrobePattern@pattern 0044  
                      __size_of_AppendStage 0058                            _InitLowerPattern 0275  
                                 __pnvBANK0 006E                                   __pnvBANK1 00ED  
                    _PIN_MANAGER_Initialize 0EC5            __end_of_TMR1_SetInterruptHandler 0D42  
                         _AssignLightStates 0E7A                           _InitWigwagPattern 037F  
                        ?_AssignLightStates 0020                ??_INTERRUPT_InterruptManager 0076  
                        ?_InitWigwagPattern 0044                       InitXStrobePattern@off 0057  
                  __size_of_TMR1_StartTimer 0003                         ??_AssignLightStates 0023  
                       ??_InitWigwagPattern 0046                     ??_InitUpperLowerPattern 0046  
                            __size_of_setup 0018                            ??_TurnSignalDone 0028  
                               __size_of_ms 000A                         InitLowerPattern@off 0057  
                            ___wmul@product 0024                     __size_of_ConstructStage 002D  
                                  _LATCbits 010E                        __end_ofi1_SetOutputs 0E7A  
                                 clear_ram0 0D60                                    _PIE0bits 0090  
                                  _PIE1bits 0091                    __size_of_TMR1_WriteTimer 0011  
                 __end_of_AssignLightStates 0E9F         __size_of_INTERRUPT_InterruptManager 0024  
                                  _PIR0bits 0010                                    _PIR1bits 0011  
         __size_of_PatternCycleInputChanged 0034                   ?_PatternCycleInputChanged 0070  
                 __end_of_InitWigwagPattern 0488                     __size_of_TripTurnSignal 0011  
                                  _TMR1_ISR 0DCE                           ??_PIN_MANAGER_IOC 0076  
                       _InitPatternSelector 0523                           ??_TMR1_Initialize 0022  
                         ___wmul@multiplier 0020                     InitXStrobePattern@i_880 0055  
               InitLowerPattern@lower_right 0051                        ?_InitPatternSelector 005B  
                    __size_of_CopyStageData 0039                                    _NewStage 0779  
                         i1SetOutputs@state 0075                                    _SetLight 06B3  
                           _stage_list_iter 006A                     ??_OSCILLATOR_Initialize 0020  
                     InitWigwagPattern@F440 00E5                       InitWigwagPattern@F437 00E9  
                      __size_of_NextPattern 0085                    _TMR1_SetInterruptHandler 0D39  
                     InitWigwagPattern@head 0059                       _TMR1_InterruptHandler 00ED  
                   _IOCCF0_InterruptHandler 006E                                    __ptext10 0D30  
                                  __ptext11 0523                                    __ptext20 0779  
                                  __ptext12 0F83                                    __ptext21 0E7A  
                                  __ptext13 0E18                                  _T1GCONbits 001C  
                                  __ptext30 06B3                                    __ptext22 0721  
                                  __ptext14 0061                                    __ptext23 0FC1  
                                  __ptext15 037F                                    __ptext40 0642  
                                  __ptext32 0DCE                                    __ptext24 0DFC  
                                  __ptext16 016B                                    __ptext33 0DA8  
                                  __ptext25 0E9F                                    __ptext17 0275  
                                  __ptext34 0D4C                                    __ptext26 07C8  
                                  __ptext18 0F4A                                    __ptext35 0D27  
                                  __ptext27 05BD                                    __ptext19 0F1D  
                                  __ptext36 0D78                                    __ptext28 0488  
                                  __ptext37 0D97                                    __ptext29 0D56  
                                  __ptext38 0D42                                    __ptext39 0E58  
              ??_IOCCF0_SetInterruptHandler 0022              InitWigwagPattern@right_side_on 0051  
                     ??_InitPatternSelector 005D                           ??_TMR1_StartTimer 0020  
                                _IOCCF0_ISR 0D78                               __size_ofi1_ms 000A  
                             __size_of_main 002C                 __size_of_InitXStrobePattern 010A  
                     InitLowerPattern@i_932 0055                  __size_of_AssignLightStates 0025  
             InitWigwagPattern@left_side_on 004F                  __size_of_InitWigwagPattern 0109  
                                  int$flags 007E          __end_of_INTERRUPT_InterruptManager 0028  
                _INTERRUPT_InterruptManager 0004                           ??_TMR1_WriteTimer 0072  
                             _CopyStageData 0F4A                               ?_FlashPattern 0070  
                  __end_of_InitLowerPattern 037F         __size_of_IOCCF0_SetInterruptHandler 0006  
                                _INTCONbits 000B                     __size_of_WDT_Initialize 0004  
                     __size_ofi1_SetOutputs 0022                                    intlevel1 0000  
                            _ConstructStage 0F1D                     ?_PIN_MANAGER_Initialize 0070  
                         __CFG_CLKOUTEN$OFF 0000                           InitLowerPattern@i 0053  
                            _TripTurnSignal 0D97                              ?_CopyStageData 0033  
                            ??_FlashPattern 0024           InitUpperLowerPattern@lower_states 004B  
                              i1_SetOutputs 0E58                               ??_AppendStage 0040  
          __end_of_PatternCycleInputChanged 07FC                      __end_of_ConstructStage 0F4A  
                               ?_IOCCF0_ISR 0070              __end_of_PIN_MANAGER_Initialize 0EF1  
            __size_of_InitUpperLowerPattern 010A               __end_of_InitUpperLowerPattern 0275  
                                i1_SetLight 0642                             _PIN_MANAGER_IOC 0D27  
                               _stage_stash 20F0                             _TMR1_Initialize 0DB9  
                    __end_of_TripTurnSignal 0DA8  
