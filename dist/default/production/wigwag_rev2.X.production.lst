

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu May 07 15:22:42 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F18325
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x620,48
    52                           	dabs	1,0x5A0,80
    53                           	dabs	1,0x520,80
    54                           	dabs	1,0x4A0,80
    55                           	dabs	1,0x420,80
    56                           	dabs	1,0x3A0,80
    57                           	dabs	1,0x320,80
    58                           	dabs	1,0x2A0,80
    59                           	dabs	1,0x220,80
    60                           	dabs	1,0x1A0,80
    61                           	dabs	1,0x20F0,0,_stage_stash
    62                           	dabs	1,0x7E,2
    63  0000                     
    64                           ; Version 2.10
    65                           ; Generated 31/07/2019 GMT
    66                           ; 
    67                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC16F18325 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     	;# 
    99  0001                     	;# 
   100  0002                     	;# 
   101  0003                     	;# 
   102  0004                     	;# 
   103  0005                     	;# 
   104  0006                     	;# 
   105  0007                     	;# 
   106  0008                     	;# 
   107  0009                     	;# 
   108  000A                     	;# 
   109  000B                     	;# 
   110  000C                     	;# 
   111  000E                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0013                     	;# 
   116  0014                     	;# 
   117  0015                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0016                     	;# 
   121  0017                     	;# 
   122  0018                     	;# 
   123  0019                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001C                     	;# 
   128  001D                     	;# 
   129  001E                     	;# 
   130  001F                     	;# 
   131  008C                     	;# 
   132  008E                     	;# 
   133  0090                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0097                     	;# 
   139  009B                     	;# 
   140  009B                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009E                     	;# 
   144  009F                     	;# 
   145  010C                     	;# 
   146  010E                     	;# 
   147  0111                     	;# 
   148  0112                     	;# 
   149  0113                     	;# 
   150  0114                     	;# 
   151  0115                     	;# 
   152  0116                     	;# 
   153  0117                     	;# 
   154  0118                     	;# 
   155  0119                     	;# 
   156  018C                     	;# 
   157  018E                     	;# 
   158  0197                     	;# 
   159  0199                     	;# 
   160  0199                     	;# 
   161  0199                     	;# 
   162  019A                     	;# 
   163  019A                     	;# 
   164  019A                     	;# 
   165  019B                     	;# 
   166  019B                     	;# 
   167  019B                     	;# 
   168  019B                     	;# 
   169  019B                     	;# 
   170  019C                     	;# 
   171  019C                     	;# 
   172  019C                     	;# 
   173  019D                     	;# 
   174  019D                     	;# 
   175  019D                     	;# 
   176  019E                     	;# 
   177  019E                     	;# 
   178  019E                     	;# 
   179  019F                     	;# 
   180  019F                     	;# 
   181  019F                     	;# 
   182  019F                     	;# 
   183  019F                     	;# 
   184  020C                     	;# 
   185  020E                     	;# 
   186  0211                     	;# 
   187  0211                     	;# 
   188  0212                     	;# 
   189  0212                     	;# 
   190  0213                     	;# 
   191  0213                     	;# 
   192  0214                     	;# 
   193  0214                     	;# 
   194  0215                     	;# 
   195  0215                     	;# 
   196  0215                     	;# 
   197  0215                     	;# 
   198  0216                     	;# 
   199  0216                     	;# 
   200  0217                     	;# 
   201  0217                     	;# 
   202  0219                     	;# 
   203  021A                     	;# 
   204  021B                     	;# 
   205  021C                     	;# 
   206  021D                     	;# 
   207  021D                     	;# 
   208  021E                     	;# 
   209  021F                     	;# 
   210  028C                     	;# 
   211  028E                     	;# 
   212  0291                     	;# 
   213  0291                     	;# 
   214  0292                     	;# 
   215  0293                     	;# 
   216  0294                     	;# 
   217  0295                     	;# 
   218  0295                     	;# 
   219  0296                     	;# 
   220  0297                     	;# 
   221  0298                     	;# 
   222  029F                     	;# 
   223  030C                     	;# 
   224  030E                     	;# 
   225  0311                     	;# 
   226  0311                     	;# 
   227  0312                     	;# 
   228  0313                     	;# 
   229  0314                     	;# 
   230  0315                     	;# 
   231  0315                     	;# 
   232  0316                     	;# 
   233  0317                     	;# 
   234  0318                     	;# 
   235  038C                     	;# 
   236  038E                     	;# 
   237  0391                     	;# 
   238  0392                     	;# 
   239  0393                     	;# 
   240  0397                     	;# 
   241  0398                     	;# 
   242  0399                     	;# 
   243  039A                     	;# 
   244  039C                     	;# 
   245  039D                     	;# 
   246  039E                     	;# 
   247  039F                     	;# 
   248  0411                     	;# 
   249  0411                     	;# 
   250  0412                     	;# 
   251  0413                     	;# 
   252  0414                     	;# 
   253  0415                     	;# 
   254  0416                     	;# 
   255  0417                     	;# 
   256  0418                     	;# 
   257  0418                     	;# 
   258  0419                     	;# 
   259  041A                     	;# 
   260  041B                     	;# 
   261  041C                     	;# 
   262  041D                     	;# 
   263  041E                     	;# 
   264  041F                     	;# 
   265  0498                     	;# 
   266  0498                     	;# 
   267  0499                     	;# 
   268  049A                     	;# 
   269  049B                     	;# 
   270  049B                     	;# 
   271  049C                     	;# 
   272  049D                     	;# 
   273  049E                     	;# 
   274  049F                     	;# 
   275  0617                     	;# 
   276  0618                     	;# 
   277  0619                     	;# 
   278  0619                     	;# 
   279  061A                     	;# 
   280  061B                     	;# 
   281  061C                     	;# 
   282  061C                     	;# 
   283  061F                     	;# 
   284  0691                     	;# 
   285  0692                     	;# 
   286  0693                     	;# 
   287  0694                     	;# 
   288  0695                     	;# 
   289  0696                     	;# 
   290  0697                     	;# 
   291  0698                     	;# 
   292  0699                     	;# 
   293  0711                     	;# 
   294  0712                     	;# 
   295  0713                     	;# 
   296  0714                     	;# 
   297  0715                     	;# 
   298  0716                     	;# 
   299  0717                     	;# 
   300  0718                     	;# 
   301  0719                     	;# 
   302  0891                     	;# 
   303  0891                     	;# 
   304  0891                     	;# 
   305  0891                     	;# 
   306  0891                     	;# 
   307  0891                     	;# 
   308  0892                     	;# 
   309  0892                     	;# 
   310  0892                     	;# 
   311  0893                     	;# 
   312  0893                     	;# 
   313  0893                     	;# 
   314  0893                     	;# 
   315  0893                     	;# 
   316  0893                     	;# 
   317  0894                     	;# 
   318  0894                     	;# 
   319  0894                     	;# 
   320  0895                     	;# 
   321  0895                     	;# 
   322  0895                     	;# 
   323  0896                     	;# 
   324  0896                     	;# 
   325  0896                     	;# 
   326  089B                     	;# 
   327  0911                     	;# 
   328  0912                     	;# 
   329  0913                     	;# 
   330  0914                     	;# 
   331  0915                     	;# 
   332  0916                     	;# 
   333  0918                     	;# 
   334  0919                     	;# 
   335  091A                     	;# 
   336  091B                     	;# 
   337  091C                     	;# 
   338  091D                     	;# 
   339  091E                     	;# 
   340  091F                     	;# 
   341  0E0F                     	;# 
   342  0E10                     	;# 
   343  0E11                     	;# 
   344  0E12                     	;# 
   345  0E13                     	;# 
   346  0E14                     	;# 
   347  0E15                     	;# 
   348  0E16                     	;# 
   349  0E17                     	;# 
   350  0E18                     	;# 
   351  0E19                     	;# 
   352  0E1A                     	;# 
   353  0E1B                     	;# 
   354  0E1C                     	;# 
   355  0E1D                     	;# 
   356  0E1E                     	;# 
   357  0E1F                     	;# 
   358  0E20                     	;# 
   359  0E21                     	;# 
   360  0E22                     	;# 
   361  0E24                     	;# 
   362  0E25                     	;# 
   363  0E28                     	;# 
   364  0E29                     	;# 
   365  0E2A                     	;# 
   366  0E2B                     	;# 
   367  0E2C                     	;# 
   368  0E2D                     	;# 
   369  0E2E                     	;# 
   370  0E2F                     	;# 
   371  0E90                     	;# 
   372  0E91                     	;# 
   373  0E92                     	;# 
   374  0E94                     	;# 
   375  0E95                     	;# 
   376  0EA0                     	;# 
   377  0EA1                     	;# 
   378  0EA2                     	;# 
   379  0EA3                     	;# 
   380  0EA4                     	;# 
   381  0EA5                     	;# 
   382  0F0F                     	;# 
   383  0F10                     	;# 
   384  0F11                     	;# 
   385  0F12                     	;# 
   386  0F13                     	;# 
   387  0F14                     	;# 
   388  0F15                     	;# 
   389  0F16                     	;# 
   390  0F17                     	;# 
   391  0F18                     	;# 
   392  0F19                     	;# 
   393  0F1A                     	;# 
   394  0F1B                     	;# 
   395  0F1C                     	;# 
   396  0F1D                     	;# 
   397  0F1E                     	;# 
   398  0F1F                     	;# 
   399  0F20                     	;# 
   400  0F21                     	;# 
   401  0F22                     	;# 
   402  0F23                     	;# 
   403  0F24                     	;# 
   404  0F25                     	;# 
   405  0F26                     	;# 
   406  0F27                     	;# 
   407  0F28                     	;# 
   408  0F29                     	;# 
   409  0F2A                     	;# 
   410  0F2B                     	;# 
   411  0F2C                     	;# 
   412  0F2D                     	;# 
   413  0F2E                     	;# 
   414  0F2F                     	;# 
   415  0F30                     	;# 
   416  0F31                     	;# 
   417  0F32                     	;# 
   418  0F33                     	;# 
   419  0F34                     	;# 
   420  0F35                     	;# 
   421  0F36                     	;# 
   422  0F37                     	;# 
   423  0FE4                     	;# 
   424  0FE5                     	;# 
   425  0FE6                     	;# 
   426  0FE7                     	;# 
   427  0FE8                     	;# 
   428  0FE9                     	;# 
   429  0FEA                     	;# 
   430  0FEB                     	;# 
   431  0FED                     	;# 
   432  0FEE                     	;# 
   433  0FEF                     	;# 
   434  0000                     	;# 
   435  0001                     	;# 
   436  0002                     	;# 
   437  0003                     	;# 
   438  0004                     	;# 
   439  0005                     	;# 
   440  0006                     	;# 
   441  0007                     	;# 
   442  0008                     	;# 
   443  0009                     	;# 
   444  000A                     	;# 
   445  000B                     	;# 
   446  000C                     	;# 
   447  000E                     	;# 
   448  0010                     	;# 
   449  0011                     	;# 
   450  0012                     	;# 
   451  0013                     	;# 
   452  0014                     	;# 
   453  0015                     	;# 
   454  0015                     	;# 
   455  0016                     	;# 
   456  0016                     	;# 
   457  0017                     	;# 
   458  0018                     	;# 
   459  0019                     	;# 
   460  0019                     	;# 
   461  001A                     	;# 
   462  001B                     	;# 
   463  001C                     	;# 
   464  001D                     	;# 
   465  001E                     	;# 
   466  001F                     	;# 
   467  008C                     	;# 
   468  008E                     	;# 
   469  0090                     	;# 
   470  0091                     	;# 
   471  0092                     	;# 
   472  0093                     	;# 
   473  0094                     	;# 
   474  0097                     	;# 
   475  009B                     	;# 
   476  009B                     	;# 
   477  009C                     	;# 
   478  009D                     	;# 
   479  009E                     	;# 
   480  009F                     	;# 
   481  010C                     	;# 
   482  010E                     	;# 
   483  0111                     	;# 
   484  0112                     	;# 
   485  0113                     	;# 
   486  0114                     	;# 
   487  0115                     	;# 
   488  0116                     	;# 
   489  0117                     	;# 
   490  0118                     	;# 
   491  0119                     	;# 
   492  018C                     	;# 
   493  018E                     	;# 
   494  0197                     	;# 
   495  0199                     	;# 
   496  0199                     	;# 
   497  0199                     	;# 
   498  019A                     	;# 
   499  019A                     	;# 
   500  019A                     	;# 
   501  019B                     	;# 
   502  019B                     	;# 
   503  019B                     	;# 
   504  019B                     	;# 
   505  019B                     	;# 
   506  019C                     	;# 
   507  019C                     	;# 
   508  019C                     	;# 
   509  019D                     	;# 
   510  019D                     	;# 
   511  019D                     	;# 
   512  019E                     	;# 
   513  019E                     	;# 
   514  019E                     	;# 
   515  019F                     	;# 
   516  019F                     	;# 
   517  019F                     	;# 
   518  019F                     	;# 
   519  019F                     	;# 
   520  020C                     	;# 
   521  020E                     	;# 
   522  0211                     	;# 
   523  0211                     	;# 
   524  0212                     	;# 
   525  0212                     	;# 
   526  0213                     	;# 
   527  0213                     	;# 
   528  0214                     	;# 
   529  0214                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0215                     	;# 
   533  0215                     	;# 
   534  0216                     	;# 
   535  0216                     	;# 
   536  0217                     	;# 
   537  0217                     	;# 
   538  0219                     	;# 
   539  021A                     	;# 
   540  021B                     	;# 
   541  021C                     	;# 
   542  021D                     	;# 
   543  021D                     	;# 
   544  021E                     	;# 
   545  021F                     	;# 
   546  028C                     	;# 
   547  028E                     	;# 
   548  0291                     	;# 
   549  0291                     	;# 
   550  0292                     	;# 
   551  0293                     	;# 
   552  0294                     	;# 
   553  0295                     	;# 
   554  0295                     	;# 
   555  0296                     	;# 
   556  0297                     	;# 
   557  0298                     	;# 
   558  029F                     	;# 
   559  030C                     	;# 
   560  030E                     	;# 
   561  0311                     	;# 
   562  0311                     	;# 
   563  0312                     	;# 
   564  0313                     	;# 
   565  0314                     	;# 
   566  0315                     	;# 
   567  0315                     	;# 
   568  0316                     	;# 
   569  0317                     	;# 
   570  0318                     	;# 
   571  038C                     	;# 
   572  038E                     	;# 
   573  0391                     	;# 
   574  0392                     	;# 
   575  0393                     	;# 
   576  0397                     	;# 
   577  0398                     	;# 
   578  0399                     	;# 
   579  039A                     	;# 
   580  039C                     	;# 
   581  039D                     	;# 
   582  039E                     	;# 
   583  039F                     	;# 
   584  0411                     	;# 
   585  0411                     	;# 
   586  0412                     	;# 
   587  0413                     	;# 
   588  0414                     	;# 
   589  0415                     	;# 
   590  0416                     	;# 
   591  0417                     	;# 
   592  0418                     	;# 
   593  0418                     	;# 
   594  0419                     	;# 
   595  041A                     	;# 
   596  041B                     	;# 
   597  041C                     	;# 
   598  041D                     	;# 
   599  041E                     	;# 
   600  041F                     	;# 
   601  0498                     	;# 
   602  0498                     	;# 
   603  0499                     	;# 
   604  049A                     	;# 
   605  049B                     	;# 
   606  049B                     	;# 
   607  049C                     	;# 
   608  049D                     	;# 
   609  049E                     	;# 
   610  049F                     	;# 
   611  0617                     	;# 
   612  0618                     	;# 
   613  0619                     	;# 
   614  0619                     	;# 
   615  061A                     	;# 
   616  061B                     	;# 
   617  061C                     	;# 
   618  061C                     	;# 
   619  061F                     	;# 
   620  0691                     	;# 
   621  0692                     	;# 
   622  0693                     	;# 
   623  0694                     	;# 
   624  0695                     	;# 
   625  0696                     	;# 
   626  0697                     	;# 
   627  0698                     	;# 
   628  0699                     	;# 
   629  0711                     	;# 
   630  0712                     	;# 
   631  0713                     	;# 
   632  0714                     	;# 
   633  0715                     	;# 
   634  0716                     	;# 
   635  0717                     	;# 
   636  0718                     	;# 
   637  0719                     	;# 
   638  0891                     	;# 
   639  0891                     	;# 
   640  0891                     	;# 
   641  0891                     	;# 
   642  0891                     	;# 
   643  0891                     	;# 
   644  0892                     	;# 
   645  0892                     	;# 
   646  0892                     	;# 
   647  0893                     	;# 
   648  0893                     	;# 
   649  0893                     	;# 
   650  0893                     	;# 
   651  0893                     	;# 
   652  0893                     	;# 
   653  0894                     	;# 
   654  0894                     	;# 
   655  0894                     	;# 
   656  0895                     	;# 
   657  0895                     	;# 
   658  0895                     	;# 
   659  0896                     	;# 
   660  0896                     	;# 
   661  0896                     	;# 
   662  089B                     	;# 
   663  0911                     	;# 
   664  0912                     	;# 
   665  0913                     	;# 
   666  0914                     	;# 
   667  0915                     	;# 
   668  0916                     	;# 
   669  0918                     	;# 
   670  0919                     	;# 
   671  091A                     	;# 
   672  091B                     	;# 
   673  091C                     	;# 
   674  091D                     	;# 
   675  091E                     	;# 
   676  091F                     	;# 
   677  0E0F                     	;# 
   678  0E10                     	;# 
   679  0E11                     	;# 
   680  0E12                     	;# 
   681  0E13                     	;# 
   682  0E14                     	;# 
   683  0E15                     	;# 
   684  0E16                     	;# 
   685  0E17                     	;# 
   686  0E18                     	;# 
   687  0E19                     	;# 
   688  0E1A                     	;# 
   689  0E1B                     	;# 
   690  0E1C                     	;# 
   691  0E1D                     	;# 
   692  0E1E                     	;# 
   693  0E1F                     	;# 
   694  0E20                     	;# 
   695  0E21                     	;# 
   696  0E22                     	;# 
   697  0E24                     	;# 
   698  0E25                     	;# 
   699  0E28                     	;# 
   700  0E29                     	;# 
   701  0E2A                     	;# 
   702  0E2B                     	;# 
   703  0E2C                     	;# 
   704  0E2D                     	;# 
   705  0E2E                     	;# 
   706  0E2F                     	;# 
   707  0E90                     	;# 
   708  0E91                     	;# 
   709  0E92                     	;# 
   710  0E94                     	;# 
   711  0E95                     	;# 
   712  0EA0                     	;# 
   713  0EA1                     	;# 
   714  0EA2                     	;# 
   715  0EA3                     	;# 
   716  0EA4                     	;# 
   717  0EA5                     	;# 
   718  0F0F                     	;# 
   719  0F10                     	;# 
   720  0F11                     	;# 
   721  0F12                     	;# 
   722  0F13                     	;# 
   723  0F14                     	;# 
   724  0F15                     	;# 
   725  0F16                     	;# 
   726  0F17                     	;# 
   727  0F18                     	;# 
   728  0F19                     	;# 
   729  0F1A                     	;# 
   730  0F1B                     	;# 
   731  0F1C                     	;# 
   732  0F1D                     	;# 
   733  0F1E                     	;# 
   734  0F1F                     	;# 
   735  0F20                     	;# 
   736  0F21                     	;# 
   737  0F22                     	;# 
   738  0F23                     	;# 
   739  0F24                     	;# 
   740  0F25                     	;# 
   741  0F26                     	;# 
   742  0F27                     	;# 
   743  0F28                     	;# 
   744  0F29                     	;# 
   745  0F2A                     	;# 
   746  0F2B                     	;# 
   747  0F2C                     	;# 
   748  0F2D                     	;# 
   749  0F2E                     	;# 
   750  0F2F                     	;# 
   751  0F30                     	;# 
   752  0F31                     	;# 
   753  0F32                     	;# 
   754  0F33                     	;# 
   755  0F34                     	;# 
   756  0F35                     	;# 
   757  0F36                     	;# 
   758  0F37                     	;# 
   759  0FE4                     	;# 
   760  0FE5                     	;# 
   761  0FE6                     	;# 
   762  0FE7                     	;# 
   763  0FE8                     	;# 
   764  0FE9                     	;# 
   765  0FEA                     	;# 
   766  0FEB                     	;# 
   767  0FED                     	;# 
   768  0FEE                     	;# 
   769  0FEF                     	;# 
   770  0000                     	;# 
   771  0001                     	;# 
   772  0002                     	;# 
   773  0003                     	;# 
   774  0004                     	;# 
   775  0005                     	;# 
   776  0006                     	;# 
   777  0007                     	;# 
   778  0008                     	;# 
   779  0009                     	;# 
   780  000A                     	;# 
   781  000B                     	;# 
   782  000C                     	;# 
   783  000E                     	;# 
   784  0010                     	;# 
   785  0011                     	;# 
   786  0012                     	;# 
   787  0013                     	;# 
   788  0014                     	;# 
   789  0015                     	;# 
   790  0015                     	;# 
   791  0016                     	;# 
   792  0016                     	;# 
   793  0017                     	;# 
   794  0018                     	;# 
   795  0019                     	;# 
   796  0019                     	;# 
   797  001A                     	;# 
   798  001B                     	;# 
   799  001C                     	;# 
   800  001D                     	;# 
   801  001E                     	;# 
   802  001F                     	;# 
   803  008C                     	;# 
   804  008E                     	;# 
   805  0090                     	;# 
   806  0091                     	;# 
   807  0092                     	;# 
   808  0093                     	;# 
   809  0094                     	;# 
   810  0097                     	;# 
   811  009B                     	;# 
   812  009B                     	;# 
   813  009C                     	;# 
   814  009D                     	;# 
   815  009E                     	;# 
   816  009F                     	;# 
   817  010C                     	;# 
   818  010E                     	;# 
   819  0111                     	;# 
   820  0112                     	;# 
   821  0113                     	;# 
   822  0114                     	;# 
   823  0115                     	;# 
   824  0116                     	;# 
   825  0117                     	;# 
   826  0118                     	;# 
   827  0119                     	;# 
   828  018C                     	;# 
   829  018E                     	;# 
   830  0197                     	;# 
   831  0199                     	;# 
   832  0199                     	;# 
   833  0199                     	;# 
   834  019A                     	;# 
   835  019A                     	;# 
   836  019A                     	;# 
   837  019B                     	;# 
   838  019B                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019B                     	;# 
   842  019C                     	;# 
   843  019C                     	;# 
   844  019C                     	;# 
   845  019D                     	;# 
   846  019D                     	;# 
   847  019D                     	;# 
   848  019E                     	;# 
   849  019E                     	;# 
   850  019E                     	;# 
   851  019F                     	;# 
   852  019F                     	;# 
   853  019F                     	;# 
   854  019F                     	;# 
   855  019F                     	;# 
   856  020C                     	;# 
   857  020E                     	;# 
   858  0211                     	;# 
   859  0211                     	;# 
   860  0212                     	;# 
   861  0212                     	;# 
   862  0213                     	;# 
   863  0213                     	;# 
   864  0214                     	;# 
   865  0214                     	;# 
   866  0215                     	;# 
   867  0215                     	;# 
   868  0215                     	;# 
   869  0215                     	;# 
   870  0216                     	;# 
   871  0216                     	;# 
   872  0217                     	;# 
   873  0217                     	;# 
   874  0219                     	;# 
   875  021A                     	;# 
   876  021B                     	;# 
   877  021C                     	;# 
   878  021D                     	;# 
   879  021D                     	;# 
   880  021E                     	;# 
   881  021F                     	;# 
   882  028C                     	;# 
   883  028E                     	;# 
   884  0291                     	;# 
   885  0291                     	;# 
   886  0292                     	;# 
   887  0293                     	;# 
   888  0294                     	;# 
   889  0295                     	;# 
   890  0295                     	;# 
   891  0296                     	;# 
   892  0297                     	;# 
   893  0298                     	;# 
   894  029F                     	;# 
   895  030C                     	;# 
   896  030E                     	;# 
   897  0311                     	;# 
   898  0311                     	;# 
   899  0312                     	;# 
   900  0313                     	;# 
   901  0314                     	;# 
   902  0315                     	;# 
   903  0315                     	;# 
   904  0316                     	;# 
   905  0317                     	;# 
   906  0318                     	;# 
   907  038C                     	;# 
   908  038E                     	;# 
   909  0391                     	;# 
   910  0392                     	;# 
   911  0393                     	;# 
   912  0397                     	;# 
   913  0398                     	;# 
   914  0399                     	;# 
   915  039A                     	;# 
   916  039C                     	;# 
   917  039D                     	;# 
   918  039E                     	;# 
   919  039F                     	;# 
   920  0411                     	;# 
   921  0411                     	;# 
   922  0412                     	;# 
   923  0413                     	;# 
   924  0414                     	;# 
   925  0415                     	;# 
   926  0416                     	;# 
   927  0417                     	;# 
   928  0418                     	;# 
   929  0418                     	;# 
   930  0419                     	;# 
   931  041A                     	;# 
   932  041B                     	;# 
   933  041C                     	;# 
   934  041D                     	;# 
   935  041E                     	;# 
   936  041F                     	;# 
   937  0498                     	;# 
   938  0498                     	;# 
   939  0499                     	;# 
   940  049A                     	;# 
   941  049B                     	;# 
   942  049B                     	;# 
   943  049C                     	;# 
   944  049D                     	;# 
   945  049E                     	;# 
   946  049F                     	;# 
   947  0617                     	;# 
   948  0618                     	;# 
   949  0619                     	;# 
   950  0619                     	;# 
   951  061A                     	;# 
   952  061B                     	;# 
   953  061C                     	;# 
   954  061C                     	;# 
   955  061F                     	;# 
   956  0691                     	;# 
   957  0692                     	;# 
   958  0693                     	;# 
   959  0694                     	;# 
   960  0695                     	;# 
   961  0696                     	;# 
   962  0697                     	;# 
   963  0698                     	;# 
   964  0699                     	;# 
   965  0711                     	;# 
   966  0712                     	;# 
   967  0713                     	;# 
   968  0714                     	;# 
   969  0715                     	;# 
   970  0716                     	;# 
   971  0717                     	;# 
   972  0718                     	;# 
   973  0719                     	;# 
   974  0891                     	;# 
   975  0891                     	;# 
   976  0891                     	;# 
   977  0891                     	;# 
   978  0891                     	;# 
   979  0891                     	;# 
   980  0892                     	;# 
   981  0892                     	;# 
   982  0892                     	;# 
   983  0893                     	;# 
   984  0893                     	;# 
   985  0893                     	;# 
   986  0893                     	;# 
   987  0893                     	;# 
   988  0893                     	;# 
   989  0894                     	;# 
   990  0894                     	;# 
   991  0894                     	;# 
   992  0895                     	;# 
   993  0895                     	;# 
   994  0895                     	;# 
   995  0896                     	;# 
   996  0896                     	;# 
   997  0896                     	;# 
   998  089B                     	;# 
   999  0911                     	;# 
  1000  0912                     	;# 
  1001  0913                     	;# 
  1002  0914                     	;# 
  1003  0915                     	;# 
  1004  0916                     	;# 
  1005  0918                     	;# 
  1006  0919                     	;# 
  1007  091A                     	;# 
  1008  091B                     	;# 
  1009  091C                     	;# 
  1010  091D                     	;# 
  1011  091E                     	;# 
  1012  091F                     	;# 
  1013  0E0F                     	;# 
  1014  0E10                     	;# 
  1015  0E11                     	;# 
  1016  0E12                     	;# 
  1017  0E13                     	;# 
  1018  0E14                     	;# 
  1019  0E15                     	;# 
  1020  0E16                     	;# 
  1021  0E17                     	;# 
  1022  0E18                     	;# 
  1023  0E19                     	;# 
  1024  0E1A                     	;# 
  1025  0E1B                     	;# 
  1026  0E1C                     	;# 
  1027  0E1D                     	;# 
  1028  0E1E                     	;# 
  1029  0E1F                     	;# 
  1030  0E20                     	;# 
  1031  0E21                     	;# 
  1032  0E22                     	;# 
  1033  0E24                     	;# 
  1034  0E25                     	;# 
  1035  0E28                     	;# 
  1036  0E29                     	;# 
  1037  0E2A                     	;# 
  1038  0E2B                     	;# 
  1039  0E2C                     	;# 
  1040  0E2D                     	;# 
  1041  0E2E                     	;# 
  1042  0E2F                     	;# 
  1043  0E90                     	;# 
  1044  0E91                     	;# 
  1045  0E92                     	;# 
  1046  0E94                     	;# 
  1047  0E95                     	;# 
  1048  0EA0                     	;# 
  1049  0EA1                     	;# 
  1050  0EA2                     	;# 
  1051  0EA3                     	;# 
  1052  0EA4                     	;# 
  1053  0EA5                     	;# 
  1054  0F0F                     	;# 
  1055  0F10                     	;# 
  1056  0F11                     	;# 
  1057  0F12                     	;# 
  1058  0F13                     	;# 
  1059  0F14                     	;# 
  1060  0F15                     	;# 
  1061  0F16                     	;# 
  1062  0F17                     	;# 
  1063  0F18                     	;# 
  1064  0F19                     	;# 
  1065  0F1A                     	;# 
  1066  0F1B                     	;# 
  1067  0F1C                     	;# 
  1068  0F1D                     	;# 
  1069  0F1E                     	;# 
  1070  0F1F                     	;# 
  1071  0F20                     	;# 
  1072  0F21                     	;# 
  1073  0F22                     	;# 
  1074  0F23                     	;# 
  1075  0F24                     	;# 
  1076  0F25                     	;# 
  1077  0F26                     	;# 
  1078  0F27                     	;# 
  1079  0F28                     	;# 
  1080  0F29                     	;# 
  1081  0F2A                     	;# 
  1082  0F2B                     	;# 
  1083  0F2C                     	;# 
  1084  0F2D                     	;# 
  1085  0F2E                     	;# 
  1086  0F2F                     	;# 
  1087  0F30                     	;# 
  1088  0F31                     	;# 
  1089  0F32                     	;# 
  1090  0F33                     	;# 
  1091  0F34                     	;# 
  1092  0F35                     	;# 
  1093  0F36                     	;# 
  1094  0F37                     	;# 
  1095  0FE4                     	;# 
  1096  0FE5                     	;# 
  1097  0FE6                     	;# 
  1098  0FE7                     	;# 
  1099  0FE8                     	;# 
  1100  0FE9                     	;# 
  1101  0FEA                     	;# 
  1102  0FEB                     	;# 
  1103  0FED                     	;# 
  1104  0FEE                     	;# 
  1105  0FEF                     	;# 
  1106  0000                     	;# 
  1107  0001                     	;# 
  1108  0002                     	;# 
  1109  0003                     	;# 
  1110  0004                     	;# 
  1111  0005                     	;# 
  1112  0006                     	;# 
  1113  0007                     	;# 
  1114  0008                     	;# 
  1115  0009                     	;# 
  1116  000A                     	;# 
  1117  000B                     	;# 
  1118  000C                     	;# 
  1119  000E                     	;# 
  1120  0010                     	;# 
  1121  0011                     	;# 
  1122  0012                     	;# 
  1123  0013                     	;# 
  1124  0014                     	;# 
  1125  0015                     	;# 
  1126  0015                     	;# 
  1127  0016                     	;# 
  1128  0016                     	;# 
  1129  0017                     	;# 
  1130  0018                     	;# 
  1131  0019                     	;# 
  1132  0019                     	;# 
  1133  001A                     	;# 
  1134  001B                     	;# 
  1135  001C                     	;# 
  1136  001D                     	;# 
  1137  001E                     	;# 
  1138  001F                     	;# 
  1139  008C                     	;# 
  1140  008E                     	;# 
  1141  0090                     	;# 
  1142  0091                     	;# 
  1143  0092                     	;# 
  1144  0093                     	;# 
  1145  0094                     	;# 
  1146  0097                     	;# 
  1147  009B                     	;# 
  1148  009B                     	;# 
  1149  009C                     	;# 
  1150  009D                     	;# 
  1151  009E                     	;# 
  1152  009F                     	;# 
  1153  010C                     	;# 
  1154  010E                     	;# 
  1155  0111                     	;# 
  1156  0112                     	;# 
  1157  0113                     	;# 
  1158  0114                     	;# 
  1159  0115                     	;# 
  1160  0116                     	;# 
  1161  0117                     	;# 
  1162  0118                     	;# 
  1163  0119                     	;# 
  1164  018C                     	;# 
  1165  018E                     	;# 
  1166  0197                     	;# 
  1167  0199                     	;# 
  1168  0199                     	;# 
  1169  0199                     	;# 
  1170  019A                     	;# 
  1171  019A                     	;# 
  1172  019A                     	;# 
  1173  019B                     	;# 
  1174  019B                     	;# 
  1175  019B                     	;# 
  1176  019B                     	;# 
  1177  019B                     	;# 
  1178  019C                     	;# 
  1179  019C                     	;# 
  1180  019C                     	;# 
  1181  019D                     	;# 
  1182  019D                     	;# 
  1183  019D                     	;# 
  1184  019E                     	;# 
  1185  019E                     	;# 
  1186  019E                     	;# 
  1187  019F                     	;# 
  1188  019F                     	;# 
  1189  019F                     	;# 
  1190  019F                     	;# 
  1191  019F                     	;# 
  1192  020C                     	;# 
  1193  020E                     	;# 
  1194  0211                     	;# 
  1195  0211                     	;# 
  1196  0212                     	;# 
  1197  0212                     	;# 
  1198  0213                     	;# 
  1199  0213                     	;# 
  1200  0214                     	;# 
  1201  0214                     	;# 
  1202  0215                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0216                     	;# 
  1207  0216                     	;# 
  1208  0217                     	;# 
  1209  0217                     	;# 
  1210  0219                     	;# 
  1211  021A                     	;# 
  1212  021B                     	;# 
  1213  021C                     	;# 
  1214  021D                     	;# 
  1215  021D                     	;# 
  1216  021E                     	;# 
  1217  021F                     	;# 
  1218  028C                     	;# 
  1219  028E                     	;# 
  1220  0291                     	;# 
  1221  0291                     	;# 
  1222  0292                     	;# 
  1223  0293                     	;# 
  1224  0294                     	;# 
  1225  0295                     	;# 
  1226  0295                     	;# 
  1227  0296                     	;# 
  1228  0297                     	;# 
  1229  0298                     	;# 
  1230  029F                     	;# 
  1231  030C                     	;# 
  1232  030E                     	;# 
  1233  0311                     	;# 
  1234  0311                     	;# 
  1235  0312                     	;# 
  1236  0313                     	;# 
  1237  0314                     	;# 
  1238  0315                     	;# 
  1239  0315                     	;# 
  1240  0316                     	;# 
  1241  0317                     	;# 
  1242  0318                     	;# 
  1243  038C                     	;# 
  1244  038E                     	;# 
  1245  0391                     	;# 
  1246  0392                     	;# 
  1247  0393                     	;# 
  1248  0397                     	;# 
  1249  0398                     	;# 
  1250  0399                     	;# 
  1251  039A                     	;# 
  1252  039C                     	;# 
  1253  039D                     	;# 
  1254  039E                     	;# 
  1255  039F                     	;# 
  1256  0411                     	;# 
  1257  0411                     	;# 
  1258  0412                     	;# 
  1259  0413                     	;# 
  1260  0414                     	;# 
  1261  0415                     	;# 
  1262  0416                     	;# 
  1263  0417                     	;# 
  1264  0418                     	;# 
  1265  0418                     	;# 
  1266  0419                     	;# 
  1267  041A                     	;# 
  1268  041B                     	;# 
  1269  041C                     	;# 
  1270  041D                     	;# 
  1271  041E                     	;# 
  1272  041F                     	;# 
  1273  0498                     	;# 
  1274  0498                     	;# 
  1275  0499                     	;# 
  1276  049A                     	;# 
  1277  049B                     	;# 
  1278  049B                     	;# 
  1279  049C                     	;# 
  1280  049D                     	;# 
  1281  049E                     	;# 
  1282  049F                     	;# 
  1283  0617                     	;# 
  1284  0618                     	;# 
  1285  0619                     	;# 
  1286  0619                     	;# 
  1287  061A                     	;# 
  1288  061B                     	;# 
  1289  061C                     	;# 
  1290  061C                     	;# 
  1291  061F                     	;# 
  1292  0691                     	;# 
  1293  0692                     	;# 
  1294  0693                     	;# 
  1295  0694                     	;# 
  1296  0695                     	;# 
  1297  0696                     	;# 
  1298  0697                     	;# 
  1299  0698                     	;# 
  1300  0699                     	;# 
  1301  0711                     	;# 
  1302  0712                     	;# 
  1303  0713                     	;# 
  1304  0714                     	;# 
  1305  0715                     	;# 
  1306  0716                     	;# 
  1307  0717                     	;# 
  1308  0718                     	;# 
  1309  0719                     	;# 
  1310  0891                     	;# 
  1311  0891                     	;# 
  1312  0891                     	;# 
  1313  0891                     	;# 
  1314  0891                     	;# 
  1315  0891                     	;# 
  1316  0892                     	;# 
  1317  0892                     	;# 
  1318  0892                     	;# 
  1319  0893                     	;# 
  1320  0893                     	;# 
  1321  0893                     	;# 
  1322  0893                     	;# 
  1323  0893                     	;# 
  1324  0893                     	;# 
  1325  0894                     	;# 
  1326  0894                     	;# 
  1327  0894                     	;# 
  1328  0895                     	;# 
  1329  0895                     	;# 
  1330  0895                     	;# 
  1331  0896                     	;# 
  1332  0896                     	;# 
  1333  0896                     	;# 
  1334  089B                     	;# 
  1335  0911                     	;# 
  1336  0912                     	;# 
  1337  0913                     	;# 
  1338  0914                     	;# 
  1339  0915                     	;# 
  1340  0916                     	;# 
  1341  0918                     	;# 
  1342  0919                     	;# 
  1343  091A                     	;# 
  1344  091B                     	;# 
  1345  091C                     	;# 
  1346  091D                     	;# 
  1347  091E                     	;# 
  1348  091F                     	;# 
  1349  0E0F                     	;# 
  1350  0E10                     	;# 
  1351  0E11                     	;# 
  1352  0E12                     	;# 
  1353  0E13                     	;# 
  1354  0E14                     	;# 
  1355  0E15                     	;# 
  1356  0E16                     	;# 
  1357  0E17                     	;# 
  1358  0E18                     	;# 
  1359  0E19                     	;# 
  1360  0E1A                     	;# 
  1361  0E1B                     	;# 
  1362  0E1C                     	;# 
  1363  0E1D                     	;# 
  1364  0E1E                     	;# 
  1365  0E1F                     	;# 
  1366  0E20                     	;# 
  1367  0E21                     	;# 
  1368  0E22                     	;# 
  1369  0E24                     	;# 
  1370  0E25                     	;# 
  1371  0E28                     	;# 
  1372  0E29                     	;# 
  1373  0E2A                     	;# 
  1374  0E2B                     	;# 
  1375  0E2C                     	;# 
  1376  0E2D                     	;# 
  1377  0E2E                     	;# 
  1378  0E2F                     	;# 
  1379  0E90                     	;# 
  1380  0E91                     	;# 
  1381  0E92                     	;# 
  1382  0E94                     	;# 
  1383  0E95                     	;# 
  1384  0EA0                     	;# 
  1385  0EA1                     	;# 
  1386  0EA2                     	;# 
  1387  0EA3                     	;# 
  1388  0EA4                     	;# 
  1389  0EA5                     	;# 
  1390  0F0F                     	;# 
  1391  0F10                     	;# 
  1392  0F11                     	;# 
  1393  0F12                     	;# 
  1394  0F13                     	;# 
  1395  0F14                     	;# 
  1396  0F15                     	;# 
  1397  0F16                     	;# 
  1398  0F17                     	;# 
  1399  0F18                     	;# 
  1400  0F19                     	;# 
  1401  0F1A                     	;# 
  1402  0F1B                     	;# 
  1403  0F1C                     	;# 
  1404  0F1D                     	;# 
  1405  0F1E                     	;# 
  1406  0F1F                     	;# 
  1407  0F20                     	;# 
  1408  0F21                     	;# 
  1409  0F22                     	;# 
  1410  0F23                     	;# 
  1411  0F24                     	;# 
  1412  0F25                     	;# 
  1413  0F26                     	;# 
  1414  0F27                     	;# 
  1415  0F28                     	;# 
  1416  0F29                     	;# 
  1417  0F2A                     	;# 
  1418  0F2B                     	;# 
  1419  0F2C                     	;# 
  1420  0F2D                     	;# 
  1421  0F2E                     	;# 
  1422  0F2F                     	;# 
  1423  0F30                     	;# 
  1424  0F31                     	;# 
  1425  0F32                     	;# 
  1426  0F33                     	;# 
  1427  0F34                     	;# 
  1428  0F35                     	;# 
  1429  0F36                     	;# 
  1430  0F37                     	;# 
  1431  0FE4                     	;# 
  1432  0FE5                     	;# 
  1433  0FE6                     	;# 
  1434  0FE7                     	;# 
  1435  0FE8                     	;# 
  1436  0FE9                     	;# 
  1437  0FEA                     	;# 
  1438  0FEB                     	;# 
  1439  0FED                     	;# 
  1440  0FEE                     	;# 
  1441  0FEF                     	;# 
  1442  0000                     	;# 
  1443  0001                     	;# 
  1444  0002                     	;# 
  1445  0003                     	;# 
  1446  0004                     	;# 
  1447  0005                     	;# 
  1448  0006                     	;# 
  1449  0007                     	;# 
  1450  0008                     	;# 
  1451  0009                     	;# 
  1452  000A                     	;# 
  1453  000B                     	;# 
  1454  000C                     	;# 
  1455  000E                     	;# 
  1456  0010                     	;# 
  1457  0011                     	;# 
  1458  0012                     	;# 
  1459  0013                     	;# 
  1460  0014                     	;# 
  1461  0015                     	;# 
  1462  0015                     	;# 
  1463  0016                     	;# 
  1464  0016                     	;# 
  1465  0017                     	;# 
  1466  0018                     	;# 
  1467  0019                     	;# 
  1468  0019                     	;# 
  1469  001A                     	;# 
  1470  001B                     	;# 
  1471  001C                     	;# 
  1472  001D                     	;# 
  1473  001E                     	;# 
  1474  001F                     	;# 
  1475  008C                     	;# 
  1476  008E                     	;# 
  1477  0090                     	;# 
  1478  0091                     	;# 
  1479  0092                     	;# 
  1480  0093                     	;# 
  1481  0094                     	;# 
  1482  0097                     	;# 
  1483  009B                     	;# 
  1484  009B                     	;# 
  1485  009C                     	;# 
  1486  009D                     	;# 
  1487  009E                     	;# 
  1488  009F                     	;# 
  1489  010C                     	;# 
  1490  010E                     	;# 
  1491  0111                     	;# 
  1492  0112                     	;# 
  1493  0113                     	;# 
  1494  0114                     	;# 
  1495  0115                     	;# 
  1496  0116                     	;# 
  1497  0117                     	;# 
  1498  0118                     	;# 
  1499  0119                     	;# 
  1500  018C                     	;# 
  1501  018E                     	;# 
  1502  0197                     	;# 
  1503  0199                     	;# 
  1504  0199                     	;# 
  1505  0199                     	;# 
  1506  019A                     	;# 
  1507  019A                     	;# 
  1508  019A                     	;# 
  1509  019B                     	;# 
  1510  019B                     	;# 
  1511  019B                     	;# 
  1512  019B                     	;# 
  1513  019B                     	;# 
  1514  019C                     	;# 
  1515  019C                     	;# 
  1516  019C                     	;# 
  1517  019D                     	;# 
  1518  019D                     	;# 
  1519  019D                     	;# 
  1520  019E                     	;# 
  1521  019E                     	;# 
  1522  019E                     	;# 
  1523  019F                     	;# 
  1524  019F                     	;# 
  1525  019F                     	;# 
  1526  019F                     	;# 
  1527  019F                     	;# 
  1528  020C                     	;# 
  1529  020E                     	;# 
  1530  0211                     	;# 
  1531  0211                     	;# 
  1532  0212                     	;# 
  1533  0212                     	;# 
  1534  0213                     	;# 
  1535  0213                     	;# 
  1536  0214                     	;# 
  1537  0214                     	;# 
  1538  0215                     	;# 
  1539  0215                     	;# 
  1540  0215                     	;# 
  1541  0215                     	;# 
  1542  0216                     	;# 
  1543  0216                     	;# 
  1544  0217                     	;# 
  1545  0217                     	;# 
  1546  0219                     	;# 
  1547  021A                     	;# 
  1548  021B                     	;# 
  1549  021C                     	;# 
  1550  021D                     	;# 
  1551  021D                     	;# 
  1552  021E                     	;# 
  1553  021F                     	;# 
  1554  028C                     	;# 
  1555  028E                     	;# 
  1556  0291                     	;# 
  1557  0291                     	;# 
  1558  0292                     	;# 
  1559  0293                     	;# 
  1560  0294                     	;# 
  1561  0295                     	;# 
  1562  0295                     	;# 
  1563  0296                     	;# 
  1564  0297                     	;# 
  1565  0298                     	;# 
  1566  029F                     	;# 
  1567  030C                     	;# 
  1568  030E                     	;# 
  1569  0311                     	;# 
  1570  0311                     	;# 
  1571  0312                     	;# 
  1572  0313                     	;# 
  1573  0314                     	;# 
  1574  0315                     	;# 
  1575  0315                     	;# 
  1576  0316                     	;# 
  1577  0317                     	;# 
  1578  0318                     	;# 
  1579  038C                     	;# 
  1580  038E                     	;# 
  1581  0391                     	;# 
  1582  0392                     	;# 
  1583  0393                     	;# 
  1584  0397                     	;# 
  1585  0398                     	;# 
  1586  0399                     	;# 
  1587  039A                     	;# 
  1588  039C                     	;# 
  1589  039D                     	;# 
  1590  039E                     	;# 
  1591  039F                     	;# 
  1592  0411                     	;# 
  1593  0411                     	;# 
  1594  0412                     	;# 
  1595  0413                     	;# 
  1596  0414                     	;# 
  1597  0415                     	;# 
  1598  0416                     	;# 
  1599  0417                     	;# 
  1600  0418                     	;# 
  1601  0418                     	;# 
  1602  0419                     	;# 
  1603  041A                     	;# 
  1604  041B                     	;# 
  1605  041C                     	;# 
  1606  041D                     	;# 
  1607  041E                     	;# 
  1608  041F                     	;# 
  1609  0498                     	;# 
  1610  0498                     	;# 
  1611  0499                     	;# 
  1612  049A                     	;# 
  1613  049B                     	;# 
  1614  049B                     	;# 
  1615  049C                     	;# 
  1616  049D                     	;# 
  1617  049E                     	;# 
  1618  049F                     	;# 
  1619  0617                     	;# 
  1620  0618                     	;# 
  1621  0619                     	;# 
  1622  0619                     	;# 
  1623  061A                     	;# 
  1624  061B                     	;# 
  1625  061C                     	;# 
  1626  061C                     	;# 
  1627  061F                     	;# 
  1628  0691                     	;# 
  1629  0692                     	;# 
  1630  0693                     	;# 
  1631  0694                     	;# 
  1632  0695                     	;# 
  1633  0696                     	;# 
  1634  0697                     	;# 
  1635  0698                     	;# 
  1636  0699                     	;# 
  1637  0711                     	;# 
  1638  0712                     	;# 
  1639  0713                     	;# 
  1640  0714                     	;# 
  1641  0715                     	;# 
  1642  0716                     	;# 
  1643  0717                     	;# 
  1644  0718                     	;# 
  1645  0719                     	;# 
  1646  0891                     	;# 
  1647  0891                     	;# 
  1648  0891                     	;# 
  1649  0891                     	;# 
  1650  0891                     	;# 
  1651  0891                     	;# 
  1652  0892                     	;# 
  1653  0892                     	;# 
  1654  0892                     	;# 
  1655  0893                     	;# 
  1656  0893                     	;# 
  1657  0893                     	;# 
  1658  0893                     	;# 
  1659  0893                     	;# 
  1660  0893                     	;# 
  1661  0894                     	;# 
  1662  0894                     	;# 
  1663  0894                     	;# 
  1664  0895                     	;# 
  1665  0895                     	;# 
  1666  0895                     	;# 
  1667  0896                     	;# 
  1668  0896                     	;# 
  1669  0896                     	;# 
  1670  089B                     	;# 
  1671  0911                     	;# 
  1672  0912                     	;# 
  1673  0913                     	;# 
  1674  0914                     	;# 
  1675  0915                     	;# 
  1676  0916                     	;# 
  1677  0918                     	;# 
  1678  0919                     	;# 
  1679  091A                     	;# 
  1680  091B                     	;# 
  1681  091C                     	;# 
  1682  091D                     	;# 
  1683  091E                     	;# 
  1684  091F                     	;# 
  1685  0E0F                     	;# 
  1686  0E10                     	;# 
  1687  0E11                     	;# 
  1688  0E12                     	;# 
  1689  0E13                     	;# 
  1690  0E14                     	;# 
  1691  0E15                     	;# 
  1692  0E16                     	;# 
  1693  0E17                     	;# 
  1694  0E18                     	;# 
  1695  0E19                     	;# 
  1696  0E1A                     	;# 
  1697  0E1B                     	;# 
  1698  0E1C                     	;# 
  1699  0E1D                     	;# 
  1700  0E1E                     	;# 
  1701  0E1F                     	;# 
  1702  0E20                     	;# 
  1703  0E21                     	;# 
  1704  0E22                     	;# 
  1705  0E24                     	;# 
  1706  0E25                     	;# 
  1707  0E28                     	;# 
  1708  0E29                     	;# 
  1709  0E2A                     	;# 
  1710  0E2B                     	;# 
  1711  0E2C                     	;# 
  1712  0E2D                     	;# 
  1713  0E2E                     	;# 
  1714  0E2F                     	;# 
  1715  0E90                     	;# 
  1716  0E91                     	;# 
  1717  0E92                     	;# 
  1718  0E94                     	;# 
  1719  0E95                     	;# 
  1720  0EA0                     	;# 
  1721  0EA1                     	;# 
  1722  0EA2                     	;# 
  1723  0EA3                     	;# 
  1724  0EA4                     	;# 
  1725  0EA5                     	;# 
  1726  0F0F                     	;# 
  1727  0F10                     	;# 
  1728  0F11                     	;# 
  1729  0F12                     	;# 
  1730  0F13                     	;# 
  1731  0F14                     	;# 
  1732  0F15                     	;# 
  1733  0F16                     	;# 
  1734  0F17                     	;# 
  1735  0F18                     	;# 
  1736  0F19                     	;# 
  1737  0F1A                     	;# 
  1738  0F1B                     	;# 
  1739  0F1C                     	;# 
  1740  0F1D                     	;# 
  1741  0F1E                     	;# 
  1742  0F1F                     	;# 
  1743  0F20                     	;# 
  1744  0F21                     	;# 
  1745  0F22                     	;# 
  1746  0F23                     	;# 
  1747  0F24                     	;# 
  1748  0F25                     	;# 
  1749  0F26                     	;# 
  1750  0F27                     	;# 
  1751  0F28                     	;# 
  1752  0F29                     	;# 
  1753  0F2A                     	;# 
  1754  0F2B                     	;# 
  1755  0F2C                     	;# 
  1756  0F2D                     	;# 
  1757  0F2E                     	;# 
  1758  0F2F                     	;# 
  1759  0F30                     	;# 
  1760  0F31                     	;# 
  1761  0F32                     	;# 
  1762  0F33                     	;# 
  1763  0F34                     	;# 
  1764  0F35                     	;# 
  1765  0F36                     	;# 
  1766  0F37                     	;# 
  1767  0FE4                     	;# 
  1768  0FE5                     	;# 
  1769  0FE6                     	;# 
  1770  0FE7                     	;# 
  1771  0FE8                     	;# 
  1772  0FE9                     	;# 
  1773  0FEA                     	;# 
  1774  0FEB                     	;# 
  1775  0FED                     	;# 
  1776  0FEE                     	;# 
  1777  0FEF                     	;# 
  1778  0000                     	;# 
  1779  0001                     	;# 
  1780  0002                     	;# 
  1781  0003                     	;# 
  1782  0004                     	;# 
  1783  0005                     	;# 
  1784  0006                     	;# 
  1785  0007                     	;# 
  1786  0008                     	;# 
  1787  0009                     	;# 
  1788  000A                     	;# 
  1789  000B                     	;# 
  1790  000C                     	;# 
  1791  000E                     	;# 
  1792  0010                     	;# 
  1793  0011                     	;# 
  1794  0012                     	;# 
  1795  0013                     	;# 
  1796  0014                     	;# 
  1797  0015                     	;# 
  1798  0015                     	;# 
  1799  0016                     	;# 
  1800  0016                     	;# 
  1801  0017                     	;# 
  1802  0018                     	;# 
  1803  0019                     	;# 
  1804  0019                     	;# 
  1805  001A                     	;# 
  1806  001B                     	;# 
  1807  001C                     	;# 
  1808  001D                     	;# 
  1809  001E                     	;# 
  1810  001F                     	;# 
  1811  008C                     	;# 
  1812  008E                     	;# 
  1813  0090                     	;# 
  1814  0091                     	;# 
  1815  0092                     	;# 
  1816  0093                     	;# 
  1817  0094                     	;# 
  1818  0097                     	;# 
  1819  009B                     	;# 
  1820  009B                     	;# 
  1821  009C                     	;# 
  1822  009D                     	;# 
  1823  009E                     	;# 
  1824  009F                     	;# 
  1825  010C                     	;# 
  1826  010E                     	;# 
  1827  0111                     	;# 
  1828  0112                     	;# 
  1829  0113                     	;# 
  1830  0114                     	;# 
  1831  0115                     	;# 
  1832  0116                     	;# 
  1833  0117                     	;# 
  1834  0118                     	;# 
  1835  0119                     	;# 
  1836  018C                     	;# 
  1837  018E                     	;# 
  1838  0197                     	;# 
  1839  0199                     	;# 
  1840  0199                     	;# 
  1841  0199                     	;# 
  1842  019A                     	;# 
  1843  019A                     	;# 
  1844  019A                     	;# 
  1845  019B                     	;# 
  1846  019B                     	;# 
  1847  019B                     	;# 
  1848  019B                     	;# 
  1849  019B                     	;# 
  1850  019C                     	;# 
  1851  019C                     	;# 
  1852  019C                     	;# 
  1853  019D                     	;# 
  1854  019D                     	;# 
  1855  019D                     	;# 
  1856  019E                     	;# 
  1857  019E                     	;# 
  1858  019E                     	;# 
  1859  019F                     	;# 
  1860  019F                     	;# 
  1861  019F                     	;# 
  1862  019F                     	;# 
  1863  019F                     	;# 
  1864  020C                     	;# 
  1865  020E                     	;# 
  1866  0211                     	;# 
  1867  0211                     	;# 
  1868  0212                     	;# 
  1869  0212                     	;# 
  1870  0213                     	;# 
  1871  0213                     	;# 
  1872  0214                     	;# 
  1873  0214                     	;# 
  1874  0215                     	;# 
  1875  0215                     	;# 
  1876  0215                     	;# 
  1877  0215                     	;# 
  1878  0216                     	;# 
  1879  0216                     	;# 
  1880  0217                     	;# 
  1881  0217                     	;# 
  1882  0219                     	;# 
  1883  021A                     	;# 
  1884  021B                     	;# 
  1885  021C                     	;# 
  1886  021D                     	;# 
  1887  021D                     	;# 
  1888  021E                     	;# 
  1889  021F                     	;# 
  1890  028C                     	;# 
  1891  028E                     	;# 
  1892  0291                     	;# 
  1893  0291                     	;# 
  1894  0292                     	;# 
  1895  0293                     	;# 
  1896  0294                     	;# 
  1897  0295                     	;# 
  1898  0295                     	;# 
  1899  0296                     	;# 
  1900  0297                     	;# 
  1901  0298                     	;# 
  1902  029F                     	;# 
  1903  030C                     	;# 
  1904  030E                     	;# 
  1905  0311                     	;# 
  1906  0311                     	;# 
  1907  0312                     	;# 
  1908  0313                     	;# 
  1909  0314                     	;# 
  1910  0315                     	;# 
  1911  0315                     	;# 
  1912  0316                     	;# 
  1913  0317                     	;# 
  1914  0318                     	;# 
  1915  038C                     	;# 
  1916  038E                     	;# 
  1917  0391                     	;# 
  1918  0392                     	;# 
  1919  0393                     	;# 
  1920  0397                     	;# 
  1921  0398                     	;# 
  1922  0399                     	;# 
  1923  039A                     	;# 
  1924  039C                     	;# 
  1925  039D                     	;# 
  1926  039E                     	;# 
  1927  039F                     	;# 
  1928  0411                     	;# 
  1929  0411                     	;# 
  1930  0412                     	;# 
  1931  0413                     	;# 
  1932  0414                     	;# 
  1933  0415                     	;# 
  1934  0416                     	;# 
  1935  0417                     	;# 
  1936  0418                     	;# 
  1937  0418                     	;# 
  1938  0419                     	;# 
  1939  041A                     	;# 
  1940  041B                     	;# 
  1941  041C                     	;# 
  1942  041D                     	;# 
  1943  041E                     	;# 
  1944  041F                     	;# 
  1945  0498                     	;# 
  1946  0498                     	;# 
  1947  0499                     	;# 
  1948  049A                     	;# 
  1949  049B                     	;# 
  1950  049B                     	;# 
  1951  049C                     	;# 
  1952  049D                     	;# 
  1953  049E                     	;# 
  1954  049F                     	;# 
  1955  0617                     	;# 
  1956  0618                     	;# 
  1957  0619                     	;# 
  1958  0619                     	;# 
  1959  061A                     	;# 
  1960  061B                     	;# 
  1961  061C                     	;# 
  1962  061C                     	;# 
  1963  061F                     	;# 
  1964  0691                     	;# 
  1965  0692                     	;# 
  1966  0693                     	;# 
  1967  0694                     	;# 
  1968  0695                     	;# 
  1969  0696                     	;# 
  1970  0697                     	;# 
  1971  0698                     	;# 
  1972  0699                     	;# 
  1973  0711                     	;# 
  1974  0712                     	;# 
  1975  0713                     	;# 
  1976  0714                     	;# 
  1977  0715                     	;# 
  1978  0716                     	;# 
  1979  0717                     	;# 
  1980  0718                     	;# 
  1981  0719                     	;# 
  1982  0891                     	;# 
  1983  0891                     	;# 
  1984  0891                     	;# 
  1985  0891                     	;# 
  1986  0891                     	;# 
  1987  0891                     	;# 
  1988  0892                     	;# 
  1989  0892                     	;# 
  1990  0892                     	;# 
  1991  0893                     	;# 
  1992  0893                     	;# 
  1993  0893                     	;# 
  1994  0893                     	;# 
  1995  0893                     	;# 
  1996  0893                     	;# 
  1997  0894                     	;# 
  1998  0894                     	;# 
  1999  0894                     	;# 
  2000  0895                     	;# 
  2001  0895                     	;# 
  2002  0895                     	;# 
  2003  0896                     	;# 
  2004  0896                     	;# 
  2005  0896                     	;# 
  2006  089B                     	;# 
  2007  0911                     	;# 
  2008  0912                     	;# 
  2009  0913                     	;# 
  2010  0914                     	;# 
  2011  0915                     	;# 
  2012  0916                     	;# 
  2013  0918                     	;# 
  2014  0919                     	;# 
  2015  091A                     	;# 
  2016  091B                     	;# 
  2017  091C                     	;# 
  2018  091D                     	;# 
  2019  091E                     	;# 
  2020  091F                     	;# 
  2021  0E0F                     	;# 
  2022  0E10                     	;# 
  2023  0E11                     	;# 
  2024  0E12                     	;# 
  2025  0E13                     	;# 
  2026  0E14                     	;# 
  2027  0E15                     	;# 
  2028  0E16                     	;# 
  2029  0E17                     	;# 
  2030  0E18                     	;# 
  2031  0E19                     	;# 
  2032  0E1A                     	;# 
  2033  0E1B                     	;# 
  2034  0E1C                     	;# 
  2035  0E1D                     	;# 
  2036  0E1E                     	;# 
  2037  0E1F                     	;# 
  2038  0E20                     	;# 
  2039  0E21                     	;# 
  2040  0E22                     	;# 
  2041  0E24                     	;# 
  2042  0E25                     	;# 
  2043  0E28                     	;# 
  2044  0E29                     	;# 
  2045  0E2A                     	;# 
  2046  0E2B                     	;# 
  2047  0E2C                     	;# 
  2048  0E2D                     	;# 
  2049  0E2E                     	;# 
  2050  0E2F                     	;# 
  2051  0E90                     	;# 
  2052  0E91                     	;# 
  2053  0E92                     	;# 
  2054  0E94                     	;# 
  2055  0E95                     	;# 
  2056  0EA0                     	;# 
  2057  0EA1                     	;# 
  2058  0EA2                     	;# 
  2059  0EA3                     	;# 
  2060  0EA4                     	;# 
  2061  0EA5                     	;# 
  2062  0F0F                     	;# 
  2063  0F10                     	;# 
  2064  0F11                     	;# 
  2065  0F12                     	;# 
  2066  0F13                     	;# 
  2067  0F14                     	;# 
  2068  0F15                     	;# 
  2069  0F16                     	;# 
  2070  0F17                     	;# 
  2071  0F18                     	;# 
  2072  0F19                     	;# 
  2073  0F1A                     	;# 
  2074  0F1B                     	;# 
  2075  0F1C                     	;# 
  2076  0F1D                     	;# 
  2077  0F1E                     	;# 
  2078  0F1F                     	;# 
  2079  0F20                     	;# 
  2080  0F21                     	;# 
  2081  0F22                     	;# 
  2082  0F23                     	;# 
  2083  0F24                     	;# 
  2084  0F25                     	;# 
  2085  0F26                     	;# 
  2086  0F27                     	;# 
  2087  0F28                     	;# 
  2088  0F29                     	;# 
  2089  0F2A                     	;# 
  2090  0F2B                     	;# 
  2091  0F2C                     	;# 
  2092  0F2D                     	;# 
  2093  0F2E                     	;# 
  2094  0F2F                     	;# 
  2095  0F30                     	;# 
  2096  0F31                     	;# 
  2097  0F32                     	;# 
  2098  0F33                     	;# 
  2099  0F34                     	;# 
  2100  0F35                     	;# 
  2101  0F36                     	;# 
  2102  0F37                     	;# 
  2103  0FE4                     	;# 
  2104  0FE5                     	;# 
  2105  0FE6                     	;# 
  2106  0FE7                     	;# 
  2107  0FE8                     	;# 
  2108  0FE9                     	;# 
  2109  0FEA                     	;# 
  2110  0FEB                     	;# 
  2111  0FED                     	;# 
  2112  0FEE                     	;# 
  2113  0FEF                     	;# 
  2114  0000                     	;# 
  2115  0001                     	;# 
  2116  0002                     	;# 
  2117  0003                     	;# 
  2118  0004                     	;# 
  2119  0005                     	;# 
  2120  0006                     	;# 
  2121  0007                     	;# 
  2122  0008                     	;# 
  2123  0009                     	;# 
  2124  000A                     	;# 
  2125  000B                     	;# 
  2126  000C                     	;# 
  2127  000E                     	;# 
  2128  0010                     	;# 
  2129  0011                     	;# 
  2130  0012                     	;# 
  2131  0013                     	;# 
  2132  0014                     	;# 
  2133  0015                     	;# 
  2134  0015                     	;# 
  2135  0016                     	;# 
  2136  0016                     	;# 
  2137  0017                     	;# 
  2138  0018                     	;# 
  2139  0019                     	;# 
  2140  0019                     	;# 
  2141  001A                     	;# 
  2142  001B                     	;# 
  2143  001C                     	;# 
  2144  001D                     	;# 
  2145  001E                     	;# 
  2146  001F                     	;# 
  2147  008C                     	;# 
  2148  008E                     	;# 
  2149  0090                     	;# 
  2150  0091                     	;# 
  2151  0092                     	;# 
  2152  0093                     	;# 
  2153  0094                     	;# 
  2154  0097                     	;# 
  2155  009B                     	;# 
  2156  009B                     	;# 
  2157  009C                     	;# 
  2158  009D                     	;# 
  2159  009E                     	;# 
  2160  009F                     	;# 
  2161  010C                     	;# 
  2162  010E                     	;# 
  2163  0111                     	;# 
  2164  0112                     	;# 
  2165  0113                     	;# 
  2166  0114                     	;# 
  2167  0115                     	;# 
  2168  0116                     	;# 
  2169  0117                     	;# 
  2170  0118                     	;# 
  2171  0119                     	;# 
  2172  018C                     	;# 
  2173  018E                     	;# 
  2174  0197                     	;# 
  2175  0199                     	;# 
  2176  0199                     	;# 
  2177  0199                     	;# 
  2178  019A                     	;# 
  2179  019A                     	;# 
  2180  019A                     	;# 
  2181  019B                     	;# 
  2182  019B                     	;# 
  2183  019B                     	;# 
  2184  019B                     	;# 
  2185  019B                     	;# 
  2186  019C                     	;# 
  2187  019C                     	;# 
  2188  019C                     	;# 
  2189  019D                     	;# 
  2190  019D                     	;# 
  2191  019D                     	;# 
  2192  019E                     	;# 
  2193  019E                     	;# 
  2194  019E                     	;# 
  2195  019F                     	;# 
  2196  019F                     	;# 
  2197  019F                     	;# 
  2198  019F                     	;# 
  2199  019F                     	;# 
  2200  020C                     	;# 
  2201  020E                     	;# 
  2202  0211                     	;# 
  2203  0211                     	;# 
  2204  0212                     	;# 
  2205  0212                     	;# 
  2206  0213                     	;# 
  2207  0213                     	;# 
  2208  0214                     	;# 
  2209  0214                     	;# 
  2210  0215                     	;# 
  2211  0215                     	;# 
  2212  0215                     	;# 
  2213  0215                     	;# 
  2214  0216                     	;# 
  2215  0216                     	;# 
  2216  0217                     	;# 
  2217  0217                     	;# 
  2218  0219                     	;# 
  2219  021A                     	;# 
  2220  021B                     	;# 
  2221  021C                     	;# 
  2222  021D                     	;# 
  2223  021D                     	;# 
  2224  021E                     	;# 
  2225  021F                     	;# 
  2226  028C                     	;# 
  2227  028E                     	;# 
  2228  0291                     	;# 
  2229  0291                     	;# 
  2230  0292                     	;# 
  2231  0293                     	;# 
  2232  0294                     	;# 
  2233  0295                     	;# 
  2234  0295                     	;# 
  2235  0296                     	;# 
  2236  0297                     	;# 
  2237  0298                     	;# 
  2238  029F                     	;# 
  2239  030C                     	;# 
  2240  030E                     	;# 
  2241  0311                     	;# 
  2242  0311                     	;# 
  2243  0312                     	;# 
  2244  0313                     	;# 
  2245  0314                     	;# 
  2246  0315                     	;# 
  2247  0315                     	;# 
  2248  0316                     	;# 
  2249  0317                     	;# 
  2250  0318                     	;# 
  2251  038C                     	;# 
  2252  038E                     	;# 
  2253  0391                     	;# 
  2254  0392                     	;# 
  2255  0393                     	;# 
  2256  0397                     	;# 
  2257  0398                     	;# 
  2258  0399                     	;# 
  2259  039A                     	;# 
  2260  039C                     	;# 
  2261  039D                     	;# 
  2262  039E                     	;# 
  2263  039F                     	;# 
  2264  0411                     	;# 
  2265  0411                     	;# 
  2266  0412                     	;# 
  2267  0413                     	;# 
  2268  0414                     	;# 
  2269  0415                     	;# 
  2270  0416                     	;# 
  2271  0417                     	;# 
  2272  0418                     	;# 
  2273  0418                     	;# 
  2274  0419                     	;# 
  2275  041A                     	;# 
  2276  041B                     	;# 
  2277  041C                     	;# 
  2278  041D                     	;# 
  2279  041E                     	;# 
  2280  041F                     	;# 
  2281  0498                     	;# 
  2282  0498                     	;# 
  2283  0499                     	;# 
  2284  049A                     	;# 
  2285  049B                     	;# 
  2286  049B                     	;# 
  2287  049C                     	;# 
  2288  049D                     	;# 
  2289  049E                     	;# 
  2290  049F                     	;# 
  2291  0617                     	;# 
  2292  0618                     	;# 
  2293  0619                     	;# 
  2294  0619                     	;# 
  2295  061A                     	;# 
  2296  061B                     	;# 
  2297  061C                     	;# 
  2298  061C                     	;# 
  2299  061F                     	;# 
  2300  0691                     	;# 
  2301  0692                     	;# 
  2302  0693                     	;# 
  2303  0694                     	;# 
  2304  0695                     	;# 
  2305  0696                     	;# 
  2306  0697                     	;# 
  2307  0698                     	;# 
  2308  0699                     	;# 
  2309  0711                     	;# 
  2310  0712                     	;# 
  2311  0713                     	;# 
  2312  0714                     	;# 
  2313  0715                     	;# 
  2314  0716                     	;# 
  2315  0717                     	;# 
  2316  0718                     	;# 
  2317  0719                     	;# 
  2318  0891                     	;# 
  2319  0891                     	;# 
  2320  0891                     	;# 
  2321  0891                     	;# 
  2322  0891                     	;# 
  2323  0891                     	;# 
  2324  0892                     	;# 
  2325  0892                     	;# 
  2326  0892                     	;# 
  2327  0893                     	;# 
  2328  0893                     	;# 
  2329  0893                     	;# 
  2330  0893                     	;# 
  2331  0893                     	;# 
  2332  0893                     	;# 
  2333  0894                     	;# 
  2334  0894                     	;# 
  2335  0894                     	;# 
  2336  0895                     	;# 
  2337  0895                     	;# 
  2338  0895                     	;# 
  2339  0896                     	;# 
  2340  0896                     	;# 
  2341  0896                     	;# 
  2342  089B                     	;# 
  2343  0911                     	;# 
  2344  0912                     	;# 
  2345  0913                     	;# 
  2346  0914                     	;# 
  2347  0915                     	;# 
  2348  0916                     	;# 
  2349  0918                     	;# 
  2350  0919                     	;# 
  2351  091A                     	;# 
  2352  091B                     	;# 
  2353  091C                     	;# 
  2354  091D                     	;# 
  2355  091E                     	;# 
  2356  091F                     	;# 
  2357  0E0F                     	;# 
  2358  0E10                     	;# 
  2359  0E11                     	;# 
  2360  0E12                     	;# 
  2361  0E13                     	;# 
  2362  0E14                     	;# 
  2363  0E15                     	;# 
  2364  0E16                     	;# 
  2365  0E17                     	;# 
  2366  0E18                     	;# 
  2367  0E19                     	;# 
  2368  0E1A                     	;# 
  2369  0E1B                     	;# 
  2370  0E1C                     	;# 
  2371  0E1D                     	;# 
  2372  0E1E                     	;# 
  2373  0E1F                     	;# 
  2374  0E20                     	;# 
  2375  0E21                     	;# 
  2376  0E22                     	;# 
  2377  0E24                     	;# 
  2378  0E25                     	;# 
  2379  0E28                     	;# 
  2380  0E29                     	;# 
  2381  0E2A                     	;# 
  2382  0E2B                     	;# 
  2383  0E2C                     	;# 
  2384  0E2D                     	;# 
  2385  0E2E                     	;# 
  2386  0E2F                     	;# 
  2387  0E90                     	;# 
  2388  0E91                     	;# 
  2389  0E92                     	;# 
  2390  0E94                     	;# 
  2391  0E95                     	;# 
  2392  0EA0                     	;# 
  2393  0EA1                     	;# 
  2394  0EA2                     	;# 
  2395  0EA3                     	;# 
  2396  0EA4                     	;# 
  2397  0EA5                     	;# 
  2398  0F0F                     	;# 
  2399  0F10                     	;# 
  2400  0F11                     	;# 
  2401  0F12                     	;# 
  2402  0F13                     	;# 
  2403  0F14                     	;# 
  2404  0F15                     	;# 
  2405  0F16                     	;# 
  2406  0F17                     	;# 
  2407  0F18                     	;# 
  2408  0F19                     	;# 
  2409  0F1A                     	;# 
  2410  0F1B                     	;# 
  2411  0F1C                     	;# 
  2412  0F1D                     	;# 
  2413  0F1E                     	;# 
  2414  0F1F                     	;# 
  2415  0F20                     	;# 
  2416  0F21                     	;# 
  2417  0F22                     	;# 
  2418  0F23                     	;# 
  2419  0F24                     	;# 
  2420  0F25                     	;# 
  2421  0F26                     	;# 
  2422  0F27                     	;# 
  2423  0F28                     	;# 
  2424  0F29                     	;# 
  2425  0F2A                     	;# 
  2426  0F2B                     	;# 
  2427  0F2C                     	;# 
  2428  0F2D                     	;# 
  2429  0F2E                     	;# 
  2430  0F2F                     	;# 
  2431  0F30                     	;# 
  2432  0F31                     	;# 
  2433  0F32                     	;# 
  2434  0F33                     	;# 
  2435  0F34                     	;# 
  2436  0F35                     	;# 
  2437  0F36                     	;# 
  2438  0F37                     	;# 
  2439  0FE4                     	;# 
  2440  0FE5                     	;# 
  2441  0FE6                     	;# 
  2442  0FE7                     	;# 
  2443  0FE8                     	;# 
  2444  0FE9                     	;# 
  2445  0FEA                     	;# 
  2446  0FEB                     	;# 
  2447  0FED                     	;# 
  2448  0FEE                     	;# 
  2449  0FEF                     	;# 
  2450  0000                     	;# 
  2451  0001                     	;# 
  2452  0002                     	;# 
  2453  0003                     	;# 
  2454  0004                     	;# 
  2455  0005                     	;# 
  2456  0006                     	;# 
  2457  0007                     	;# 
  2458  0008                     	;# 
  2459  0009                     	;# 
  2460  000A                     	;# 
  2461  000B                     	;# 
  2462  000C                     	;# 
  2463  000E                     	;# 
  2464  0010                     	;# 
  2465  0011                     	;# 
  2466  0012                     	;# 
  2467  0013                     	;# 
  2468  0014                     	;# 
  2469  0015                     	;# 
  2470  0015                     	;# 
  2471  0016                     	;# 
  2472  0016                     	;# 
  2473  0017                     	;# 
  2474  0018                     	;# 
  2475  0019                     	;# 
  2476  0019                     	;# 
  2477  001A                     	;# 
  2478  001B                     	;# 
  2479  001C                     	;# 
  2480  001D                     	;# 
  2481  001E                     	;# 
  2482  001F                     	;# 
  2483  008C                     	;# 
  2484  008E                     	;# 
  2485  0090                     	;# 
  2486  0091                     	;# 
  2487  0092                     	;# 
  2488  0093                     	;# 
  2489  0094                     	;# 
  2490  0097                     	;# 
  2491  009B                     	;# 
  2492  009B                     	;# 
  2493  009C                     	;# 
  2494  009D                     	;# 
  2495  009E                     	;# 
  2496  009F                     	;# 
  2497  010C                     	;# 
  2498  010E                     	;# 
  2499  0111                     	;# 
  2500  0112                     	;# 
  2501  0113                     	;# 
  2502  0114                     	;# 
  2503  0115                     	;# 
  2504  0116                     	;# 
  2505  0117                     	;# 
  2506  0118                     	;# 
  2507  0119                     	;# 
  2508  018C                     	;# 
  2509  018E                     	;# 
  2510  0197                     	;# 
  2511  0199                     	;# 
  2512  0199                     	;# 
  2513  0199                     	;# 
  2514  019A                     	;# 
  2515  019A                     	;# 
  2516  019A                     	;# 
  2517  019B                     	;# 
  2518  019B                     	;# 
  2519  019B                     	;# 
  2520  019B                     	;# 
  2521  019B                     	;# 
  2522  019C                     	;# 
  2523  019C                     	;# 
  2524  019C                     	;# 
  2525  019D                     	;# 
  2526  019D                     	;# 
  2527  019D                     	;# 
  2528  019E                     	;# 
  2529  019E                     	;# 
  2530  019E                     	;# 
  2531  019F                     	;# 
  2532  019F                     	;# 
  2533  019F                     	;# 
  2534  019F                     	;# 
  2535  019F                     	;# 
  2536  020C                     	;# 
  2537  020E                     	;# 
  2538  0211                     	;# 
  2539  0211                     	;# 
  2540  0212                     	;# 
  2541  0212                     	;# 
  2542  0213                     	;# 
  2543  0213                     	;# 
  2544  0214                     	;# 
  2545  0214                     	;# 
  2546  0215                     	;# 
  2547  0215                     	;# 
  2548  0215                     	;# 
  2549  0215                     	;# 
  2550  0216                     	;# 
  2551  0216                     	;# 
  2552  0217                     	;# 
  2553  0217                     	;# 
  2554  0219                     	;# 
  2555  021A                     	;# 
  2556  021B                     	;# 
  2557  021C                     	;# 
  2558  021D                     	;# 
  2559  021D                     	;# 
  2560  021E                     	;# 
  2561  021F                     	;# 
  2562  028C                     	;# 
  2563  028E                     	;# 
  2564  0291                     	;# 
  2565  0291                     	;# 
  2566  0292                     	;# 
  2567  0293                     	;# 
  2568  0294                     	;# 
  2569  0295                     	;# 
  2570  0295                     	;# 
  2571  0296                     	;# 
  2572  0297                     	;# 
  2573  0298                     	;# 
  2574  029F                     	;# 
  2575  030C                     	;# 
  2576  030E                     	;# 
  2577  0311                     	;# 
  2578  0311                     	;# 
  2579  0312                     	;# 
  2580  0313                     	;# 
  2581  0314                     	;# 
  2582  0315                     	;# 
  2583  0315                     	;# 
  2584  0316                     	;# 
  2585  0317                     	;# 
  2586  0318                     	;# 
  2587  038C                     	;# 
  2588  038E                     	;# 
  2589  0391                     	;# 
  2590  0392                     	;# 
  2591  0393                     	;# 
  2592  0397                     	;# 
  2593  0398                     	;# 
  2594  0399                     	;# 
  2595  039A                     	;# 
  2596  039C                     	;# 
  2597  039D                     	;# 
  2598  039E                     	;# 
  2599  039F                     	;# 
  2600  0411                     	;# 
  2601  0411                     	;# 
  2602  0412                     	;# 
  2603  0413                     	;# 
  2604  0414                     	;# 
  2605  0415                     	;# 
  2606  0416                     	;# 
  2607  0417                     	;# 
  2608  0418                     	;# 
  2609  0418                     	;# 
  2610  0419                     	;# 
  2611  041A                     	;# 
  2612  041B                     	;# 
  2613  041C                     	;# 
  2614  041D                     	;# 
  2615  041E                     	;# 
  2616  041F                     	;# 
  2617  0498                     	;# 
  2618  0498                     	;# 
  2619  0499                     	;# 
  2620  049A                     	;# 
  2621  049B                     	;# 
  2622  049B                     	;# 
  2623  049C                     	;# 
  2624  049D                     	;# 
  2625  049E                     	;# 
  2626  049F                     	;# 
  2627  0617                     	;# 
  2628  0618                     	;# 
  2629  0619                     	;# 
  2630  0619                     	;# 
  2631  061A                     	;# 
  2632  061B                     	;# 
  2633  061C                     	;# 
  2634  061C                     	;# 
  2635  061F                     	;# 
  2636  0691                     	;# 
  2637  0692                     	;# 
  2638  0693                     	;# 
  2639  0694                     	;# 
  2640  0695                     	;# 
  2641  0696                     	;# 
  2642  0697                     	;# 
  2643  0698                     	;# 
  2644  0699                     	;# 
  2645  0711                     	;# 
  2646  0712                     	;# 
  2647  0713                     	;# 
  2648  0714                     	;# 
  2649  0715                     	;# 
  2650  0716                     	;# 
  2651  0717                     	;# 
  2652  0718                     	;# 
  2653  0719                     	;# 
  2654  0891                     	;# 
  2655  0891                     	;# 
  2656  0891                     	;# 
  2657  0891                     	;# 
  2658  0891                     	;# 
  2659  0891                     	;# 
  2660  0892                     	;# 
  2661  0892                     	;# 
  2662  0892                     	;# 
  2663  0893                     	;# 
  2664  0893                     	;# 
  2665  0893                     	;# 
  2666  0893                     	;# 
  2667  0893                     	;# 
  2668  0893                     	;# 
  2669  0894                     	;# 
  2670  0894                     	;# 
  2671  0894                     	;# 
  2672  0895                     	;# 
  2673  0895                     	;# 
  2674  0895                     	;# 
  2675  0896                     	;# 
  2676  0896                     	;# 
  2677  0896                     	;# 
  2678  089B                     	;# 
  2679  0911                     	;# 
  2680  0912                     	;# 
  2681  0913                     	;# 
  2682  0914                     	;# 
  2683  0915                     	;# 
  2684  0916                     	;# 
  2685  0918                     	;# 
  2686  0919                     	;# 
  2687  091A                     	;# 
  2688  091B                     	;# 
  2689  091C                     	;# 
  2690  091D                     	;# 
  2691  091E                     	;# 
  2692  091F                     	;# 
  2693  0E0F                     	;# 
  2694  0E10                     	;# 
  2695  0E11                     	;# 
  2696  0E12                     	;# 
  2697  0E13                     	;# 
  2698  0E14                     	;# 
  2699  0E15                     	;# 
  2700  0E16                     	;# 
  2701  0E17                     	;# 
  2702  0E18                     	;# 
  2703  0E19                     	;# 
  2704  0E1A                     	;# 
  2705  0E1B                     	;# 
  2706  0E1C                     	;# 
  2707  0E1D                     	;# 
  2708  0E1E                     	;# 
  2709  0E1F                     	;# 
  2710  0E20                     	;# 
  2711  0E21                     	;# 
  2712  0E22                     	;# 
  2713  0E24                     	;# 
  2714  0E25                     	;# 
  2715  0E28                     	;# 
  2716  0E29                     	;# 
  2717  0E2A                     	;# 
  2718  0E2B                     	;# 
  2719  0E2C                     	;# 
  2720  0E2D                     	;# 
  2721  0E2E                     	;# 
  2722  0E2F                     	;# 
  2723  0E90                     	;# 
  2724  0E91                     	;# 
  2725  0E92                     	;# 
  2726  0E94                     	;# 
  2727  0E95                     	;# 
  2728  0EA0                     	;# 
  2729  0EA1                     	;# 
  2730  0EA2                     	;# 
  2731  0EA3                     	;# 
  2732  0EA4                     	;# 
  2733  0EA5                     	;# 
  2734  0F0F                     	;# 
  2735  0F10                     	;# 
  2736  0F11                     	;# 
  2737  0F12                     	;# 
  2738  0F13                     	;# 
  2739  0F14                     	;# 
  2740  0F15                     	;# 
  2741  0F16                     	;# 
  2742  0F17                     	;# 
  2743  0F18                     	;# 
  2744  0F19                     	;# 
  2745  0F1A                     	;# 
  2746  0F1B                     	;# 
  2747  0F1C                     	;# 
  2748  0F1D                     	;# 
  2749  0F1E                     	;# 
  2750  0F1F                     	;# 
  2751  0F20                     	;# 
  2752  0F21                     	;# 
  2753  0F22                     	;# 
  2754  0F23                     	;# 
  2755  0F24                     	;# 
  2756  0F25                     	;# 
  2757  0F26                     	;# 
  2758  0F27                     	;# 
  2759  0F28                     	;# 
  2760  0F29                     	;# 
  2761  0F2A                     	;# 
  2762  0F2B                     	;# 
  2763  0F2C                     	;# 
  2764  0F2D                     	;# 
  2765  0F2E                     	;# 
  2766  0F2F                     	;# 
  2767  0F30                     	;# 
  2768  0F31                     	;# 
  2769  0F32                     	;# 
  2770  0F33                     	;# 
  2771  0F34                     	;# 
  2772  0F35                     	;# 
  2773  0F36                     	;# 
  2774  0F37                     	;# 
  2775  0FE4                     	;# 
  2776  0FE5                     	;# 
  2777  0FE6                     	;# 
  2778  0FE7                     	;# 
  2779  0FE8                     	;# 
  2780  0FE9                     	;# 
  2781  0FEA                     	;# 
  2782  0FEB                     	;# 
  2783  0FED                     	;# 
  2784  0FEE                     	;# 
  2785  0FEF                     	;# 
  2786  0000                     	;# 
  2787  0001                     	;# 
  2788  0002                     	;# 
  2789  0003                     	;# 
  2790  0004                     	;# 
  2791  0005                     	;# 
  2792  0006                     	;# 
  2793  0007                     	;# 
  2794  0008                     	;# 
  2795  0009                     	;# 
  2796  000A                     	;# 
  2797  000B                     	;# 
  2798  000C                     	;# 
  2799  000E                     	;# 
  2800  0010                     	;# 
  2801  0011                     	;# 
  2802  0012                     	;# 
  2803  0013                     	;# 
  2804  0014                     	;# 
  2805  0015                     	;# 
  2806  0015                     	;# 
  2807  0016                     	;# 
  2808  0016                     	;# 
  2809  0017                     	;# 
  2810  0018                     	;# 
  2811  0019                     	;# 
  2812  0019                     	;# 
  2813  001A                     	;# 
  2814  001B                     	;# 
  2815  001C                     	;# 
  2816  001D                     	;# 
  2817  001E                     	;# 
  2818  001F                     	;# 
  2819  008C                     	;# 
  2820  008E                     	;# 
  2821  0090                     	;# 
  2822  0091                     	;# 
  2823  0092                     	;# 
  2824  0093                     	;# 
  2825  0094                     	;# 
  2826  0097                     	;# 
  2827  009B                     	;# 
  2828  009B                     	;# 
  2829  009C                     	;# 
  2830  009D                     	;# 
  2831  009E                     	;# 
  2832  009F                     	;# 
  2833  010C                     	;# 
  2834  010E                     	;# 
  2835  0111                     	;# 
  2836  0112                     	;# 
  2837  0113                     	;# 
  2838  0114                     	;# 
  2839  0115                     	;# 
  2840  0116                     	;# 
  2841  0117                     	;# 
  2842  0118                     	;# 
  2843  0119                     	;# 
  2844  018C                     	;# 
  2845  018E                     	;# 
  2846  0197                     	;# 
  2847  0199                     	;# 
  2848  0199                     	;# 
  2849  0199                     	;# 
  2850  019A                     	;# 
  2851  019A                     	;# 
  2852  019A                     	;# 
  2853  019B                     	;# 
  2854  019B                     	;# 
  2855  019B                     	;# 
  2856  019B                     	;# 
  2857  019B                     	;# 
  2858  019C                     	;# 
  2859  019C                     	;# 
  2860  019C                     	;# 
  2861  019D                     	;# 
  2862  019D                     	;# 
  2863  019D                     	;# 
  2864  019E                     	;# 
  2865  019E                     	;# 
  2866  019E                     	;# 
  2867  019F                     	;# 
  2868  019F                     	;# 
  2869  019F                     	;# 
  2870  019F                     	;# 
  2871  019F                     	;# 
  2872  020C                     	;# 
  2873  020E                     	;# 
  2874  0211                     	;# 
  2875  0211                     	;# 
  2876  0212                     	;# 
  2877  0212                     	;# 
  2878  0213                     	;# 
  2879  0213                     	;# 
  2880  0214                     	;# 
  2881  0214                     	;# 
  2882  0215                     	;# 
  2883  0215                     	;# 
  2884  0215                     	;# 
  2885  0215                     	;# 
  2886  0216                     	;# 
  2887  0216                     	;# 
  2888  0217                     	;# 
  2889  0217                     	;# 
  2890  0219                     	;# 
  2891  021A                     	;# 
  2892  021B                     	;# 
  2893  021C                     	;# 
  2894  021D                     	;# 
  2895  021D                     	;# 
  2896  021E                     	;# 
  2897  021F                     	;# 
  2898  028C                     	;# 
  2899  028E                     	;# 
  2900  0291                     	;# 
  2901  0291                     	;# 
  2902  0292                     	;# 
  2903  0293                     	;# 
  2904  0294                     	;# 
  2905  0295                     	;# 
  2906  0295                     	;# 
  2907  0296                     	;# 
  2908  0297                     	;# 
  2909  0298                     	;# 
  2910  029F                     	;# 
  2911  030C                     	;# 
  2912  030E                     	;# 
  2913  0311                     	;# 
  2914  0311                     	;# 
  2915  0312                     	;# 
  2916  0313                     	;# 
  2917  0314                     	;# 
  2918  0315                     	;# 
  2919  0315                     	;# 
  2920  0316                     	;# 
  2921  0317                     	;# 
  2922  0318                     	;# 
  2923  038C                     	;# 
  2924  038E                     	;# 
  2925  0391                     	;# 
  2926  0392                     	;# 
  2927  0393                     	;# 
  2928  0397                     	;# 
  2929  0398                     	;# 
  2930  0399                     	;# 
  2931  039A                     	;# 
  2932  039C                     	;# 
  2933  039D                     	;# 
  2934  039E                     	;# 
  2935  039F                     	;# 
  2936  0411                     	;# 
  2937  0411                     	;# 
  2938  0412                     	;# 
  2939  0413                     	;# 
  2940  0414                     	;# 
  2941  0415                     	;# 
  2942  0416                     	;# 
  2943  0417                     	;# 
  2944  0418                     	;# 
  2945  0418                     	;# 
  2946  0419                     	;# 
  2947  041A                     	;# 
  2948  041B                     	;# 
  2949  041C                     	;# 
  2950  041D                     	;# 
  2951  041E                     	;# 
  2952  041F                     	;# 
  2953  0498                     	;# 
  2954  0498                     	;# 
  2955  0499                     	;# 
  2956  049A                     	;# 
  2957  049B                     	;# 
  2958  049B                     	;# 
  2959  049C                     	;# 
  2960  049D                     	;# 
  2961  049E                     	;# 
  2962  049F                     	;# 
  2963  0617                     	;# 
  2964  0618                     	;# 
  2965  0619                     	;# 
  2966  0619                     	;# 
  2967  061A                     	;# 
  2968  061B                     	;# 
  2969  061C                     	;# 
  2970  061C                     	;# 
  2971  061F                     	;# 
  2972  0691                     	;# 
  2973  0692                     	;# 
  2974  0693                     	;# 
  2975  0694                     	;# 
  2976  0695                     	;# 
  2977  0696                     	;# 
  2978  0697                     	;# 
  2979  0698                     	;# 
  2980  0699                     	;# 
  2981  0711                     	;# 
  2982  0712                     	;# 
  2983  0713                     	;# 
  2984  0714                     	;# 
  2985  0715                     	;# 
  2986  0716                     	;# 
  2987  0717                     	;# 
  2988  0718                     	;# 
  2989  0719                     	;# 
  2990  0891                     	;# 
  2991  0891                     	;# 
  2992  0891                     	;# 
  2993  0891                     	;# 
  2994  0891                     	;# 
  2995  0891                     	;# 
  2996  0892                     	;# 
  2997  0892                     	;# 
  2998  0892                     	;# 
  2999  0893                     	;# 
  3000  0893                     	;# 
  3001  0893                     	;# 
  3002  0893                     	;# 
  3003  0893                     	;# 
  3004  0893                     	;# 
  3005  0894                     	;# 
  3006  0894                     	;# 
  3007  0894                     	;# 
  3008  0895                     	;# 
  3009  0895                     	;# 
  3010  0895                     	;# 
  3011  0896                     	;# 
  3012  0896                     	;# 
  3013  0896                     	;# 
  3014  089B                     	;# 
  3015  0911                     	;# 
  3016  0912                     	;# 
  3017  0913                     	;# 
  3018  0914                     	;# 
  3019  0915                     	;# 
  3020  0916                     	;# 
  3021  0918                     	;# 
  3022  0919                     	;# 
  3023  091A                     	;# 
  3024  091B                     	;# 
  3025  091C                     	;# 
  3026  091D                     	;# 
  3027  091E                     	;# 
  3028  091F                     	;# 
  3029  0E0F                     	;# 
  3030  0E10                     	;# 
  3031  0E11                     	;# 
  3032  0E12                     	;# 
  3033  0E13                     	;# 
  3034  0E14                     	;# 
  3035  0E15                     	;# 
  3036  0E16                     	;# 
  3037  0E17                     	;# 
  3038  0E18                     	;# 
  3039  0E19                     	;# 
  3040  0E1A                     	;# 
  3041  0E1B                     	;# 
  3042  0E1C                     	;# 
  3043  0E1D                     	;# 
  3044  0E1E                     	;# 
  3045  0E1F                     	;# 
  3046  0E20                     	;# 
  3047  0E21                     	;# 
  3048  0E22                     	;# 
  3049  0E24                     	;# 
  3050  0E25                     	;# 
  3051  0E28                     	;# 
  3052  0E29                     	;# 
  3053  0E2A                     	;# 
  3054  0E2B                     	;# 
  3055  0E2C                     	;# 
  3056  0E2D                     	;# 
  3057  0E2E                     	;# 
  3058  0E2F                     	;# 
  3059  0E90                     	;# 
  3060  0E91                     	;# 
  3061  0E92                     	;# 
  3062  0E94                     	;# 
  3063  0E95                     	;# 
  3064  0EA0                     	;# 
  3065  0EA1                     	;# 
  3066  0EA2                     	;# 
  3067  0EA3                     	;# 
  3068  0EA4                     	;# 
  3069  0EA5                     	;# 
  3070  0F0F                     	;# 
  3071  0F10                     	;# 
  3072  0F11                     	;# 
  3073  0F12                     	;# 
  3074  0F13                     	;# 
  3075  0F14                     	;# 
  3076  0F15                     	;# 
  3077  0F16                     	;# 
  3078  0F17                     	;# 
  3079  0F18                     	;# 
  3080  0F19                     	;# 
  3081  0F1A                     	;# 
  3082  0F1B                     	;# 
  3083  0F1C                     	;# 
  3084  0F1D                     	;# 
  3085  0F1E                     	;# 
  3086  0F1F                     	;# 
  3087  0F20                     	;# 
  3088  0F21                     	;# 
  3089  0F22                     	;# 
  3090  0F23                     	;# 
  3091  0F24                     	;# 
  3092  0F25                     	;# 
  3093  0F26                     	;# 
  3094  0F27                     	;# 
  3095  0F28                     	;# 
  3096  0F29                     	;# 
  3097  0F2A                     	;# 
  3098  0F2B                     	;# 
  3099  0F2C                     	;# 
  3100  0F2D                     	;# 
  3101  0F2E                     	;# 
  3102  0F2F                     	;# 
  3103  0F30                     	;# 
  3104  0F31                     	;# 
  3105  0F32                     	;# 
  3106  0F33                     	;# 
  3107  0F34                     	;# 
  3108  0F35                     	;# 
  3109  0F36                     	;# 
  3110  0F37                     	;# 
  3111  0FE4                     	;# 
  3112  0FE5                     	;# 
  3113  0FE6                     	;# 
  3114  0FE7                     	;# 
  3115  0FE8                     	;# 
  3116  0FE9                     	;# 
  3117  0FEA                     	;# 
  3118  0FEB                     	;# 
  3119  0FED                     	;# 
  3120  0FEE                     	;# 
  3121  0FEF                     	;_stage_stash
  3122                           
  3123                           	psect	idataBANK1
  3124  07DA                     __pidataBANK1:	
  3125                           
  3126                           ;initializer for InitLowerPattern@F476
  3127  07DA  3400               	retlw	0
  3128  07DB  3400               	retlw	0
  3129  07DC  3400               	retlw	0
  3130  07DD  3401               	retlw	1
  3131                           
  3132                           ;initializer for InitLowerPattern@F473
  3133  07DE  3400               	retlw	0
  3134  07DF  3400               	retlw	0
  3135  07E0  3401               	retlw	1
  3136  07E1  3400               	retlw	0
  3137                           
  3138                           ;initializer for InitUpperLowerPattern@F464
  3139  07E2  3400               	retlw	0
  3140  07E3  3400               	retlw	0
  3141  07E4  3401               	retlw	1
  3142  07E5  3401               	retlw	1
  3143                           
  3144                           ;initializer for InitUpperLowerPattern@F461
  3145  07E6  3401               	retlw	1
  3146  07E7  3401               	retlw	1
  3147  07E8  3400               	retlw	0
  3148  07E9  3400               	retlw	0
  3149                           
  3150                           ;initializer for InitXStrobePattern@F452
  3151  07EA  3400               	retlw	0
  3152  07EB  3401               	retlw	1
  3153  07EC  3401               	retlw	1
  3154  07ED  3400               	retlw	0
  3155                           
  3156                           ;initializer for InitXStrobePattern@F449
  3157  07EE  3401               	retlw	1
  3158  07EF  3400               	retlw	0
  3159  07F0  3400               	retlw	0
  3160  07F1  3401               	retlw	1
  3161                           
  3162                           ;initializer for InitWigwagPattern@F440
  3163  07F2  3400               	retlw	0
  3164  07F3  3401               	retlw	1
  3165  07F4  3400               	retlw	0
  3166  07F5  3401               	retlw	1
  3167                           
  3168                           ;initializer for InitWigwagPattern@F437
  3169  07F6  3401               	retlw	1
  3170  07F7  3400               	retlw	0
  3171  07F8  3401               	retlw	1
  3172  07F9  3400               	retlw	0
  3173                           
  3174                           	psect	nvBANK0
  3175  006C                     __pnvBANK0:	
  3176  006C                     _timer1ReloadVal:	
  3177  006C                     	ds	2
  3178  006E                     _IOCCF0_InterruptHandler:	
  3179  006E                     	ds	2
  3180                           
  3181                           	psect	nvBANK1
  3182  00E8                     __pnvBANK1:	
  3183  00E8                     _TMR1_InterruptHandler:	
  3184  00E8                     	ds	2
  3185  000E                     _PORTCbits	set	14
  3186  001C                     _T1GCONbits	set	28
  3187  001B                     _T1CONbits	set	27
  3188  0019                     _TMR1L	set	25
  3189  001A                     _TMR1H	set	26
  3190  001C                     _T1GCON	set	28
  3191  0011                     _PIR1bits	set	17
  3192  000B                     _INTCONbits	set	11
  3193  0010                     _PIR0bits	set	16
  3194  0091                     _PIE1bits	set	145
  3195  0090                     _PIE0bits	set	144
  3196  008E                     _TRISC	set	142
  3197  008C                     _TRISA	set	140
  3198  0097                     _WDTCON	set	151
  3199  010E                     _LATCbits	set	270
  3200  010E                     _LATC	set	270
  3201  010C                     _LATA	set	268
  3202  018C                     _ANSELA	set	396
  3203  018E                     _ANSELC	set	398
  3204  020E                     _WPUC	set	526
  3205  020C                     _WPUA	set	524
  3206  028E                     _ODCONC	set	654
  3207  028C                     _ODCONA	set	652
  3208  030E                     _SLRCONC	set	782
  3209  030C                     _SLRCONA	set	780
  3210  0397                     _IOCCPbits	set	919
  3211  0398                     _IOCCNbits	set	920
  3212  0399                     _IOCCFbits	set	921
  3213  038E                     _INLVLC	set	910
  3214  038C                     _INLVLA	set	908
  3215  0916                     _PMD5	set	2326
  3216  0915                     _PMD4	set	2325
  3217  0914                     _PMD3	set	2324
  3218  0913                     _PMD2	set	2323
  3219  0912                     _PMD1	set	2322
  3220  0911                     _PMD0	set	2321
  3221  091E                     _OSCTUNE	set	2334
  3222  091F                     _OSCFRQ	set	2335
  3223  091D                     _OSCEN	set	2333
  3224  091B                     _OSCCON3	set	2331
  3225  0919                     _OSCCON1	set	2329
  3226                           
  3227                           ; #config settings
  3228  0000                     
  3229                           	psect	cinit
  3230  002A                     start_initialization:	
  3231  002A                     __initialization:		;BIGRAM
  3232                           
  3233                           ; Initialize objects allocated to BANK1
  3234  002A  30DA               	movlw	low __pidataBANK1
  3235  002B  0084               	movwf	4
  3236  002C  3087               	movlw	(high __pidataBANK1)| (0+128)
  3237  002D  0085               	movwf	5
  3238  002E  30C8               	movlw	low __pdataBANK1
  3239  002F  0086               	movwf	6
  3240  0030  3000               	movlw	high __pdataBANK1
  3241  0031  0087               	movwf	7
  3242  0032  3000               	movlw	0
  3243  0033  00FF               	movwf	btemp+1
  3244  0034  3020               	movlw	32
  3245  0035  318F  2749  3180   	fcall	init_ram
  3246                           
  3247                           ; Clear objects allocated to BIGRAM
  3248  0038  30F0               	movlw	low (0+8432)
  3249  0039  0084               	movwf	4
  3250  003A  3020               	movlw	high (0+8432)
  3251  003B  0085               	movwf	5
  3252  003C  3000               	movlw	0
  3253  003D  00FE               	movwf	btemp
  3254  003E  3003               	movlw	3
  3255  003F  00FF               	movwf	btemp+1
  3256  0040  318F  273D  3180   	fcall	clear_ram0
  3257                           
  3258                           ; Clear objects allocated to COMMON
  3259  0043  01FA               	clrf	__pbssCOMMON& (0+127)
  3260  0044  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  3261                           
  3262                           ; Clear objects allocated to BANK0
  3263  0045  305C               	movlw	low __pbssBANK0
  3264  0046  0084               	movwf	4
  3265  0047  3000               	movlw	high __pbssBANK0
  3266  0048  0085               	movwf	5
  3267  0049  3010               	movlw	16
  3268  004A  00FE               	movwf	btemp
  3269  004B  3000               	movlw	0
  3270  004C  00FF               	movwf	btemp+1
  3271  004D  318F  273D  3180   	fcall	clear_ram0
  3272                           
  3273                           ; Clear objects allocated to BANK1
  3274  0050  30A0               	movlw	low __pbssBANK1
  3275  0051  0084               	movwf	4
  3276  0052  3000               	movlw	high __pbssBANK1
  3277  0053  0085               	movwf	5
  3278  0054  3028               	movlw	40
  3279  0055  00FE               	movwf	btemp
  3280  0056  3000               	movlw	0
  3281  0057  00FF               	movwf	btemp+1
  3282  0058  318F  273D  3180   	fcall	clear_ram0
  3283  005B                     end_of_initialization:	
  3284                           ;End of C runtime variable initialization code
  3285                           
  3286  005B                     __end_of__initialization:	
  3287  005B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3288  005C  0020               	movlb	0
  3289  005D  318F  2FC7         	ljmp	_main	;jump to C main() function
  3290                           
  3291                           	psect	bssCOMMON
  3292  007A                     __pbssCOMMON:	
  3293  007A                     _last_pc_input_state:	
  3294  007A                     	ds	1
  3295  007B                     _cur_pc_input_state:	
  3296  007B                     	ds	1
  3297                           
  3298                           	psect	bssBANK0
  3299  005C                     __pbssBANK0:	
  3300  005C                     _start_time:	
  3301  005C                     	ds	2
  3302  005E                     _pattern_list_iter:	
  3303  005E                     	ds	2
  3304  0060                     _stage_list_iter:	
  3305  0060                     	ds	2
  3306  0062                     _cur_sec:	
  3307  0062                     	ds	2
  3308  0064                     _cur_hsec:	
  3309  0064                     	ds	2
  3310  0066                     _cur_ms:	
  3311  0066                     	ds	2
  3312  0068                     _temp_ms:	
  3313  0068                     	ds	2
  3314  006A                     _update_stage:	
  3315  006A                     	ds	1
  3316  006B                     _ts_trigger:	
  3317  006B                     	ds	1
  3318                           
  3319                           	psect	bssBANK1
  3320  00A0                     __pbssBANK1:	
  3321  00A0                     NewStage@F418:	
  3322  00A0                     	ds	4
  3323  00A4                     _Wigwag:	
  3324  00A4                     	ds	3
  3325  00A7                     _pattern_stash:	
  3326  00A7                     	ds	18
  3327  00B9                     _pattern_selector:	
  3328  00B9                     	ds	15
  3329                           
  3330                           	psect	dataBANK1
  3331  00C8                     __pdataBANK1:	
  3332  00C8                     InitLowerPattern@F476:	
  3333  00C8                     	ds	4
  3334  00CC                     InitLowerPattern@F473:	
  3335  00CC                     	ds	4
  3336  00D0                     InitUpperLowerPattern@F464:	
  3337  00D0                     	ds	4
  3338  00D4                     InitUpperLowerPattern@F461:	
  3339  00D4                     	ds	4
  3340  00D8                     InitXStrobePattern@F452:	
  3341  00D8                     	ds	4
  3342  00DC                     InitXStrobePattern@F449:	
  3343  00DC                     	ds	4
  3344  00E0                     InitWigwagPattern@F440:	
  3345  00E0                     	ds	4
  3346  00E4                     InitWigwagPattern@F437:	
  3347  00E4                     	ds	4
  3348                           
  3349                           	psect	inittext
  3350  0F49                     init_ram:	
  3351  0F49  00FE               	movwf	btemp
  3352  0F4A                     initloop:	
  3353  0F4A  0012               	moviw fsr0++
  3354  0F4B  001E               	movwi fsr1++
  3355  0F4C  3001               	movlw	1
  3356  0F4D  02FE               	subwf	btemp,f
  3357  0F4E  3000               	movlw	0
  3358  0F4F  3BFF               	subwfb	btemp+1,f
  3359  0F50  087F               	movf	btemp+1,w
  3360  0F51  047E               	iorwf	btemp,w
  3361  0F52  1D03               	skipz
  3362  0F53  2F4A               	goto	initloop
  3363  0F54  3400               	retlw	0
  3364                           
  3365                           	psect	clrtext
  3366  0F3D                     clear_ram0:	
  3367                           ;	Called with FSR0 containing the base address, and
  3368                           ;	btemp/btemp+1 has the size to clear
  3369                           
  3370  0F3D  0064               	clrwdt	;clear the watchdog before getting into this loop
  3371  0F3E                     clrloop0:	
  3372  0F3E  0180               	clrf	0	;clear RAM location pointed to by FSR
  3373  0F3F  3101               	addfsr 0,1
  3374  0F40  3001               	movlw	1
  3375  0F41  02FE               	subwf	btemp,f
  3376  0F42  3000               	movlw	0
  3377  0F43  3BFF               	subwfb	btemp+1,f
  3378  0F44  087F               	movf	btemp+1,w
  3379  0F45  047E               	iorwf	btemp,w
  3380  0F46  1D03               	skipz
  3381  0F47  2F3E               	goto	clrloop0	;have we reached the end yet?
  3382  0F48  3400               	retlw	0	;all done for this memory range, return
  3383                           
  3384                           	psect	cstackBANK1
  3385  00EA                     __pcstackBANK1:	
  3386  00EA                     ??_main:	
  3387                           
  3388                           ; 1 bytes @ 0x0
  3389  00EA                     	ds	1
  3390                           
  3391                           	psect	cstackCOMMON
  3392  0070                     __pcstackCOMMON:	
  3393  0070                     ?_PMD_Initialize:	
  3394  0070                     ?_PIN_MANAGER_Initialize:	
  3395                           ; 1 bytes @ 0x0
  3396                           
  3397  0070                     ?_OSCILLATOR_Initialize:	
  3398                           ; 1 bytes @ 0x0
  3399                           
  3400  0070                     ?_WDT_Initialize:	
  3401                           ; 1 bytes @ 0x0
  3402                           
  3403  0070                     ?_TMR1_Initialize:	
  3404                           ; 1 bytes @ 0x0
  3405                           
  3406  0070                     ?_IOCCF0_DefaultInterruptHandler:	
  3407                           ; 1 bytes @ 0x0
  3408                           
  3409  0070                     ??_IOCCF0_DefaultInterruptHandler:	
  3410                           ; 1 bytes @ 0x0
  3411                           
  3412  0070                     ?_IOCCF0_ISR:	
  3413                           ; 1 bytes @ 0x0
  3414                           
  3415  0070                     ??_IOCCF0_ISR:	
  3416                           ; 1 bytes @ 0x0
  3417                           
  3418  0070                     ?_TMR1_ISR:	
  3419                           ; 1 bytes @ 0x0
  3420                           
  3421  0070                     ?_TMR1_DefaultInterruptHandler:	
  3422                           ; 1 bytes @ 0x0
  3423                           
  3424  0070                     ??_TMR1_DefaultInterruptHandler:	
  3425                           ; 1 bytes @ 0x0
  3426                           
  3427  0070                     ?_SetOutputs:	
  3428                           ; 1 bytes @ 0x0
  3429                           
  3430  0070                     ?_PatternCycleInputChanged:	
  3431                           ; 1 bytes @ 0x0
  3432                           
  3433  0070                     ?_SYSTEM_Initialize:	
  3434                           ; 1 bytes @ 0x0
  3435                           
  3436  0070                     ?_PIN_MANAGER_IOC:	
  3437                           ; 1 bytes @ 0x0
  3438                           
  3439  0070                     ??_PIN_MANAGER_IOC:	
  3440                           ; 1 bytes @ 0x0
  3441                           
  3442  0070                     ?_INTERRUPT_InterruptManager:	
  3443                           ; 1 bytes @ 0x0
  3444                           
  3445  0070                     ?_TMR1_StartTimer:	
  3446                           ; 1 bytes @ 0x0
  3447                           
  3448  0070                     ?_TMR1_WriteTimer:	
  3449                           ; 1 bytes @ 0x0
  3450                           
  3451  0070                     ?_setup:	
  3452                           ; 1 bytes @ 0x0
  3453                           
  3454  0070                     ?_main:	
  3455                           ; 1 bytes @ 0x0
  3456                           
  3457  0070                     TMR1_WriteTimer@timerVal:	
  3458                           ; 1 bytes @ 0x0
  3459                           
  3460                           
  3461                           ; 2 bytes @ 0x0
  3462  0070                     	ds	2
  3463  0072                     ??_PMD_Initialize:	
  3464  0072                     ??_OSCILLATOR_Initialize:	
  3465                           ; 1 bytes @ 0x2
  3466                           
  3467  0072                     ??_WDT_Initialize:	
  3468                           ; 1 bytes @ 0x2
  3469                           
  3470  0072                     ?_IOCCF0_SetInterruptHandler:	
  3471                           ; 1 bytes @ 0x2
  3472                           
  3473  0072                     ??_TMR1_ISR:	
  3474                           ; 1 bytes @ 0x2
  3475                           
  3476  0072                     ?_TMR1_SetInterruptHandler:	
  3477                           ; 1 bytes @ 0x2
  3478                           
  3479  0072                     ??_PatternCycleInputChanged:	
  3480                           ; 1 bytes @ 0x2
  3481                           
  3482  0072                     ??_INTERRUPT_InterruptManager:	
  3483                           ; 1 bytes @ 0x2
  3484                           
  3485  0072                     ??_TMR1_StartTimer:	
  3486                           ; 1 bytes @ 0x2
  3487                           
  3488  0072                     ??_TMR1_WriteTimer:	
  3489                           ; 1 bytes @ 0x2
  3490                           
  3491  0072                     ?_SetLight:	
  3492                           ; 1 bytes @ 0x2
  3493                           
  3494  0072                     ?_AssignLightStates:	
  3495                           ; 1 bytes @ 0x2
  3496                           
  3497  0072                     ?___wmul:	
  3498                           ; 1 bytes @ 0x2
  3499                           
  3500  0072                     SetLight@state:	
  3501                           ; 2 bytes @ 0x2
  3502                           
  3503  0072                     IOCCF0_SetInterruptHandler@InterruptHandler:	
  3504                           ; 1 bytes @ 0x2
  3505                           
  3506  0072                     TMR1_SetInterruptHandler@InterruptHandler:	
  3507                           ; 2 bytes @ 0x2
  3508                           
  3509  0072                     AssignLightStates@stage:	
  3510                           ; 2 bytes @ 0x2
  3511                           
  3512  0072                     ___wmul@multiplier:	
  3513                           ; 2 bytes @ 0x2
  3514                           
  3515                           
  3516                           ; 2 bytes @ 0x2
  3517  0072                     	ds	1
  3518  0073                     ??_SetLight:	
  3519                           
  3520                           ; 1 bytes @ 0x3
  3521  0073                     	ds	1
  3522  0074                     ??_PIN_MANAGER_Initialize:	
  3523  0074                     ??_TMR1_Initialize:	
  3524                           ; 1 bytes @ 0x4
  3525                           
  3526  0074                     ??_IOCCF0_SetInterruptHandler:	
  3527                           ; 1 bytes @ 0x4
  3528                           
  3529  0074                     ??_TMR1_SetInterruptHandler:	
  3530                           ; 1 bytes @ 0x4
  3531                           
  3532  0074                     ??_SYSTEM_Initialize:	
  3533                           ; 1 bytes @ 0x4
  3534                           
  3535  0074                     AssignLightStates@states:	
  3536                           ; 1 bytes @ 0x4
  3537                           
  3538  0074                     PatternCycleInputChanged@delay_count:	
  3539                           ; 1 bytes @ 0x4
  3540                           
  3541  0074                     ___wmul@multiplicand:	
  3542                           ; 2 bytes @ 0x4
  3543                           
  3544                           
  3545                           ; 2 bytes @ 0x4
  3546  0074                     	ds	1
  3547  0075                     ??_AssignLightStates:	
  3548  0075                     SetLight@light:	
  3549                           ; 1 bytes @ 0x5
  3550                           
  3551                           
  3552                           ; 1 bytes @ 0x5
  3553  0075                     	ds	1
  3554  0076                     ??_SetOutputs:	
  3555  0076                     ?_FlashPattern:	
  3556                           ; 1 bytes @ 0x6
  3557                           
  3558  0076                     ??___wmul:	
  3559                           ; 1 bytes @ 0x6
  3560                           
  3561  0076                     FlashPattern@pattern:	
  3562                           ; 1 bytes @ 0x6
  3563                           
  3564  0076                     ___wmul@product:	
  3565                           ; 2 bytes @ 0x6
  3566                           
  3567                           
  3568                           ; 2 bytes @ 0x6
  3569  0076                     	ds	1
  3570  0077                     ?_NewStage:	
  3571  0077                     SetOutputs@state:	
  3572                           ; 2 bytes @ 0x7
  3573                           
  3574                           
  3575                           ; 1 bytes @ 0x7
  3576  0077                     	ds	1
  3577  0078                     FlashPattern@current_time:	
  3578                           
  3579                           ; 2 bytes @ 0x8
  3580  0078                     	ds	1
  3581  0079                     ??_ConstructStage:	
  3582  0079                     ?_NewPattern:	
  3583                           ; 1 bytes @ 0x9
  3584                           
  3585                           
  3586                           ; 2 bytes @ 0x9
  3587  0079                     	ds	1
  3588  007A                     ??_setup:	
  3589                           
  3590                           	psect	cstackBANK0
  3591  0020                     __pcstackBANK0:	
  3592                           ; 1 bytes @ 0xA
  3593                           
  3594  0020                     ??_FlashPattern:	
  3595  0020                     AssignLightStates@i:	
  3596                           ; 1 bytes @ 0x0
  3597                           
  3598                           
  3599                           ; 2 bytes @ 0x0
  3600  0020                     	ds	2
  3601  0022                     ??_NewStage:	
  3602                           
  3603                           ; 1 bytes @ 0x2
  3604  0022                     	ds	4
  3605  0026                     NewStage@init_states:	
  3606                           
  3607                           ; 4 bytes @ 0x6
  3608  0026                     	ds	4
  3609  002A                     NewStage@new_stage:	
  3610                           
  3611                           ; 2 bytes @ 0xA
  3612  002A                     	ds	2
  3613  002C                     ??_NewPattern:	
  3614  002C                     ?_ConstructStage:	
  3615                           ; 1 bytes @ 0xC
  3616                           
  3617  002C                     ?_CopyStageData:	
  3618                           ; 2 bytes @ 0xC
  3619                           
  3620  002C                     ConstructStage@time_ms:	
  3621                           ; 2 bytes @ 0xC
  3622                           
  3623  002C                     CopyStageData@dest:	
  3624                           ; 2 bytes @ 0xC
  3625                           
  3626                           
  3627                           ; 2 bytes @ 0xC
  3628  002C                     	ds	2
  3629  002E                     ConstructStage@next:	
  3630  002E                     NewPattern@new_pattern:	
  3631                           ; 1 bytes @ 0xE
  3632                           
  3633  002E                     CopyStageData@source:	
  3634                           ; 2 bytes @ 0xE
  3635                           
  3636                           
  3637                           ; 2 bytes @ 0xE
  3638  002E                     	ds	1
  3639  002F                     ConstructStage@states:	
  3640                           
  3641                           ; 1 bytes @ 0xF
  3642  002F                     	ds	1
  3643  0030                     ??_CopyStageData:	
  3644  0030                     ConstructStage@new_stage:	
  3645                           ; 1 bytes @ 0x10
  3646                           
  3647                           
  3648                           ; 2 bytes @ 0x10
  3649  0030                     	ds	3
  3650  0033                     CopyStageData@i:	
  3651                           
  3652                           ; 2 bytes @ 0x13
  3653  0033                     	ds	2
  3654  0035                     ?_AppendStage:	
  3655  0035                     AppendStage@head:	
  3656                           ; 1 bytes @ 0x15
  3657                           
  3658                           
  3659                           ; 2 bytes @ 0x15
  3660  0035                     	ds	2
  3661  0037                     AppendStage@new_stage:	
  3662                           
  3663                           ; 2 bytes @ 0x17
  3664  0037                     	ds	2
  3665  0039                     ??_AppendStage:	
  3666                           
  3667                           ; 1 bytes @ 0x19
  3668  0039                     	ds	2
  3669  003B                     AppendStage@last_stage:	
  3670                           
  3671                           ; 2 bytes @ 0x1B
  3672  003B                     	ds	2
  3673  003D                     ?_InitWigwagPattern:	
  3674  003D                     ?_InitXStrobePattern:	
  3675                           ; 1 bytes @ 0x1D
  3676                           
  3677  003D                     ?_InitUpperLowerPattern:	
  3678                           ; 1 bytes @ 0x1D
  3679                           
  3680  003D                     ?_InitLowerPattern:	
  3681                           ; 1 bytes @ 0x1D
  3682                           
  3683  003D                     InitWigwagPattern@pattern:	
  3684                           ; 1 bytes @ 0x1D
  3685                           
  3686  003D                     InitXStrobePattern@pattern:	
  3687                           ; 2 bytes @ 0x1D
  3688                           
  3689  003D                     InitUpperLowerPattern@pattern:	
  3690                           ; 2 bytes @ 0x1D
  3691                           
  3692  003D                     InitLowerPattern@pattern:	
  3693                           ; 2 bytes @ 0x1D
  3694                           
  3695                           
  3696                           ; 2 bytes @ 0x1D
  3697  003D                     	ds	2
  3698  003F                     ??_InitWigwagPattern:	
  3699  003F                     ??_InitXStrobePattern:	
  3700                           ; 1 bytes @ 0x1F
  3701                           
  3702  003F                     ??_InitUpperLowerPattern:	
  3703                           ; 1 bytes @ 0x1F
  3704                           
  3705  003F                     ??_InitLowerPattern:	
  3706                           ; 1 bytes @ 0x1F
  3707                           
  3708                           
  3709                           ; 1 bytes @ 0x1F
  3710  003F                     	ds	1
  3711  0040                     InitWigwagPattern@left_side_states:	
  3712  0040                     InitXStrobePattern@diag_1_4_states:	
  3713                           ; 4 bytes @ 0x20
  3714                           
  3715  0040                     InitUpperLowerPattern@upper_states:	
  3716                           ; 4 bytes @ 0x20
  3717                           
  3718  0040                     InitLowerPattern@lower_left_states:	
  3719                           ; 4 bytes @ 0x20
  3720                           
  3721                           
  3722                           ; 4 bytes @ 0x20
  3723  0040                     	ds	4
  3724  0044                     InitWigwagPattern@right_side_states:	
  3725  0044                     InitXStrobePattern@diag_2_3_states:	
  3726                           ; 4 bytes @ 0x24
  3727                           
  3728  0044                     InitUpperLowerPattern@lower_states:	
  3729                           ; 4 bytes @ 0x24
  3730                           
  3731  0044                     InitLowerPattern@lower_right_states:	
  3732                           ; 4 bytes @ 0x24
  3733                           
  3734                           
  3735                           ; 4 bytes @ 0x24
  3736  0044                     	ds	4
  3737  0048                     InitWigwagPattern@left_side_on:	
  3738  0048                     InitXStrobePattern@diag_1_4:	
  3739                           ; 2 bytes @ 0x28
  3740                           
  3741  0048                     InitUpperLowerPattern@upper:	
  3742                           ; 2 bytes @ 0x28
  3743                           
  3744  0048                     InitLowerPattern@lower_left:	
  3745                           ; 2 bytes @ 0x28
  3746                           
  3747                           
  3748                           ; 2 bytes @ 0x28
  3749  0048                     	ds	2
  3750  004A                     InitWigwagPattern@right_side_on:	
  3751  004A                     InitXStrobePattern@diag_2_3:	
  3752                           ; 2 bytes @ 0x2A
  3753                           
  3754  004A                     InitUpperLowerPattern@lower:	
  3755                           ; 2 bytes @ 0x2A
  3756                           
  3757  004A                     InitLowerPattern@lower_right:	
  3758                           ; 2 bytes @ 0x2A
  3759                           
  3760                           
  3761                           ; 2 bytes @ 0x2A
  3762  004A                     	ds	2
  3763  004C                     InitWigwagPattern@i:	
  3764  004C                     InitXStrobePattern@i:	
  3765                           ; 2 bytes @ 0x2C
  3766                           
  3767  004C                     InitUpperLowerPattern@i:	
  3768                           ; 2 bytes @ 0x2C
  3769                           
  3770  004C                     InitLowerPattern@i:	
  3771                           ; 2 bytes @ 0x2C
  3772                           
  3773                           
  3774                           ; 2 bytes @ 0x2C
  3775  004C                     	ds	2
  3776  004E                     InitWigwagPattern@i_846:	
  3777  004E                     InitXStrobePattern@i_872:	
  3778                           ; 2 bytes @ 0x2E
  3779                           
  3780  004E                     InitUpperLowerPattern@i_898:	
  3781                           ; 2 bytes @ 0x2E
  3782                           
  3783  004E                     InitLowerPattern@i_924:	
  3784                           ; 2 bytes @ 0x2E
  3785                           
  3786                           
  3787                           ; 2 bytes @ 0x2E
  3788  004E                     	ds	2
  3789  0050                     InitWigwagPattern@off:	
  3790  0050                     InitXStrobePattern@off:	
  3791                           ; 2 bytes @ 0x30
  3792                           
  3793  0050                     InitUpperLowerPattern@off:	
  3794                           ; 2 bytes @ 0x30
  3795                           
  3796  0050                     InitLowerPattern@off:	
  3797                           ; 2 bytes @ 0x30
  3798                           
  3799                           
  3800                           ; 2 bytes @ 0x30
  3801  0050                     	ds	2
  3802  0052                     InitWigwagPattern@head:	
  3803  0052                     InitXStrobePattern@head:	
  3804                           ; 2 bytes @ 0x32
  3805                           
  3806  0052                     InitUpperLowerPattern@head:	
  3807                           ; 2 bytes @ 0x32
  3808                           
  3809  0052                     InitLowerPattern@head:	
  3810                           ; 2 bytes @ 0x32
  3811                           
  3812                           
  3813                           ; 2 bytes @ 0x32
  3814  0052                     	ds	2
  3815  0054                     ?_InitPatternSelector:	
  3816  0054                     InitPatternSelector@p_selector:	
  3817                           ; 1 bytes @ 0x34
  3818                           
  3819                           
  3820                           ; 2 bytes @ 0x34
  3821  0054                     	ds	2
  3822  0056                     ??_InitPatternSelector:	
  3823                           
  3824                           ; 1 bytes @ 0x36
  3825  0056                     	ds	4
  3826  005A                     InitPatternSelector@i:	
  3827                           
  3828                           ; 2 bytes @ 0x3A
  3829  005A                     	ds	2
  3830                           
  3831                           	psect	maintext
  3832  0FC7                     __pmaintext:	
  3833 ;;
  3834 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3835 ;;
  3836 ;; *************** function _main *****************
  3837 ;; Defined at:
  3838 ;;		line 33 in file "main.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;		None
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;		None
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3847 ;; Tracked objects:
  3848 ;;		On entry : B1F/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3854 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3855 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3856 ;;Total ram usage:        1 bytes
  3857 ;; Hardware stack levels required when called:   10
  3858 ;; This function calls:
  3859 ;;		_FlashPattern
  3860 ;;		_PatternCycleInputChanged
  3861 ;;		_setup
  3862 ;; This function is called by:
  3863 ;;		Startup code after reset
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           
  3868                           ;psect for function _main
  3869  0FC7                     _main:	
  3870  0FC7                     l2532:	
  3871                           ;incstack = 0
  3872                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3873                           
  3874                           
  3875                           ;main.c: 35:     setup();
  3876  0FC7  318F  27AF  318F   	fcall	_setup
  3877  0FCA                     l2534:	
  3878                           
  3879                           ;main.c: 38:     {;main.c: 39:         cur_pc_input_state = PORTCbits.RC5;
  3880  0FCA  3000               	movlw	0
  3881  0FCB  0020               	movlb	0	; select bank0
  3882  0FCC  1A8E               	btfsc	14,5	;volatile
  3883  0FCD  3001               	movlw	1
  3884  0FCE  00FB               	movwf	_cur_pc_input_state
  3885  0FCF                     l2536:	
  3886                           
  3887                           ;main.c: 44:         if ( PatternCycleInputChanged() )
  3888  0FCF  3187  273B  318F   	fcall	_PatternCycleInputChanged
  3889  0FD2                     l2542:	
  3890                           
  3891                           ;main.c: 64:         last_pc_input_state = cur_pc_input_state;
  3892  0FD2  087B               	movf	_cur_pc_input_state,w
  3893  0FD3  0021               	movlb	1	; select bank1
  3894  0FD4  00EA               	movwf	??_main^(0+128)
  3895  0FD5  086A               	movf	??_main^(0+128),w
  3896  0FD6  00FA               	movwf	_last_pc_input_state
  3897  0FD7                     l2544:	
  3898                           
  3899                           ;main.c: 66:         FlashPattern( pattern_selector.patterns[0] );
  3900  0FD7  083A               	movf	(_pattern_selector+1)^(0+128),w
  3901  0FD8  00F7               	movwf	FlashPattern@pattern+1
  3902  0FD9  0839               	movf	_pattern_selector^(0+128),w
  3903  0FDA  00F6               	movwf	FlashPattern@pattern
  3904  0FDB  3185  250B  318F   	fcall	_FlashPattern
  3905  0FDE  2FCA               	goto	l2534
  3906  0FDF  3180  2828         	ljmp	start
  3907  0FE1                     __end_of_main:	
  3908                           
  3909                           	psect	text1
  3910  0FAF                     __ptext1:	
  3911 ;; *************** function _setup *****************
  3912 ;; Defined at:
  3913 ;;		line 13 in file "main.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;		None
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;		None
  3918 ;; Return value:  Size  Location     Type
  3919 ;;                  1    wreg      void 
  3920 ;; Registers used:
  3921 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3922 ;; Tracked objects:
  3923 ;;		On entry : 0/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3931 ;;Total ram usage:        0 bytes
  3932 ;; Hardware stack levels used:    1
  3933 ;; Hardware stack levels required when called:    9
  3934 ;; This function calls:
  3935 ;;		_InitPatternSelector
  3936 ;;		_SYSTEM_Initialize
  3937 ;;		_SetOutputs
  3938 ;;		_TMR1_Initialize
  3939 ;;		_TMR1_StartTimer
  3940 ;; This function is called by:
  3941 ;;		_main
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           
  3946                           ;psect for function _setup
  3947  0FAF                     _setup:	
  3948  0FAF                     l2504:	
  3949                           ;incstack = 0
  3950                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3951                           
  3952                           
  3953                           ;main.c: 16:     SYSTEM_Initialize();
  3954  0FAF  318F  2764  318F   	fcall	_SYSTEM_Initialize
  3955  0FB2                     l2506:	
  3956                           
  3957                           ;main.c: 18:     (INTCONbits.GIE = 1);
  3958  0FB2  178B               	bsf	11,7	;volatile
  3959  0FB3                     l2508:	
  3960                           
  3961                           ;main.c: 21:     (INTCONbits.PEIE = 1);
  3962  0FB3  170B               	bsf	11,6	;volatile
  3963                           
  3964                           ;main.c: 24:     TMR1_Initialize();
  3965  0FB4  318F  2785  318F   	fcall	_TMR1_Initialize
  3966  0FB7                     l2510:	
  3967                           
  3968                           ;main.c: 25:     TMR1_StartTimer();
  3969  0FB7  318F  2710  318F   	fcall	_TMR1_StartTimer
  3970  0FBA                     l2512:	
  3971                           
  3972                           ;main.c: 28:     SetOutputs( 0 );
  3973  0FBA  3000               	movlw	0
  3974  0FBB  3187  27B8  318F   	fcall	_SetOutputs
  3975  0FBE                     l2514:	
  3976                           
  3977                           ;main.c: 30:     InitPatternSelector( &pattern_selector );
  3978  0FBE  30B9               	movlw	low _pattern_selector
  3979  0FBF  0020               	movlb	0	; select bank0
  3980  0FC0  00D4               	movwf	InitPatternSelector@p_selector
  3981  0FC1  3000               	movlw	high _pattern_selector
  3982  0FC2  00D5               	movwf	InitPatternSelector@p_selector+1
  3983  0FC3  3184  2486  318F   	fcall	_InitPatternSelector
  3984  0FC6                     l291:	
  3985  0FC6  0008               	return
  3986  0FC7                     __end_of_setup:	
  3987                           
  3988                           	psect	text2
  3989  0F10                     __ptext2:	
  3990 ;; *************** function _TMR1_StartTimer *****************
  3991 ;; Defined at:
  3992 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  3993 ;; Parameters:    Size  Location     Type
  3994 ;;		None
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;		None
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  1    wreg      void 
  3999 ;; Registers used:
  4000 ;;		None
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : 0/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4010 ;;Total ram usage:        0 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    4
  4013 ;; This function calls:
  4014 ;;		Nothing
  4015 ;; This function is called by:
  4016 ;;		_setup
  4017 ;; This function uses a non-reentrant model
  4018 ;;
  4019                           
  4020                           
  4021                           ;psect for function _TMR1_StartTimer
  4022  0F10                     _TMR1_StartTimer:	
  4023  0F10                     l2072:	
  4024                           ;incstack = 0
  4025                           ; Regs used in _TMR1_StartTimer: []
  4026                           
  4027                           
  4028                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
  4029  0F10  0020               	movlb	0	; select bank0
  4030  0F11  141B               	bsf	27,0	;volatile
  4031  0F12                     l210:	
  4032  0F12  0008               	return
  4033  0F13                     __end_of_TMR1_StartTimer:	
  4034                           
  4035                           	psect	text3
  4036  07B8                     __ptext3:	
  4037 ;; *************** function _SetOutputs *****************
  4038 ;; Defined at:
  4039 ;;		line 38 in file "Lights.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;  state           1    wreg     const _Bool 
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;  state           1    7[COMMON] const _Bool 
  4044 ;; Return value:  Size  Location     Type
  4045 ;;                  1    wreg      void 
  4046 ;; Registers used:
  4047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4048 ;; Tracked objects:
  4049 ;;		On entry : 0/0
  4050 ;;		On exit  : 0/0
  4051 ;;		Unchanged: 0/0
  4052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4055 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4056 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4057 ;;Total ram usage:        2 bytes
  4058 ;; Hardware stack levels used:    1
  4059 ;; Hardware stack levels required when called:    5
  4060 ;; This function calls:
  4061 ;;		_SetLight
  4062 ;; This function is called by:
  4063 ;;		_setup
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           
  4068                           ;psect for function _SetOutputs
  4069  07B8                     _SetOutputs:	
  4070                           
  4071                           ;incstack = 0
  4072                           ; Regs used in _SetOutputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4073                           ;SetOutputs@state stored from wreg
  4074  07B8  00F7               	movwf	SetOutputs@state
  4075  07B9                     l2478:	
  4076                           
  4077                           ;Lights.c: 38: void SetOutputs( const _Bool state );Lights.c: 39: {;Lights.c: 40:     Se
      +                          tLight( L1, state );
  4078  07B9  0877               	movf	SetOutputs@state,w
  4079  07BA  00F6               	movwf	??_SetOutputs
  4080  07BB  0876               	movf	??_SetOutputs,w
  4081  07BC  00F2               	movwf	SetLight@state
  4082  07BD  3000               	movlw	0
  4083  07BE  3185  257F  3187   	fcall	_SetLight
  4084                           
  4085                           ;Lights.c: 41:     SetLight( L2, state );
  4086  07C1  0877               	movf	SetOutputs@state,w
  4087  07C2  00F6               	movwf	??_SetOutputs
  4088  07C3  0876               	movf	??_SetOutputs,w
  4089  07C4  00F2               	movwf	SetLight@state
  4090  07C5  3001               	movlw	1
  4091  07C6  3185  257F  3187   	fcall	_SetLight
  4092                           
  4093                           ;Lights.c: 42:     SetLight( L3, state );
  4094  07C9  0877               	movf	SetOutputs@state,w
  4095  07CA  00F6               	movwf	??_SetOutputs
  4096  07CB  0876               	movf	??_SetOutputs,w
  4097  07CC  00F2               	movwf	SetLight@state
  4098  07CD  3002               	movlw	2
  4099  07CE  3185  257F  3187   	fcall	_SetLight
  4100                           
  4101                           ;Lights.c: 43:     SetLight( L4, state );
  4102  07D1  0877               	movf	SetOutputs@state,w
  4103  07D2  00F6               	movwf	??_SetOutputs
  4104  07D3  0876               	movf	??_SetOutputs,w
  4105  07D4  00F2               	movwf	SetLight@state
  4106  07D5  3003               	movlw	3
  4107  07D6  3185  257F  3187   	fcall	_SetLight
  4108  07D9                     l382:	
  4109  07D9  0008               	return
  4110  07DA                     __end_of_SetOutputs:	
  4111                           
  4112                           	psect	text4
  4113  0F64                     __ptext4:	
  4114 ;; *************** function _SYSTEM_Initialize *****************
  4115 ;; Defined at:
  4116 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;		None
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;		None
  4121 ;; Return value:  Size  Location     Type
  4122 ;;                  1    wreg      void 
  4123 ;; Registers used:
  4124 ;;		wreg, status,2, status,0, pclath, cstack
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4134 ;;Total ram usage:        0 bytes
  4135 ;; Hardware stack levels used:    1
  4136 ;; Hardware stack levels required when called:    6
  4137 ;; This function calls:
  4138 ;;		_OSCILLATOR_Initialize
  4139 ;;		_PIN_MANAGER_Initialize
  4140 ;;		_PMD_Initialize
  4141 ;;		_TMR1_Initialize
  4142 ;;		_WDT_Initialize
  4143 ;; This function is called by:
  4144 ;;		_setup
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148                           
  4149                           ;psect for function _SYSTEM_Initialize
  4150  0F64                     _SYSTEM_Initialize:	
  4151  0F64                     l2056:	
  4152                           ;incstack = 0
  4153                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4154                           
  4155                           
  4156                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
  4157  0F64  318F  2723  318F   	fcall	_PMD_Initialize
  4158  0F67                     l2058:	
  4159                           
  4160                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  4161  0F67  3187  2768  318F   	fcall	_PIN_MANAGER_Initialize
  4162  0F6A                     l2060:	
  4163                           
  4164                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  4165  0F6A  318F  2734  318F   	fcall	_OSCILLATOR_Initialize
  4166  0F6D                     l2062:	
  4167                           
  4168                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  4169  0F6D  318F  2713  318F   	fcall	_WDT_Initialize
  4170  0F70                     l2064:	
  4171                           
  4172                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  4173  0F70  318F  2785  318F   	fcall	_TMR1_Initialize
  4174  0F73                     l51:	
  4175  0F73  0008               	return
  4176  0F74                     __end_of_SYSTEM_Initialize:	
  4177                           
  4178                           	psect	text5
  4179  0F13                     __ptext5:	
  4180 ;; *************** function _WDT_Initialize *****************
  4181 ;; Defined at:
  4182 ;;		line 74 in file "mcc_generated_files/mcc.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;		None
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;		None
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  1    wreg      void 
  4189 ;; Registers used:
  4190 ;;		wreg
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4200 ;;Total ram usage:        0 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    4
  4203 ;; This function calls:
  4204 ;;		Nothing
  4205 ;; This function is called by:
  4206 ;;		_SYSTEM_Initialize
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           
  4211                           ;psect for function _WDT_Initialize
  4212  0F13                     _WDT_Initialize:	
  4213  0F13                     l1836:	
  4214                           ;incstack = 0
  4215                           ; Regs used in _WDT_Initialize: [wreg]
  4216                           
  4217                           
  4218                           ;mcc_generated_files/mcc.c: 77:     WDTCON = 0x16;
  4219  0F13  3016               	movlw	22
  4220  0F14  0021               	movlb	1	; select bank1
  4221  0F15  0097               	movwf	23	;volatile
  4222  0F16                     l57:	
  4223  0F16  0008               	return
  4224  0F17                     __end_of_WDT_Initialize:	
  4225                           
  4226                           	psect	text6
  4227  0F85                     __ptext6:	
  4228 ;; *************** function _TMR1_Initialize *****************
  4229 ;; Defined at:
  4230 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;		None
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;		None
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  1    wreg      void 
  4237 ;; Registers used:
  4238 ;;		wreg, status,2, status,0, pclath, cstack
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;Total ram usage:        0 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    5
  4251 ;; This function calls:
  4252 ;;		_TMR1_SetInterruptHandler
  4253 ;; This function is called by:
  4254 ;;		_SYSTEM_Initialize
  4255 ;;		_setup
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           
  4260                           ;psect for function _TMR1_Initialize
  4261  0F85                     _TMR1_Initialize:	
  4262  0F85                     l1838:	
  4263                           ;incstack = 0
  4264                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4265                           
  4266                           
  4267                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  4268  0F85  0020               	movlb	0	; select bank0
  4269  0F86  019C               	clrf	28	;volatile
  4270  0F87                     l1840:	
  4271                           
  4272                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xFF;
  4273  0F87  30FF               	movlw	255
  4274  0F88  009A               	movwf	26	;volatile
  4275  0F89                     l1842:	
  4276                           
  4277                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0x00;
  4278  0F89  0199               	clrf	25	;volatile
  4279  0F8A                     l1844:	
  4280                           
  4281                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  4282  0F8A  1011               	bcf	17,0	;volatile
  4283                           
  4284                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  4285  0F8B  081A               	movf	26,w	;volatile
  4286  0F8C  00ED               	movwf	_timer1ReloadVal+1	;volatile
  4287  0F8D  0819               	movf	25,w	;volatile
  4288  0F8E  00EC               	movwf	_timer1ReloadVal	;volatile
  4289  0F8F                     l1846:	
  4290                           
  4291                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  4292  0F8F  0021               	movlb	1	; select bank1
  4293  0F90  1411               	bsf	17,0	;volatile
  4294  0F91                     l1848:	
  4295                           
  4296                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  4297  0F91  3017               	movlw	low _TMR1_DefaultInterruptHandler
  4298  0F92  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  4299  0F93  300F               	movlw	high _TMR1_DefaultInterruptHandler
  4300  0F94  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  4301  0F95  3187  27FA  318F   	fcall	_TMR1_SetInterruptHandler
  4302  0F98                     l207:	
  4303  0F98  0008               	return
  4304  0F99                     __end_of_TMR1_Initialize:	
  4305                           
  4306                           	psect	text7
  4307  07FA                     __ptext7:	
  4308 ;; *************** function _TMR1_SetInterruptHandler *****************
  4309 ;; Defined at:
  4310 ;;		line 172 in file "mcc_generated_files/tmr1.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  4313 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;		None
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  1    wreg      void 
  4318 ;; Registers used:
  4319 ;;		wreg
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4325 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4329 ;;Total ram usage:        2 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    4
  4332 ;; This function calls:
  4333 ;;		Nothing
  4334 ;; This function is called by:
  4335 ;;		_TMR1_Initialize
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           
  4340                           ;psect for function _TMR1_SetInterruptHandler
  4341  07FA                     _TMR1_SetInterruptHandler:	
  4342  07FA                     l1738:	
  4343                           ;incstack = 0
  4344                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  4345                           
  4346                           
  4347                           ;mcc_generated_files/tmr1.c: 173:     TMR1_InterruptHandler = InterruptHandler;
  4348  07FA  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  4349  07FB  0021               	movlb	1	; select bank1
  4350  07FC  00E9               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  4351  07FD  0872               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  4352  07FE  00E8               	movwf	_TMR1_InterruptHandler^(0+128)
  4353  07FF                     l237:	
  4354  07FF  0008               	return
  4355  0800                     __end_of_TMR1_SetInterruptHandler:	
  4356                           
  4357                           	psect	text8
  4358  0F23                     __ptext8:	
  4359 ;; *************** function _PMD_Initialize *****************
  4360 ;; Defined at:
  4361 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;		None
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;		None
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  1    wreg      void 
  4368 ;; Registers used:
  4369 ;;		status,2
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4379 ;;Total ram usage:        0 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; Hardware stack levels required when called:    4
  4382 ;; This function calls:
  4383 ;;		Nothing
  4384 ;; This function is called by:
  4385 ;;		_SYSTEM_Initialize
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           
  4390                           ;psect for function _PMD_Initialize
  4391  0F23                     _PMD_Initialize:	
  4392  0F23                     l1794:	
  4393                           ;incstack = 0
  4394                           ; Regs used in _PMD_Initialize: [status,2]
  4395                           
  4396                           
  4397                           ;mcc_generated_files/mcc.c: 83:     PMD0 = 0x00;
  4398  0F23  0032               	movlb	18	; select bank18
  4399  0F24  0191               	clrf	17	;volatile
  4400                           
  4401                           ;mcc_generated_files/mcc.c: 85:     PMD1 = 0x00;
  4402  0F25  0192               	clrf	18	;volatile
  4403                           
  4404                           ;mcc_generated_files/mcc.c: 87:     PMD2 = 0x00;
  4405  0F26  0193               	clrf	19	;volatile
  4406                           
  4407                           ;mcc_generated_files/mcc.c: 89:     PMD3 = 0x00;
  4408  0F27  0194               	clrf	20	;volatile
  4409                           
  4410                           ;mcc_generated_files/mcc.c: 91:     PMD4 = 0x00;
  4411  0F28  0195               	clrf	21	;volatile
  4412                           
  4413                           ;mcc_generated_files/mcc.c: 93:     PMD5 = 0x00;
  4414  0F29  0196               	clrf	22	;volatile
  4415  0F2A                     l60:	
  4416  0F2A  0008               	return
  4417  0F2B                     __end_of_PMD_Initialize:	
  4418                           
  4419                           	psect	text9
  4420  0768                     __ptext9:	
  4421 ;; *************** function _PIN_MANAGER_Initialize *****************
  4422 ;; Defined at:
  4423 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;		None
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;		None
  4428 ;; Return value:  Size  Location     Type
  4429 ;;                  1    wreg      void 
  4430 ;; Registers used:
  4431 ;;		wreg, status,2, status,0, pclath, cstack
  4432 ;; Tracked objects:
  4433 ;;		On entry : 0/0
  4434 ;;		On exit  : 0/0
  4435 ;;		Unchanged: 0/0
  4436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4441 ;;Total ram usage:        0 bytes
  4442 ;; Hardware stack levels used:    1
  4443 ;; Hardware stack levels required when called:    5
  4444 ;; This function calls:
  4445 ;;		_IOCCF0_SetInterruptHandler
  4446 ;; This function is called by:
  4447 ;;		_SYSTEM_Initialize
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           
  4452                           ;psect for function _PIN_MANAGER_Initialize
  4453  0768                     _PIN_MANAGER_Initialize:	
  4454  0768                     l1796:	
  4455                           ;incstack = 0
  4456                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4457                           
  4458                           
  4459                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
  4460  0768  0022               	movlb	2	; select bank2
  4461  0769  018C               	clrf	12	;volatile
  4462  076A                     l1798:	
  4463                           
  4464                           ;mcc_generated_files/pin_manager.c: 63:     LATC = 0x20;
  4465  076A  3020               	movlw	32
  4466  076B  008E               	movwf	14	;volatile
  4467  076C                     l1800:	
  4468                           
  4469                           ;mcc_generated_files/pin_manager.c: 68:     TRISA = 0x37;
  4470  076C  3037               	movlw	55
  4471  076D  0021               	movlb	1	; select bank1
  4472  076E  008C               	movwf	12	;volatile
  4473  076F                     l1802:	
  4474                           
  4475                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x21;
  4476  076F  3021               	movlw	33
  4477  0770  008E               	movwf	14	;volatile
  4478  0771                     l1804:	
  4479                           
  4480                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  4481  0771  0023               	movlb	3	; select bank3
  4482  0772  018E               	clrf	14	;volatile
  4483                           
  4484                           ;mcc_generated_files/pin_manager.c: 75:     ANSELA = 0x33;
  4485  0773  3033               	movlw	51
  4486  0774  008C               	movwf	12	;volatile
  4487  0775                     l1806:	
  4488                           
  4489                           ;mcc_generated_files/pin_manager.c: 80:     WPUA = 0x00;
  4490  0775  0024               	movlb	4	; select bank4
  4491  0776  018C               	clrf	12	;volatile
  4492  0777                     l1808:	
  4493                           
  4494                           ;mcc_generated_files/pin_manager.c: 81:     WPUC = 0x1E;
  4495  0777  301E               	movlw	30
  4496  0778  008E               	movwf	14	;volatile
  4497                           
  4498                           ;mcc_generated_files/pin_manager.c: 86:     ODCONA = 0x00;
  4499  0779  0025               	movlb	5	; select bank5
  4500  077A  018C               	clrf	12	;volatile
  4501                           
  4502                           ;mcc_generated_files/pin_manager.c: 87:     ODCONC = 0x00;
  4503  077B  018E               	clrf	14	;volatile
  4504  077C                     l1810:	
  4505                           
  4506                           ;mcc_generated_files/pin_manager.c: 92:     SLRCONA = 0x37;
  4507  077C  3037               	movlw	55
  4508  077D  0026               	movlb	6	; select bank6
  4509  077E  008C               	movwf	12	;volatile
  4510  077F                     l1812:	
  4511                           
  4512                           ;mcc_generated_files/pin_manager.c: 93:     SLRCONC = 0x3F;
  4513  077F  303F               	movlw	63
  4514  0780  008E               	movwf	14	;volatile
  4515  0781                     l1814:	
  4516                           
  4517                           ;mcc_generated_files/pin_manager.c: 98:     INLVLA = 0x3F;
  4518  0781  303F               	movlw	63
  4519  0782  0027               	movlb	7	; select bank7
  4520  0783  008C               	movwf	12	;volatile
  4521  0784                     l1816:	
  4522                           
  4523                           ;mcc_generated_files/pin_manager.c: 99:     INLVLC = 0x3F;
  4524  0784  303F               	movlw	63
  4525  0785  008E               	movwf	14	;volatile
  4526  0786                     l1818:	
  4527                           
  4528                           ;mcc_generated_files/pin_manager.c: 106:     IOCCFbits.IOCCF0 = 0;
  4529  0786  1019               	bcf	25,0	;volatile
  4530  0787                     l1820:	
  4531                           
  4532                           ;mcc_generated_files/pin_manager.c: 108:     IOCCNbits.IOCCN0 = 0;
  4533  0787  1018               	bcf	24,0	;volatile
  4534  0788                     l1822:	
  4535                           
  4536                           ;mcc_generated_files/pin_manager.c: 110:     IOCCPbits.IOCCP0 = 1;
  4537  0788  1417               	bsf	23,0	;volatile
  4538  0789                     l1824:	
  4539                           
  4540                           ;mcc_generated_files/pin_manager.c: 115:     IOCCF0_SetInterruptHandler(IOCCF0_DefaultIn
      +                          terruptHandler);
  4541  0789  3003               	movlw	low _IOCCF0_DefaultInterruptHandler
  4542  078A  00F2               	movwf	IOCCF0_SetInterruptHandler@InterruptHandler
  4543  078B  3000               	movlw	high _IOCCF0_DefaultInterruptHandler
  4544  078C  00F3               	movwf	IOCCF0_SetInterruptHandler@InterruptHandler+1
  4545  078D  318F  271D  3187   	fcall	_IOCCF0_SetInterruptHandler
  4546  0790                     l1826:	
  4547                           
  4548                           ;mcc_generated_files/pin_manager.c: 118:     PIE0bits.IOCIE = 1;
  4549  0790  0021               	movlb	1	; select bank1
  4550  0791  1610               	bsf	16,4	;volatile
  4551  0792                     l121:	
  4552  0792  0008               	return
  4553  0793                     __end_of_PIN_MANAGER_Initialize:	
  4554                           
  4555                           	psect	text10
  4556  0F1D                     __ptext10:	
  4557 ;; *************** function _IOCCF0_SetInterruptHandler *****************
  4558 ;; Defined at:
  4559 ;;		line 149 in file "mcc_generated_files/pin_manager.c"
  4560 ;; Parameters:    Size  Location     Type
  4561 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  4562 ;;		 -> IOCCF0_DefaultInterruptHandler(1), 
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;		None
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1    wreg      void 
  4567 ;; Registers used:
  4568 ;;		wreg
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/0
  4571 ;;		On exit  : 0/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4574 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;Total ram usage:        2 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; Hardware stack levels required when called:    4
  4581 ;; This function calls:
  4582 ;;		Nothing
  4583 ;; This function is called by:
  4584 ;;		_PIN_MANAGER_Initialize
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           
  4589                           ;psect for function _IOCCF0_SetInterruptHandler
  4590  0F1D                     _IOCCF0_SetInterruptHandler:	
  4591  0F1D                     l1736:	
  4592                           ;incstack = 0
  4593                           ; Regs used in _IOCCF0_SetInterruptHandler: [wreg]
  4594                           
  4595                           
  4596                           ;mcc_generated_files/pin_manager.c: 150:     IOCCF0_InterruptHandler = InterruptHandler;
  4597  0F1D  0873               	movf	IOCCF0_SetInterruptHandler@InterruptHandler+1,w
  4598  0F1E  0020               	movlb	0	; select bank0
  4599  0F1F  00EF               	movwf	_IOCCF0_InterruptHandler+1
  4600  0F20  0872               	movf	IOCCF0_SetInterruptHandler@InterruptHandler,w
  4601  0F21  00EE               	movwf	_IOCCF0_InterruptHandler
  4602  0F22                     l132:	
  4603  0F22  0008               	return
  4604  0F23                     __end_of_IOCCF0_SetInterruptHandler:	
  4605                           
  4606                           	psect	text11
  4607  0F34                     __ptext11:	
  4608 ;; *************** function _OSCILLATOR_Initialize *****************
  4609 ;; Defined at:
  4610 ;;		line 60 in file "mcc_generated_files/mcc.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;		None
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      void 
  4617 ;; Registers used:
  4618 ;;		wreg, status,2
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4628 ;;Total ram usage:        0 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    4
  4631 ;; This function calls:
  4632 ;;		Nothing
  4633 ;; This function is called by:
  4634 ;;		_SYSTEM_Initialize
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           
  4639                           ;psect for function _OSCILLATOR_Initialize
  4640  0F34                     _OSCILLATOR_Initialize:	
  4641  0F34                     l1828:	
  4642                           ;incstack = 0
  4643                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4644                           
  4645                           
  4646                           ;mcc_generated_files/mcc.c: 63:     OSCCON1 = 0x62;
  4647  0F34  3062               	movlw	98
  4648  0F35  0032               	movlb	18	; select bank18
  4649  0F36  0099               	movwf	25	;volatile
  4650  0F37                     l1830:	
  4651                           
  4652                           ;mcc_generated_files/mcc.c: 65:     OSCCON3 = 0x00;
  4653  0F37  019B               	clrf	27	;volatile
  4654  0F38                     l1832:	
  4655                           
  4656                           ;mcc_generated_files/mcc.c: 67:     OSCEN = 0x00;
  4657  0F38  019D               	clrf	29	;volatile
  4658                           
  4659                           ;mcc_generated_files/mcc.c: 69:     OSCFRQ = 0x03;
  4660  0F39  3003               	movlw	3
  4661  0F3A  009F               	movwf	31	;volatile
  4662  0F3B                     l1834:	
  4663                           
  4664                           ;mcc_generated_files/mcc.c: 71:     OSCTUNE = 0x00;
  4665  0F3B  019E               	clrf	30	;volatile
  4666  0F3C                     l54:	
  4667  0F3C  0008               	return
  4668  0F3D                     __end_of_OSCILLATOR_Initialize:	
  4669                           
  4670                           	psect	text12
  4671  0486                     __ptext12:	
  4672 ;; *************** function _InitPatternSelector *****************
  4673 ;; Defined at:
  4674 ;;		line 10 in file "PatternSelector.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;  p_selector      2   52[BANK0 ] PTR struct PatternSelect
  4677 ;;		 -> pattern_selector(15), 
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;  i               2   58[BANK0 ] int 
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  1    wreg      void 
  4682 ;; Registers used:
  4683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4689 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4690 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4691 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4692 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4693 ;;Total ram usage:        8 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    8
  4696 ;; This function calls:
  4697 ;;		_InitLowerPattern
  4698 ;;		_InitUpperLowerPattern
  4699 ;;		_InitWigwagPattern
  4700 ;;		_InitXStrobePattern
  4701 ;;		_NewPattern
  4702 ;; This function is called by:
  4703 ;;		_setup
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           
  4708                           ;psect for function _InitPatternSelector
  4709  0486                     _InitPatternSelector:	
  4710  0486                     l2480:	
  4711                           ;incstack = 0
  4712                           ; Regs used in _InitPatternSelector: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4713                           
  4714                           
  4715                           ;PatternSelector.c: 10: void InitPatternSelector( struct PatternSelector* p_selector );P
      +                          atternSelector.c: 11: {;PatternSelector.c: 13:     for ( int i = 0; i < MAX_PATTERNS; i+
      +                          + )
  4716  0486  0020               	movlb	0	; select bank0
  4717  0487  01DA               	clrf	InitPatternSelector@i
  4718  0488  01DB               	clrf	InitPatternSelector@i+1
  4719  0489                     l2486:	
  4720                           
  4721                           ;PatternSelector.c: 14:     {;PatternSelector.c: 15:         p_selector->patterns[i] = N
      +                          ewPattern();
  4722  0489  3186  2697  3184   	fcall	_NewPattern
  4723  048C  0020               	movlb	0	; select bank0
  4724  048D  085B               	movf	InitPatternSelector@i+1,w
  4725  048E  00D7               	movwf	??_InitPatternSelector+1
  4726  048F  085A               	movf	InitPatternSelector@i,w
  4727  0490  00D6               	movwf	??_InitPatternSelector
  4728  0491  35D6               	lslf	??_InitPatternSelector,f
  4729  0492  0DD7               	rlf	??_InitPatternSelector+1,f
  4730  0493  0856               	movf	??_InitPatternSelector,w
  4731  0494  0754               	addwf	InitPatternSelector@p_selector,w
  4732  0495  0086               	movwf	6
  4733  0496  0857               	movf	??_InitPatternSelector+1,w
  4734  0497  3D55               	addwfc	InitPatternSelector@p_selector+1,w
  4735  0498  0087               	movwf	7
  4736  0499  0879               	movf	?_NewPattern,w
  4737  049A  3FC0               	movwi [0]fsr1
  4738  049B  087A               	movf	?_NewPattern+1,w
  4739  049C  3FC1               	movwi [1]fsr1
  4740  049D                     l2488:	
  4741                           
  4742                           ;PatternSelector.c: 16:     }
  4743  049D  3001               	movlw	1
  4744  049E  07DA               	addwf	InitPatternSelector@i,f
  4745  049F  3000               	movlw	0
  4746  04A0  3DDB               	addwfc	InitPatternSelector@i+1,f
  4747  04A1                     l2490:	
  4748  04A1  085B               	movf	InitPatternSelector@i+1,w
  4749  04A2  3A80               	xorlw	128
  4750  04A3  00D6               	movwf	??_InitPatternSelector
  4751  04A4  3080               	movlw	128
  4752  04A5  0256               	subwf	??_InitPatternSelector,w
  4753  04A6  1D03               	skipz
  4754  04A7  2CAA               	goto	u1145
  4755  04A8  3006               	movlw	6
  4756  04A9  025A               	subwf	InitPatternSelector@i,w
  4757  04AA                     u1145:	
  4758  04AA  1C03               	skipc
  4759  04AB  2CAD               	goto	u1141
  4760  04AC  2CAE               	goto	u1140
  4761  04AD                     u1141:	
  4762  04AD  2C89               	goto	l2486
  4763  04AE                     u1140:	
  4764  04AE                     l2492:	
  4765                           
  4766                           ;PatternSelector.c: 17:     p_selector->active = WIGWAG;
  4767  04AE  0020               	movlb	0	; select bank0
  4768  04AF  0854               	movf	InitPatternSelector@p_selector,w
  4769  04B0  0086               	movwf	6
  4770  04B1  0855               	movf	InitPatternSelector@p_selector+1,w
  4771  04B2  0087               	movwf	7
  4772  04B3  314C               	addfsr 1,12
  4773  04B4  0181               	clrf	1
  4774  04B5                     l2494:	
  4775                           
  4776                           ;PatternSelector.c: 19:     InitWigwagPattern( p_selector->patterns[WIGWAG] );
  4777  04B5  0854               	movf	InitPatternSelector@p_selector,w
  4778  04B6  0086               	movwf	6
  4779  04B7  0855               	movf	InitPatternSelector@p_selector+1,w
  4780  04B8  0087               	movwf	7
  4781  04B9  3F40               	moviw [0]fsr1
  4782  04BA  00BD               	movwf	InitWigwagPattern@pattern
  4783  04BB  3F41               	moviw [1]fsr1
  4784  04BC  00BE               	movwf	InitWigwagPattern@pattern+1
  4785  04BD  3183  237D  3184   	fcall	_InitWigwagPattern
  4786  04C0                     l2496:	
  4787                           
  4788                           ;PatternSelector.c: 20:     InitXStrobePattern( p_selector->patterns[XSTROBE] );
  4789  04C0  0020               	movlb	0	; select bank0
  4790  04C1  0854               	movf	InitPatternSelector@p_selector,w
  4791  04C2  0086               	movwf	6
  4792  04C3  0855               	movf	InitPatternSelector@p_selector+1,w
  4793  04C4  0087               	movwf	7
  4794  04C5  3142               	addfsr 1,2
  4795  04C6  3F40               	moviw [0]fsr1
  4796  04C7  00BD               	movwf	InitXStrobePattern@pattern
  4797  04C8  3F41               	moviw [1]fsr1
  4798  04C9  00BE               	movwf	InitXStrobePattern@pattern+1
  4799  04CA  3180  205F  3184   	fcall	_InitXStrobePattern
  4800  04CD                     l2498:	
  4801                           
  4802                           ;PatternSelector.c: 21:     InitUpperLowerPattern( p_selector->patterns[UPPER_LOWER] );
  4803  04CD  0020               	movlb	0	; select bank0
  4804  04CE  0854               	movf	InitPatternSelector@p_selector,w
  4805  04CF  0086               	movwf	6
  4806  04D0  0855               	movf	InitPatternSelector@p_selector+1,w
  4807  04D1  0087               	movwf	7
  4808  04D2  3144               	addfsr 1,4
  4809  04D3  3F40               	moviw [0]fsr1
  4810  04D4  00BD               	movwf	InitUpperLowerPattern@pattern
  4811  04D5  3F41               	moviw [1]fsr1
  4812  04D6  00BE               	movwf	InitUpperLowerPattern@pattern+1
  4813  04D7  3181  2169  3184   	fcall	_InitUpperLowerPattern
  4814  04DA                     l2500:	
  4815                           
  4816                           ;PatternSelector.c: 22:     InitLowerPattern( p_selector->patterns[LOWER] );
  4817  04DA  0020               	movlb	0	; select bank0
  4818  04DB  0854               	movf	InitPatternSelector@p_selector,w
  4819  04DC  0086               	movwf	6
  4820  04DD  0855               	movf	InitPatternSelector@p_selector+1,w
  4821  04DE  0087               	movwf	7
  4822  04DF  3146               	addfsr 1,6
  4823  04E0  3F40               	moviw [0]fsr1
  4824  04E1  00BD               	movwf	InitLowerPattern@pattern
  4825  04E2  3F41               	moviw [1]fsr1
  4826  04E3  00BE               	movwf	InitLowerPattern@pattern+1
  4827  04E4  3182  2273  3184   	fcall	_InitLowerPattern
  4828  04E7                     l2502:	
  4829                           
  4830                           ;PatternSelector.c: 24:     p_selector->current_stage = p_selector->patterns[ p_selector
      +                          ->active ]->first_stage;
  4831  04E7  0020               	movlb	0	; select bank0
  4832  04E8  0854               	movf	InitPatternSelector@p_selector,w
  4833  04E9  0086               	movwf	6
  4834  04EA  0855               	movf	InitPatternSelector@p_selector+1,w
  4835  04EB  0087               	movwf	7
  4836  04EC  314C               	addfsr 1,12
  4837  04ED  0801               	movf	1,w
  4838  04EE  00D6               	movwf	??_InitPatternSelector
  4839  04EF  01D7               	clrf	??_InitPatternSelector+1
  4840  04F0  35D6               	lslf	??_InitPatternSelector,f
  4841  04F1  0DD7               	rlf	??_InitPatternSelector+1,f
  4842  04F2  0856               	movf	??_InitPatternSelector,w
  4843  04F3  0754               	addwf	InitPatternSelector@p_selector,w
  4844  04F4  0086               	movwf	6
  4845  04F5  0857               	movf	??_InitPatternSelector+1,w
  4846  04F6  3D55               	addwfc	InitPatternSelector@p_selector+1,w
  4847  04F7  0087               	movwf	7
  4848  04F8  3F40               	moviw [0]fsr1
  4849  04F9  00D8               	movwf	??_InitPatternSelector+2
  4850  04FA  3F41               	moviw [1]fsr1
  4851  04FB  00D9               	movwf	??_InitPatternSelector+3
  4852  04FC  0858               	movf	??_InitPatternSelector+2,w
  4853  04FD  0086               	movwf	6
  4854  04FE  0859               	movf	??_InitPatternSelector+3,w
  4855  04FF  0087               	movwf	7
  4856  0500  3141               	addfsr 1,1
  4857  0501  0854               	movf	InitPatternSelector@p_selector,w
  4858  0502  0084               	movwf	4
  4859  0503  0855               	movf	InitPatternSelector@p_selector+1,w
  4860  0504  0085               	movwf	5
  4861  0505  310D               	addfsr 0,13
  4862  0506  3F40               	moviw [0]fsr1
  4863  0507  3F80               	movwi [0]fsr0
  4864  0508  3F41               	moviw [1]fsr1
  4865  0509  3F81               	movwi [1]fsr0
  4866  050A                     l329:	
  4867  050A  0008               	return
  4868  050B                     __end_of_InitPatternSelector:	
  4869                           
  4870                           	psect	text13
  4871  0697                     __ptext13:	
  4872 ;; *************** function _NewPattern *****************
  4873 ;; Defined at:
  4874 ;;		line 36 in file "Pattern.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;		None
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;  new_pattern     2   14[BANK0 ] PTR struct Pattern
  4879 ;;		 -> pattern_stash(18), 
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  2    9[COMMON] PTR struct Pattern
  4882 ;; Registers used:
  4883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4893 ;;Total ram usage:        4 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    6
  4896 ;; This function calls:
  4897 ;;		_NewStage
  4898 ;;		___wmul
  4899 ;; This function is called by:
  4900 ;;		_InitPatternSelector
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           
  4905                           ;psect for function _NewPattern
  4906  0697                     _NewPattern:	
  4907  0697                     l2272:	
  4908                           ;incstack = 0
  4909                           ; Regs used in _NewPattern: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4910                           
  4911                           
  4912                           ;Pattern.c: 38:     if ( pattern_list_iter >= MAX_PATTERNS )
  4913  0697  3000               	movlw	0
  4914  0698  0020               	movlb	0	; select bank0
  4915  0699  025F               	subwf	_pattern_list_iter+1,w
  4916  069A  3006               	movlw	6
  4917  069B  1903               	skipnz
  4918  069C  025E               	subwf	_pattern_list_iter,w
  4919  069D  1C03               	skipc
  4920  069E  2EA0               	goto	u931
  4921  069F  2EA1               	goto	u930
  4922  06A0                     u931:	
  4923  06A0  2EA4               	goto	l2278
  4924  06A1                     u930:	
  4925  06A1                     l2274:	
  4926                           
  4927                           ;Pattern.c: 39:     {;Pattern.c: 40:         return ((void*)0);
  4928  06A1  01F9               	clrf	?_NewPattern
  4929  06A2  01FA               	clrf	?_NewPattern+1
  4930  06A3  2ED4               	goto	l447
  4931  06A4                     l2278:	
  4932                           
  4933                           ;Pattern.c: 42:     struct Pattern* new_pattern = &pattern_stash[ pattern_list_iter++ ];
  4934  06A4  085F               	movf	_pattern_list_iter+1,w
  4935  06A5  00F3               	movwf	___wmul@multiplier+1
  4936  06A6  085E               	movf	_pattern_list_iter,w
  4937  06A7  00F2               	movwf	___wmul@multiplier
  4938  06A8  3003               	movlw	3
  4939  06A9  00F4               	movwf	___wmul@multiplicand
  4940  06AA  3000               	movlw	0
  4941  06AB  00F5               	movwf	___wmul@multiplicand+1
  4942  06AC  318F  27E1  3186   	fcall	___wmul
  4943  06AF  30A7               	movlw	low _pattern_stash
  4944  06B0  0020               	movlb	0	; select bank0
  4945  06B1  00AC               	movwf	??_NewPattern
  4946  06B2  3000               	movlw	high _pattern_stash
  4947  06B3  00AD               	movwf	??_NewPattern+1
  4948  06B4  0872               	movf	?___wmul,w
  4949  06B5  072C               	addwf	??_NewPattern,w
  4950  06B6  00AE               	movwf	NewPattern@new_pattern
  4951  06B7  0873               	movf	?___wmul+1,w
  4952  06B8  3D2D               	addwfc	??_NewPattern+1,w
  4953  06B9  00AF               	movwf	NewPattern@new_pattern+1
  4954  06BA                     l2280:	
  4955  06BA  3001               	movlw	1
  4956  06BB  07DE               	addwf	_pattern_list_iter,f
  4957  06BC  3000               	movlw	0
  4958  06BD  3DDF               	addwfc	_pattern_list_iter+1,f
  4959  06BE                     l2282:	
  4960                           
  4961                           ;Pattern.c: 43:     new_pattern->name = WIGWAG;
  4962  06BE  082E               	movf	NewPattern@new_pattern,w
  4963  06BF  0086               	movwf	6
  4964  06C0  082F               	movf	NewPattern@new_pattern+1,w
  4965  06C1  0087               	movwf	7
  4966  06C2  0181               	clrf	1
  4967  06C3                     l2284:	
  4968                           
  4969                           ;Pattern.c: 44:     new_pattern->first_stage = NewStage();
  4970  06C3  3186  2648  3186   	fcall	_NewStage
  4971  06C6  0020               	movlb	0	; select bank0
  4972  06C7  082E               	movf	NewPattern@new_pattern,w
  4973  06C8  0086               	movwf	6
  4974  06C9  082F               	movf	NewPattern@new_pattern+1,w
  4975  06CA  0087               	movwf	7
  4976  06CB  3141               	addfsr 1,1
  4977  06CC  0877               	movf	?_NewStage,w
  4978  06CD  3FC0               	movwi [0]fsr1
  4979  06CE  0878               	movf	?_NewStage+1,w
  4980  06CF  3FC1               	movwi [1]fsr1
  4981  06D0                     l2286:	
  4982                           
  4983                           ;Pattern.c: 46:     return new_pattern;
  4984  06D0  082F               	movf	NewPattern@new_pattern+1,w
  4985  06D1  00FA               	movwf	?_NewPattern+1
  4986  06D2  082E               	movf	NewPattern@new_pattern,w
  4987  06D3  00F9               	movwf	?_NewPattern
  4988  06D4                     l447:	
  4989  06D4  0008               	return
  4990  06D5                     __end_of_NewPattern:	
  4991                           
  4992                           	psect	text14
  4993  0FE1                     __ptext14:	
  4994 ;; *************** function ___wmul *****************
  4995 ;; Defined at:
  4996 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;  multiplier      2    2[COMMON] unsigned int 
  4999 ;;  multiplicand    2    4[COMMON] unsigned int 
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;  product         2    6[COMMON] unsigned int 
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  2    2[COMMON] unsigned int 
  5004 ;; Registers used:
  5005 ;;		wreg, status,2, status,0
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5011 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;Total ram usage:        6 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    4
  5018 ;; This function calls:
  5019 ;;		Nothing
  5020 ;; This function is called by:
  5021 ;;		_NewPattern
  5022 ;; This function uses a non-reentrant model
  5023 ;;
  5024                           
  5025                           
  5026                           ;psect for function ___wmul
  5027  0FE1                     ___wmul:	
  5028  0FE1                     l1780:	
  5029                           ;incstack = 0
  5030                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5031                           
  5032  0FE1  01F6               	clrf	___wmul@product
  5033  0FE2  01F7               	clrf	___wmul@product+1
  5034  0FE3                     l1782:	
  5035  0FE3  1C72               	btfss	___wmul@multiplier,0
  5036  0FE4  2FE6               	goto	u511
  5037  0FE5  2FE7               	goto	u510
  5038  0FE6                     u511:	
  5039  0FE6  2FEB               	goto	l696
  5040  0FE7                     u510:	
  5041  0FE7                     l1784:	
  5042  0FE7  0874               	movf	___wmul@multiplicand,w
  5043  0FE8  07F6               	addwf	___wmul@product,f
  5044  0FE9  0875               	movf	___wmul@multiplicand+1,w
  5045  0FEA  3DF7               	addwfc	___wmul@product+1,f
  5046  0FEB                     l696:	
  5047  0FEB  3001               	movlw	1
  5048  0FEC                     u525:	
  5049  0FEC  35F4               	lslf	___wmul@multiplicand,f
  5050  0FED  0DF5               	rlf	___wmul@multiplicand+1,f
  5051  0FEE  0B89               	decfsz	9,f
  5052  0FEF  2FEC               	goto	u525
  5053  0FF0                     l1786:	
  5054  0FF0  3001               	movlw	1
  5055  0FF1                     u535:	
  5056  0FF1  36F3               	lsrf	___wmul@multiplier+1,f
  5057  0FF2  0CF2               	rrf	___wmul@multiplier,f
  5058  0FF3  0B89               	decfsz	9,f
  5059  0FF4  2FF1               	goto	u535
  5060  0FF5                     l1788:	
  5061  0FF5  0872               	movf	___wmul@multiplier,w
  5062  0FF6  0473               	iorwf	___wmul@multiplier+1,w
  5063  0FF7  1D03               	btfss	3,2
  5064  0FF8  2FFA               	goto	u541
  5065  0FF9  2FFB               	goto	u540
  5066  0FFA                     u541:	
  5067  0FFA  2FE3               	goto	l1782
  5068  0FFB                     u540:	
  5069  0FFB                     l1790:	
  5070  0FFB  0877               	movf	___wmul@product+1,w
  5071  0FFC  00F3               	movwf	?___wmul+1
  5072  0FFD  0876               	movf	___wmul@product,w
  5073  0FFE  00F2               	movwf	?___wmul
  5074  0FFF                     l698:	
  5075  0FFF  0008               	return
  5076  1000                     __end_of___wmul:	
  5077                           
  5078                           	psect	text15
  5079  005F                     __ptext15:	
  5080 ;; *************** function _InitXStrobePattern *****************
  5081 ;; Defined at:
  5082 ;;		line 118 in file "Pattern.c"
  5083 ;; Parameters:    Size  Location     Type
  5084 ;;  pattern         2   29[BANK0 ] PTR struct Pattern
  5085 ;;		 -> pattern_stash(18), NULL(0), 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  i               2   46[BANK0 ] int 
  5088 ;;  i               2   44[BANK0 ] int 
  5089 ;;  diag_2_3_sta    4   36[BANK0 ] _Bool [4]
  5090 ;;  diag_1_4_sta    4   32[BANK0 ] _Bool [4]
  5091 ;;  head            2   50[BANK0 ] PTR struct Stage
  5092 ;;		 -> stage_stash(768), NULL(0), 
  5093 ;;  off             2   48[BANK0 ] PTR struct Stage
  5094 ;;		 -> stage_stash(768), NULL(0), 
  5095 ;;  diag_2_3        2   42[BANK0 ] PTR struct Stage
  5096 ;;		 -> stage_stash(768), NULL(0), 
  5097 ;;  diag_1_4        2   40[BANK0 ] PTR struct Stage
  5098 ;;		 -> stage_stash(768), NULL(0), 
  5099 ;; Return value:  Size  Location     Type
  5100 ;;                  1    wreg      void 
  5101 ;; Registers used:
  5102 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5103 ;; Tracked objects:
  5104 ;;		On entry : 0/0
  5105 ;;		On exit  : 0/0
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5108 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5109 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5111 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5112 ;;Total ram usage:       23 bytes
  5113 ;; Hardware stack levels used:    1
  5114 ;; Hardware stack levels required when called:    7
  5115 ;; This function calls:
  5116 ;;		_AppendStage
  5117 ;;		_ConstructStage
  5118 ;;		_CopyStageData
  5119 ;;		_NewStage
  5120 ;; This function is called by:
  5121 ;;		_InitPatternSelector
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           
  5126                           ;psect for function _InitXStrobePattern
  5127  005F                     _InitXStrobePattern:	
  5128  005F                     l2330:	
  5129                           ;incstack = 0
  5130                           ; Regs used in _InitXStrobePattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5131                           
  5132                           
  5133                           ;Pattern.c: 118: void InitXStrobePattern( struct Pattern* pattern );Pattern.c: 119: {;Pa
      +                          ttern.c: 120:     pattern->name = XSTROBE;
  5134  005F  0020               	movlb	0	; select bank0
  5135  0060  083D               	movf	InitXStrobePattern@pattern,w
  5136  0061  0086               	movwf	6
  5137  0062  083E               	movf	InitXStrobePattern@pattern+1,w
  5138  0063  0087               	movwf	7
  5139  0064  3001               	movlw	1
  5140  0065  0081               	movwf	1
  5141  0066                     l2332:	
  5142                           
  5143                           ;Pattern.c: 123:     _Bool diag_1_4_states[NUM_LIGHTS] = { 1, 0, 0, 1 };
  5144  0066  0021               	movlb	1	; select bank1
  5145  0067  085F               	movf	(InitXStrobePattern@F449+3)^(0+128),w
  5146  0068  0020               	movlb	0	; select bank0
  5147  0069  00C3               	movwf	InitXStrobePattern@diag_1_4_states+3
  5148  006A  0021               	movlb	1	; select bank1
  5149  006B  085E               	movf	(InitXStrobePattern@F449+2)^(0+128),w
  5150  006C  0020               	movlb	0	; select bank0
  5151  006D  00C2               	movwf	InitXStrobePattern@diag_1_4_states+2
  5152  006E  0021               	movlb	1	; select bank1
  5153  006F  085D               	movf	(InitXStrobePattern@F449+1)^(0+128),w
  5154  0070  0020               	movlb	0	; select bank0
  5155  0071  00C1               	movwf	InitXStrobePattern@diag_1_4_states+1
  5156  0072  0021               	movlb	1	; select bank1
  5157  0073  085C               	movf	InitXStrobePattern@F449^(0+128),w
  5158  0074  0020               	movlb	0	; select bank0
  5159  0075  00C0               	movwf	InitXStrobePattern@diag_1_4_states
  5160  0076                     l2334:	
  5161                           
  5162                           ;Pattern.c: 124:     struct Stage* diag_1_4 = ConstructStage( diag_1_4_states, 80UL, ((v
      +                          oid*)0) );
  5163  0076  3050               	movlw	80
  5164  0077  00AC               	movwf	ConstructStage@time_ms
  5165  0078  3000               	movlw	0
  5166  0079  00AD               	movwf	ConstructStage@time_ms+1
  5167  007A  01AE               	clrf	ConstructStage@next
  5168  007B  3040               	movlw	(low (InitXStrobePattern@diag_1_4_states| 0))& (0+255)
  5169  007C  3187  270E  3180   	fcall	_ConstructStage
  5170  007F  0020               	movlb	0	; select bank0
  5171  0080  082D               	movf	?_ConstructStage+1,w
  5172  0081  00C9               	movwf	InitXStrobePattern@diag_1_4+1
  5173  0082  082C               	movf	?_ConstructStage,w
  5174  0083  00C8               	movwf	InitXStrobePattern@diag_1_4
  5175  0084                     l2336:	
  5176                           
  5177                           ;Pattern.c: 126:     _Bool diag_2_3_states[NUM_LIGHTS] = { 0, 1, 1, 0 };
  5178  0084  0021               	movlb	1	; select bank1
  5179  0085  085B               	movf	(InitXStrobePattern@F452+3)^(0+128),w
  5180  0086  0020               	movlb	0	; select bank0
  5181  0087  00C7               	movwf	InitXStrobePattern@diag_2_3_states+3
  5182  0088  0021               	movlb	1	; select bank1
  5183  0089  085A               	movf	(InitXStrobePattern@F452+2)^(0+128),w
  5184  008A  0020               	movlb	0	; select bank0
  5185  008B  00C6               	movwf	InitXStrobePattern@diag_2_3_states+2
  5186  008C  0021               	movlb	1	; select bank1
  5187  008D  0859               	movf	(InitXStrobePattern@F452+1)^(0+128),w
  5188  008E  0020               	movlb	0	; select bank0
  5189  008F  00C5               	movwf	InitXStrobePattern@diag_2_3_states+1
  5190  0090  0021               	movlb	1	; select bank1
  5191  0091  0858               	movf	InitXStrobePattern@F452^(0+128),w
  5192  0092  0020               	movlb	0	; select bank0
  5193  0093  00C4               	movwf	InitXStrobePattern@diag_2_3_states
  5194  0094                     l2338:	
  5195                           
  5196                           ;Pattern.c: 127:     struct Stage* diag_2_3 = ConstructStage( diag_2_3_states, 80UL, ((v
      +                          oid*)0) );
  5197  0094  3050               	movlw	80
  5198  0095  00AC               	movwf	ConstructStage@time_ms
  5199  0096  3000               	movlw	0
  5200  0097  00AD               	movwf	ConstructStage@time_ms+1
  5201  0098  01AE               	clrf	ConstructStage@next
  5202  0099  3044               	movlw	(low (InitXStrobePattern@diag_2_3_states| 0))& (0+255)
  5203  009A  3187  270E  3180   	fcall	_ConstructStage
  5204  009D  0020               	movlb	0	; select bank0
  5205  009E  082D               	movf	?_ConstructStage+1,w
  5206  009F  00CB               	movwf	InitXStrobePattern@diag_2_3+1
  5207  00A0  082C               	movf	?_ConstructStage,w
  5208  00A1  00CA               	movwf	InitXStrobePattern@diag_2_3
  5209  00A2                     l2340:	
  5210                           
  5211                           ;Pattern.c: 129:     struct Stage* off = NewStage();
  5212  00A2  3186  2648  3180   	fcall	_NewStage
  5213  00A5  0878               	movf	?_NewStage+1,w
  5214  00A6  0020               	movlb	0	; select bank0
  5215  00A7  00D1               	movwf	InitXStrobePattern@off+1
  5216  00A8  0877               	movf	?_NewStage,w
  5217  00A9  00D0               	movwf	InitXStrobePattern@off
  5218  00AA                     l2342:	
  5219                           
  5220                           ;Pattern.c: 131:     struct Stage* head = pattern->first_stage;
  5221  00AA  083D               	movf	InitXStrobePattern@pattern,w
  5222  00AB  0086               	movwf	6
  5223  00AC  083E               	movf	InitXStrobePattern@pattern+1,w
  5224  00AD  0087               	movwf	7
  5225  00AE  3141               	addfsr 1,1
  5226  00AF  3F40               	moviw [0]fsr1
  5227  00B0  00D2               	movwf	InitXStrobePattern@head
  5228  00B1  3F41               	moviw [1]fsr1
  5229  00B2  00D3               	movwf	InitXStrobePattern@head+1
  5230  00B3                     l2344:	
  5231                           
  5232                           ;Pattern.c: 134:     for( int i = 0; i < 3; i++ )
  5233  00B3  01CC               	clrf	InitXStrobePattern@i
  5234  00B4  01CD               	clrf	InitXStrobePattern@i+1
  5235  00B5                     l2350:	
  5236                           
  5237                           ;Pattern.c: 135:     {;Pattern.c: 136:         AppendStage( head, CopyStageData( NewStag
      +                          e(), diag_1_4 ) );
  5238  00B5  0020               	movlb	0	; select bank0
  5239  00B6  0853               	movf	InitXStrobePattern@head+1,w
  5240  00B7  00B6               	movwf	AppendStage@head+1
  5241  00B8  0852               	movf	InitXStrobePattern@head,w
  5242  00B9  00B5               	movwf	AppendStage@head
  5243  00BA  3186  2648  3180   	fcall	_NewStage
  5244  00BD  0878               	movf	?_NewStage+1,w
  5245  00BE  0020               	movlb	0	; select bank0
  5246  00BF  00AD               	movwf	CopyStageData@dest+1
  5247  00C0  0877               	movf	?_NewStage,w
  5248  00C1  00AC               	movwf	CopyStageData@dest
  5249  00C2  0849               	movf	InitXStrobePattern@diag_1_4+1,w
  5250  00C3  00AF               	movwf	CopyStageData@source+1
  5251  00C4  0848               	movf	InitXStrobePattern@diag_1_4,w
  5252  00C5  00AE               	movwf	CopyStageData@source
  5253  00C6  3186  26D5  3180   	fcall	_CopyStageData
  5254  00C9  0020               	movlb	0	; select bank0
  5255  00CA  082D               	movf	?_CopyStageData+1,w
  5256  00CB  00B8               	movwf	AppendStage@new_stage+1
  5257  00CC  082C               	movf	?_CopyStageData,w
  5258  00CD  00B7               	movwf	AppendStage@new_stage
  5259  00CE  3185  25F0  3180   	fcall	_AppendStage
  5260                           
  5261                           ;Pattern.c: 137:         AppendStage( head, CopyStageData( NewStage(), off ) );
  5262  00D1  0020               	movlb	0	; select bank0
  5263  00D2  0853               	movf	InitXStrobePattern@head+1,w
  5264  00D3  00B6               	movwf	AppendStage@head+1
  5265  00D4  0852               	movf	InitXStrobePattern@head,w
  5266  00D5  00B5               	movwf	AppendStage@head
  5267  00D6  3186  2648  3180   	fcall	_NewStage
  5268  00D9  0878               	movf	?_NewStage+1,w
  5269  00DA  0020               	movlb	0	; select bank0
  5270  00DB  00AD               	movwf	CopyStageData@dest+1
  5271  00DC  0877               	movf	?_NewStage,w
  5272  00DD  00AC               	movwf	CopyStageData@dest
  5273  00DE  0851               	movf	InitXStrobePattern@off+1,w
  5274  00DF  00AF               	movwf	CopyStageData@source+1
  5275  00E0  0850               	movf	InitXStrobePattern@off,w
  5276  00E1  00AE               	movwf	CopyStageData@source
  5277  00E2  3186  26D5  3180   	fcall	_CopyStageData
  5278  00E5  0020               	movlb	0	; select bank0
  5279  00E6  082D               	movf	?_CopyStageData+1,w
  5280  00E7  00B8               	movwf	AppendStage@new_stage+1
  5281  00E8  082C               	movf	?_CopyStageData,w
  5282  00E9  00B7               	movwf	AppendStage@new_stage
  5283  00EA  3185  25F0  3180   	fcall	_AppendStage
  5284  00ED                     l2352:	
  5285                           
  5286                           ;Pattern.c: 138:     }
  5287  00ED  3001               	movlw	1
  5288  00EE  0020               	movlb	0	; select bank0
  5289  00EF  07CC               	addwf	InitXStrobePattern@i,f
  5290  00F0  3000               	movlw	0
  5291  00F1  3DCD               	addwfc	InitXStrobePattern@i+1,f
  5292  00F2                     l2354:	
  5293  00F2  084D               	movf	InitXStrobePattern@i+1,w
  5294  00F3  3A80               	xorlw	128
  5295  00F4  00BF               	movwf	??_InitXStrobePattern
  5296  00F5  3080               	movlw	128
  5297  00F6  023F               	subwf	??_InitXStrobePattern,w
  5298  00F7  1D03               	skipz
  5299  00F8  28FB               	goto	u965
  5300  00F9  3003               	movlw	3
  5301  00FA  024C               	subwf	InitXStrobePattern@i,w
  5302  00FB                     u965:	
  5303  00FB  1C03               	skipc
  5304  00FC  28FE               	goto	u961
  5305  00FD  28FF               	goto	u960
  5306  00FE                     u961:	
  5307  00FE  28B5               	goto	l2350
  5308  00FF                     u960:	
  5309  00FF                     l2356:	
  5310                           
  5311                           ;Pattern.c: 141:     AppendStage( head, CopyStageData( NewStage(), off ) );
  5312  00FF  0020               	movlb	0	; select bank0
  5313  0100  0853               	movf	InitXStrobePattern@head+1,w
  5314  0101  00B6               	movwf	AppendStage@head+1
  5315  0102  0852               	movf	InitXStrobePattern@head,w
  5316  0103  00B5               	movwf	AppendStage@head
  5317  0104  3186  2648  3180   	fcall	_NewStage
  5318  0107  0878               	movf	?_NewStage+1,w
  5319  0108  0020               	movlb	0	; select bank0
  5320  0109  00AD               	movwf	CopyStageData@dest+1
  5321  010A  0877               	movf	?_NewStage,w
  5322  010B  00AC               	movwf	CopyStageData@dest
  5323  010C  0851               	movf	InitXStrobePattern@off+1,w
  5324  010D  00AF               	movwf	CopyStageData@source+1
  5325  010E  0850               	movf	InitXStrobePattern@off,w
  5326  010F  00AE               	movwf	CopyStageData@source
  5327  0110  3186  26D5  3180   	fcall	_CopyStageData
  5328  0113  0020               	movlb	0	; select bank0
  5329  0114  082D               	movf	?_CopyStageData+1,w
  5330  0115  00B8               	movwf	AppendStage@new_stage+1
  5331  0116  082C               	movf	?_CopyStageData,w
  5332  0117  00B7               	movwf	AppendStage@new_stage
  5333  0118  3185  25F0  3180   	fcall	_AppendStage
  5334  011B                     l2358:	
  5335                           
  5336                           ;Pattern.c: 144:     for( int i = 0; i < 3; i++ )
  5337  011B  0020               	movlb	0	; select bank0
  5338  011C  01CE               	clrf	InitXStrobePattern@i_872
  5339  011D  01CF               	clrf	InitXStrobePattern@i_872+1
  5340  011E                     l2364:	
  5341                           
  5342                           ;Pattern.c: 145:     {;Pattern.c: 146:         AppendStage( head, CopyStageData( NewStag
      +                          e(), diag_2_3 ) );
  5343  011E  0020               	movlb	0	; select bank0
  5344  011F  0853               	movf	InitXStrobePattern@head+1,w
  5345  0120  00B6               	movwf	AppendStage@head+1
  5346  0121  0852               	movf	InitXStrobePattern@head,w
  5347  0122  00B5               	movwf	AppendStage@head
  5348  0123  3186  2648  3180   	fcall	_NewStage
  5349  0126  0878               	movf	?_NewStage+1,w
  5350  0127  0020               	movlb	0	; select bank0
  5351  0128  00AD               	movwf	CopyStageData@dest+1
  5352  0129  0877               	movf	?_NewStage,w
  5353  012A  00AC               	movwf	CopyStageData@dest
  5354  012B  084B               	movf	InitXStrobePattern@diag_2_3+1,w
  5355  012C  00AF               	movwf	CopyStageData@source+1
  5356  012D  084A               	movf	InitXStrobePattern@diag_2_3,w
  5357  012E  00AE               	movwf	CopyStageData@source
  5358  012F  3186  26D5  3180   	fcall	_CopyStageData
  5359  0132  0020               	movlb	0	; select bank0
  5360  0133  082D               	movf	?_CopyStageData+1,w
  5361  0134  00B8               	movwf	AppendStage@new_stage+1
  5362  0135  082C               	movf	?_CopyStageData,w
  5363  0136  00B7               	movwf	AppendStage@new_stage
  5364  0137  3185  25F0  3180   	fcall	_AppendStage
  5365                           
  5366                           ;Pattern.c: 147:         AppendStage( head, CopyStageData( NewStage(), off ) );
  5367  013A  0020               	movlb	0	; select bank0
  5368  013B  0853               	movf	InitXStrobePattern@head+1,w
  5369  013C  00B6               	movwf	AppendStage@head+1
  5370  013D  0852               	movf	InitXStrobePattern@head,w
  5371  013E  00B5               	movwf	AppendStage@head
  5372  013F  3186  2648  3180   	fcall	_NewStage
  5373  0142  0878               	movf	?_NewStage+1,w
  5374  0143  0020               	movlb	0	; select bank0
  5375  0144  00AD               	movwf	CopyStageData@dest+1
  5376  0145  0877               	movf	?_NewStage,w
  5377  0146  00AC               	movwf	CopyStageData@dest
  5378  0147  0851               	movf	InitXStrobePattern@off+1,w
  5379  0148  00AF               	movwf	CopyStageData@source+1
  5380  0149  0850               	movf	InitXStrobePattern@off,w
  5381  014A  00AE               	movwf	CopyStageData@source
  5382  014B  3186  26D5  3180   	fcall	_CopyStageData
  5383  014E  0020               	movlb	0	; select bank0
  5384  014F  082D               	movf	?_CopyStageData+1,w
  5385  0150  00B8               	movwf	AppendStage@new_stage+1
  5386  0151  082C               	movf	?_CopyStageData,w
  5387  0152  00B7               	movwf	AppendStage@new_stage
  5388  0153  3185  25F0  3180   	fcall	_AppendStage
  5389  0156                     l2366:	
  5390                           
  5391                           ;Pattern.c: 148:     }
  5392  0156  3001               	movlw	1
  5393  0157  0020               	movlb	0	; select bank0
  5394  0158  07CE               	addwf	InitXStrobePattern@i_872,f
  5395  0159  3000               	movlw	0
  5396  015A  3DCF               	addwfc	InitXStrobePattern@i_872+1,f
  5397  015B                     l2368:	
  5398  015B  084F               	movf	InitXStrobePattern@i_872+1,w
  5399  015C  3A80               	xorlw	128
  5400  015D  00BF               	movwf	??_InitXStrobePattern
  5401  015E  3080               	movlw	128
  5402  015F  023F               	subwf	??_InitXStrobePattern,w
  5403  0160  1D03               	skipz
  5404  0161  2964               	goto	u975
  5405  0162  3003               	movlw	3
  5406  0163  024E               	subwf	InitXStrobePattern@i_872,w
  5407  0164                     u975:	
  5408  0164  1C03               	skipc
  5409  0165  2967               	goto	u971
  5410  0166  2968               	goto	u970
  5411  0167                     u971:	
  5412  0167  291E               	goto	l2364
  5413  0168                     u970:	
  5414  0168                     l485:	
  5415  0168  0008               	return
  5416  0169                     __end_of_InitXStrobePattern:	
  5417                           
  5418                           	psect	text16
  5419  037D                     __ptext16:	
  5420 ;; *************** function _InitWigwagPattern *****************
  5421 ;; Defined at:
  5422 ;;		line 85 in file "Pattern.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;  pattern         2   29[BANK0 ] PTR struct Pattern
  5425 ;;		 -> pattern_stash(18), NULL(0), 
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;  i               2   46[BANK0 ] int 
  5428 ;;  i               2   44[BANK0 ] int 
  5429 ;;  right_side_s    4   36[BANK0 ] _Bool [4]
  5430 ;;  left_side_st    4   32[BANK0 ] _Bool [4]
  5431 ;;  head            2   50[BANK0 ] PTR struct Stage
  5432 ;;		 -> stage_stash(768), NULL(0), 
  5433 ;;  off             2   48[BANK0 ] PTR struct Stage
  5434 ;;		 -> stage_stash(768), NULL(0), 
  5435 ;;  right_side_o    2   42[BANK0 ] PTR struct Stage
  5436 ;;		 -> stage_stash(768), NULL(0), 
  5437 ;;  left_side_on    2   40[BANK0 ] PTR struct Stage
  5438 ;;		 -> stage_stash(768), NULL(0), 
  5439 ;; Return value:  Size  Location     Type
  5440 ;;                  1    wreg      void 
  5441 ;; Registers used:
  5442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5448 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5449 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5450 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5451 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5452 ;;Total ram usage:       23 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; Hardware stack levels required when called:    7
  5455 ;; This function calls:
  5456 ;;		_AppendStage
  5457 ;;		_ConstructStage
  5458 ;;		_CopyStageData
  5459 ;;		_NewStage
  5460 ;; This function is called by:
  5461 ;;		_InitPatternSelector
  5462 ;; This function uses a non-reentrant model
  5463 ;;
  5464                           
  5465                           
  5466                           ;psect for function _InitWigwagPattern
  5467  037D                     _InitWigwagPattern:	
  5468  037D                     l2290:	
  5469                           ;incstack = 0
  5470                           ; Regs used in _InitWigwagPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5471                           
  5472                           
  5473                           ;Pattern.c: 85: void InitWigwagPattern( struct Pattern* pattern );Pattern.c: 86: {;Patte
      +                          rn.c: 87:     pattern->name = WIGWAG;
  5474  037D  0020               	movlb	0	; select bank0
  5475  037E  083D               	movf	InitWigwagPattern@pattern,w
  5476  037F  0086               	movwf	6
  5477  0380  083E               	movf	InitWigwagPattern@pattern+1,w
  5478  0381  0087               	movwf	7
  5479  0382  0181               	clrf	1
  5480  0383                     l2292:	
  5481                           
  5482                           ;Pattern.c: 90:     _Bool left_side_states[NUM_LIGHTS] = { 1, 0, 1, 0 };
  5483  0383  0021               	movlb	1	; select bank1
  5484  0384  0867               	movf	(InitWigwagPattern@F437+3)^(0+128),w
  5485  0385  0020               	movlb	0	; select bank0
  5486  0386  00C3               	movwf	InitWigwagPattern@left_side_states+3
  5487  0387  0021               	movlb	1	; select bank1
  5488  0388  0866               	movf	(InitWigwagPattern@F437+2)^(0+128),w
  5489  0389  0020               	movlb	0	; select bank0
  5490  038A  00C2               	movwf	InitWigwagPattern@left_side_states+2
  5491  038B  0021               	movlb	1	; select bank1
  5492  038C  0865               	movf	(InitWigwagPattern@F437+1)^(0+128),w
  5493  038D  0020               	movlb	0	; select bank0
  5494  038E  00C1               	movwf	InitWigwagPattern@left_side_states+1
  5495  038F  0021               	movlb	1	; select bank1
  5496  0390  0864               	movf	InitWigwagPattern@F437^(0+128),w
  5497  0391  0020               	movlb	0	; select bank0
  5498  0392  00C0               	movwf	InitWigwagPattern@left_side_states
  5499  0393                     l2294:	
  5500                           
  5501                           ;Pattern.c: 91:     struct Stage* left_side_on = ConstructStage( left_side_states, 80UL,
      +                           ((void*)0) );
  5502  0393  3050               	movlw	80
  5503  0394  00AC               	movwf	ConstructStage@time_ms
  5504  0395  3000               	movlw	0
  5505  0396  00AD               	movwf	ConstructStage@time_ms+1
  5506  0397  01AE               	clrf	ConstructStage@next
  5507  0398  3040               	movlw	(low (InitWigwagPattern@left_side_states| 0))& (0+255)
  5508  0399  3187  270E  3183   	fcall	_ConstructStage
  5509  039C  0020               	movlb	0	; select bank0
  5510  039D  082D               	movf	?_ConstructStage+1,w
  5511  039E  00C9               	movwf	InitWigwagPattern@left_side_on+1
  5512  039F  082C               	movf	?_ConstructStage,w
  5513  03A0  00C8               	movwf	InitWigwagPattern@left_side_on
  5514  03A1                     l2296:	
  5515                           
  5516                           ;Pattern.c: 93:     _Bool right_side_states[NUM_LIGHTS] = { 0, 1, 0, 1 };
  5517  03A1  0021               	movlb	1	; select bank1
  5518  03A2  0863               	movf	(InitWigwagPattern@F440+3)^(0+128),w
  5519  03A3  0020               	movlb	0	; select bank0
  5520  03A4  00C7               	movwf	InitWigwagPattern@right_side_states+3
  5521  03A5  0021               	movlb	1	; select bank1
  5522  03A6  0862               	movf	(InitWigwagPattern@F440+2)^(0+128),w
  5523  03A7  0020               	movlb	0	; select bank0
  5524  03A8  00C6               	movwf	InitWigwagPattern@right_side_states+2
  5525  03A9  0021               	movlb	1	; select bank1
  5526  03AA  0861               	movf	(InitWigwagPattern@F440+1)^(0+128),w
  5527  03AB  0020               	movlb	0	; select bank0
  5528  03AC  00C5               	movwf	InitWigwagPattern@right_side_states+1
  5529  03AD  0021               	movlb	1	; select bank1
  5530  03AE  0860               	movf	InitWigwagPattern@F440^(0+128),w
  5531  03AF  0020               	movlb	0	; select bank0
  5532  03B0  00C4               	movwf	InitWigwagPattern@right_side_states
  5533  03B1                     l2298:	
  5534                           
  5535                           ;Pattern.c: 94:     struct Stage* right_side_on = ConstructStage( right_side_states, 80U
      +                          L, ((void*)0) );
  5536  03B1  3050               	movlw	80
  5537  03B2  00AC               	movwf	ConstructStage@time_ms
  5538  03B3  3000               	movlw	0
  5539  03B4  00AD               	movwf	ConstructStage@time_ms+1
  5540  03B5  01AE               	clrf	ConstructStage@next
  5541  03B6  3044               	movlw	(low (InitWigwagPattern@right_side_states| 0))& (0+255)
  5542  03B7  3187  270E  3183   	fcall	_ConstructStage
  5543  03BA  0020               	movlb	0	; select bank0
  5544  03BB  082D               	movf	?_ConstructStage+1,w
  5545  03BC  00CB               	movwf	InitWigwagPattern@right_side_on+1
  5546  03BD  082C               	movf	?_ConstructStage,w
  5547  03BE  00CA               	movwf	InitWigwagPattern@right_side_on
  5548  03BF                     l2300:	
  5549                           
  5550                           ;Pattern.c: 96:     struct Stage* off = NewStage();
  5551  03BF  3186  2648  3183   	fcall	_NewStage
  5552  03C2  0878               	movf	?_NewStage+1,w
  5553  03C3  0020               	movlb	0	; select bank0
  5554  03C4  00D1               	movwf	InitWigwagPattern@off+1
  5555  03C5  0877               	movf	?_NewStage,w
  5556  03C6  00D0               	movwf	InitWigwagPattern@off
  5557  03C7                     l2302:	
  5558                           
  5559                           ;Pattern.c: 98:     struct Stage* head = pattern->first_stage;
  5560  03C7  083D               	movf	InitWigwagPattern@pattern,w
  5561  03C8  0086               	movwf	6
  5562  03C9  083E               	movf	InitWigwagPattern@pattern+1,w
  5563  03CA  0087               	movwf	7
  5564  03CB  3141               	addfsr 1,1
  5565  03CC  3F40               	moviw [0]fsr1
  5566  03CD  00D2               	movwf	InitWigwagPattern@head
  5567  03CE  3F41               	moviw [1]fsr1
  5568  03CF  00D3               	movwf	InitWigwagPattern@head+1
  5569  03D0                     l2304:	
  5570                           
  5571                           ;Pattern.c: 101:     for( int i = 0; i < 3; i++ )
  5572  03D0  01CC               	clrf	InitWigwagPattern@i
  5573  03D1  01CD               	clrf	InitWigwagPattern@i+1
  5574  03D2                     l2310:	
  5575                           
  5576                           ;Pattern.c: 102:     {;Pattern.c: 103:         AppendStage( head, CopyStageData( NewStag
      +                          e(), left_side_on ) );
  5577  03D2  0020               	movlb	0	; select bank0
  5578  03D3  0853               	movf	InitWigwagPattern@head+1,w
  5579  03D4  00B6               	movwf	AppendStage@head+1
  5580  03D5  0852               	movf	InitWigwagPattern@head,w
  5581  03D6  00B5               	movwf	AppendStage@head
  5582  03D7  3186  2648  3183   	fcall	_NewStage
  5583  03DA  0878               	movf	?_NewStage+1,w
  5584  03DB  0020               	movlb	0	; select bank0
  5585  03DC  00AD               	movwf	CopyStageData@dest+1
  5586  03DD  0877               	movf	?_NewStage,w
  5587  03DE  00AC               	movwf	CopyStageData@dest
  5588  03DF  0849               	movf	InitWigwagPattern@left_side_on+1,w
  5589  03E0  00AF               	movwf	CopyStageData@source+1
  5590  03E1  0848               	movf	InitWigwagPattern@left_side_on,w
  5591  03E2  00AE               	movwf	CopyStageData@source
  5592  03E3  3186  26D5  3183   	fcall	_CopyStageData
  5593  03E6  0020               	movlb	0	; select bank0
  5594  03E7  082D               	movf	?_CopyStageData+1,w
  5595  03E8  00B8               	movwf	AppendStage@new_stage+1
  5596  03E9  082C               	movf	?_CopyStageData,w
  5597  03EA  00B7               	movwf	AppendStage@new_stage
  5598  03EB  3185  25F0  3183   	fcall	_AppendStage
  5599                           
  5600                           ;Pattern.c: 104:         AppendStage( head, CopyStageData( NewStage(), off ) );
  5601  03EE  0020               	movlb	0	; select bank0
  5602  03EF  0853               	movf	InitWigwagPattern@head+1,w
  5603  03F0  00B6               	movwf	AppendStage@head+1
  5604  03F1  0852               	movf	InitWigwagPattern@head,w
  5605  03F2  00B5               	movwf	AppendStage@head
  5606  03F3  3186  2648  3183   	fcall	_NewStage
  5607  03F6  0878               	movf	?_NewStage+1,w
  5608  03F7  0020               	movlb	0	; select bank0
  5609  03F8  00AD               	movwf	CopyStageData@dest+1
  5610  03F9  0877               	movf	?_NewStage,w
  5611  03FA  00AC               	movwf	CopyStageData@dest
  5612  03FB  0851               	movf	InitWigwagPattern@off+1,w
  5613  03FC  00AF               	movwf	CopyStageData@source+1
  5614  03FD  0850               	movf	InitWigwagPattern@off,w
  5615  03FE  00AE               	movwf	CopyStageData@source
  5616  03FF  3186  26D5  3183   	fcall	_CopyStageData
  5617  0402  0020               	movlb	0	; select bank0
  5618  0403  082D               	movf	?_CopyStageData+1,w
  5619  0404  00B8               	movwf	AppendStage@new_stage+1
  5620  0405  082C               	movf	?_CopyStageData,w
  5621  0406  00B7               	movwf	AppendStage@new_stage
  5622  0407  3185  25F0  3183   	fcall	_AppendStage
  5623  040A                     l2312:	
  5624                           
  5625                           ;Pattern.c: 105:     }
  5626  040A  3001               	movlw	1
  5627  040B  0020               	movlb	0	; select bank0
  5628  040C  07CC               	addwf	InitWigwagPattern@i,f
  5629  040D  3000               	movlw	0
  5630  040E  3DCD               	addwfc	InitWigwagPattern@i+1,f
  5631  040F                     l2314:	
  5632  040F  084D               	movf	InitWigwagPattern@i+1,w
  5633  0410  3A80               	xorlw	128
  5634  0411  00BF               	movwf	??_InitWigwagPattern
  5635  0412  3080               	movlw	128
  5636  0413  023F               	subwf	??_InitWigwagPattern,w
  5637  0414  1D03               	skipz
  5638  0415  2C18               	goto	u945
  5639  0416  3003               	movlw	3
  5640  0417  024C               	subwf	InitWigwagPattern@i,w
  5641  0418                     u945:	
  5642  0418  1C03               	skipc
  5643  0419  2C1B               	goto	u941
  5644  041A  2C1C               	goto	u940
  5645  041B                     u941:	
  5646  041B  2BD2               	goto	l2310
  5647  041C                     u940:	
  5648  041C                     l2316:	
  5649                           
  5650                           ;Pattern.c: 108:     AppendStage( head, CopyStageData( NewStage(), off ) );
  5651  041C  0020               	movlb	0	; select bank0
  5652  041D  0853               	movf	InitWigwagPattern@head+1,w
  5653  041E  00B6               	movwf	AppendStage@head+1
  5654  041F  0852               	movf	InitWigwagPattern@head,w
  5655  0420  00B5               	movwf	AppendStage@head
  5656  0421  3186  2648  3183   	fcall	_NewStage
  5657  0424  0878               	movf	?_NewStage+1,w
  5658  0425  0020               	movlb	0	; select bank0
  5659  0426  00AD               	movwf	CopyStageData@dest+1
  5660  0427  0877               	movf	?_NewStage,w
  5661  0428  00AC               	movwf	CopyStageData@dest
  5662  0429  0851               	movf	InitWigwagPattern@off+1,w
  5663  042A  00AF               	movwf	CopyStageData@source+1
  5664  042B  0850               	movf	InitWigwagPattern@off,w
  5665  042C  00AE               	movwf	CopyStageData@source
  5666  042D  3186  26D5  3183   	fcall	_CopyStageData
  5667  0430  0020               	movlb	0	; select bank0
  5668  0431  082D               	movf	?_CopyStageData+1,w
  5669  0432  00B8               	movwf	AppendStage@new_stage+1
  5670  0433  082C               	movf	?_CopyStageData,w
  5671  0434  00B7               	movwf	AppendStage@new_stage
  5672  0435  3185  25F0  3183   	fcall	_AppendStage
  5673  0438                     l2318:	
  5674                           
  5675                           ;Pattern.c: 111:     for( int i = 0; i < 3; i++ )
  5676  0438  0020               	movlb	0	; select bank0
  5677  0439  01CE               	clrf	InitWigwagPattern@i_846
  5678  043A  01CF               	clrf	InitWigwagPattern@i_846+1
  5679  043B                     l2324:	
  5680                           
  5681                           ;Pattern.c: 112:     {;Pattern.c: 113:         AppendStage( head, CopyStageData( NewStag
      +                          e(), right_side_on ) );
  5682  043B  0020               	movlb	0	; select bank0
  5683  043C  0853               	movf	InitWigwagPattern@head+1,w
  5684  043D  00B6               	movwf	AppendStage@head+1
  5685  043E  0852               	movf	InitWigwagPattern@head,w
  5686  043F  00B5               	movwf	AppendStage@head
  5687  0440  3186  2648  3183   	fcall	_NewStage
  5688  0443  0878               	movf	?_NewStage+1,w
  5689  0444  0020               	movlb	0	; select bank0
  5690  0445  00AD               	movwf	CopyStageData@dest+1
  5691  0446  0877               	movf	?_NewStage,w
  5692  0447  00AC               	movwf	CopyStageData@dest
  5693  0448  084B               	movf	InitWigwagPattern@right_side_on+1,w
  5694  0449  00AF               	movwf	CopyStageData@source+1
  5695  044A  084A               	movf	InitWigwagPattern@right_side_on,w
  5696  044B  00AE               	movwf	CopyStageData@source
  5697  044C  3186  26D5  3183   	fcall	_CopyStageData
  5698  044F  0020               	movlb	0	; select bank0
  5699  0450  082D               	movf	?_CopyStageData+1,w
  5700  0451  00B8               	movwf	AppendStage@new_stage+1
  5701  0452  082C               	movf	?_CopyStageData,w
  5702  0453  00B7               	movwf	AppendStage@new_stage
  5703  0454  3185  25F0  3183   	fcall	_AppendStage
  5704                           
  5705                           ;Pattern.c: 114:         AppendStage( head, CopyStageData( NewStage(), off ) );
  5706  0457  0020               	movlb	0	; select bank0
  5707  0458  0853               	movf	InitWigwagPattern@head+1,w
  5708  0459  00B6               	movwf	AppendStage@head+1
  5709  045A  0852               	movf	InitWigwagPattern@head,w
  5710  045B  00B5               	movwf	AppendStage@head
  5711  045C  3186  2648  3183   	fcall	_NewStage
  5712  045F  0878               	movf	?_NewStage+1,w
  5713  0460  0020               	movlb	0	; select bank0
  5714  0461  00AD               	movwf	CopyStageData@dest+1
  5715  0462  0877               	movf	?_NewStage,w
  5716  0463  00AC               	movwf	CopyStageData@dest
  5717  0464  0851               	movf	InitWigwagPattern@off+1,w
  5718  0465  00AF               	movwf	CopyStageData@source+1
  5719  0466  0850               	movf	InitWigwagPattern@off,w
  5720  0467  00AE               	movwf	CopyStageData@source
  5721  0468  3186  26D5  3183   	fcall	_CopyStageData
  5722  046B  0020               	movlb	0	; select bank0
  5723  046C  082D               	movf	?_CopyStageData+1,w
  5724  046D  00B8               	movwf	AppendStage@new_stage+1
  5725  046E  082C               	movf	?_CopyStageData,w
  5726  046F  00B7               	movwf	AppendStage@new_stage
  5727  0470  3185  25F0  3183   	fcall	_AppendStage
  5728  0473                     l2326:	
  5729                           
  5730                           ;Pattern.c: 115:     }
  5731  0473  3001               	movlw	1
  5732  0474  0020               	movlb	0	; select bank0
  5733  0475  07CE               	addwf	InitWigwagPattern@i_846,f
  5734  0476  3000               	movlw	0
  5735  0477  3DCF               	addwfc	InitWigwagPattern@i_846+1,f
  5736  0478                     l2328:	
  5737  0478  084F               	movf	InitWigwagPattern@i_846+1,w
  5738  0479  3A80               	xorlw	128
  5739  047A  00BF               	movwf	??_InitWigwagPattern
  5740  047B  3080               	movlw	128
  5741  047C  023F               	subwf	??_InitWigwagPattern,w
  5742  047D  1D03               	skipz
  5743  047E  2C81               	goto	u955
  5744  047F  3003               	movlw	3
  5745  0480  024E               	subwf	InitWigwagPattern@i_846,w
  5746  0481                     u955:	
  5747  0481  1C03               	skipc
  5748  0482  2C84               	goto	u951
  5749  0483  2C85               	goto	u950
  5750  0484                     u951:	
  5751  0484  2C3B               	goto	l2324
  5752  0485                     u950:	
  5753  0485                     l474:	
  5754  0485  0008               	return
  5755  0486                     __end_of_InitWigwagPattern:	
  5756                           
  5757                           	psect	text17
  5758  0169                     __ptext17:	
  5759 ;; *************** function _InitUpperLowerPattern *****************
  5760 ;; Defined at:
  5761 ;;		line 151 in file "Pattern.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;  pattern         2   29[BANK0 ] PTR struct Pattern
  5764 ;;		 -> pattern_stash(18), NULL(0), 
  5765 ;; Auto vars:     Size  Location     Type
  5766 ;;  i               2   46[BANK0 ] int 
  5767 ;;  i               2   44[BANK0 ] int 
  5768 ;;  lower_states    4   36[BANK0 ] _Bool [4]
  5769 ;;  upper_states    4   32[BANK0 ] _Bool [4]
  5770 ;;  head            2   50[BANK0 ] PTR struct Stage
  5771 ;;		 -> stage_stash(768), NULL(0), 
  5772 ;;  off             2   48[BANK0 ] PTR struct Stage
  5773 ;;		 -> stage_stash(768), NULL(0), 
  5774 ;;  lower           2   42[BANK0 ] PTR struct Stage
  5775 ;;		 -> stage_stash(768), NULL(0), 
  5776 ;;  upper           2   40[BANK0 ] PTR struct Stage
  5777 ;;		 -> stage_stash(768), NULL(0), 
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  1    wreg      void 
  5780 ;; Registers used:
  5781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5787 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5788 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5789 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5790 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5791 ;;Total ram usage:       23 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:    7
  5794 ;; This function calls:
  5795 ;;		_AppendStage
  5796 ;;		_ConstructStage
  5797 ;;		_CopyStageData
  5798 ;;		_NewStage
  5799 ;; This function is called by:
  5800 ;;		_InitPatternSelector
  5801 ;; This function uses a non-reentrant model
  5802 ;;
  5803                           
  5804                           
  5805                           ;psect for function _InitUpperLowerPattern
  5806  0169                     _InitUpperLowerPattern:	
  5807  0169                     l2370:	
  5808                           ;incstack = 0
  5809                           ; Regs used in _InitUpperLowerPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5810                           
  5811                           
  5812                           ;Pattern.c: 151: void InitUpperLowerPattern( struct Pattern* pattern );Pattern.c: 152: {
      +                          ;Pattern.c: 153:     pattern->name = UPPER_LOWER;
  5813  0169  0020               	movlb	0	; select bank0
  5814  016A  083D               	movf	InitUpperLowerPattern@pattern,w
  5815  016B  0086               	movwf	6
  5816  016C  083E               	movf	InitUpperLowerPattern@pattern+1,w
  5817  016D  0087               	movwf	7
  5818  016E  3002               	movlw	2
  5819  016F  0081               	movwf	1
  5820  0170                     l2372:	
  5821                           
  5822                           ;Pattern.c: 156:     _Bool upper_states[NUM_LIGHTS] = { 1, 1, 0, 0 };
  5823  0170  0021               	movlb	1	; select bank1
  5824  0171  0857               	movf	(InitUpperLowerPattern@F461+3)^(0+128),w
  5825  0172  0020               	movlb	0	; select bank0
  5826  0173  00C3               	movwf	InitUpperLowerPattern@upper_states+3
  5827  0174  0021               	movlb	1	; select bank1
  5828  0175  0856               	movf	(InitUpperLowerPattern@F461+2)^(0+128),w
  5829  0176  0020               	movlb	0	; select bank0
  5830  0177  00C2               	movwf	InitUpperLowerPattern@upper_states+2
  5831  0178  0021               	movlb	1	; select bank1
  5832  0179  0855               	movf	(InitUpperLowerPattern@F461+1)^(0+128),w
  5833  017A  0020               	movlb	0	; select bank0
  5834  017B  00C1               	movwf	InitUpperLowerPattern@upper_states+1
  5835  017C  0021               	movlb	1	; select bank1
  5836  017D  0854               	movf	InitUpperLowerPattern@F461^(0+128),w
  5837  017E  0020               	movlb	0	; select bank0
  5838  017F  00C0               	movwf	InitUpperLowerPattern@upper_states
  5839  0180                     l2374:	
  5840                           
  5841                           ;Pattern.c: 157:     struct Stage* upper = ConstructStage( upper_states, 80UL, ((void*)0
      +                          ) );
  5842  0180  3050               	movlw	80
  5843  0181  00AC               	movwf	ConstructStage@time_ms
  5844  0182  3000               	movlw	0
  5845  0183  00AD               	movwf	ConstructStage@time_ms+1
  5846  0184  01AE               	clrf	ConstructStage@next
  5847  0185  3040               	movlw	(low (InitUpperLowerPattern@upper_states| 0))& (0+255)
  5848  0186  3187  270E  3181   	fcall	_ConstructStage
  5849  0189  0020               	movlb	0	; select bank0
  5850  018A  082D               	movf	?_ConstructStage+1,w
  5851  018B  00C9               	movwf	InitUpperLowerPattern@upper+1
  5852  018C  082C               	movf	?_ConstructStage,w
  5853  018D  00C8               	movwf	InitUpperLowerPattern@upper
  5854  018E                     l2376:	
  5855                           
  5856                           ;Pattern.c: 159:     _Bool lower_states[NUM_LIGHTS] = { 0, 0, 1, 1 };
  5857  018E  0021               	movlb	1	; select bank1
  5858  018F  0853               	movf	(InitUpperLowerPattern@F464+3)^(0+128),w
  5859  0190  0020               	movlb	0	; select bank0
  5860  0191  00C7               	movwf	InitUpperLowerPattern@lower_states+3
  5861  0192  0021               	movlb	1	; select bank1
  5862  0193  0852               	movf	(InitUpperLowerPattern@F464+2)^(0+128),w
  5863  0194  0020               	movlb	0	; select bank0
  5864  0195  00C6               	movwf	InitUpperLowerPattern@lower_states+2
  5865  0196  0021               	movlb	1	; select bank1
  5866  0197  0851               	movf	(InitUpperLowerPattern@F464+1)^(0+128),w
  5867  0198  0020               	movlb	0	; select bank0
  5868  0199  00C5               	movwf	InitUpperLowerPattern@lower_states+1
  5869  019A  0021               	movlb	1	; select bank1
  5870  019B  0850               	movf	InitUpperLowerPattern@F464^(0+128),w
  5871  019C  0020               	movlb	0	; select bank0
  5872  019D  00C4               	movwf	InitUpperLowerPattern@lower_states
  5873  019E                     l2378:	
  5874                           
  5875                           ;Pattern.c: 160:     struct Stage* lower = ConstructStage( lower_states, 80UL, ((void*)0
      +                          ) );
  5876  019E  3050               	movlw	80
  5877  019F  00AC               	movwf	ConstructStage@time_ms
  5878  01A0  3000               	movlw	0
  5879  01A1  00AD               	movwf	ConstructStage@time_ms+1
  5880  01A2  01AE               	clrf	ConstructStage@next
  5881  01A3  3044               	movlw	(low (InitUpperLowerPattern@lower_states| 0))& (0+255)
  5882  01A4  3187  270E  3181   	fcall	_ConstructStage
  5883  01A7  0020               	movlb	0	; select bank0
  5884  01A8  082D               	movf	?_ConstructStage+1,w
  5885  01A9  00CB               	movwf	InitUpperLowerPattern@lower+1
  5886  01AA  082C               	movf	?_ConstructStage,w
  5887  01AB  00CA               	movwf	InitUpperLowerPattern@lower
  5888  01AC                     l2380:	
  5889                           
  5890                           ;Pattern.c: 162:     struct Stage* off = NewStage();
  5891  01AC  3186  2648  3181   	fcall	_NewStage
  5892  01AF  0878               	movf	?_NewStage+1,w
  5893  01B0  0020               	movlb	0	; select bank0
  5894  01B1  00D1               	movwf	InitUpperLowerPattern@off+1
  5895  01B2  0877               	movf	?_NewStage,w
  5896  01B3  00D0               	movwf	InitUpperLowerPattern@off
  5897  01B4                     l2382:	
  5898                           
  5899                           ;Pattern.c: 165:     struct Stage* head = pattern->first_stage;
  5900  01B4  083D               	movf	InitUpperLowerPattern@pattern,w
  5901  01B5  0086               	movwf	6
  5902  01B6  083E               	movf	InitUpperLowerPattern@pattern+1,w
  5903  01B7  0087               	movwf	7
  5904  01B8  3141               	addfsr 1,1
  5905  01B9  3F40               	moviw [0]fsr1
  5906  01BA  00D2               	movwf	InitUpperLowerPattern@head
  5907  01BB  3F41               	moviw [1]fsr1
  5908  01BC  00D3               	movwf	InitUpperLowerPattern@head+1
  5909  01BD                     l2384:	
  5910                           
  5911                           ;Pattern.c: 168:     for( int i = 0; i < 3; i++ )
  5912  01BD  01CC               	clrf	InitUpperLowerPattern@i
  5913  01BE  01CD               	clrf	InitUpperLowerPattern@i+1
  5914  01BF                     l2390:	
  5915                           
  5916                           ;Pattern.c: 169:     {;Pattern.c: 170:         AppendStage( head, CopyStageData( NewStag
      +                          e(), upper ) );
  5917  01BF  0020               	movlb	0	; select bank0
  5918  01C0  0853               	movf	InitUpperLowerPattern@head+1,w
  5919  01C1  00B6               	movwf	AppendStage@head+1
  5920  01C2  0852               	movf	InitUpperLowerPattern@head,w
  5921  01C3  00B5               	movwf	AppendStage@head
  5922  01C4  3186  2648  3181   	fcall	_NewStage
  5923  01C7  0878               	movf	?_NewStage+1,w
  5924  01C8  0020               	movlb	0	; select bank0
  5925  01C9  00AD               	movwf	CopyStageData@dest+1
  5926  01CA  0877               	movf	?_NewStage,w
  5927  01CB  00AC               	movwf	CopyStageData@dest
  5928  01CC  0849               	movf	InitUpperLowerPattern@upper+1,w
  5929  01CD  00AF               	movwf	CopyStageData@source+1
  5930  01CE  0848               	movf	InitUpperLowerPattern@upper,w
  5931  01CF  00AE               	movwf	CopyStageData@source
  5932  01D0  3186  26D5  3181   	fcall	_CopyStageData
  5933  01D3  0020               	movlb	0	; select bank0
  5934  01D4  082D               	movf	?_CopyStageData+1,w
  5935  01D5  00B8               	movwf	AppendStage@new_stage+1
  5936  01D6  082C               	movf	?_CopyStageData,w
  5937  01D7  00B7               	movwf	AppendStage@new_stage
  5938  01D8  3185  25F0  3181   	fcall	_AppendStage
  5939                           
  5940                           ;Pattern.c: 171:         AppendStage( head, CopyStageData( NewStage(), off ) );
  5941  01DB  0020               	movlb	0	; select bank0
  5942  01DC  0853               	movf	InitUpperLowerPattern@head+1,w
  5943  01DD  00B6               	movwf	AppendStage@head+1
  5944  01DE  0852               	movf	InitUpperLowerPattern@head,w
  5945  01DF  00B5               	movwf	AppendStage@head
  5946  01E0  3186  2648  3181   	fcall	_NewStage
  5947  01E3  0878               	movf	?_NewStage+1,w
  5948  01E4  0020               	movlb	0	; select bank0
  5949  01E5  00AD               	movwf	CopyStageData@dest+1
  5950  01E6  0877               	movf	?_NewStage,w
  5951  01E7  00AC               	movwf	CopyStageData@dest
  5952  01E8  0851               	movf	InitUpperLowerPattern@off+1,w
  5953  01E9  00AF               	movwf	CopyStageData@source+1
  5954  01EA  0850               	movf	InitUpperLowerPattern@off,w
  5955  01EB  00AE               	movwf	CopyStageData@source
  5956  01EC  3186  26D5  3181   	fcall	_CopyStageData
  5957  01EF  0020               	movlb	0	; select bank0
  5958  01F0  082D               	movf	?_CopyStageData+1,w
  5959  01F1  00B8               	movwf	AppendStage@new_stage+1
  5960  01F2  082C               	movf	?_CopyStageData,w
  5961  01F3  00B7               	movwf	AppendStage@new_stage
  5962  01F4  3185  25F0  3181   	fcall	_AppendStage
  5963  01F7                     l2392:	
  5964                           
  5965                           ;Pattern.c: 172:     }
  5966  01F7  3001               	movlw	1
  5967  01F8  0020               	movlb	0	; select bank0
  5968  01F9  07CC               	addwf	InitUpperLowerPattern@i,f
  5969  01FA  3000               	movlw	0
  5970  01FB  3DCD               	addwfc	InitUpperLowerPattern@i+1,f
  5971  01FC                     l2394:	
  5972  01FC  084D               	movf	InitUpperLowerPattern@i+1,w
  5973  01FD  3A80               	xorlw	128
  5974  01FE  00BF               	movwf	??_InitUpperLowerPattern
  5975  01FF  3080               	movlw	128
  5976  0200  023F               	subwf	??_InitUpperLowerPattern,w
  5977  0201  1D03               	skipz
  5978  0202  2A05               	goto	u985
  5979  0203  3003               	movlw	3
  5980  0204  024C               	subwf	InitUpperLowerPattern@i,w
  5981  0205                     u985:	
  5982  0205  1C03               	skipc
  5983  0206  2A08               	goto	u981
  5984  0207  2A09               	goto	u980
  5985  0208                     u981:	
  5986  0208  29BF               	goto	l2390
  5987  0209                     u980:	
  5988  0209                     l2396:	
  5989                           
  5990                           ;Pattern.c: 175:     AppendStage( head, CopyStageData( NewStage(), off ) );
  5991  0209  0020               	movlb	0	; select bank0
  5992  020A  0853               	movf	InitUpperLowerPattern@head+1,w
  5993  020B  00B6               	movwf	AppendStage@head+1
  5994  020C  0852               	movf	InitUpperLowerPattern@head,w
  5995  020D  00B5               	movwf	AppendStage@head
  5996  020E  3186  2648  3181   	fcall	_NewStage
  5997  0211  0878               	movf	?_NewStage+1,w
  5998  0212  0020               	movlb	0	; select bank0
  5999  0213  00AD               	movwf	CopyStageData@dest+1
  6000  0214  0877               	movf	?_NewStage,w
  6001  0215  00AC               	movwf	CopyStageData@dest
  6002  0216  0851               	movf	InitUpperLowerPattern@off+1,w
  6003  0217  00AF               	movwf	CopyStageData@source+1
  6004  0218  0850               	movf	InitUpperLowerPattern@off,w
  6005  0219  00AE               	movwf	CopyStageData@source
  6006  021A  3186  26D5  3181   	fcall	_CopyStageData
  6007  021D  0020               	movlb	0	; select bank0
  6008  021E  082D               	movf	?_CopyStageData+1,w
  6009  021F  00B8               	movwf	AppendStage@new_stage+1
  6010  0220  082C               	movf	?_CopyStageData,w
  6011  0221  00B7               	movwf	AppendStage@new_stage
  6012  0222  3185  25F0  3181   	fcall	_AppendStage
  6013  0225                     l2398:	
  6014                           
  6015                           ;Pattern.c: 178:     for( int i = 0; i < 3; i++ )
  6016  0225  0020               	movlb	0	; select bank0
  6017  0226  01CE               	clrf	InitUpperLowerPattern@i_898
  6018  0227  01CF               	clrf	InitUpperLowerPattern@i_898+1
  6019  0228                     l2404:	
  6020                           
  6021                           ;Pattern.c: 179:     {;Pattern.c: 180:         AppendStage( head, CopyStageData( NewStag
      +                          e(), lower ) );
  6022  0228  0020               	movlb	0	; select bank0
  6023  0229  0853               	movf	InitUpperLowerPattern@head+1,w
  6024  022A  00B6               	movwf	AppendStage@head+1
  6025  022B  0852               	movf	InitUpperLowerPattern@head,w
  6026  022C  00B5               	movwf	AppendStage@head
  6027  022D  3186  2648  3181   	fcall	_NewStage
  6028  0230  0878               	movf	?_NewStage+1,w
  6029  0231  0020               	movlb	0	; select bank0
  6030  0232  00AD               	movwf	CopyStageData@dest+1
  6031  0233  0877               	movf	?_NewStage,w
  6032  0234  00AC               	movwf	CopyStageData@dest
  6033  0235  084B               	movf	InitUpperLowerPattern@lower+1,w
  6034  0236  00AF               	movwf	CopyStageData@source+1
  6035  0237  084A               	movf	InitUpperLowerPattern@lower,w
  6036  0238  00AE               	movwf	CopyStageData@source
  6037  0239  3186  26D5  3181   	fcall	_CopyStageData
  6038  023C  0020               	movlb	0	; select bank0
  6039  023D  082D               	movf	?_CopyStageData+1,w
  6040  023E  00B8               	movwf	AppendStage@new_stage+1
  6041  023F  082C               	movf	?_CopyStageData,w
  6042  0240  00B7               	movwf	AppendStage@new_stage
  6043  0241  3185  25F0  3181   	fcall	_AppendStage
  6044                           
  6045                           ;Pattern.c: 181:         AppendStage( head, CopyStageData( NewStage(), off ) );
  6046  0244  0020               	movlb	0	; select bank0
  6047  0245  0853               	movf	InitUpperLowerPattern@head+1,w
  6048  0246  00B6               	movwf	AppendStage@head+1
  6049  0247  0852               	movf	InitUpperLowerPattern@head,w
  6050  0248  00B5               	movwf	AppendStage@head
  6051  0249  3186  2648  3181   	fcall	_NewStage
  6052  024C  0878               	movf	?_NewStage+1,w
  6053  024D  0020               	movlb	0	; select bank0
  6054  024E  00AD               	movwf	CopyStageData@dest+1
  6055  024F  0877               	movf	?_NewStage,w
  6056  0250  00AC               	movwf	CopyStageData@dest
  6057  0251  0851               	movf	InitUpperLowerPattern@off+1,w
  6058  0252  00AF               	movwf	CopyStageData@source+1
  6059  0253  0850               	movf	InitUpperLowerPattern@off,w
  6060  0254  00AE               	movwf	CopyStageData@source
  6061  0255  3186  26D5  3181   	fcall	_CopyStageData
  6062  0258  0020               	movlb	0	; select bank0
  6063  0259  082D               	movf	?_CopyStageData+1,w
  6064  025A  00B8               	movwf	AppendStage@new_stage+1
  6065  025B  082C               	movf	?_CopyStageData,w
  6066  025C  00B7               	movwf	AppendStage@new_stage
  6067  025D  3185  25F0  3181   	fcall	_AppendStage
  6068  0260                     l2406:	
  6069                           
  6070                           ;Pattern.c: 182:     }
  6071  0260  3001               	movlw	1
  6072  0261  0020               	movlb	0	; select bank0
  6073  0262  07CE               	addwf	InitUpperLowerPattern@i_898,f
  6074  0263  3000               	movlw	0
  6075  0264  3DCF               	addwfc	InitUpperLowerPattern@i_898+1,f
  6076  0265                     l2408:	
  6077  0265  084F               	movf	InitUpperLowerPattern@i_898+1,w
  6078  0266  3A80               	xorlw	128
  6079  0267  00BF               	movwf	??_InitUpperLowerPattern
  6080  0268  3080               	movlw	128
  6081  0269  023F               	subwf	??_InitUpperLowerPattern,w
  6082  026A  1D03               	skipz
  6083  026B  2A6E               	goto	u995
  6084  026C  3003               	movlw	3
  6085  026D  024E               	subwf	InitUpperLowerPattern@i_898,w
  6086  026E                     u995:	
  6087  026E  1C03               	skipc
  6088  026F  2A71               	goto	u991
  6089  0270  2A72               	goto	u990
  6090  0271                     u991:	
  6091  0271  2A28               	goto	l2404
  6092  0272                     u990:	
  6093  0272                     l496:	
  6094  0272  0008               	return
  6095  0273                     __end_of_InitUpperLowerPattern:	
  6096                           
  6097                           	psect	text18
  6098  0273                     __ptext18:	
  6099 ;; *************** function _InitLowerPattern *****************
  6100 ;; Defined at:
  6101 ;;		line 185 in file "Pattern.c"
  6102 ;; Parameters:    Size  Location     Type
  6103 ;;  pattern         2   29[BANK0 ] PTR struct Pattern
  6104 ;;		 -> pattern_stash(18), NULL(0), 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;  i               2   46[BANK0 ] int 
  6107 ;;  i               2   44[BANK0 ] int 
  6108 ;;  lower_right_    4   36[BANK0 ] _Bool [4]
  6109 ;;  lower_left_s    4   32[BANK0 ] _Bool [4]
  6110 ;;  head            2   50[BANK0 ] PTR struct Stage
  6111 ;;		 -> stage_stash(768), NULL(0), 
  6112 ;;  off             2   48[BANK0 ] PTR struct Stage
  6113 ;;		 -> stage_stash(768), NULL(0), 
  6114 ;;  lower_right     2   42[BANK0 ] PTR struct Stage
  6115 ;;		 -> stage_stash(768), NULL(0), 
  6116 ;;  lower_left      2   40[BANK0 ] PTR struct Stage
  6117 ;;		 -> stage_stash(768), NULL(0), 
  6118 ;; Return value:  Size  Location     Type
  6119 ;;                  1    wreg      void 
  6120 ;; Registers used:
  6121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6127 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;Total ram usage:       23 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    7
  6134 ;; This function calls:
  6135 ;;		_AppendStage
  6136 ;;		_ConstructStage
  6137 ;;		_CopyStageData
  6138 ;;		_NewStage
  6139 ;; This function is called by:
  6140 ;;		_InitPatternSelector
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           
  6145                           ;psect for function _InitLowerPattern
  6146  0273                     _InitLowerPattern:	
  6147  0273                     l2410:	
  6148                           ;incstack = 0
  6149                           ; Regs used in _InitLowerPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6150                           
  6151                           
  6152                           ;Pattern.c: 185: void InitLowerPattern( struct Pattern* pattern );Pattern.c: 186: {;Patt
      +                          ern.c: 187:     pattern->name = LOWER;
  6153  0273  0020               	movlb	0	; select bank0
  6154  0274  083D               	movf	InitLowerPattern@pattern,w
  6155  0275  0086               	movwf	6
  6156  0276  083E               	movf	InitLowerPattern@pattern+1,w
  6157  0277  0087               	movwf	7
  6158  0278  3003               	movlw	3
  6159  0279  0081               	movwf	1
  6160  027A                     l2412:	
  6161                           
  6162                           ;Pattern.c: 190:     _Bool lower_left_states[NUM_LIGHTS] = { 0, 0, 1, 0 };
  6163  027A  0021               	movlb	1	; select bank1
  6164  027B  084F               	movf	(InitLowerPattern@F473+3)^(0+128),w
  6165  027C  0020               	movlb	0	; select bank0
  6166  027D  00C3               	movwf	InitLowerPattern@lower_left_states+3
  6167  027E  0021               	movlb	1	; select bank1
  6168  027F  084E               	movf	(InitLowerPattern@F473+2)^(0+128),w
  6169  0280  0020               	movlb	0	; select bank0
  6170  0281  00C2               	movwf	InitLowerPattern@lower_left_states+2
  6171  0282  0021               	movlb	1	; select bank1
  6172  0283  084D               	movf	(InitLowerPattern@F473+1)^(0+128),w
  6173  0284  0020               	movlb	0	; select bank0
  6174  0285  00C1               	movwf	InitLowerPattern@lower_left_states+1
  6175  0286  0021               	movlb	1	; select bank1
  6176  0287  084C               	movf	InitLowerPattern@F473^(0+128),w
  6177  0288  0020               	movlb	0	; select bank0
  6178  0289  00C0               	movwf	InitLowerPattern@lower_left_states
  6179  028A                     l2414:	
  6180                           
  6181                           ;Pattern.c: 191:     struct Stage* lower_left = ConstructStage( lower_left_states, 80UL,
      +                           ((void*)0) );
  6182  028A  3050               	movlw	80
  6183  028B  00AC               	movwf	ConstructStage@time_ms
  6184  028C  3000               	movlw	0
  6185  028D  00AD               	movwf	ConstructStage@time_ms+1
  6186  028E  01AE               	clrf	ConstructStage@next
  6187  028F  3040               	movlw	(low (InitLowerPattern@lower_left_states| 0))& (0+255)
  6188  0290  3187  270E  3182   	fcall	_ConstructStage
  6189  0293  0020               	movlb	0	; select bank0
  6190  0294  082D               	movf	?_ConstructStage+1,w
  6191  0295  00C9               	movwf	InitLowerPattern@lower_left+1
  6192  0296  082C               	movf	?_ConstructStage,w
  6193  0297  00C8               	movwf	InitLowerPattern@lower_left
  6194  0298                     l2416:	
  6195                           
  6196                           ;Pattern.c: 193:     _Bool lower_right_states[NUM_LIGHTS] = { 0, 0, 0, 1 };
  6197  0298  0021               	movlb	1	; select bank1
  6198  0299  084B               	movf	(InitLowerPattern@F476+3)^(0+128),w
  6199  029A  0020               	movlb	0	; select bank0
  6200  029B  00C7               	movwf	InitLowerPattern@lower_right_states+3
  6201  029C  0021               	movlb	1	; select bank1
  6202  029D  084A               	movf	(InitLowerPattern@F476+2)^(0+128),w
  6203  029E  0020               	movlb	0	; select bank0
  6204  029F  00C6               	movwf	InitLowerPattern@lower_right_states+2
  6205  02A0  0021               	movlb	1	; select bank1
  6206  02A1  0849               	movf	(InitLowerPattern@F476+1)^(0+128),w
  6207  02A2  0020               	movlb	0	; select bank0
  6208  02A3  00C5               	movwf	InitLowerPattern@lower_right_states+1
  6209  02A4  0021               	movlb	1	; select bank1
  6210  02A5  0848               	movf	InitLowerPattern@F476^(0+128),w
  6211  02A6  0020               	movlb	0	; select bank0
  6212  02A7  00C4               	movwf	InitLowerPattern@lower_right_states
  6213  02A8                     l2418:	
  6214                           
  6215                           ;Pattern.c: 194:     struct Stage* lower_right = ConstructStage( lower_right_states, 80U
      +                          L, ((void*)0) );
  6216  02A8  3050               	movlw	80
  6217  02A9  00AC               	movwf	ConstructStage@time_ms
  6218  02AA  3000               	movlw	0
  6219  02AB  00AD               	movwf	ConstructStage@time_ms+1
  6220  02AC  01AE               	clrf	ConstructStage@next
  6221  02AD  3044               	movlw	(low (InitLowerPattern@lower_right_states| 0))& (0+255)
  6222  02AE  3187  270E  3182   	fcall	_ConstructStage
  6223  02B1  0020               	movlb	0	; select bank0
  6224  02B2  082D               	movf	?_ConstructStage+1,w
  6225  02B3  00CB               	movwf	InitLowerPattern@lower_right+1
  6226  02B4  082C               	movf	?_ConstructStage,w
  6227  02B5  00CA               	movwf	InitLowerPattern@lower_right
  6228  02B6                     l2420:	
  6229                           
  6230                           ;Pattern.c: 196:     struct Stage* off = NewStage();
  6231  02B6  3186  2648  3182   	fcall	_NewStage
  6232  02B9  0878               	movf	?_NewStage+1,w
  6233  02BA  0020               	movlb	0	; select bank0
  6234  02BB  00D1               	movwf	InitLowerPattern@off+1
  6235  02BC  0877               	movf	?_NewStage,w
  6236  02BD  00D0               	movwf	InitLowerPattern@off
  6237  02BE                     l2422:	
  6238                           
  6239                           ;Pattern.c: 198:     struct Stage* head = pattern->first_stage;
  6240  02BE  083D               	movf	InitLowerPattern@pattern,w
  6241  02BF  0086               	movwf	6
  6242  02C0  083E               	movf	InitLowerPattern@pattern+1,w
  6243  02C1  0087               	movwf	7
  6244  02C2  3141               	addfsr 1,1
  6245  02C3  3F40               	moviw [0]fsr1
  6246  02C4  00D2               	movwf	InitLowerPattern@head
  6247  02C5  3F41               	moviw [1]fsr1
  6248  02C6  00D3               	movwf	InitLowerPattern@head+1
  6249  02C7                     l2424:	
  6250                           
  6251                           ;Pattern.c: 201:     for( int i = 0; i < 3; i++ )
  6252  02C7  01CC               	clrf	InitLowerPattern@i
  6253  02C8  01CD               	clrf	InitLowerPattern@i+1
  6254  02C9                     l2430:	
  6255                           
  6256                           ;Pattern.c: 202:     {;Pattern.c: 203:         AppendStage( head, CopyStageData( NewStag
      +                          e(), lower_left ) );
  6257  02C9  0020               	movlb	0	; select bank0
  6258  02CA  0853               	movf	InitLowerPattern@head+1,w
  6259  02CB  00B6               	movwf	AppendStage@head+1
  6260  02CC  0852               	movf	InitLowerPattern@head,w
  6261  02CD  00B5               	movwf	AppendStage@head
  6262  02CE  3186  2648  3182   	fcall	_NewStage
  6263  02D1  0878               	movf	?_NewStage+1,w
  6264  02D2  0020               	movlb	0	; select bank0
  6265  02D3  00AD               	movwf	CopyStageData@dest+1
  6266  02D4  0877               	movf	?_NewStage,w
  6267  02D5  00AC               	movwf	CopyStageData@dest
  6268  02D6  0849               	movf	InitLowerPattern@lower_left+1,w
  6269  02D7  00AF               	movwf	CopyStageData@source+1
  6270  02D8  0848               	movf	InitLowerPattern@lower_left,w
  6271  02D9  00AE               	movwf	CopyStageData@source
  6272  02DA  3186  26D5  3182   	fcall	_CopyStageData
  6273  02DD  0020               	movlb	0	; select bank0
  6274  02DE  082D               	movf	?_CopyStageData+1,w
  6275  02DF  00B8               	movwf	AppendStage@new_stage+1
  6276  02E0  082C               	movf	?_CopyStageData,w
  6277  02E1  00B7               	movwf	AppendStage@new_stage
  6278  02E2  3185  25F0  3182   	fcall	_AppendStage
  6279                           
  6280                           ;Pattern.c: 204:         AppendStage( head, CopyStageData( NewStage(), off ) );
  6281  02E5  0020               	movlb	0	; select bank0
  6282  02E6  0853               	movf	InitLowerPattern@head+1,w
  6283  02E7  00B6               	movwf	AppendStage@head+1
  6284  02E8  0852               	movf	InitLowerPattern@head,w
  6285  02E9  00B5               	movwf	AppendStage@head
  6286  02EA  3186  2648  3182   	fcall	_NewStage
  6287  02ED  0878               	movf	?_NewStage+1,w
  6288  02EE  0020               	movlb	0	; select bank0
  6289  02EF  00AD               	movwf	CopyStageData@dest+1
  6290  02F0  0877               	movf	?_NewStage,w
  6291  02F1  00AC               	movwf	CopyStageData@dest
  6292  02F2  0851               	movf	InitLowerPattern@off+1,w
  6293  02F3  00AF               	movwf	CopyStageData@source+1
  6294  02F4  0850               	movf	InitLowerPattern@off,w
  6295  02F5  00AE               	movwf	CopyStageData@source
  6296  02F6  3186  26D5  3182   	fcall	_CopyStageData
  6297  02F9  0020               	movlb	0	; select bank0
  6298  02FA  082D               	movf	?_CopyStageData+1,w
  6299  02FB  00B8               	movwf	AppendStage@new_stage+1
  6300  02FC  082C               	movf	?_CopyStageData,w
  6301  02FD  00B7               	movwf	AppendStage@new_stage
  6302  02FE  3185  25F0  3182   	fcall	_AppendStage
  6303  0301                     l2432:	
  6304                           
  6305                           ;Pattern.c: 205:     }
  6306  0301  3001               	movlw	1
  6307  0302  0020               	movlb	0	; select bank0
  6308  0303  07CC               	addwf	InitLowerPattern@i,f
  6309  0304  3000               	movlw	0
  6310  0305  3DCD               	addwfc	InitLowerPattern@i+1,f
  6311  0306                     l2434:	
  6312  0306  084D               	movf	InitLowerPattern@i+1,w
  6313  0307  3A80               	xorlw	128
  6314  0308  00BF               	movwf	??_InitLowerPattern
  6315  0309  3080               	movlw	128
  6316  030A  023F               	subwf	??_InitLowerPattern,w
  6317  030B  1D03               	skipz
  6318  030C  2B0F               	goto	u1005
  6319  030D  3003               	movlw	3
  6320  030E  024C               	subwf	InitLowerPattern@i,w
  6321  030F                     u1005:	
  6322  030F  1C03               	skipc
  6323  0310  2B12               	goto	u1001
  6324  0311  2B13               	goto	u1000
  6325  0312                     u1001:	
  6326  0312  2AC9               	goto	l2430
  6327  0313                     u1000:	
  6328  0313                     l2436:	
  6329                           
  6330                           ;Pattern.c: 208:     AppendStage( head, CopyStageData( NewStage(), off ) );
  6331  0313  0020               	movlb	0	; select bank0
  6332  0314  0853               	movf	InitLowerPattern@head+1,w
  6333  0315  00B6               	movwf	AppendStage@head+1
  6334  0316  0852               	movf	InitLowerPattern@head,w
  6335  0317  00B5               	movwf	AppendStage@head
  6336  0318  3186  2648  3182   	fcall	_NewStage
  6337  031B  0878               	movf	?_NewStage+1,w
  6338  031C  0020               	movlb	0	; select bank0
  6339  031D  00AD               	movwf	CopyStageData@dest+1
  6340  031E  0877               	movf	?_NewStage,w
  6341  031F  00AC               	movwf	CopyStageData@dest
  6342  0320  0851               	movf	InitLowerPattern@off+1,w
  6343  0321  00AF               	movwf	CopyStageData@source+1
  6344  0322  0850               	movf	InitLowerPattern@off,w
  6345  0323  00AE               	movwf	CopyStageData@source
  6346  0324  3186  26D5  3182   	fcall	_CopyStageData
  6347  0327  0020               	movlb	0	; select bank0
  6348  0328  082D               	movf	?_CopyStageData+1,w
  6349  0329  00B8               	movwf	AppendStage@new_stage+1
  6350  032A  082C               	movf	?_CopyStageData,w
  6351  032B  00B7               	movwf	AppendStage@new_stage
  6352  032C  3185  25F0  3182   	fcall	_AppendStage
  6353  032F                     l2438:	
  6354                           
  6355                           ;Pattern.c: 211:     for( int i = 0; i < 3; i++ )
  6356  032F  0020               	movlb	0	; select bank0
  6357  0330  01CE               	clrf	InitLowerPattern@i_924
  6358  0331  01CF               	clrf	InitLowerPattern@i_924+1
  6359  0332                     l2444:	
  6360                           
  6361                           ;Pattern.c: 212:     {;Pattern.c: 213:         AppendStage( head, CopyStageData( NewStag
      +                          e(), lower_right ) );
  6362  0332  0020               	movlb	0	; select bank0
  6363  0333  0853               	movf	InitLowerPattern@head+1,w
  6364  0334  00B6               	movwf	AppendStage@head+1
  6365  0335  0852               	movf	InitLowerPattern@head,w
  6366  0336  00B5               	movwf	AppendStage@head
  6367  0337  3186  2648  3182   	fcall	_NewStage
  6368  033A  0878               	movf	?_NewStage+1,w
  6369  033B  0020               	movlb	0	; select bank0
  6370  033C  00AD               	movwf	CopyStageData@dest+1
  6371  033D  0877               	movf	?_NewStage,w
  6372  033E  00AC               	movwf	CopyStageData@dest
  6373  033F  084B               	movf	InitLowerPattern@lower_right+1,w
  6374  0340  00AF               	movwf	CopyStageData@source+1
  6375  0341  084A               	movf	InitLowerPattern@lower_right,w
  6376  0342  00AE               	movwf	CopyStageData@source
  6377  0343  3186  26D5  3182   	fcall	_CopyStageData
  6378  0346  0020               	movlb	0	; select bank0
  6379  0347  082D               	movf	?_CopyStageData+1,w
  6380  0348  00B8               	movwf	AppendStage@new_stage+1
  6381  0349  082C               	movf	?_CopyStageData,w
  6382  034A  00B7               	movwf	AppendStage@new_stage
  6383  034B  3185  25F0  3182   	fcall	_AppendStage
  6384                           
  6385                           ;Pattern.c: 214:         AppendStage( head, CopyStageData( NewStage(), off ) );
  6386  034E  0020               	movlb	0	; select bank0
  6387  034F  0853               	movf	InitLowerPattern@head+1,w
  6388  0350  00B6               	movwf	AppendStage@head+1
  6389  0351  0852               	movf	InitLowerPattern@head,w
  6390  0352  00B5               	movwf	AppendStage@head
  6391  0353  3186  2648  3182   	fcall	_NewStage
  6392  0356  0878               	movf	?_NewStage+1,w
  6393  0357  0020               	movlb	0	; select bank0
  6394  0358  00AD               	movwf	CopyStageData@dest+1
  6395  0359  0877               	movf	?_NewStage,w
  6396  035A  00AC               	movwf	CopyStageData@dest
  6397  035B  0851               	movf	InitLowerPattern@off+1,w
  6398  035C  00AF               	movwf	CopyStageData@source+1
  6399  035D  0850               	movf	InitLowerPattern@off,w
  6400  035E  00AE               	movwf	CopyStageData@source
  6401  035F  3186  26D5  3182   	fcall	_CopyStageData
  6402  0362  0020               	movlb	0	; select bank0
  6403  0363  082D               	movf	?_CopyStageData+1,w
  6404  0364  00B8               	movwf	AppendStage@new_stage+1
  6405  0365  082C               	movf	?_CopyStageData,w
  6406  0366  00B7               	movwf	AppendStage@new_stage
  6407  0367  3185  25F0  3182   	fcall	_AppendStage
  6408  036A                     l2446:	
  6409                           
  6410                           ;Pattern.c: 215:     }
  6411  036A  3001               	movlw	1
  6412  036B  0020               	movlb	0	; select bank0
  6413  036C  07CE               	addwf	InitLowerPattern@i_924,f
  6414  036D  3000               	movlw	0
  6415  036E  3DCF               	addwfc	InitLowerPattern@i_924+1,f
  6416  036F                     l2448:	
  6417  036F  084F               	movf	InitLowerPattern@i_924+1,w
  6418  0370  3A80               	xorlw	128
  6419  0371  00BF               	movwf	??_InitLowerPattern
  6420  0372  3080               	movlw	128
  6421  0373  023F               	subwf	??_InitLowerPattern,w
  6422  0374  1D03               	skipz
  6423  0375  2B78               	goto	u1015
  6424  0376  3003               	movlw	3
  6425  0377  024E               	subwf	InitLowerPattern@i_924,w
  6426  0378                     u1015:	
  6427  0378  1C03               	skipc
  6428  0379  2B7B               	goto	u1011
  6429  037A  2B7C               	goto	u1010
  6430  037B                     u1011:	
  6431  037B  2B32               	goto	l2444
  6432  037C                     u1010:	
  6433  037C                     l507:	
  6434  037C  0008               	return
  6435  037D                     __end_of_InitLowerPattern:	
  6436                           
  6437                           	psect	text19
  6438  06D5                     __ptext19:	
  6439 ;; *************** function _CopyStageData *****************
  6440 ;; Defined at:
  6441 ;;		line 58 in file "Pattern.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;  dest            2   12[BANK0 ] PTR struct Stage
  6444 ;;		 -> stage_stash(768), NULL(0), 
  6445 ;;  source          2   14[BANK0 ] PTR struct Stage
  6446 ;;		 -> stage_stash(768), NULL(0), 
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;  i               2   19[BANK0 ] int 
  6449 ;; Return value:  Size  Location     Type
  6450 ;;                  2   12[BANK0 ] PTR struct Stage
  6451 ;; Registers used:
  6452 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 0/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6458 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6462 ;;Total ram usage:        9 bytes
  6463 ;; Hardware stack levels used:    1
  6464 ;; Hardware stack levels required when called:    4
  6465 ;; This function calls:
  6466 ;;		Nothing
  6467 ;; This function is called by:
  6468 ;;		_InitWigwagPattern
  6469 ;;		_InitXStrobePattern
  6470 ;;		_InitUpperLowerPattern
  6471 ;;		_InitLowerPattern
  6472 ;; This function uses a non-reentrant model
  6473 ;;
  6474                           
  6475                           
  6476                           ;psect for function _CopyStageData
  6477  06D5                     _CopyStageData:	
  6478  06D5                     l1750:	
  6479                           ;incstack = 0
  6480                           ; Regs used in _CopyStageData: [wreg-fsr1h+status,2+status,0]
  6481                           
  6482                           
  6483                           ;Pattern.c: 58: struct Stage* CopyStageData( struct Stage* dest, struct Stage* source );
      +                          Pattern.c: 59: {;Pattern.c: 60:     for( int i = 0; i < NUM_LIGHTS; i++ )
  6484  06D5  0020               	movlb	0	; select bank0
  6485  06D6  01B3               	clrf	CopyStageData@i
  6486  06D7  01B4               	clrf	CopyStageData@i+1
  6487  06D8                     l1756:	
  6488                           
  6489                           ;Pattern.c: 61:         dest->light_states[i] = source->light_states[i];
  6490  06D8  0020               	movlb	0	; select bank0
  6491  06D9  0833               	movf	CopyStageData@i,w
  6492  06DA  072E               	addwf	CopyStageData@source,w
  6493  06DB  0086               	movwf	6
  6494  06DC  0834               	movf	CopyStageData@i+1,w
  6495  06DD  3D2F               	addwfc	CopyStageData@source+1,w
  6496  06DE  0087               	movwf	7
  6497  06DF  0801               	movf	1,w
  6498  06E0  00B0               	movwf	??_CopyStageData
  6499  06E1  0833               	movf	CopyStageData@i,w
  6500  06E2  072C               	addwf	CopyStageData@dest,w
  6501  06E3  00B1               	movwf	??_CopyStageData+1
  6502  06E4  0834               	movf	CopyStageData@i+1,w
  6503  06E5  3D2D               	addwfc	CopyStageData@dest+1,w
  6504  06E6  00B2               	movwf	??_CopyStageData+2
  6505  06E7  0831               	movf	??_CopyStageData+1,w
  6506  06E8  0086               	movwf	6
  6507  06E9  0832               	movf	??_CopyStageData+2,w
  6508  06EA  0087               	movwf	7
  6509  06EB  0830               	movf	??_CopyStageData,w
  6510  06EC  0081               	movwf	1
  6511  06ED                     l1758:	
  6512  06ED  3001               	movlw	1
  6513  06EE  07B3               	addwf	CopyStageData@i,f
  6514  06EF  3000               	movlw	0
  6515  06F0  3DB4               	addwfc	CopyStageData@i+1,f
  6516  06F1                     l1760:	
  6517  06F1  0834               	movf	CopyStageData@i+1,w
  6518  06F2  3A80               	xorlw	128
  6519  06F3  00B0               	movwf	??_CopyStageData
  6520  06F4  3080               	movlw	128
  6521  06F5  0230               	subwf	??_CopyStageData,w
  6522  06F6  1D03               	skipz
  6523  06F7  2EFA               	goto	u485
  6524  06F8  3004               	movlw	4
  6525  06F9  0233               	subwf	CopyStageData@i,w
  6526  06FA                     u485:	
  6527  06FA  1C03               	skipc
  6528  06FB  2EFD               	goto	u481
  6529  06FC  2EFE               	goto	u480
  6530  06FD                     u481:	
  6531  06FD  2ED8               	goto	l1756
  6532  06FE                     u480:	
  6533  06FE                     l1762:	
  6534                           
  6535                           ;Pattern.c: 62:     dest->time_ms = source->time_ms;
  6536  06FE  0020               	movlb	0	; select bank0
  6537  06FF  082E               	movf	CopyStageData@source,w
  6538  0700  0086               	movwf	6
  6539  0701  082F               	movf	CopyStageData@source+1,w
  6540  0702  0087               	movwf	7
  6541  0703  3144               	addfsr 1,4
  6542  0704  082C               	movf	CopyStageData@dest,w
  6543  0705  0084               	movwf	4
  6544  0706  082D               	movf	CopyStageData@dest+1,w
  6545  0707  0085               	movwf	5
  6546  0708  3104               	addfsr 0,4
  6547  0709  3F40               	moviw [0]fsr1
  6548  070A  3F80               	movwi [0]fsr0
  6549  070B  3F41               	moviw [1]fsr1
  6550  070C  3F81               	movwi [1]fsr0
  6551  070D                     l1764:	
  6552  070D                     l455:	
  6553                           ;Pattern.c: 63:     return dest;
  6554                           
  6555  070D  0008               	return
  6556  070E                     __end_of_CopyStageData:	
  6557                           
  6558                           	psect	text20
  6559  070E                     __ptext20:	
  6560 ;; *************** function _ConstructStage *****************
  6561 ;; Defined at:
  6562 ;;		line 49 in file "Pattern.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;  states          1    wreg     PTR const _Bool 
  6565 ;;		 -> InitLowerPattern@lower_right_states(4), InitLowerPattern@lower_left_states(4), InitUpperLowerPattern@lower_state
      +s(4), InitUpperLowerPattern@upper_states(4), 
  6566 ;;		 -> InitXStrobePattern@diag_2_3_states(4), InitXStrobePattern@diag_1_4_states(4), InitWigwagPattern@right_side_state
      +s(4), InitWigwagPattern@left_side_states(4), 
  6567 ;;  time_ms         2   12[BANK0 ] const unsigned short 
  6568 ;;  next            1   14[BANK0 ] PTR struct Stage
  6569 ;;		 -> NULL(0), 
  6570 ;; Auto vars:     Size  Location     Type
  6571 ;;  states          1   15[BANK0 ] PTR const _Bool 
  6572 ;;		 -> InitLowerPattern@lower_right_states(4), InitLowerPattern@lower_left_states(4), InitUpperLowerPattern@lower_state
      +s(4), InitUpperLowerPattern@upper_states(4), 
  6573 ;;		 -> InitXStrobePattern@diag_2_3_states(4), InitXStrobePattern@diag_1_4_states(4), InitWigwagPattern@right_side_state
      +s(4), InitWigwagPattern@left_side_states(4), 
  6574 ;;  new_stage       2   16[BANK0 ] PTR struct Stage
  6575 ;;		 -> stage_stash(768), NULL(0), 
  6576 ;; Return value:  Size  Location     Type
  6577 ;;                  2   12[BANK0 ] PTR struct Stage
  6578 ;; Registers used:
  6579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6585 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;Total ram usage:        7 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    6
  6592 ;; This function calls:
  6593 ;;		_AssignLightStates
  6594 ;;		_NewStage
  6595 ;; This function is called by:
  6596 ;;		_InitWigwagPattern
  6597 ;;		_InitXStrobePattern
  6598 ;;		_InitUpperLowerPattern
  6599 ;;		_InitLowerPattern
  6600 ;; This function uses a non-reentrant model
  6601 ;;
  6602                           
  6603                           
  6604                           ;psect for function _ConstructStage
  6605  070E                     _ConstructStage:	
  6606                           
  6607                           ;incstack = 0
  6608                           ; Regs used in _ConstructStage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6609                           ;ConstructStage@states stored from wreg
  6610  070E  0020               	movlb	0	; select bank0
  6611  070F  00AF               	movwf	ConstructStage@states
  6612  0710                     l2262:	
  6613                           
  6614                           ;Pattern.c: 49: struct Stage* ConstructStage( const _Bool states[NUM_LIGHTS], const uint
      +                           time_ms, struct Stage* next );Pattern.c: 50: {;Pattern.c: 51:     struct Stage* new_sta
      +                          ge = NewStage();
  6615  0710  3186  2648  3187   	fcall	_NewStage
  6616  0713  0878               	movf	?_NewStage+1,w
  6617  0714  0020               	movlb	0	; select bank0
  6618  0715  00B1               	movwf	ConstructStage@new_stage+1
  6619  0716  0877               	movf	?_NewStage,w
  6620  0717  00B0               	movwf	ConstructStage@new_stage
  6621                           
  6622                           ;Pattern.c: 52:     AssignLightStates( new_stage, states );
  6623  0718  0831               	movf	ConstructStage@new_stage+1,w
  6624  0719  00F3               	movwf	AssignLightStates@stage+1
  6625  071A  0830               	movf	ConstructStage@new_stage,w
  6626  071B  00F2               	movwf	AssignLightStates@stage
  6627  071C  082F               	movf	ConstructStage@states,w
  6628  071D  00F9               	movwf	??_ConstructStage
  6629  071E  0879               	movf	??_ConstructStage,w
  6630  071F  00F4               	movwf	AssignLightStates@states
  6631  0720  3187  2793  3187   	fcall	_AssignLightStates
  6632  0723                     l2264:	
  6633                           
  6634                           ;Pattern.c: 53:     new_stage->time_ms = time_ms;
  6635  0723  0020               	movlb	0	; select bank0
  6636  0724  0830               	movf	ConstructStage@new_stage,w
  6637  0725  0086               	movwf	6
  6638  0726  0831               	movf	ConstructStage@new_stage+1,w
  6639  0727  0087               	movwf	7
  6640  0728  3144               	addfsr 1,4
  6641  0729  082C               	movf	ConstructStage@time_ms,w
  6642  072A  3FC0               	movwi [0]fsr1
  6643  072B  082D               	movf	ConstructStage@time_ms+1,w
  6644  072C  3FC1               	movwi [1]fsr1
  6645  072D                     l2266:	
  6646                           
  6647                           ;Pattern.c: 54:     new_stage->next = next;
  6648  072D  0830               	movf	ConstructStage@new_stage,w
  6649  072E  0086               	movwf	6
  6650  072F  0831               	movf	ConstructStage@new_stage+1,w
  6651  0730  0087               	movwf	7
  6652  0731  3146               	addfsr 1,6
  6653  0732  082E               	movf	ConstructStage@next,w
  6654  0733  3FC0               	movwi [0]fsr1
  6655  0734  3000               	movlw	0
  6656  0735  3FC1               	movwi [1]fsr1
  6657  0736                     l2268:	
  6658                           
  6659                           ;Pattern.c: 55:     return new_stage;
  6660  0736  0831               	movf	ConstructStage@new_stage+1,w
  6661  0737  00AD               	movwf	?_ConstructStage+1
  6662  0738  0830               	movf	ConstructStage@new_stage,w
  6663  0739  00AC               	movwf	?_ConstructStage
  6664  073A                     l450:	
  6665  073A  0008               	return
  6666  073B                     __end_of_ConstructStage:	
  6667                           
  6668                           	psect	text21
  6669  0648                     __ptext21:	
  6670 ;; *************** function _NewStage *****************
  6671 ;; Defined at:
  6672 ;;		line 22 in file "Pattern.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;		None
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;  init_states     4    6[BANK0 ] _Bool [4]
  6677 ;;  new_stage       2   10[BANK0 ] PTR struct Stage
  6678 ;;		 -> stage_stash(768), 
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  2    7[COMMON] PTR struct Stage
  6681 ;; Registers used:
  6682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;Total ram usage:       10 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    5
  6695 ;; This function calls:
  6696 ;;		_AssignLightStates
  6697 ;; This function is called by:
  6698 ;;		_NewPattern
  6699 ;;		_ConstructStage
  6700 ;;		_InitWigwagPattern
  6701 ;;		_InitXStrobePattern
  6702 ;;		_InitUpperLowerPattern
  6703 ;;		_InitLowerPattern
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           
  6708                           ;psect for function _NewStage
  6709  0648                     _NewStage:	
  6710  0648                     l2240:	
  6711                           ;incstack = 0
  6712                           ; Regs used in _NewStage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6713                           
  6714                           
  6715                           ;Pattern.c: 24:     if ( stage_list_iter >= MAX_STAGES )
  6716  0648  3000               	movlw	0
  6717  0649  0020               	movlb	0	; select bank0
  6718  064A  0261               	subwf	_stage_list_iter+1,w
  6719  064B  3060               	movlw	96
  6720  064C  1903               	skipnz
  6721  064D  0260               	subwf	_stage_list_iter,w
  6722  064E  1C03               	skipc
  6723  064F  2E51               	goto	u921
  6724  0650  2E52               	goto	u920
  6725  0651                     u921:	
  6726  0651  2E55               	goto	l2246
  6727  0652                     u920:	
  6728  0652                     l2242:	
  6729                           
  6730                           ;Pattern.c: 25:         return ((void*)0);
  6731  0652  01F7               	clrf	?_NewStage
  6732  0653  01F8               	clrf	?_NewStage+1
  6733  0654  2E96               	goto	l441
  6734  0655                     l2246:	
  6735                           
  6736                           ;Pattern.c: 27:     struct Stage* new_stage = &stage_stash[ stage_list_iter++ ];
  6737  0655  0861               	movf	_stage_list_iter+1,w
  6738  0656  00A3               	movwf	??_NewStage+1
  6739  0657  0860               	movf	_stage_list_iter,w
  6740  0658  00A2               	movwf	??_NewStage
  6741  0659  35A2               	lslf	??_NewStage,f
  6742  065A  0DA3               	rlf	??_NewStage+1,f
  6743  065B  35A2               	lslf	??_NewStage,f
  6744  065C  0DA3               	rlf	??_NewStage+1,f
  6745  065D  35A2               	lslf	??_NewStage,f
  6746  065E  0DA3               	rlf	??_NewStage+1,f
  6747  065F  30F0               	movlw	240
  6748  0660  00A4               	movwf	??_NewStage+2
  6749  0661  3020               	movlw	32
  6750  0662  00A5               	movwf	??_NewStage+3
  6751  0663  0822               	movf	??_NewStage,w
  6752  0664  0724               	addwf	??_NewStage+2,w
  6753  0665  00AA               	movwf	NewStage@new_stage
  6754  0666  0823               	movf	??_NewStage+1,w
  6755  0667  3D25               	addwfc	??_NewStage+3,w
  6756  0668  00AB               	movwf	NewStage@new_stage+1
  6757  0669                     l2248:	
  6758  0669  3001               	movlw	1
  6759  066A  07E0               	addwf	_stage_list_iter,f
  6760  066B  3000               	movlw	0
  6761  066C  3DE1               	addwfc	_stage_list_iter+1,f
  6762  066D                     l2250:	
  6763                           
  6764                           ;Pattern.c: 28:     _Bool init_states[NUM_LIGHTS] = { 0, 0, 0, 0 };
  6765  066D  3000               	movlw	0
  6766  066E  00A9               	movwf	NewStage@init_states+3
  6767  066F  3000               	movlw	0
  6768  0670  00A8               	movwf	NewStage@init_states+2
  6769  0671  3000               	movlw	0
  6770  0672  00A7               	movwf	NewStage@init_states+1
  6771  0673  3000               	movlw	0
  6772  0674  00A6               	movwf	NewStage@init_states
  6773  0675                     l2252:	
  6774                           
  6775                           ;Pattern.c: 29:     AssignLightStates( new_stage, init_states );
  6776  0675  082B               	movf	NewStage@new_stage+1,w
  6777  0676  00F3               	movwf	AssignLightStates@stage+1
  6778  0677  082A               	movf	NewStage@new_stage,w
  6779  0678  00F2               	movwf	AssignLightStates@stage
  6780  0679  3026               	movlw	(low (NewStage@init_states| 0))& (0+255)
  6781  067A  00A2               	movwf	??_NewStage
  6782  067B  0822               	movf	??_NewStage,w
  6783  067C  00F4               	movwf	AssignLightStates@states
  6784  067D  3187  2793  3186   	fcall	_AssignLightStates
  6785  0680                     l2254:	
  6786                           
  6787                           ;Pattern.c: 30:     new_stage->time_ms = 80UL;
  6788  0680  0020               	movlb	0	; select bank0
  6789  0681  082A               	movf	NewStage@new_stage,w
  6790  0682  0086               	movwf	6
  6791  0683  082B               	movf	NewStage@new_stage+1,w
  6792  0684  0087               	movwf	7
  6793  0685  3144               	addfsr 1,4
  6794  0686  3050               	movlw	80
  6795  0687  3FC0               	movwi [0]fsr1
  6796  0688  3000               	movlw	0
  6797  0689  3FC1               	movwi [1]fsr1
  6798  068A                     l2256:	
  6799                           
  6800                           ;Pattern.c: 31:     new_stage->next = ((void*)0);
  6801  068A  082A               	movf	NewStage@new_stage,w
  6802  068B  0086               	movwf	6
  6803  068C  082B               	movf	NewStage@new_stage+1,w
  6804  068D  0087               	movwf	7
  6805  068E  3146               	addfsr 1,6
  6806  068F  3000               	movlw	0
  6807  0690  3FC0               	movwi [0]fsr1
  6808  0691  3FC1               	movwi [1]fsr1
  6809  0692                     l2258:	
  6810                           
  6811                           ;Pattern.c: 33:     return new_stage;
  6812  0692  082B               	movf	NewStage@new_stage+1,w
  6813  0693  00F8               	movwf	?_NewStage+1
  6814  0694  082A               	movf	NewStage@new_stage,w
  6815  0695  00F7               	movwf	?_NewStage
  6816  0696                     l441:	
  6817  0696  0008               	return
  6818  0697                     __end_of_NewStage:	
  6819                           
  6820                           	psect	text22
  6821  0793                     __ptext22:	
  6822 ;; *************** function _AssignLightStates *****************
  6823 ;; Defined at:
  6824 ;;		line 14 in file "Pattern.c"
  6825 ;; Parameters:    Size  Location     Type
  6826 ;;  stage           2    2[COMMON] PTR struct Stage
  6827 ;;		 -> stage_stash(768), NULL(0), 
  6828 ;;  states          1    4[COMMON] PTR const _Bool 
  6829 ;;		 -> InitLowerPattern@lower_right_states(4), InitLowerPattern@lower_left_states(4), InitUpperLowerPattern@lower_state
      +s(4), InitUpperLowerPattern@upper_states(4), 
  6830 ;;		 -> InitXStrobePattern@diag_2_3_states(4), InitXStrobePattern@diag_1_4_states(4), InitWigwagPattern@right_side_state
      +s(4), InitWigwagPattern@left_side_states(4), 
  6831 ;;		 -> NewStage@init_states(4), 
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;  i               2    0[BANK0 ] unsigned short 
  6834 ;; Return value:  Size  Location     Type
  6835 ;;                  1    wreg      void 
  6836 ;; Registers used:
  6837 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6838 ;; Tracked objects:
  6839 ;;		On entry : 0/0
  6840 ;;		On exit  : 0/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6843 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6844 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6845 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6846 ;;      Totals:         7       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6847 ;;Total ram usage:        9 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; Hardware stack levels required when called:    4
  6850 ;; This function calls:
  6851 ;;		Nothing
  6852 ;; This function is called by:
  6853 ;;		_NewStage
  6854 ;;		_ConstructStage
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           
  6859                           ;psect for function _AssignLightStates
  6860  0793                     _AssignLightStates:	
  6861  0793                     l2228:	
  6862                           ;incstack = 0
  6863                           ; Regs used in _AssignLightStates: [wreg+fsr1l+fsr1h+status,2+status,0]
  6864                           
  6865                           
  6866                           ;Pattern.c: 14: void AssignLightStates( struct Stage* stage, const _Bool states[ NUM_LIG
      +                          HTS ] );Pattern.c: 15: {;Pattern.c: 16:     for( uint i = 0; i < NUM_LIGHTS; i++ )
  6867  0793  0020               	movlb	0	; select bank0
  6868  0794  01A0               	clrf	AssignLightStates@i
  6869  0795  01A1               	clrf	AssignLightStates@i+1
  6870  0796                     l2234:	
  6871                           
  6872                           ;Pattern.c: 17:     {;Pattern.c: 18:         stage->light_states[i] = states[i];
  6873  0796  0820               	movf	AssignLightStates@i,w
  6874  0797  0774               	addwf	AssignLightStates@states,w
  6875  0798  00F5               	movwf	??_AssignLightStates
  6876  0799  0875               	movf	??_AssignLightStates,w
  6877  079A  0086               	movwf	6
  6878  079B  0187               	clrf	7
  6879  079C  0801               	movf	1,w
  6880  079D  00F6               	movwf	??_AssignLightStates+1
  6881  079E  0820               	movf	AssignLightStates@i,w
  6882  079F  0772               	addwf	AssignLightStates@stage,w
  6883  07A0  00F7               	movwf	??_AssignLightStates+2
  6884  07A1  0821               	movf	AssignLightStates@i+1,w
  6885  07A2  3D73               	addwfc	AssignLightStates@stage+1,w
  6886  07A3  00F8               	movwf	??_AssignLightStates+3
  6887  07A4  0877               	movf	??_AssignLightStates+2,w
  6888  07A5  0086               	movwf	6
  6889  07A6  0878               	movf	??_AssignLightStates+3,w
  6890  07A7  0087               	movwf	7
  6891  07A8  0876               	movf	??_AssignLightStates+1,w
  6892  07A9  0081               	movwf	1
  6893  07AA                     l2236:	
  6894                           
  6895                           ;Pattern.c: 19:     }
  6896  07AA  3001               	movlw	1
  6897  07AB  07A0               	addwf	AssignLightStates@i,f
  6898  07AC  3000               	movlw	0
  6899  07AD  3DA1               	addwfc	AssignLightStates@i+1,f
  6900  07AE                     l2238:	
  6901  07AE  3000               	movlw	0
  6902  07AF  0221               	subwf	AssignLightStates@i+1,w
  6903  07B0  3004               	movlw	4
  6904  07B1  1903               	skipnz
  6905  07B2  0220               	subwf	AssignLightStates@i,w
  6906  07B3  1C03               	skipc
  6907  07B4  2FB6               	goto	u911
  6908  07B5  2FB7               	goto	u910
  6909  07B6                     u911:	
  6910  07B6  2F96               	goto	l2234
  6911  07B7                     u910:	
  6912  07B7                     l437:	
  6913  07B7  0008               	return
  6914  07B8                     __end_of_AssignLightStates:	
  6915                           
  6916                           	psect	text23
  6917  05F0                     __ptext23:	
  6918 ;; *************** function _AppendStage *****************
  6919 ;; Defined at:
  6920 ;;		line 66 in file "Pattern.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;  head            2   21[BANK0 ] PTR struct Stage
  6923 ;;		 -> stage_stash(768), NULL(0), 
  6924 ;;  new_stage       2   23[BANK0 ] PTR struct Stage
  6925 ;;		 -> stage_stash(768), NULL(0), 
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;  last_stage      2   27[BANK0 ] PTR struct Stage
  6928 ;;		 -> stage_stash(768), NULL(0), 
  6929 ;; Return value:  Size  Location     Type
  6930 ;;                  1    wreg      void 
  6931 ;; Registers used:
  6932 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6933 ;; Tracked objects:
  6934 ;;		On entry : 0/0
  6935 ;;		On exit  : 0/0
  6936 ;;		Unchanged: 0/0
  6937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6938 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6941 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;Total ram usage:        8 bytes
  6943 ;; Hardware stack levels used:    1
  6944 ;; Hardware stack levels required when called:    4
  6945 ;; This function calls:
  6946 ;;		Nothing
  6947 ;; This function is called by:
  6948 ;;		_InitWigwagPattern
  6949 ;;		_InitXStrobePattern
  6950 ;;		_InitUpperLowerPattern
  6951 ;;		_InitLowerPattern
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           
  6956                           ;psect for function _AppendStage
  6957  05F0                     _AppendStage:	
  6958  05F0                     l1768:	
  6959                           ;incstack = 0
  6960                           ; Regs used in _AppendStage: [wreg+fsr1l+fsr1h+status,2+status,0]
  6961                           
  6962                           
  6963                           ;Pattern.c: 66: void AppendStage( struct Stage* head, struct Stage* new_stage );Pattern.
      +                          c: 67: {;Pattern.c: 68:     if ( head->next == ((void*)0) )
  6964  05F0  0020               	movlb	0	; select bank0
  6965  05F1  0835               	movf	AppendStage@head,w
  6966  05F2  0086               	movwf	6
  6967  05F3  0836               	movf	AppendStage@head+1,w
  6968  05F4  0087               	movwf	7
  6969  05F5  3146               	addfsr 1,6
  6970  05F6  0016               	moviw fsr1++
  6971  05F7  0401               	iorwf	1,w
  6972  05F8  1D03               	btfss	3,2
  6973  05F9  2DFB               	goto	u491
  6974  05FA  2DFC               	goto	u490
  6975  05FB                     u491:	
  6976  05FB  2E0F               	goto	l1772
  6977  05FC                     u490:	
  6978  05FC                     l1770:	
  6979                           
  6980                           ;Pattern.c: 69:     {;Pattern.c: 70:         head->next = new_stage;
  6981  05FC  0835               	movf	AppendStage@head,w
  6982  05FD  0086               	movwf	6
  6983  05FE  0836               	movf	AppendStage@head+1,w
  6984  05FF  0087               	movwf	7
  6985  0600  3146               	addfsr 1,6
  6986  0601  0837               	movf	AppendStage@new_stage,w
  6987  0602  3FC0               	movwi [0]fsr1
  6988  0603  0838               	movf	AppendStage@new_stage+1,w
  6989  0604  3FC1               	movwi [1]fsr1
  6990                           
  6991                           ;Pattern.c: 71:         new_stage->next = head;
  6992  0605  0837               	movf	AppendStage@new_stage,w
  6993  0606  0086               	movwf	6
  6994  0607  0838               	movf	AppendStage@new_stage+1,w
  6995  0608  0087               	movwf	7
  6996  0609  3146               	addfsr 1,6
  6997  060A  0835               	movf	AppendStage@head,w
  6998  060B  3FC0               	movwi [0]fsr1
  6999  060C  0836               	movf	AppendStage@head+1,w
  7000  060D  3FC1               	movwi [1]fsr1
  7001                           
  7002                           ;Pattern.c: 72:     }
  7003  060E  2E47               	goto	l463
  7004  060F                     l1772:	
  7005                           
  7006                           ;Pattern.c: 74:     {;Pattern.c: 75:         struct Stage* last_stage = head->next;
  7007  060F  0835               	movf	AppendStage@head,w
  7008  0610  0086               	movwf	6
  7009  0611  0836               	movf	AppendStage@head+1,w
  7010  0612  0087               	movwf	7
  7011  0613  3146               	addfsr 1,6
  7012  0614  3F40               	moviw [0]fsr1
  7013  0615  00BB               	movwf	AppendStage@last_stage
  7014  0616  3F41               	moviw [1]fsr1
  7015  0617  00BC               	movwf	AppendStage@last_stage+1
  7016                           
  7017                           ;Pattern.c: 76:         while( last_stage->next != head )
  7018  0618  2E22               	goto	l1776
  7019  0619                     l1774:	
  7020                           
  7021                           ;Pattern.c: 77:             last_stage = last_stage->next;
  7022  0619  083B               	movf	AppendStage@last_stage,w
  7023  061A  0086               	movwf	6
  7024  061B  083C               	movf	AppendStage@last_stage+1,w
  7025  061C  0087               	movwf	7
  7026  061D  3146               	addfsr 1,6
  7027  061E  3F40               	moviw [0]fsr1
  7028  061F  00BB               	movwf	AppendStage@last_stage
  7029  0620  3F41               	moviw [1]fsr1
  7030  0621  00BC               	movwf	AppendStage@last_stage+1
  7031  0622                     l1776:	
  7032                           
  7033                           ;Pattern.c: 76:         while( last_stage->next != head )
  7034  0622  083B               	movf	AppendStage@last_stage,w
  7035  0623  0086               	movwf	6
  7036  0624  083C               	movf	AppendStage@last_stage+1,w
  7037  0625  0087               	movwf	7
  7038  0626  3146               	addfsr 1,6
  7039  0627  3F40               	moviw [0]fsr1
  7040  0628  00B9               	movwf	??_AppendStage
  7041  0629  3F41               	moviw [1]fsr1
  7042  062A  00BA               	movwf	??_AppendStage+1
  7043  062B  0836               	movf	AppendStage@head+1,w
  7044  062C  063A               	xorwf	??_AppendStage+1,w
  7045  062D  1D03               	skipz
  7046  062E  2E31               	goto	u505
  7047  062F  0835               	movf	AppendStage@head,w
  7048  0630  0639               	xorwf	??_AppendStage,w
  7049  0631                     u505:	
  7050  0631  1D03               	skipz
  7051  0632  2E34               	goto	u501
  7052  0633  2E35               	goto	u500
  7053  0634                     u501:	
  7054  0634  2E19               	goto	l1774
  7055  0635                     u500:	
  7056  0635                     l1778:	
  7057                           
  7058                           ;Pattern.c: 80:         last_stage->next = new_stage;
  7059  0635  083B               	movf	AppendStage@last_stage,w
  7060  0636  0086               	movwf	6
  7061  0637  083C               	movf	AppendStage@last_stage+1,w
  7062  0638  0087               	movwf	7
  7063  0639  3146               	addfsr 1,6
  7064  063A  0837               	movf	AppendStage@new_stage,w
  7065  063B  3FC0               	movwi [0]fsr1
  7066  063C  0838               	movf	AppendStage@new_stage+1,w
  7067  063D  3FC1               	movwi [1]fsr1
  7068                           
  7069                           ;Pattern.c: 81:         new_stage->next = head;
  7070  063E  0837               	movf	AppendStage@new_stage,w
  7071  063F  0086               	movwf	6
  7072  0640  0838               	movf	AppendStage@new_stage+1,w
  7073  0641  0087               	movwf	7
  7074  0642  3146               	addfsr 1,6
  7075  0643  0835               	movf	AppendStage@head,w
  7076  0644  3FC0               	movwi [0]fsr1
  7077  0645  0836               	movf	AppendStage@head+1,w
  7078  0646  3FC1               	movwi [1]fsr1
  7079  0647                     l463:	
  7080  0647  0008               	return
  7081  0648                     __end_of_AppendStage:	
  7082                           
  7083                           	psect	text24
  7084  073B                     __ptext24:	
  7085 ;; *************** function _PatternCycleInputChanged *****************
  7086 ;; Defined at:
  7087 ;;		line 21 in file "TurnSignal.c"
  7088 ;; Parameters:    Size  Location     Type
  7089 ;;		None
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;  delay_count     2    4[COMMON] unsigned short 
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  1    wreg      _Bool 
  7094 ;; Registers used:
  7095 ;;		wreg, status,2, status,0
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7103 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7104 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7105 ;;Total ram usage:        4 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; Hardware stack levels required when called:    4
  7108 ;; This function calls:
  7109 ;;		Nothing
  7110 ;; This function is called by:
  7111 ;;		_main
  7112 ;; This function uses a non-reentrant model
  7113 ;;
  7114                           
  7115                           
  7116                           ;psect for function _PatternCycleInputChanged
  7117  073B                     _PatternCycleInputChanged:	
  7118  073B                     l2140:	
  7119                           ;incstack = 0
  7120                           ; Regs used in _PatternCycleInputChanged: [wreg+status,2+status,0]
  7121                           
  7122                           
  7123                           ;TurnSignal.c: 23:     if ( cur_pc_input_state != last_pc_input_state )
  7124  073B  087B               	movf	_cur_pc_input_state,w
  7125  073C  067A               	xorwf	_last_pc_input_state,w
  7126  073D  1903               	skipnz
  7127  073E  2F40               	goto	u811
  7128  073F  2F41               	goto	u810
  7129  0740                     u811:	
  7130  0740  2F54               	goto	l2148
  7131  0741                     u810:	
  7132  0741                     l2142:	
  7133                           
  7134                           ;TurnSignal.c: 24:     {;TurnSignal.c: 25:         uint delay_count = 0;
  7135  0741  01F4               	clrf	PatternCycleInputChanged@delay_count
  7136  0742  01F5               	clrf	PatternCycleInputChanged@delay_count+1
  7137                           
  7138                           ;TurnSignal.c: 27:         while ( delay_count++ < 3 )
  7139  0743  2F56               	goto	l2152
  7140  0744                     l2144:	
  7141                           
  7142                           ;TurnSignal.c: 28:         {;TurnSignal.c: 29:             _delay((unsigned long)((10)*(
      +                          1000000/4000.0)));
  7143  0744  3004               	movlw	4
  7144  0745  00F2               	movwf	??_PatternCycleInputChanged
  7145  0746  303E               	movlw	62
  7146  0747                     u1177:	
  7147  0747  0B89               	decfsz	9,f
  7148  0748  2F47               	goto	u1177
  7149  0749  0BF2               	decfsz	??_PatternCycleInputChanged,f
  7150  074A  2F47               	goto	u1177
  7151  074B                     l2146:	
  7152                           
  7153                           ;TurnSignal.c: 31:             if( PORTCbits.RC5 != cur_pc_input_state )
  7154  074B  0020               	movlb	0	; select bank0
  7155  074C  0E0E               	swapf	14,w	;volatile
  7156  074D  0C89               	rrf	9,f
  7157  074E  3901               	andlw	1
  7158  074F  067B               	xorwf	_cur_pc_input_state,w
  7159  0750  1903               	skipnz
  7160  0751  2F53               	goto	u821
  7161  0752  2F54               	goto	u820
  7162  0753                     u821:	
  7163  0753  2F56               	goto	l2152
  7164  0754                     u820:	
  7165  0754                     l2148:	
  7166                           
  7167                           ;TurnSignal.c: 32:             {;TurnSignal.c: 33:                 return 0;
  7168  0754  3000               	movlw	0
  7169  0755  2F67               	goto	l416
  7170  0756                     l2152:	
  7171                           
  7172                           ;TurnSignal.c: 27:         while ( delay_count++ < 3 )
  7173  0756  0875               	movf	PatternCycleInputChanged@delay_count+1,w
  7174  0757  00F3               	movwf	??_PatternCycleInputChanged+1
  7175  0758  0874               	movf	PatternCycleInputChanged@delay_count,w
  7176  0759  00F2               	movwf	??_PatternCycleInputChanged
  7177  075A  0AF4               	incf	PatternCycleInputChanged@delay_count,f
  7178  075B  1903               	skipnz
  7179  075C  0AF5               	incf	PatternCycleInputChanged@delay_count+1,f
  7180  075D  3000               	movlw	0
  7181  075E  0273               	subwf	??_PatternCycleInputChanged+1,w
  7182  075F  3003               	movlw	3
  7183  0760  1903               	skipnz
  7184  0761  0272               	subwf	??_PatternCycleInputChanged,w
  7185  0762  1C03               	skipc
  7186  0763  2F65               	goto	u831
  7187  0764  2F66               	goto	u830
  7188  0765                     u831:	
  7189  0765  2F44               	goto	l2144
  7190  0766                     u830:	
  7191  0766                     l2158:	
  7192                           
  7193                           ;TurnSignal.c: 40:     return 1;
  7194  0766  3001               	movlw	1
  7195  0767                     l416:	
  7196  0767  0008               	return
  7197  0768                     __end_of_PatternCycleInputChanged:	
  7198                           
  7199                           	psect	text25
  7200  050B                     __ptext25:	
  7201 ;; *************** function _FlashPattern *****************
  7202 ;; Defined at:
  7203 ;;		line 11 in file "PatternFlasher.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;  pattern         2    6[COMMON] PTR struct Pattern
  7206 ;;		 -> pattern_stash(18), NULL(0), 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;  current_time    2    8[COMMON] unsigned short 
  7209 ;; Return value:  Size  Location     Type
  7210 ;;                  1    wreg      void 
  7211 ;; Registers used:
  7212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7218 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;Total ram usage:        8 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; Hardware stack levels required when called:    5
  7225 ;; This function calls:
  7226 ;;		_SetLight
  7227 ;; This function is called by:
  7228 ;;		_main
  7229 ;; This function uses a non-reentrant model
  7230 ;;
  7231                           
  7232                           
  7233                           ;psect for function _FlashPattern
  7234  050B                     _FlashPattern:	
  7235  050B                     l2516:	
  7236                           ;incstack = 0
  7237                           ; Regs used in _FlashPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7238                           
  7239                           
  7240                           ;PatternFlasher.c: 11: void FlashPattern( struct Pattern* pattern );PatternFlasher.c: 12
      +                          : {;PatternFlasher.c: 13:     uint current_time = cur_ms;
  7241  050B  0020               	movlb	0	; select bank0
  7242  050C  0867               	movf	_cur_ms+1,w	;volatile
  7243  050D  00F9               	movwf	FlashPattern@current_time+1
  7244  050E  0866               	movf	_cur_ms,w	;volatile
  7245  050F  00F8               	movwf	FlashPattern@current_time
  7246  0510                     l2518:	
  7247                           
  7248                           ;PatternFlasher.c: 15:     if ( current_time - start_time > pattern_selector.current_sta
      +                          ge->time_ms )
  7249  0510  085C               	movf	_start_time,w
  7250  0511  0278               	subwf	FlashPattern@current_time,w
  7251  0512  00A0               	movwf	??_FlashPattern
  7252  0513  085D               	movf	_start_time+1,w
  7253  0514  3B79               	subwfb	FlashPattern@current_time+1,w
  7254  0515  00A1               	movwf	??_FlashPattern+1
  7255  0516  0021               	movlb	1	; select bank1
  7256  0517  0846               	movf	(_pattern_selector^(0+128)+13),w
  7257  0518  0086               	movwf	6
  7258  0519  0847               	movf	((_pattern_selector+1)^(0+128)+13),w
  7259  051A  0087               	movwf	7
  7260  051B  3144               	addfsr 1,4
  7261  051C  3F40               	moviw [0]fsr1
  7262  051D  0020               	movlb	0	; select bank0
  7263  051E  00A2               	movwf	??_FlashPattern+2
  7264  051F  3F41               	moviw [1]fsr1
  7265  0520  00A3               	movwf	??_FlashPattern+3
  7266  0521  0821               	movf	??_FlashPattern+1,w
  7267  0522  0223               	subwf	??_FlashPattern+3,w
  7268  0523  1D03               	skipz
  7269  0524  2D27               	goto	u1155
  7270  0525  0820               	movf	??_FlashPattern,w
  7271  0526  0222               	subwf	??_FlashPattern+2,w
  7272  0527                     u1155:	
  7273  0527  1803               	skipnc
  7274  0528  2D2A               	goto	u1151
  7275  0529  2D2B               	goto	u1150
  7276  052A                     u1151:	
  7277  052A  2D3C               	goto	l2526
  7278  052B                     u1150:	
  7279  052B                     l2520:	
  7280                           
  7281                           ;PatternFlasher.c: 16:     {;PatternFlasher.c: 17:         pattern_selector.current_stag
      +                          e = pattern_selector.current_stage->next;
  7282  052B  0021               	movlb	1	; select bank1
  7283  052C  0846               	movf	(_pattern_selector^(0+128)+13),w
  7284  052D  0086               	movwf	6
  7285  052E  0847               	movf	((_pattern_selector+1)^(0+128)+13),w
  7286  052F  0087               	movwf	7
  7287  0530  3146               	addfsr 1,6
  7288  0531  3F40               	moviw [0]fsr1
  7289  0532  00C6               	movwf	(_pattern_selector^(0+128)+13)
  7290  0533  3F41               	moviw [1]fsr1
  7291  0534  00C7               	movwf	((_pattern_selector+1)^(0+128)+13)
  7292  0535                     l2522:	
  7293                           
  7294                           ;PatternFlasher.c: 18:         start_time = current_time;
  7295  0535  0879               	movf	FlashPattern@current_time+1,w
  7296  0536  0020               	movlb	0	; select bank0
  7297  0537  00DD               	movwf	_start_time+1
  7298  0538  0878               	movf	FlashPattern@current_time,w
  7299  0539  00DC               	movwf	_start_time
  7300  053A                     l2524:	
  7301                           
  7302                           ;PatternFlasher.c: 19:         update_stage = 1;
  7303  053A  01EA               	clrf	_update_stage
  7304  053B  0AEA               	incf	_update_stage,f
  7305  053C                     l2526:	
  7306                           
  7307                           ;PatternFlasher.c: 23:     if ( update_stage == 1 )
  7308  053C  036A               	decf	_update_stage,w
  7309  053D  1D03               	btfss	3,2
  7310  053E  2D40               	goto	u1161
  7311  053F  2D41               	goto	u1160
  7312  0540                     u1161:	
  7313  0540  2D7E               	goto	l544
  7314  0541                     u1160:	
  7315  0541                     l2528:	
  7316                           
  7317                           ;PatternFlasher.c: 24:     {;PatternFlasher.c: 25:         SetLight( L1, pattern_selecto
      +                          r.current_stage->light_states[L1] );
  7318  0541  0021               	movlb	1	; select bank1
  7319  0542  0846               	movf	(_pattern_selector^(0+128)+13),w
  7320  0543  0086               	movwf	6
  7321  0544  0847               	movf	((_pattern_selector+1)^(0+128)+13),w
  7322  0545  0087               	movwf	7
  7323  0546  0801               	movf	1,w
  7324  0547  0020               	movlb	0	; select bank0
  7325  0548  00A0               	movwf	??_FlashPattern
  7326  0549  0820               	movf	??_FlashPattern,w
  7327  054A  00F2               	movwf	SetLight@state
  7328  054B  3000               	movlw	0
  7329  054C  3185  257F  3185   	fcall	_SetLight
  7330                           
  7331                           ;PatternFlasher.c: 26:         SetLight( L2, pattern_selector.current_stage->light_state
      +                          s[L2] );
  7332  054F  0021               	movlb	1	; select bank1
  7333  0550  0846               	movf	(_pattern_selector^(0+128)+13),w
  7334  0551  0086               	movwf	6
  7335  0552  0847               	movf	((_pattern_selector+1)^(0+128)+13),w
  7336  0553  0087               	movwf	7
  7337  0554  3141               	addfsr 1,1
  7338  0555  0801               	movf	1,w
  7339  0556  0020               	movlb	0	; select bank0
  7340  0557  00A0               	movwf	??_FlashPattern
  7341  0558  0820               	movf	??_FlashPattern,w
  7342  0559  00F2               	movwf	SetLight@state
  7343  055A  3001               	movlw	1
  7344  055B  3185  257F  3185   	fcall	_SetLight
  7345                           
  7346                           ;PatternFlasher.c: 27:         SetLight( L3, pattern_selector.current_stage->light_state
      +                          s[L3] );
  7347  055E  0021               	movlb	1	; select bank1
  7348  055F  0846               	movf	(_pattern_selector^(0+128)+13),w
  7349  0560  0086               	movwf	6
  7350  0561  0847               	movf	((_pattern_selector+1)^(0+128)+13),w
  7351  0562  0087               	movwf	7
  7352  0563  3142               	addfsr 1,2
  7353  0564  0801               	movf	1,w
  7354  0565  0020               	movlb	0	; select bank0
  7355  0566  00A0               	movwf	??_FlashPattern
  7356  0567  0820               	movf	??_FlashPattern,w
  7357  0568  00F2               	movwf	SetLight@state
  7358  0569  3002               	movlw	2
  7359  056A  3185  257F  3185   	fcall	_SetLight
  7360                           
  7361                           ;PatternFlasher.c: 28:         SetLight( L4, pattern_selector.current_stage->light_state
      +                          s[L4] );
  7362  056D  0021               	movlb	1	; select bank1
  7363  056E  0846               	movf	(_pattern_selector^(0+128)+13),w
  7364  056F  0086               	movwf	6
  7365  0570  0847               	movf	((_pattern_selector+1)^(0+128)+13),w
  7366  0571  0087               	movwf	7
  7367  0572  3143               	addfsr 1,3
  7368  0573  0801               	movf	1,w
  7369  0574  0020               	movlb	0	; select bank0
  7370  0575  00A0               	movwf	??_FlashPattern
  7371  0576  0820               	movf	??_FlashPattern,w
  7372  0577  00F2               	movwf	SetLight@state
  7373  0578  3003               	movlw	3
  7374  0579  3185  257F  3185   	fcall	_SetLight
  7375  057C                     l2530:	
  7376                           
  7377                           ;PatternFlasher.c: 29:         update_stage = 0;
  7378  057C  0020               	movlb	0	; select bank0
  7379  057D  01EA               	clrf	_update_stage
  7380  057E                     l544:	
  7381  057E  0008               	return
  7382  057F                     __end_of_FlashPattern:	
  7383                           
  7384                           	psect	text26
  7385  057F                     __ptext26:	
  7386 ;; *************** function _SetLight *****************
  7387 ;; Defined at:
  7388 ;;		line 12 in file "Lights.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;  light           1    wreg     const enum E6336
  7391 ;;  state           1    2[COMMON] const _Bool 
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;  light           1    5[COMMON] const enum E6336
  7394 ;; Return value:  Size  Location     Type
  7395 ;;                  1    wreg      void 
  7396 ;; Registers used:
  7397 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7398 ;; Tracked objects:
  7399 ;;		On entry : 0/0
  7400 ;;		On exit  : 0/0
  7401 ;;		Unchanged: 0/0
  7402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7403 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;Total ram usage:        4 bytes
  7408 ;; Hardware stack levels used:    1
  7409 ;; Hardware stack levels required when called:    4
  7410 ;; This function calls:
  7411 ;;		Nothing
  7412 ;; This function is called by:
  7413 ;;		_SetOutputs
  7414 ;;		_FlashPattern
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           
  7419                           ;psect for function _SetLight
  7420  057F                     _SetLight:	
  7421                           
  7422                           ;incstack = 0
  7423                           ; Regs used in _SetLight: [wreg-fsr0h+status,2+status,0]
  7424                           ;SetLight@light stored from wreg
  7425  057F  00F5               	movwf	SetLight@light
  7426  0580                     l2450:	
  7427                           
  7428                           ;Lights.c: 12: void SetLight( const enum Light light, const _Bool state );Lights.c: 13: 
      +                          {;Lights.c: 15:     switch ( light )
  7429  0580  2DD9               	goto	l2472
  7430  0581                     l2452:	
  7431                           
  7432                           ;Lights.c: 18:             if ( PORTCbits.RC1 != state )
  7433  0581  0020               	movlb	0	; select bank0
  7434  0582  0C0E               	rrf	14,w	;volatile
  7435  0583  3901               	andlw	1
  7436  0584  0672               	xorwf	SetLight@state,w
  7437  0585  1903               	skipnz
  7438  0586  2D88               	goto	u1021
  7439  0587  2D89               	goto	u1020
  7440  0588                     u1021:	
  7441  0588  2DEF               	goto	l379
  7442  0589                     u1020:	
  7443  0589                     l2454:	
  7444  0589  1003               	clrc
  7445  058A  0022               	movlb	2	; select bank2
  7446  058B  1C8E               	btfss	14,1	;volatile
  7447  058C  1403               	setc
  7448  058D  1803               	btfsc	3,0
  7449  058E  2D90               	goto	u1031
  7450  058F  2D93               	goto	u1030
  7451  0590                     u1031:	
  7452  0590  0022               	movlb	2	; select bank2
  7453  0591  148E               	bsf	14,1	;volatile
  7454  0592  2D95               	goto	u1044
  7455  0593                     u1030:	
  7456  0593  0022               	movlb	2	; select bank2
  7457  0594  108E               	bcf	14,1	;volatile
  7458  0595                     u1044:	
  7459  0595  2DEF               	goto	l379
  7460  0596                     l2456:	
  7461                           
  7462                           ;Lights.c: 22:             if ( PORTCbits.RC2 != state )
  7463  0596  0020               	movlb	0	; select bank0
  7464  0597  0C0E               	rrf	14,w	;volatile
  7465  0598  0C89               	rrf	9,f
  7466  0599  3901               	andlw	1
  7467  059A  0672               	xorwf	SetLight@state,w
  7468  059B  1903               	skipnz
  7469  059C  2D9E               	goto	u1051
  7470  059D  2D9F               	goto	u1050
  7471  059E                     u1051:	
  7472  059E  2DEF               	goto	l379
  7473  059F                     u1050:	
  7474  059F                     l2458:	
  7475  059F  1003               	clrc
  7476  05A0  0022               	movlb	2	; select bank2
  7477  05A1  1D0E               	btfss	14,2	;volatile
  7478  05A2  1403               	setc
  7479  05A3  1803               	btfsc	3,0
  7480  05A4  2DA6               	goto	u1061
  7481  05A5  2DA9               	goto	u1060
  7482  05A6                     u1061:	
  7483  05A6  0022               	movlb	2	; select bank2
  7484  05A7  150E               	bsf	14,2	;volatile
  7485  05A8  2DAB               	goto	u1074
  7486  05A9                     u1060:	
  7487  05A9  0022               	movlb	2	; select bank2
  7488  05AA  110E               	bcf	14,2	;volatile
  7489  05AB                     u1074:	
  7490  05AB  2DEF               	goto	l379
  7491  05AC                     l2460:	
  7492                           
  7493                           ;Lights.c: 26:             if ( PORTCbits.RC3 != state )
  7494  05AC  0020               	movlb	0	; select bank0
  7495  05AD  0C0E               	rrf	14,w	;volatile
  7496  05AE  00F3               	movwf	??_SetLight
  7497  05AF  0CF3               	rrf	??_SetLight,f
  7498  05B0  0C73               	rrf	??_SetLight,w
  7499  05B1  3901               	andlw	1
  7500  05B2  0672               	xorwf	SetLight@state,w
  7501  05B3  1903               	skipnz
  7502  05B4  2DB6               	goto	u1081
  7503  05B5  2DB7               	goto	u1080
  7504  05B6                     u1081:	
  7505  05B6  2DEF               	goto	l379
  7506  05B7                     u1080:	
  7507  05B7                     l2462:	
  7508  05B7  1003               	clrc
  7509  05B8  0022               	movlb	2	; select bank2
  7510  05B9  1D8E               	btfss	14,3	;volatile
  7511  05BA  1403               	setc
  7512  05BB  1803               	btfsc	3,0
  7513  05BC  2DBE               	goto	u1091
  7514  05BD  2DC1               	goto	u1090
  7515  05BE                     u1091:	
  7516  05BE  0022               	movlb	2	; select bank2
  7517  05BF  158E               	bsf	14,3	;volatile
  7518  05C0  2DC3               	goto	u1104
  7519  05C1                     u1090:	
  7520  05C1  0022               	movlb	2	; select bank2
  7521  05C2  118E               	bcf	14,3	;volatile
  7522  05C3                     u1104:	
  7523  05C3  2DEF               	goto	l379
  7524  05C4                     l2464:	
  7525                           
  7526                           ;Lights.c: 31:             if ( PORTCbits.RC4 != state )
  7527  05C4  0020               	movlb	0	; select bank0
  7528  05C5  0E0E               	swapf	14,w	;volatile
  7529  05C6  3901               	andlw	1
  7530  05C7  0672               	xorwf	SetLight@state,w
  7531  05C8  1903               	skipnz
  7532  05C9  2DCB               	goto	u1111
  7533  05CA  2DCC               	goto	u1110
  7534  05CB                     u1111:	
  7535  05CB  2DEF               	goto	l379
  7536  05CC                     u1110:	
  7537  05CC                     l2466:	
  7538  05CC  1003               	clrc
  7539  05CD  0022               	movlb	2	; select bank2
  7540  05CE  1E0E               	btfss	14,4	;volatile
  7541  05CF  1403               	setc
  7542  05D0  1803               	btfsc	3,0
  7543  05D1  2DD3               	goto	u1121
  7544  05D2  2DD6               	goto	u1120
  7545  05D3                     u1121:	
  7546  05D3  0022               	movlb	2	; select bank2
  7547  05D4  160E               	bsf	14,4	;volatile
  7548  05D5  2DD8               	goto	u1134
  7549  05D6                     u1120:	
  7550  05D6  0022               	movlb	2	; select bank2
  7551  05D7  120E               	bcf	14,4	;volatile
  7552  05D8                     u1134:	
  7553  05D8  2DEF               	goto	l379
  7554  05D9                     l2472:	
  7555  05D9  0875               	movf	SetLight@light,w
  7556  05DA  00F3               	movwf	??_SetLight
  7557  05DB  01F4               	clrf	??_SetLight+1
  7558                           
  7559                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7560                           ; Switch size 1, requested type "simple"
  7561                           ; Number of cases is 1, Range of values is 0 to 0
  7562                           ; switch strategies available:
  7563                           ; Name         Instructions Cycles
  7564                           ; simple_byte            4     3 (average)
  7565                           ; direct_byte            8     6 (fixed)
  7566                           ; jumptable            260     6 (fixed)
  7567                           ;	Chosen strategy is simple_byte
  7568  05DC  0874               	movf	??_SetLight+1,w
  7569  05DD  3A00               	xorlw	0	; case 0
  7570  05DE  1903               	skipnz
  7571  05DF  2DE1               	goto	l2566
  7572  05E0  2DC4               	goto	l2464
  7573  05E1                     l2566:	
  7574                           
  7575                           ; Switch size 1, requested type "simple"
  7576                           ; Number of cases is 4, Range of values is 0 to 3
  7577                           ; switch strategies available:
  7578                           ; Name         Instructions Cycles
  7579                           ; simple_byte           13     7 (average)
  7580                           ; direct_byte           14     6 (fixed)
  7581                           ; jumptable            260     6 (fixed)
  7582                           ;	Chosen strategy is simple_byte
  7583  05E1  0873               	movf	??_SetLight,w
  7584  05E2  3A00               	xorlw	0	; case 0
  7585  05E3  1903               	skipnz
  7586  05E4  2D81               	goto	l2452
  7587  05E5  3A01               	xorlw	1	; case 1
  7588  05E6  1903               	skipnz
  7589  05E7  2D96               	goto	l2456
  7590  05E8  3A03               	xorlw	3	; case 2
  7591  05E9  1903               	skipnz
  7592  05EA  2DAC               	goto	l2460
  7593  05EB  3A01               	xorlw	1	; case 3
  7594  05EC  1903               	skipnz
  7595  05ED  2DC4               	goto	l2464
  7596  05EE  2DC4               	goto	l2464
  7597  05EF                     l379:	
  7598  05EF  0008               	return
  7599  05F0                     __end_of_SetLight:	
  7600                           
  7601                           	psect	intentry
  7602  0004                     __pintentry:	
  7603 ;; *************** function _INTERRUPT_InterruptManager *****************
  7604 ;; Defined at:
  7605 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;		None
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;		None
  7610 ;; Return value:  Size  Location     Type
  7611 ;;                  1    wreg      void 
  7612 ;; Registers used:
  7613 ;;		wreg, status,2, status,0, pclath, cstack
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;Total ram usage:        0 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; Hardware stack levels required when called:    3
  7626 ;; This function calls:
  7627 ;;		_PIN_MANAGER_IOC
  7628 ;;		_TMR1_ISR
  7629 ;; This function is called by:
  7630 ;;		Interrupt level 1
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634  0004                     _INTERRUPT_InterruptManager:	
  7635                           
  7636                           ;incstack = 0
  7637  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  7638                           
  7639                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  7640  0005  3180               	pagesel	$
  7641  0006                     i1l2178:	
  7642                           
  7643                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
  7644  0006  0021               	movlb	1	; select bank1
  7645  0007  1E10               	btfss	16,4	;volatile
  7646  0008  280A               	goto	u86_21
  7647  0009  280B               	goto	u86_20
  7648  000A                     u86_21:	
  7649  000A  2814               	goto	i1l168
  7650  000B                     u86_20:	
  7651  000B                     i1l2180:	
  7652  000B  0020               	movlb	0	; select bank0
  7653  000C  1E10               	btfss	16,4	;volatile
  7654  000D  280F               	goto	u87_21
  7655  000E  2810               	goto	u87_20
  7656  000F                     u87_21:	
  7657  000F  2814               	goto	i1l168
  7658  0010                     u87_20:	
  7659  0010                     i1l2182:	
  7660                           
  7661                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
  7662  0010  318F  272B  3180   	fcall	_PIN_MANAGER_IOC
  7663                           
  7664                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  7665  0013  2826               	goto	i1l174
  7666  0014                     i1l168:	
  7667                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  7668                           
  7669  0014  1F0B               	btfss	11,6	;volatile
  7670  0015  2817               	goto	u88_21
  7671  0016  2818               	goto	u88_20
  7672  0017                     u88_21:	
  7673  0017  2826               	goto	i1l174
  7674  0018                     u88_20:	
  7675  0018                     i1l2184:	
  7676                           
  7677                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  7678  0018  0021               	movlb	1	; select bank1
  7679  0019  1C11               	btfss	17,0	;volatile
  7680  001A  281C               	goto	u89_21
  7681  001B  281D               	goto	u89_20
  7682  001C                     u89_21:	
  7683  001C  2826               	goto	i1l173
  7684  001D                     u89_20:	
  7685  001D                     i1l2186:	
  7686  001D  0020               	movlb	0	; select bank0
  7687  001E  1C11               	btfss	17,0	;volatile
  7688  001F  2821               	goto	u90_21
  7689  0020  2822               	goto	u90_20
  7690  0021                     u90_21:	
  7691  0021  2826               	goto	i1l173
  7692  0022                     u90_20:	
  7693  0022                     i1l2188:	
  7694                           
  7695                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR1_ISR();
  7696  0022  318F  2799  3180   	fcall	_TMR1_ISR
  7697                           
  7698                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  7699  0025  2826               	goto	i1l174
  7700  0026                     i1l173:	
  7701                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
  7702                           
  7703  0026                     i1l174:	
  7704  0026  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  7705  0027  0009               	retfie
  7706  0028                     __end_of_INTERRUPT_InterruptManager:	
  7707                           
  7708                           	psect	text28
  7709  0F99                     __ptext28:	
  7710 ;; *************** function _TMR1_ISR *****************
  7711 ;; Defined at:
  7712 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  7713 ;; Parameters:    Size  Location     Type
  7714 ;;		None
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;		None
  7717 ;; Return value:  Size  Location     Type
  7718 ;;                  1    wreg      void 
  7719 ;; Registers used:
  7720 ;;		wreg, status,2, status,0, pclath, cstack
  7721 ;; Tracked objects:
  7722 ;;		On entry : 0/0
  7723 ;;		On exit  : 0/0
  7724 ;;		Unchanged: 0/0
  7725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7730 ;;Total ram usage:        0 bytes
  7731 ;; Hardware stack levels used:    1
  7732 ;; Hardware stack levels required when called:    1
  7733 ;; This function calls:
  7734 ;;		Absolute function
  7735 ;;		_TMR1_DefaultInterruptHandler
  7736 ;;		_TMR1_WriteTimer
  7737 ;; This function is called by:
  7738 ;;		_INTERRUPT_InterruptManager
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           
  7743                           ;psect for function _TMR1_ISR
  7744  0F99                     _TMR1_ISR:	
  7745  0F99                     i1l2120:	
  7746                           ;incstack = 0
  7747                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  7748                           
  7749                           
  7750                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
  7751  0F99  0020               	movlb	0	; select bank0
  7752  0F9A  1011               	bcf	17,0	;volatile
  7753  0F9B                     i1l2122:	
  7754                           
  7755                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
  7756  0F9B  086D               	movf	_timer1ReloadVal+1,w	;volatile
  7757  0F9C  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  7758  0F9D  086C               	movf	_timer1ReloadVal,w	;volatile
  7759  0F9E  00F0               	movwf	TMR1_WriteTimer@timerVal
  7760  0F9F  318F  2774  318F   	fcall	_TMR1_WriteTimer
  7761  0FA2                     i1l2124:	
  7762                           
  7763                           ;mcc_generated_files/tmr1.c: 165:     if(TMR1_InterruptHandler)
  7764  0FA2  0021               	movlb	1	; select bank1
  7765  0FA3  0868               	movf	_TMR1_InterruptHandler^(0+128),w
  7766  0FA4  0469               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
  7767  0FA5  1903               	btfsc	3,2
  7768  0FA6  2FA8               	goto	u80_21
  7769  0FA7  2FA9               	goto	u80_20
  7770  0FA8                     u80_21:	
  7771  0FA8  2FAE               	goto	i1l234
  7772  0FA9                     u80_20:	
  7773  0FA9                     i1l2126:	
  7774                           
  7775                           ;mcc_generated_files/tmr1.c: 166:     {;mcc_generated_files/tmr1.c: 167:         TMR1_In
      +                          terruptHandler();
  7776  0FA9  0869               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
  7777  0FAA  008A               	movwf	10
  7778  0FAB  0868               	movf	_TMR1_InterruptHandler^(0+128),w
  7779  0FAC  000A               	callw
  7780  0FAD  318F               	pagesel	$
  7781  0FAE                     i1l234:	
  7782  0FAE  0008               	return
  7783  0FAF                     __end_of_TMR1_ISR:	
  7784                           
  7785                           	psect	text29
  7786  0F74                     __ptext29:	
  7787 ;; *************** function _TMR1_WriteTimer *****************
  7788 ;; Defined at:
  7789 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  7790 ;; Parameters:    Size  Location     Type
  7791 ;;  timerVal        2    0[COMMON] unsigned short 
  7792 ;; Auto vars:     Size  Location     Type
  7793 ;;		None
  7794 ;; Return value:  Size  Location     Type
  7795 ;;                  1    wreg      void 
  7796 ;; Registers used:
  7797 ;;		wreg, status,2
  7798 ;; Tracked objects:
  7799 ;;		On entry : 0/0
  7800 ;;		On exit  : 0/0
  7801 ;;		Unchanged: 0/0
  7802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7803 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7806 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7807 ;;Total ram usage:        2 bytes
  7808 ;; Hardware stack levels used:    1
  7809 ;; This function calls:
  7810 ;;		Nothing
  7811 ;; This function is called by:
  7812 ;;		_TMR1_ISR
  7813 ;;		_TMR1_Reload
  7814 ;; This function uses a non-reentrant model
  7815 ;;
  7816                           
  7817                           
  7818                           ;psect for function _TMR1_WriteTimer
  7819  0F74                     _TMR1_WriteTimer:	
  7820  0F74                     i1l2074:	
  7821                           ;incstack = 0
  7822                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
  7823                           
  7824                           
  7825                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.T1SYNC == 1)
  7826  0F74  0020               	movlb	0	; select bank0
  7827  0F75  1D1B               	btfss	27,2	;volatile
  7828  0F76  2F78               	goto	u77_21
  7829  0F77  2F79               	goto	u77_20
  7830  0F78                     u77_21:	
  7831  0F78  2F80               	goto	i1l2084
  7832  0F79                     u77_20:	
  7833  0F79                     i1l2076:	
  7834                           
  7835                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  7836  0F79  101B               	bcf	27,0	;volatile
  7837  0F7A                     i1l2078:	
  7838                           
  7839                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
  7840  0F7A  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  7841  0F7B  009A               	movwf	26	;volatile
  7842  0F7C                     i1l2080:	
  7843                           
  7844                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
  7845  0F7C  0870               	movf	TMR1_WriteTimer@timerVal,w
  7846  0F7D  0099               	movwf	25	;volatile
  7847  0F7E                     i1l2082:	
  7848                           
  7849                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  7850  0F7E  141B               	bsf	27,0	;volatile
  7851                           
  7852                           ;mcc_generated_files/tmr1.c: 133:     }
  7853  0F7F  2F84               	goto	i1l221
  7854  0F80                     i1l2084:	
  7855                           
  7856                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
  7857  0F80  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  7858  0F81  009A               	movwf	26	;volatile
  7859  0F82                     i1l2086:	
  7860                           
  7861                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
  7862  0F82  0870               	movf	TMR1_WriteTimer@timerVal,w
  7863  0F83  0099               	movwf	25	;volatile
  7864  0F84                     i1l221:	
  7865  0F84  0008               	return
  7866  0F85                     __end_of_TMR1_WriteTimer:	
  7867                           
  7868                           	psect	text30
  7869  0F17                     __ptext30:	
  7870 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  7871 ;; Defined at:
  7872 ;;		line 176 in file "mcc_generated_files/tmr1.c"
  7873 ;; Parameters:    Size  Location     Type
  7874 ;;		None
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;		None
  7877 ;; Return value:  Size  Location     Type
  7878 ;;                  1    wreg      void 
  7879 ;; Registers used:
  7880 ;;		wreg
  7881 ;; Tracked objects:
  7882 ;;		On entry : 0/0
  7883 ;;		On exit  : 0/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;Total ram usage:        0 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; This function calls:
  7893 ;;		Nothing
  7894 ;; This function is called by:
  7895 ;;		_TMR1_Initialize
  7896 ;;		_TMR1_ISR
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           
  7901                           ;psect for function _TMR1_DefaultInterruptHandler
  7902  0F17                     _TMR1_DefaultInterruptHandler:	
  7903  0F17                     i1l2088:	
  7904                           ;incstack = 0
  7905                           ; Regs used in _TMR1_DefaultInterruptHandler: [wreg]
  7906                           
  7907                           
  7908                           ;mcc_generated_files/tmr1.c: 177:     cur_ms++;
  7909  0F17  3001               	movlw	1
  7910  0F18  0020               	movlb	0	; select bank0
  7911  0F19  07E6               	addwf	_cur_ms,f	;volatile
  7912  0F1A  3000               	movlw	0
  7913  0F1B  3DE7               	addwfc	_cur_ms+1,f	;volatile
  7914  0F1C                     i1l240:	
  7915  0F1C  0008               	return
  7916  0F1D                     __end_of_TMR1_DefaultInterruptHandler:	
  7917                           
  7918                           	psect	text31
  7919  0F2B                     __ptext31:	
  7920 ;; *************** function _PIN_MANAGER_IOC *****************
  7921 ;; Defined at:
  7922 ;;		line 122 in file "mcc_generated_files/pin_manager.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;		None
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;		None
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  1    wreg      void 
  7929 ;; Registers used:
  7930 ;;		wreg, status,2, status,0, pclath, cstack
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;Total ram usage:        0 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    2
  7943 ;; This function calls:
  7944 ;;		_IOCCF0_ISR
  7945 ;; This function is called by:
  7946 ;;		_INTERRUPT_InterruptManager
  7947 ;; This function uses a non-reentrant model
  7948 ;;
  7949                           
  7950                           
  7951                           ;psect for function _PIN_MANAGER_IOC
  7952  0F2B                     _PIN_MANAGER_IOC:	
  7953  0F2B                     i1l2116:	
  7954                           ;incstack = 0
  7955                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  7956                           
  7957                           
  7958                           ;mcc_generated_files/pin_manager.c: 125:     if(IOCCFbits.IOCCF0 == 1)
  7959  0F2B  0027               	movlb	7	; select bank7
  7960  0F2C  1C19               	btfss	25,0	;volatile
  7961  0F2D  2F2F               	goto	u79_21
  7962  0F2E  2F30               	goto	u79_20
  7963  0F2F                     u79_21:	
  7964  0F2F  2F33               	goto	i1l125
  7965  0F30                     u79_20:	
  7966  0F30                     i1l2118:	
  7967                           
  7968                           ;mcc_generated_files/pin_manager.c: 126:     {;mcc_generated_files/pin_manager.c: 127:  
      +                                 IOCCF0_ISR();
  7969  0F30  318F  2755  318F   	fcall	_IOCCF0_ISR
  7970  0F33                     i1l125:	
  7971  0F33  0008               	return
  7972  0F34                     __end_of_PIN_MANAGER_IOC:	
  7973                           
  7974                           	psect	text32
  7975  0F55                     __ptext32:	
  7976 ;; *************** function _IOCCF0_ISR *****************
  7977 ;; Defined at:
  7978 ;;		line 134 in file "mcc_generated_files/pin_manager.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;		None
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;		None
  7983 ;; Return value:  Size  Location     Type
  7984 ;;                  1    wreg      void 
  7985 ;; Registers used:
  7986 ;;		wreg, status,2, status,0, pclath, cstack
  7987 ;; Tracked objects:
  7988 ;;		On entry : 0/0
  7989 ;;		On exit  : 0/0
  7990 ;;		Unchanged: 0/0
  7991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7996 ;;Total ram usage:        0 bytes
  7997 ;; Hardware stack levels used:    1
  7998 ;; Hardware stack levels required when called:    1
  7999 ;; This function calls:
  8000 ;;		Absolute function
  8001 ;;		_IOCCF0_DefaultInterruptHandler
  8002 ;; This function is called by:
  8003 ;;		_PIN_MANAGER_IOC
  8004 ;; This function uses a non-reentrant model
  8005 ;;
  8006                           
  8007                           
  8008                           ;psect for function _IOCCF0_ISR
  8009  0F55                     _IOCCF0_ISR:	
  8010  0F55                     i1l2066:	
  8011                           ;incstack = 0
  8012                           ; Regs used in _IOCCF0_ISR: [wreg+status,2+status,0+pclath+cstack]
  8013                           
  8014                           
  8015                           ;mcc_generated_files/pin_manager.c: 139:     if(IOCCF0_InterruptHandler)
  8016  0F55  0020               	movlb	0	; select bank0
  8017  0F56  086E               	movf	_IOCCF0_InterruptHandler,w
  8018  0F57  046F               	iorwf	_IOCCF0_InterruptHandler+1,w
  8019  0F58  1903               	btfsc	3,2
  8020  0F59  2F5B               	goto	u76_21
  8021  0F5A  2F5C               	goto	u76_20
  8022  0F5B                     u76_21:	
  8023  0F5B  2F61               	goto	i1l2070
  8024  0F5C                     u76_20:	
  8025  0F5C                     i1l2068:	
  8026                           
  8027                           ;mcc_generated_files/pin_manager.c: 140:     {;mcc_generated_files/pin_manager.c: 141:  
      +                                 IOCCF0_InterruptHandler();
  8028  0F5C  086F               	movf	_IOCCF0_InterruptHandler+1,w
  8029  0F5D  008A               	movwf	10
  8030  0F5E  086E               	movf	_IOCCF0_InterruptHandler,w
  8031  0F5F  000A               	callw
  8032  0F60  318F               	pagesel	$
  8033  0F61                     i1l2070:	
  8034                           
  8035                           ;mcc_generated_files/pin_manager.c: 143:     IOCCFbits.IOCCF0 = 0;
  8036  0F61  0027               	movlb	7	; select bank7
  8037  0F62  1019               	bcf	25,0	;volatile
  8038  0F63                     i1l129:	
  8039  0F63  0008               	return
  8040  0F64                     __end_of_IOCCF0_ISR:	
  8041                           
  8042                           	psect	text33
  8043  0003                     __ptext33:	
  8044 ;; *************** function _IOCCF0_DefaultInterruptHandler *****************
  8045 ;; Defined at:
  8046 ;;		line 156 in file "mcc_generated_files/pin_manager.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;		None
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;		None
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  1    wreg      void 
  8053 ;; Registers used:
  8054 ;;		None
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8064 ;;Total ram usage:        0 bytes
  8065 ;; Hardware stack levels used:    1
  8066 ;; This function calls:
  8067 ;;		Nothing
  8068 ;; This function is called by:
  8069 ;;		_PIN_MANAGER_Initialize
  8070 ;;		_IOCCF0_ISR
  8071 ;; This function uses a non-reentrant model
  8072 ;;
  8073                           
  8074                           
  8075                           ;psect for function _IOCCF0_DefaultInterruptHandler
  8076  0003                     _IOCCF0_DefaultInterruptHandler:	
  8077  0003                     i1l135:	
  8078                           ;incstack = 0
  8079                           ; Regs used in _IOCCF0_DefaultInterruptHandler: []
  8080                           
  8081  0003  0008               	return
  8082  0004                     __end_of_IOCCF0_DefaultInterruptHandler:	
  8083  007E                     btemp	set	126	;btemp
  8084  007E                     int$flags	set	126
  8085  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        32
    BSS         58
    Persistent  38
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     60      80
    BANK1            80      1      75
    BANK2            80      0       0
    BANK3             0      0       0
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0
    BANK7             0      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    NextPattern@p_selector.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    stage_stash.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_stash.first_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    stage_stash.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_stash.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.patterns.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.patterns.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_CopyStageData.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_ConstructStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewPattern.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewPattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    FlashPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    pattern_selector.current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_right.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_right	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_left.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_left	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitUpperLowerPattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@lower.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@lower	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@upper.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@upper	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitXStrobePattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_2_3.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_2_3	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_1_4.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_1_4	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitWigwagPattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@right_side_on.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@right_side_on	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@left_side_on.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@left_side_on	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    AppendStage@last_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@last_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@last_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStageData.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStageData	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@source.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@dest.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@source	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@dest	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__ConstructStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__ConstructStage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@new_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@next	PTR struct Stage size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    ConstructStage@states	PTR const _Bool  size(1) Largest target is 4
		 -> InitLowerPattern@lower_right_states(BANK0[4]), InitLowerPattern@lower_left_states(BANK0[4]), InitUpperLowerPattern@lower_states(BANK0[4]), InitUpperLowerPattern@upper_states(BANK0[4]), 
		 -> InitXStrobePattern@diag_2_3_states(BANK0[4]), InitXStrobePattern@diag_1_4_states(BANK0[4]), InitWigwagPattern@right_side_states(BANK0[4]), InitWigwagPattern@left_side_states(BANK0[4]), 

    ConstructStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern.first_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), 

    sp__NewStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), 

    sp__NewStage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AssignLightStates@stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AssignLightStates@states	PTR const _Bool  size(1) Largest target is 4
		 -> InitLowerPattern@lower_right_states(BANK0[4]), InitLowerPattern@lower_left_states(BANK0[4]), InitUpperLowerPattern@lower_states(BANK0[4]), InitUpperLowerPattern@upper_states(BANK0[4]), 
		 -> InitXStrobePattern@diag_2_3_states(BANK0[4]), InitXStrobePattern@diag_1_4_states(BANK0[4]), InitWigwagPattern@right_side_states(BANK0[4]), InitWigwagPattern@left_side_states(BANK0[4]), 
		 -> NewStage@init_states(BANK0[4]), 

    AssignLightStates@stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NextPattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    NextPattern@p_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NextPattern@p_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S454Stage$next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector	PTR struct PatternSelector size(2) Largest target is 15
		 -> pattern_selector(BANK1[15]), 

    S467PatternSelector$current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S467PatternSelector$patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    pattern_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    S464Pattern$first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    Wigwag.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCCF0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF0_DefaultInterruptHandler(), 

    IOCCF0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCCF0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_FlashPattern
    _SetOutputs->_SetLight
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF0_SetInterruptHandler
    _InitXStrobePattern->_ConstructStage
    _InitWigwagPattern->_ConstructStage
    _InitUpperLowerPattern->_ConstructStage
    _InitLowerPattern->_ConstructStage
    _ConstructStage->_AssignLightStates
    _NewStage->_AssignLightStates
    _FlashPattern->_SetLight

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _setup->_InitPatternSelector
    _InitPatternSelector->_InitLowerPattern
    _InitPatternSelector->_InitUpperLowerPattern
    _InitPatternSelector->_InitWigwagPattern
    _InitPatternSelector->_InitXStrobePattern
    _NewPattern->_NewStage
    _InitXStrobePattern->_AppendStage
    _InitWigwagPattern->_AppendStage
    _InitUpperLowerPattern->_AppendStage
    _InitLowerPattern->_AppendStage
    _CopyStageData->_NewStage
    _ConstructStage->_NewStage
    _NewStage->_AssignLightStates
    _AppendStage->_CopyStageData

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   48871
                                              0 BANK1      1     1      0
                       _FlashPattern
           _PatternCycleInputChanged
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   47826
                _InitPatternSelector
                  _SYSTEM_Initialize
                         _SetOutputs
                    _TMR1_Initialize
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetOutputs                                           2     2      0     999
                                              6 COMMON     2     2      0
                           _SetLight
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     196
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      98
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0      98
         _IOCCF0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCCF0_SetInterruptHandler                           2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternSelector                                  8     6      2   46533
                                             52 BANK0      8     6      2
                   _InitLowerPattern
              _InitUpperLowerPattern
                  _InitWigwagPattern
                 _InitXStrobePattern
                         _NewPattern
 ---------------------------------------------------------------------------------
 (3) _NewPattern                                           4     4      0    1456
                                             12 BANK0      4     4      0
                           _NewStage
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     644
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _InitXStrobePattern                                  23    21      2   11157
                                             29 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (3) _InitWigwagPattern                                   23    21      2   11157
                                             29 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (3) _InitUpperLowerPattern                               23    21      2   11157
                                             29 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (3) _InitLowerPattern                                    23    21      2   11157
                                             29 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (4) _CopyStageData                                        9     5      4    3240
                                             12 BANK0      9     5      4
                           _NewStage (ARG)
 ---------------------------------------------------------------------------------
 (4) _ConstructStage                                       7     4      3    3216
                                              9 COMMON     1     1      0
                                             12 BANK0      6     3      3
                  _AssignLightStates
                           _NewStage
 ---------------------------------------------------------------------------------
 (4) _NewStage                                            10    10      0     716
                                              2 BANK0     10    10      0
                  _AssignLightStates
 ---------------------------------------------------------------------------------
 (5) _AssignLightStates                                    9     6      3     552
                                              2 COMMON     7     4      3
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _AppendStage                                          8     4      4    3328
                                             21 BANK0      8     4      4
                      _CopyStageData (ARG)
                           _NewStage (ARG)
 ---------------------------------------------------------------------------------
 (1) _PatternCycleInputChanged                             4     4      0      23
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _FlashPattern                                         8     6      2    1022
                                              6 COMMON     4     2      2
                                              0 BANK0      4     4      0
                           _SetLight
 ---------------------------------------------------------------------------------
 (3) _SetLight                                             4     3      1     875
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           0     0      0     240
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0     240
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (9) _TMR1_WriteTimer                                      2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (9) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCCF0_ISR
 ---------------------------------------------------------------------------------
 (9) _IOCCF0_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _IOCCF0_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FlashPattern
     _SetLight
   _PatternCycleInputChanged
   _setup
     _InitPatternSelector
       _InitLowerPattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _InitUpperLowerPattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _InitWigwagPattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _InitXStrobePattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _NewPattern
         _NewStage
           _AssignLightStates
         ___wmul
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCCF0_SetInterruptHandler
       _PMD_Initialize
       _TMR1_Initialize
         _TMR1_SetInterruptHandler
       _WDT_Initialize
     _SetOutputs
       _SetLight
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR1_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCCF0_ISR
       Absolute function(Fake) *
       _IOCCF0_DefaultInterruptHandler *
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      1      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      A7      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      A7      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu May 07 15:22:42 2020

                              _update_stage 006A                                 __CFG_CP$OFF 0000  
                                        l51 0F73                                          l60 0F2A  
                                        l54 0F3C                                          l57 0F16  
                        ConstructStage@next 002E                         ___wmul@multiplicand 0074  
                               __CFG_LVP$ON 0000                                         l121 0792  
                                       l210 0F12                                         l132 0F22  
                                       l207 0F98                                         l237 07FF  
                                       l416 0767                                         l441 0696  
                                       l329 050A                                         l450 073A  
                                       l507 037C                                         l291 0FC6  
                                       l437 07B7                                         l382 07D9  
                                       l463 0647                                         l455 070D  
                                       l447 06D4                                         l544 057E  
                                       l474 0485                                         l379 05EF  
                                       l485 0168                                         l496 0272  
                                       l696 0FEB                                         l698 0FFF  
                                       u500 0635                                         u501 0634  
                                       u510 0FE7                                         u511 0FE6  
                                       u505 0631                                __CFG_CPD$OFF 0000  
                                       u540 0FFB                                         u541 0FFA  
                                       u525 0FEC                                         u535 0FF1  
                                       u480 06FE                                         u481 06FD  
                                       u810 0741                                         u490 05FC  
                                       u811 0740                                         u491 05FB  
                                       u820 0754                                         u821 0753  
                                       u485 06FA                                         u830 0766  
                                       u910 07B7                                         u831 0765  
                                       u911 07B6                                         u920 0652  
                                       u921 0651                                         u930 06A1  
                                       u931 06A0                                         u940 041C  
                                       u941 041B                                         u950 0485  
                                       u951 0484                                         u960 00FF  
                                       u945 0418                                         u961 00FE  
                                       u970 0168                                         u955 0481  
                                       u971 0167                                         u980 0209  
                                       u981 0208                                         u965 00FB  
                                       u990 0272                                         u991 0271  
                                       u975 0164                                         u985 0205  
                                       u995 026E                             _timer1ReloadVal 006C  
                   __size_of_PMD_Initialize 0008                                         wreg 0009  
        __end_of_IOCCF0_SetInterruptHandler 0F23                  _IOCCF0_SetInterruptHandler 0F1D  
                                      l2140 073B                                        l2300 03BF  
                                      l2060 0F6A                                        l2142 0741  
                                      l2310 03D2                                        l2302 03C7  
                                      l2062 0F6D                                        l2144 0744  
                                      l2152 0756                                        l2240 0648  
                                      l2312 040A                                        l2304 03D0  
                                      l2064 0F70                                        l2056 0F64  
                                      l2072 0F10                                        l2146 074B  
                                      l2234 0796                                        l2250 066D  
                                      l2242 0652                                        l2410 0273  
                                      l2314 040F                                        l2330 005F  
                                      l2058 0F67                                        l2148 0754  
                                      l2236 07AA                                        l2228 0793  
                                      l2252 0675                                        l2420 02B6  
                                      l2412 027A                                        l2404 0228  
                                      l2324 043B                                        l2316 041C  
                                      l2340 00A2                                        l2332 0066  
                                      l2500 04DA                                        l2158 0766  
                                      l2238 07AE                                        l2254 0680  
                                      l2246 0655                                        l2262 0710  
                                      l2430 02C9                                        l2422 02BE  
                                      l2414 028A                                        l2406 0260  
                                      l2326 0473                                        l2318 0438  
                                      l2350 00B5                                        l2342 00AA  
                                      l2334 0076                                        l2502 04E7  
                                      l2510 0FB7                                        l2520 052B  
                                      l2256 068A                                        l2248 0669  
                                      l2264 0723                                        l2432 0301  
                                      l2424 02C7                                        l2416 0298  
                                      l2408 0265                                        l2328 0478  
                                      l2352 00ED                                        l2344 00B3  
                                      l2336 0084                                        l2280 06BA  
                                      l2272 0697                                        l1800 076C  
                                      l2512 0FBA                                        l2504 0FAF  
                                      l2450 0580                                        l2530 057C  
                                      l2522 0535                                        l2258 0692  
                                      l2266 072D                                        l2434 0306  
                                      l2418 02A8                                        l2370 0169  
                                      l2290 037D                                        l2354 00F2  
                                      l2338 0094                                        l2282 06BE  
                                      l2274 06A1                                        l1810 077C  
                                      l1802 076F                                        l2514 0FBE  
                                      l2506 0FB2                                        l2460 05AC  
                                      l2452 0581                                        l2524 053A  
                                      l2516 050B                                        l2268 0736  
                                      l2444 0332                                        l2436 0313  
                                      l2380 01AC                                        l2372 0170  
                                      l2292 0383                                        l2364 011E  
                                      l2356 00FF                                        l2284 06C3  
                                      l1820 0787                                        l1812 077F  
                                      l1804 0771                                        l2508 0FB3  
                                      l2532 0FC7                                        l2462 05B7  
                                      l2454 0589                                        l2526 053C  
                                      l2518 0510                                        l1750 06D5  
                                      l2446 036A                                        l2438 032F  
                                      l2390 01BF                                        l2382 01B4  
                                      l2374 0180                                        l2294 0393  
                                      l2366 0156                                        l2358 011B  
                                      l2286 06D0                                        l2278 06A4  
                                      l1830 0F37                                        l1822 0788  
                                      l1814 0781                                        l1806 0775  
                                      l2542 0FD2                                        l2534 0FCA  
                                      l2464 05C4                                        l2456 0596  
                                      l2472 05D9                                        l2528 0541  
                                      l1760 06F1                                        l2448 036F  
                                      l2392 01F7                                        l2384 01BD  
                                      l2376 018E                                        l2296 03A1  
                                      l2368 015B                                        l2480 0486  
                                      l1832 0F38                                        l1736 0F1D  
                                      l1824 0789                                        l1816 0784  
                                      l1808 0777                                        l1840 0F87  
                                      l2544 0FD7                                        l2536 0FCF  
                                      l2466 05CC                                        l2458 059F  
                                      l1770 05FC                                        l1762 06FE  
                                      l2394 01FC                                        l2378 019E  
                                      l2298 03B1                                        l2490 04A1  
                                      l1834 0F3B                                        l1826 0790  
                                      l1818 0786                                        l1738 07FA  
                                      l1842 0F89                                        l1772 060F  
                                      l1764 070D                                        l1756 06D8  
                                      l2396 0209                                        l1780 0FE1  
                                      l2492 04AE                                        l1828 0F34  
                                      l1844 0F8A                                        l1836 0F13  
                                      l2566 05E1                                        l1774 0619  
                                      l1758 06ED                                        l2398 0225  
                                      l1790 0FFB                                        l1782 0FE3  
                                      l2494 04B5                                        l2486 0489  
                                      l1846 0F8F                                        l1838 0F85  
                                      l2478 07B9                                        l1776 0622  
                                      l1768 05F0                                        l1784 0FE7  
                                      l2496 04C0                                        l2488 049D  
                                      l1848 0F91                                        l1778 0635  
                                      l1786 0FF0                                        l2498 04CD  
                                      l1794 0F23                                        l1788 0FF5  
                                      l1796 0768                                        l1798 076A  
                           ?_ConstructStage 002C                                        u1000 0313  
                                      u1001 0312                                        u1010 037C  
                                      u1011 037B                                        u1020 0589  
                                      u1021 0588                                        u1005 030F  
                                      u1110 05CC                                        u1030 0593  
                                      u1111 05CB                                        u1031 0590  
                                      u1015 0378                                        u1120 05D6  
                                      u1104 05C3                                        u1121 05D3  
                                      u1050 059F                                        u1051 059E  
                                      u1060 05A9                                        u1044 0595  
                                      u1140 04AE                                        u1061 05A6  
                                      u1141 04AD                                        u1134 05D8  
                                      u1150 052B                                        u1151 052A  
                                      u1080 05B7                                        u1160 0541  
                                      u1081 05B6                                        u1161 0540  
                                      u1145 04AA                                        u1090 05C1  
                                      u1074 05AB                                        u1091 05BE  
                                      u1155 0527                                        _LATA 010C  
                                      _LATC 010E                                        u1177 0747  
                                      _PMD0 0911                                        _PMD1 0912  
                                      _PMD2 0913                                        _PMD3 0914  
                                      _PMD4 0915                                        _PMD5 0916  
                                      _WPUA 020C                                        _WPUC 020E  
                              __CFG_WRT$OFF 0000                               SetLight@light 0075  
                             __CFG_FCMEN$ON 0000                        ConstructStage@states 002F  
                             SetLight@state 0072                                        _main 0FC7  
                       __end_of_AppendStage 0648                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                             __CFG_BOREN$ON 0000                               __CFG_BORV$LOW 0000  
                                      start 0028                  ??_TMR1_SetInterruptHandler 0074  
                             __CFG_CSWEN$ON 0000                               __CFG_MCLRE$ON 0000  
                            CopyStageData@i 0033                             ??_CopyStageData 0030  
            __size_of_OSCILLATOR_Initialize 0009               __end_of_OSCILLATOR_Initialize 0F3D  
                       __size_of_IOCCF0_ISR 000F                                       ?_main 0070  
                             __CFG_WDTE$OFF 0000                             _TMR1_StartTimer 0F10  
                            __CFG_DEBUG$OFF 0000                                       i1l125 0F33  
                                     i1l221 0F84                                       i1l135 0003  
                                     i1l240 0F1C                                       i1l129 0F63  
                                     i1l234 0FAE                                       i1l173 0026  
                                     i1l174 0026                                       i1l168 0014  
                                     _OSCEN 091D                                       _TMR1H 001A  
                                     _TMR1L 0019                  InitLowerPattern@lower_left 0048  
                                     u80_20 0FA9                                       u80_21 0FA8  
                                     _TRISA 008C                                       _TRISC 008E  
                                     u90_20 0022                                       u90_21 0021  
                                     u76_20 0F5C                                       u76_21 0F5B  
                                     u77_20 0F79                                       u77_21 0F78  
                                     u86_20 000B                                       u86_21 000A  
                                     u79_20 0F30                                       u87_20 0010  
                                     u79_21 0F2F                                       u87_21 000F  
                                     u88_20 0018                                       u88_21 0017  
                                     u89_20 001D                                       u89_21 001C  
                     ConstructStage@time_ms 002C                            __end_of_TMR1_ISR 0FAF  
                   __end_of_PIN_MANAGER_IOC 0F34                              _WDT_Initialize 0F13  
                                     _setup 0FAF           InitXStrobePattern@diag_1_4_states 0040  
                   __end_of_TMR1_Initialize 0F99                                       pclath 000A  
         InitXStrobePattern@diag_2_3_states 0044                        __end_of_FlashPattern 057F  
                                     status 0003               InitPatternSelector@p_selector 0054  
                                     wtemp0 007E                    FlashPattern@current_time 0078  
                  _PatternCycleInputChanged 073B                             _TMR1_WriteTimer 0F74  
                         _pattern_list_iter 005E                             __initialization 002A  
                       NewStage@init_states 0026                                __end_of_main 0FE1  
                                _NewPattern 0697                 ?_INTERRUPT_InterruptManager 0070  
                          __end_of_NewStage 0697                                      ??_main 00EA  
                          __end_of_SetLight 05F0                           ?_InitLowerPattern 003D  
               __end_of_InitPatternSelector 050B                          ??_InitLowerPattern 003F  
                    __end_of_WDT_Initialize 0F17                          _cur_pc_input_state 007B  
                               _AppendStage 05F0                         InitXStrobePattern@i 004C  
                                    ?_setup 0070                                      _ANSELA 018C  
                                    _ANSELC 018E                          __CFG_RSTOSC$HFINT1 0000  
                                    _T1GCON 001C                  __end_of_InitXStrobePattern 0169  
                   TMR1_WriteTimer@timerVal 0070                                      i1l2120 0F99  
                                    i1l2122 0F9B                                      i1l2116 0F2B  
                                    i1l2124 0FA2                                      i1l2070 0F61  
                                    i1l2118 0F30                                      i1l2126 0FA9  
                                    i1l2080 0F7C                                      _ODCONA 028C  
                                    i1l2066 0F55                                      i1l2082 0F7E  
                                    i1l2074 0F74                                      _ODCONC 028E  
                                    i1l2068 0F5C                                      i1l2076 0F79  
                                    i1l2084 0F80                                      i1l2180 000B  
                                    i1l2086 0F82                                      i1l2078 0F7A  
                                    i1l2182 0010                                      i1l2088 0F17  
                                    i1l2184 0018                                      i1l2186 001D  
                                    i1l2178 0006                                      i1l2188 0022  
                                    _INLVLA 038C                                      _INLVLC 038E  
                                    _OSCFRQ 091F                                      _WDTCON 0097  
                                _SetOutputs 07B8                   InitUpperLowerPattern@F461 00D4  
                 InitUpperLowerPattern@F464 00D0                              __CFG_PWRTE$OFF 0000  
      __end_of_TMR1_DefaultInterruptHandler 0F1D       __size_of_TMR1_DefaultInterruptHandler 0006  
              _TMR1_DefaultInterruptHandler 0F17                             SetOutputs@state 0077  
                 InitUpperLowerPattern@head 0052                                      _Wigwag 00A4  
                   __end_of_TMR1_StartTimer 0F13                                      ___wmul 0FE1  
                            __CFG_STVREN$ON 0000           InitWigwagPattern@left_side_states 0040  
                                    _cur_ms 0066           InitUpperLowerPattern@upper_states 0040  
                       CopyStageData@source 002E                              _PMD_Initialize 0F23  
                           ?_WDT_Initialize 0070    TMR1_SetInterruptHandler@InterruptHandler 0072  
IOCCF0_SetInterruptHandler@InterruptHandler 0072                            ?_PIN_MANAGER_IOC 0070  
                   __end_of_TMR1_WriteTimer 0F85                                ??_IOCCF0_ISR 0070  
                          ?_TMR1_Initialize 0070                      AssignLightStates@stage 0072  
                         _SYSTEM_Initialize 0F64                     __end_of__initialization 005B  
                InitXStrobePattern@diag_1_4 0048                  InitXStrobePattern@diag_2_3 004A  
                        ?_SYSTEM_Initialize 0070                              __pcstackCOMMON 0070  
        InitWigwagPattern@right_side_states 0044                                __pidataBANK1 07DA  
                       ??_SYSTEM_Initialize 0074                                   ?_TMR1_ISR 0070  
             ?_TMR1_DefaultInterruptHandler 0070                                 ?_NewPattern 0079  
                             __end_of_setup 0FC7                      __end_of_PMD_Initialize 0F2B  
                        __end_of_IOCCF0_ISR 0F64                           NewStage@new_stage 002A  
                          ??_ConstructStage 0079                 ?_IOCCF0_SetInterruptHandler 0072  
                     __size_of_FlashPattern 0074           InitLowerPattern@lower_left_states 0040  
                  InitUpperLowerPattern@off 0050                   __end_of_SYSTEM_Initialize 0F74  
                                   ??_setup 007A                                NewStage@F418 00A0  
                                __pbssBANK0 005C                                  __pbssBANK1 00A0  
                                 ?_NewStage 0077                                 ?_SetOutputs 0070  
                     _InitUpperLowerPattern 0169                                   ?_SetLight 0072  
                        AssignLightStates@i 0020                        AppendStage@new_stage 0037  
                                __pmaintext 0FC7                                     ?___wmul 0072  
                          ?_TMR1_StartTimer 0070                                  ??_TMR1_ISR 0072  
                           __CFG_PPS1WAY$ON 0000                                  __pintentry 0004  
          ??_IOCCF0_DefaultInterruptHandler 0070             ?_IOCCF0_DefaultInterruptHandler 0070  
                           ?_PMD_Initialize 0070                          InitWigwagPattern@i 004C  
                              _FlashPattern 050B                                     _OSCCON1 0919  
                                   _OSCCON3 091B                                     _OSCTUNE 091E  
                ??_PatternCycleInputChanged 0072                                     _SLRCONA 030C  
                                   _SLRCONC 030E                      InitXStrobePattern@F452 00D8  
                    InitXStrobePattern@F449 00DC                            ?_TMR1_WriteTimer 0070  
                    InitXStrobePattern@head 0052                         __size_of_NewPattern 003E  
                   ConstructStage@new_stage 0030                                  ??_NewStage 0022  
              InitUpperLowerPattern@pattern 003D                                  ??_SetLight 0073  
                InitUpperLowerPattern@i_898 004E                  InitUpperLowerPattern@lower 004A  
                InitUpperLowerPattern@upper 0048                             __size_of___wmul 001F  
       PatternCycleInputChanged@delay_count 0074                       __end_of_CopyStageData 070E  
                      InitWigwagPattern@off 0050                                     __ptext1 0FAF  
                                   __ptext2 0F10                                     __ptext3 07B8  
                                   __ptext4 0F64                                     __ptext5 0F13  
                                   __ptext6 0F85                                     __ptext7 07FA  
                                   __ptext8 0F23                                     __ptext9 0768  
            ??_TMR1_DefaultInterruptHandler 0070                                   _T1CONbits 001B  
                      InitLowerPattern@F473 00CC                        InitLowerPattern@F476 00C8  
                                   _cur_sec 0062                       _OSCILLATOR_Initialize 0F34  
                       __size_of_SetOutputs 0022           __size_of_TMR1_SetInterruptHandler 0006  
                  ??_PIN_MANAGER_Initialize 0074                   ?_TMR1_SetInterruptHandler 0072  
                                 _IOCCFbits 0399                        InitLowerPattern@head 0052  
                                   _temp_ms 0068                                   _IOCCNbits 0398  
                                 _IOCCPbits 0397                                ?_AppendStage 0035  
                __size_of_SYSTEM_Initialize 0010                                     clrloop0 0F3E  
                      end_of_initialization 005B                         _last_pc_input_state 007A  
                                   init_ram 0F49                      ?_InitUpperLowerPattern 003D  
                 __size_of_InitLowerPattern 010A                                     initloop 0F4A  
        InitLowerPattern@lower_right_states 0044                          _InitXStrobePattern 005F  
                          ??_WDT_Initialize 0072                                   _PORTCbits 000E  
                   InitLowerPattern@pattern 003D                         ?_InitXStrobePattern 003D  
                   AssignLightStates@states 0074                            __CFG_FEXTOSC$OFF 0000  
                                _start_time 005C                __size_of_InitPatternSelector 0085  
                                _ts_trigger 006B                        ??_InitXStrobePattern 003F  
                              ??_NewPattern 002C                              __end_of___wmul 1000  
                         __size_of_TMR1_ISR 0016                           CopyStageData@dest 002C  
                    ?_OSCILLATOR_Initialize 0070                        InitPatternSelector@i 005A  
                       start_initialization 002A                            _pattern_selector 00B9  
           __size_of_PIN_MANAGER_Initialize 002B                             AppendStage@head 0035  
                             _pattern_stash 00A7                       NewPattern@new_pattern 002E  
                    InitUpperLowerPattern@i 004C                          __end_of_NewPattern 06D5  
                              ??_SetOutputs 0076                    __size_of_PIN_MANAGER_IOC 0009  
                  InitWigwagPattern@pattern 003D                           __size_of_NewStage 004F  
                          __CFG_LPBOREN$OFF 0000                    __size_of_TMR1_Initialize 0014  
                         __size_of_SetLight 0071                            ??_PMD_Initialize 0072  
                                  ??___wmul 0076                                 __pdataBANK1 00C8  
                               __pbssBIGRAM 20F0                                 __pbssCOMMON 007A  
                     AppendStage@last_stage 003B                                   ___latbits 0002  
                        __end_of_SetOutputs 07DA                               __pcstackBANK0 0020  
                             __pcstackBANK1 00EA                      InitWigwagPattern@i_846 004E  
    __end_of_IOCCF0_DefaultInterruptHandler 0004     __size_of_IOCCF0_DefaultInterruptHandler 0001  
            _IOCCF0_DefaultInterruptHandler 0003                   InitXStrobePattern@pattern 003D  
                      __size_of_AppendStage 0058                            _InitLowerPattern 0273  
                                 __pnvBANK0 006C                                   __pnvBANK1 00E8  
                    _PIN_MANAGER_Initialize 0768            __end_of_TMR1_SetInterruptHandler 0800  
                         _AssignLightStates 0793                           _InitWigwagPattern 037D  
                        ?_AssignLightStates 0072                ??_INTERRUPT_InterruptManager 0072  
                        ?_InitWigwagPattern 003D                       InitXStrobePattern@off 0050  
                  __size_of_TMR1_StartTimer 0003                         ??_AssignLightStates 0075  
                       ??_InitWigwagPattern 003F                     ??_InitUpperLowerPattern 003F  
                            __size_of_setup 0018                         InitLowerPattern@off 0050  
                            ___wmul@product 0076                     __size_of_ConstructStage 002D  
                                  _LATCbits 010E                                   clear_ram0 0F3D  
                                  _PIE0bits 0090                                    _PIE1bits 0091  
                  __size_of_TMR1_WriteTimer 0011                   __end_of_AssignLightStates 07B8  
       __size_of_INTERRUPT_InterruptManager 0024                                    _PIR0bits 0010  
                                  _PIR1bits 0011           __size_of_PatternCycleInputChanged 002D  
                 ?_PatternCycleInputChanged 0070                   __end_of_InitWigwagPattern 0486  
                                  _TMR1_ISR 0F99                           ??_PIN_MANAGER_IOC 0070  
                       _InitPatternSelector 0486                           ??_TMR1_Initialize 0074  
                         ___wmul@multiplier 0072                     InitXStrobePattern@i_872 004E  
               InitLowerPattern@lower_right 004A                        ?_InitPatternSelector 0054  
                    __size_of_CopyStageData 0039                                    _NewStage 0648  
                                  _SetLight 057F                             _stage_list_iter 0060  
                   ??_OSCILLATOR_Initialize 0072                       InitWigwagPattern@F440 00E0  
                     InitWigwagPattern@F437 00E4                    _TMR1_SetInterruptHandler 07FA  
                     InitWigwagPattern@head 0052                       _TMR1_InterruptHandler 00E8  
                   _IOCCF0_InterruptHandler 006E                                    __ptext10 0F1D  
                                  __ptext11 0F34                                    __ptext20 070E  
                                  __ptext12 0486                                    __ptext21 0648  
                                  __ptext13 0697                                  _T1GCONbits 001C  
                                  __ptext30 0F17                                    __ptext22 0793  
                                  __ptext14 0FE1                                    __ptext31 0F2B  
                                  __ptext23 05F0                                    __ptext15 005F  
                                  __ptext32 0F55                                    __ptext24 073B  
                                  __ptext16 037D                                    __ptext33 0003  
                                  __ptext25 050B                                    __ptext17 0169  
                                  __ptext26 057F                                    __ptext18 0273  
                                  __ptext19 06D5                                    __ptext28 0F99  
                                  __ptext29 0F74                ??_IOCCF0_SetInterruptHandler 0074  
            InitWigwagPattern@right_side_on 004A                       ??_InitPatternSelector 0056  
                         ??_TMR1_StartTimer 0072                                  _IOCCF0_ISR 0F55  
                                  _cur_hsec 0064                               __size_of_main 001A  
               __size_of_InitXStrobePattern 010A                       InitLowerPattern@i_924 004E  
                __size_of_AssignLightStates 0025               InitWigwagPattern@left_side_on 0048  
                __size_of_InitWigwagPattern 0109                                    int$flags 007E  
        __end_of_INTERRUPT_InterruptManager 0028                  _INTERRUPT_InterruptManager 0004  
                         ??_TMR1_WriteTimer 0072                               _CopyStageData 06D5  
                       FlashPattern@pattern 0076                               ?_FlashPattern 0076  
                  __end_of_InitLowerPattern 037D         __size_of_IOCCF0_SetInterruptHandler 0006  
                                _INTCONbits 000B                     __size_of_WDT_Initialize 0004  
                                  intlevel1 0000                              _ConstructStage 070E  
                   ?_PIN_MANAGER_Initialize 0070                           __CFG_CLKOUTEN$OFF 0000  
                         InitLowerPattern@i 004C                              ?_CopyStageData 002C  
                            ??_FlashPattern 0020           InitUpperLowerPattern@lower_states 0044  
                             ??_AppendStage 0039            __end_of_PatternCycleInputChanged 0768  
                    __end_of_ConstructStage 073B                                 ?_IOCCF0_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 0793              __size_of_InitUpperLowerPattern 010A  
             __end_of_InitUpperLowerPattern 0273                             _PIN_MANAGER_IOC 0F2B  
                               _stage_stash 20F0                             _TMR1_Initialize 0F85  
