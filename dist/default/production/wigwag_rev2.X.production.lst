

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu May 07 14:17:03 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F18325
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x620,48
    47                           	dabs	1,0x5A0,80
    48                           	dabs	1,0x520,80
    49                           	dabs	1,0x4A0,80
    50                           	dabs	1,0x420,80
    51                           	dabs	1,0x3A0,80
    52                           	dabs	1,0x320,80
    53                           	dabs	1,0x2A0,80
    54                           	dabs	1,0x220,80
    55                           	dabs	1,0x1A0,80
    56                           	dabs	1,0x20F0,0,_stage_stash
    57                           	dabs	1,0x7E,2
    58  0000                     
    59                           ; Version 2.10
    60                           ; Generated 31/07/2019 GMT
    61                           ; 
    62                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC16F18325 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  0007                     	;# 
   101  0008                     	;# 
   102  0009                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000E                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0016                     	;# 
   116  0017                     	;# 
   117  0018                     	;# 
   118  0019                     	;# 
   119  0019                     	;# 
   120  001A                     	;# 
   121  001B                     	;# 
   122  001C                     	;# 
   123  001D                     	;# 
   124  001E                     	;# 
   125  001F                     	;# 
   126  008C                     	;# 
   127  008E                     	;# 
   128  0090                     	;# 
   129  0091                     	;# 
   130  0092                     	;# 
   131  0093                     	;# 
   132  0094                     	;# 
   133  0097                     	;# 
   134  009B                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  009F                     	;# 
   140  010C                     	;# 
   141  010E                     	;# 
   142  0111                     	;# 
   143  0112                     	;# 
   144  0113                     	;# 
   145  0114                     	;# 
   146  0115                     	;# 
   147  0116                     	;# 
   148  0117                     	;# 
   149  0118                     	;# 
   150  0119                     	;# 
   151  018C                     	;# 
   152  018E                     	;# 
   153  0197                     	;# 
   154  0199                     	;# 
   155  0199                     	;# 
   156  0199                     	;# 
   157  019A                     	;# 
   158  019A                     	;# 
   159  019A                     	;# 
   160  019B                     	;# 
   161  019B                     	;# 
   162  019B                     	;# 
   163  019B                     	;# 
   164  019B                     	;# 
   165  019C                     	;# 
   166  019C                     	;# 
   167  019C                     	;# 
   168  019D                     	;# 
   169  019D                     	;# 
   170  019D                     	;# 
   171  019E                     	;# 
   172  019E                     	;# 
   173  019E                     	;# 
   174  019F                     	;# 
   175  019F                     	;# 
   176  019F                     	;# 
   177  019F                     	;# 
   178  019F                     	;# 
   179  020C                     	;# 
   180  020E                     	;# 
   181  0211                     	;# 
   182  0211                     	;# 
   183  0212                     	;# 
   184  0212                     	;# 
   185  0213                     	;# 
   186  0213                     	;# 
   187  0214                     	;# 
   188  0214                     	;# 
   189  0215                     	;# 
   190  0215                     	;# 
   191  0215                     	;# 
   192  0215                     	;# 
   193  0216                     	;# 
   194  0216                     	;# 
   195  0217                     	;# 
   196  0217                     	;# 
   197  0219                     	;# 
   198  021A                     	;# 
   199  021B                     	;# 
   200  021C                     	;# 
   201  021D                     	;# 
   202  021D                     	;# 
   203  021E                     	;# 
   204  021F                     	;# 
   205  028C                     	;# 
   206  028E                     	;# 
   207  0291                     	;# 
   208  0291                     	;# 
   209  0292                     	;# 
   210  0293                     	;# 
   211  0294                     	;# 
   212  0295                     	;# 
   213  0295                     	;# 
   214  0296                     	;# 
   215  0297                     	;# 
   216  0298                     	;# 
   217  029F                     	;# 
   218  030C                     	;# 
   219  030E                     	;# 
   220  0311                     	;# 
   221  0311                     	;# 
   222  0312                     	;# 
   223  0313                     	;# 
   224  0314                     	;# 
   225  0315                     	;# 
   226  0315                     	;# 
   227  0316                     	;# 
   228  0317                     	;# 
   229  0318                     	;# 
   230  038C                     	;# 
   231  038E                     	;# 
   232  0391                     	;# 
   233  0392                     	;# 
   234  0393                     	;# 
   235  0397                     	;# 
   236  0398                     	;# 
   237  0399                     	;# 
   238  039A                     	;# 
   239  039C                     	;# 
   240  039D                     	;# 
   241  039E                     	;# 
   242  039F                     	;# 
   243  0411                     	;# 
   244  0411                     	;# 
   245  0412                     	;# 
   246  0413                     	;# 
   247  0414                     	;# 
   248  0415                     	;# 
   249  0416                     	;# 
   250  0417                     	;# 
   251  0418                     	;# 
   252  0418                     	;# 
   253  0419                     	;# 
   254  041A                     	;# 
   255  041B                     	;# 
   256  041C                     	;# 
   257  041D                     	;# 
   258  041E                     	;# 
   259  041F                     	;# 
   260  0498                     	;# 
   261  0498                     	;# 
   262  0499                     	;# 
   263  049A                     	;# 
   264  049B                     	;# 
   265  049B                     	;# 
   266  049C                     	;# 
   267  049D                     	;# 
   268  049E                     	;# 
   269  049F                     	;# 
   270  0617                     	;# 
   271  0618                     	;# 
   272  0619                     	;# 
   273  0619                     	;# 
   274  061A                     	;# 
   275  061B                     	;# 
   276  061C                     	;# 
   277  061C                     	;# 
   278  061F                     	;# 
   279  0691                     	;# 
   280  0692                     	;# 
   281  0693                     	;# 
   282  0694                     	;# 
   283  0695                     	;# 
   284  0696                     	;# 
   285  0697                     	;# 
   286  0698                     	;# 
   287  0699                     	;# 
   288  0711                     	;# 
   289  0712                     	;# 
   290  0713                     	;# 
   291  0714                     	;# 
   292  0715                     	;# 
   293  0716                     	;# 
   294  0717                     	;# 
   295  0718                     	;# 
   296  0719                     	;# 
   297  0891                     	;# 
   298  0891                     	;# 
   299  0891                     	;# 
   300  0891                     	;# 
   301  0891                     	;# 
   302  0891                     	;# 
   303  0892                     	;# 
   304  0892                     	;# 
   305  0892                     	;# 
   306  0893                     	;# 
   307  0893                     	;# 
   308  0893                     	;# 
   309  0893                     	;# 
   310  0893                     	;# 
   311  0893                     	;# 
   312  0894                     	;# 
   313  0894                     	;# 
   314  0894                     	;# 
   315  0895                     	;# 
   316  0895                     	;# 
   317  0895                     	;# 
   318  0896                     	;# 
   319  0896                     	;# 
   320  0896                     	;# 
   321  089B                     	;# 
   322  0911                     	;# 
   323  0912                     	;# 
   324  0913                     	;# 
   325  0914                     	;# 
   326  0915                     	;# 
   327  0916                     	;# 
   328  0918                     	;# 
   329  0919                     	;# 
   330  091A                     	;# 
   331  091B                     	;# 
   332  091C                     	;# 
   333  091D                     	;# 
   334  091E                     	;# 
   335  091F                     	;# 
   336  0E0F                     	;# 
   337  0E10                     	;# 
   338  0E11                     	;# 
   339  0E12                     	;# 
   340  0E13                     	;# 
   341  0E14                     	;# 
   342  0E15                     	;# 
   343  0E16                     	;# 
   344  0E17                     	;# 
   345  0E18                     	;# 
   346  0E19                     	;# 
   347  0E1A                     	;# 
   348  0E1B                     	;# 
   349  0E1C                     	;# 
   350  0E1D                     	;# 
   351  0E1E                     	;# 
   352  0E1F                     	;# 
   353  0E20                     	;# 
   354  0E21                     	;# 
   355  0E22                     	;# 
   356  0E24                     	;# 
   357  0E25                     	;# 
   358  0E28                     	;# 
   359  0E29                     	;# 
   360  0E2A                     	;# 
   361  0E2B                     	;# 
   362  0E2C                     	;# 
   363  0E2D                     	;# 
   364  0E2E                     	;# 
   365  0E2F                     	;# 
   366  0E90                     	;# 
   367  0E91                     	;# 
   368  0E92                     	;# 
   369  0E94                     	;# 
   370  0E95                     	;# 
   371  0EA0                     	;# 
   372  0EA1                     	;# 
   373  0EA2                     	;# 
   374  0EA3                     	;# 
   375  0EA4                     	;# 
   376  0EA5                     	;# 
   377  0F0F                     	;# 
   378  0F10                     	;# 
   379  0F11                     	;# 
   380  0F12                     	;# 
   381  0F13                     	;# 
   382  0F14                     	;# 
   383  0F15                     	;# 
   384  0F16                     	;# 
   385  0F17                     	;# 
   386  0F18                     	;# 
   387  0F19                     	;# 
   388  0F1A                     	;# 
   389  0F1B                     	;# 
   390  0F1C                     	;# 
   391  0F1D                     	;# 
   392  0F1E                     	;# 
   393  0F1F                     	;# 
   394  0F20                     	;# 
   395  0F21                     	;# 
   396  0F22                     	;# 
   397  0F23                     	;# 
   398  0F24                     	;# 
   399  0F25                     	;# 
   400  0F26                     	;# 
   401  0F27                     	;# 
   402  0F28                     	;# 
   403  0F29                     	;# 
   404  0F2A                     	;# 
   405  0F2B                     	;# 
   406  0F2C                     	;# 
   407  0F2D                     	;# 
   408  0F2E                     	;# 
   409  0F2F                     	;# 
   410  0F30                     	;# 
   411  0F31                     	;# 
   412  0F32                     	;# 
   413  0F33                     	;# 
   414  0F34                     	;# 
   415  0F35                     	;# 
   416  0F36                     	;# 
   417  0F37                     	;# 
   418  0FE4                     	;# 
   419  0FE5                     	;# 
   420  0FE6                     	;# 
   421  0FE7                     	;# 
   422  0FE8                     	;# 
   423  0FE9                     	;# 
   424  0FEA                     	;# 
   425  0FEB                     	;# 
   426  0FED                     	;# 
   427  0FEE                     	;# 
   428  0FEF                     	;# 
   429  0000                     	;# 
   430  0001                     	;# 
   431  0002                     	;# 
   432  0003                     	;# 
   433  0004                     	;# 
   434  0005                     	;# 
   435  0006                     	;# 
   436  0007                     	;# 
   437  0008                     	;# 
   438  0009                     	;# 
   439  000A                     	;# 
   440  000B                     	;# 
   441  000C                     	;# 
   442  000E                     	;# 
   443  0010                     	;# 
   444  0011                     	;# 
   445  0012                     	;# 
   446  0013                     	;# 
   447  0014                     	;# 
   448  0015                     	;# 
   449  0015                     	;# 
   450  0016                     	;# 
   451  0016                     	;# 
   452  0017                     	;# 
   453  0018                     	;# 
   454  0019                     	;# 
   455  0019                     	;# 
   456  001A                     	;# 
   457  001B                     	;# 
   458  001C                     	;# 
   459  001D                     	;# 
   460  001E                     	;# 
   461  001F                     	;# 
   462  008C                     	;# 
   463  008E                     	;# 
   464  0090                     	;# 
   465  0091                     	;# 
   466  0092                     	;# 
   467  0093                     	;# 
   468  0094                     	;# 
   469  0097                     	;# 
   470  009B                     	;# 
   471  009B                     	;# 
   472  009C                     	;# 
   473  009D                     	;# 
   474  009E                     	;# 
   475  009F                     	;# 
   476  010C                     	;# 
   477  010E                     	;# 
   478  0111                     	;# 
   479  0112                     	;# 
   480  0113                     	;# 
   481  0114                     	;# 
   482  0115                     	;# 
   483  0116                     	;# 
   484  0117                     	;# 
   485  0118                     	;# 
   486  0119                     	;# 
   487  018C                     	;# 
   488  018E                     	;# 
   489  0197                     	;# 
   490  0199                     	;# 
   491  0199                     	;# 
   492  0199                     	;# 
   493  019A                     	;# 
   494  019A                     	;# 
   495  019A                     	;# 
   496  019B                     	;# 
   497  019B                     	;# 
   498  019B                     	;# 
   499  019B                     	;# 
   500  019B                     	;# 
   501  019C                     	;# 
   502  019C                     	;# 
   503  019C                     	;# 
   504  019D                     	;# 
   505  019D                     	;# 
   506  019D                     	;# 
   507  019E                     	;# 
   508  019E                     	;# 
   509  019E                     	;# 
   510  019F                     	;# 
   511  019F                     	;# 
   512  019F                     	;# 
   513  019F                     	;# 
   514  019F                     	;# 
   515  020C                     	;# 
   516  020E                     	;# 
   517  0211                     	;# 
   518  0211                     	;# 
   519  0212                     	;# 
   520  0212                     	;# 
   521  0213                     	;# 
   522  0213                     	;# 
   523  0214                     	;# 
   524  0214                     	;# 
   525  0215                     	;# 
   526  0215                     	;# 
   527  0215                     	;# 
   528  0215                     	;# 
   529  0216                     	;# 
   530  0216                     	;# 
   531  0217                     	;# 
   532  0217                     	;# 
   533  0219                     	;# 
   534  021A                     	;# 
   535  021B                     	;# 
   536  021C                     	;# 
   537  021D                     	;# 
   538  021D                     	;# 
   539  021E                     	;# 
   540  021F                     	;# 
   541  028C                     	;# 
   542  028E                     	;# 
   543  0291                     	;# 
   544  0291                     	;# 
   545  0292                     	;# 
   546  0293                     	;# 
   547  0294                     	;# 
   548  0295                     	;# 
   549  0295                     	;# 
   550  0296                     	;# 
   551  0297                     	;# 
   552  0298                     	;# 
   553  029F                     	;# 
   554  030C                     	;# 
   555  030E                     	;# 
   556  0311                     	;# 
   557  0311                     	;# 
   558  0312                     	;# 
   559  0313                     	;# 
   560  0314                     	;# 
   561  0315                     	;# 
   562  0315                     	;# 
   563  0316                     	;# 
   564  0317                     	;# 
   565  0318                     	;# 
   566  038C                     	;# 
   567  038E                     	;# 
   568  0391                     	;# 
   569  0392                     	;# 
   570  0393                     	;# 
   571  0397                     	;# 
   572  0398                     	;# 
   573  0399                     	;# 
   574  039A                     	;# 
   575  039C                     	;# 
   576  039D                     	;# 
   577  039E                     	;# 
   578  039F                     	;# 
   579  0411                     	;# 
   580  0411                     	;# 
   581  0412                     	;# 
   582  0413                     	;# 
   583  0414                     	;# 
   584  0415                     	;# 
   585  0416                     	;# 
   586  0417                     	;# 
   587  0418                     	;# 
   588  0418                     	;# 
   589  0419                     	;# 
   590  041A                     	;# 
   591  041B                     	;# 
   592  041C                     	;# 
   593  041D                     	;# 
   594  041E                     	;# 
   595  041F                     	;# 
   596  0498                     	;# 
   597  0498                     	;# 
   598  0499                     	;# 
   599  049A                     	;# 
   600  049B                     	;# 
   601  049B                     	;# 
   602  049C                     	;# 
   603  049D                     	;# 
   604  049E                     	;# 
   605  049F                     	;# 
   606  0617                     	;# 
   607  0618                     	;# 
   608  0619                     	;# 
   609  0619                     	;# 
   610  061A                     	;# 
   611  061B                     	;# 
   612  061C                     	;# 
   613  061C                     	;# 
   614  061F                     	;# 
   615  0691                     	;# 
   616  0692                     	;# 
   617  0693                     	;# 
   618  0694                     	;# 
   619  0695                     	;# 
   620  0696                     	;# 
   621  0697                     	;# 
   622  0698                     	;# 
   623  0699                     	;# 
   624  0711                     	;# 
   625  0712                     	;# 
   626  0713                     	;# 
   627  0714                     	;# 
   628  0715                     	;# 
   629  0716                     	;# 
   630  0717                     	;# 
   631  0718                     	;# 
   632  0719                     	;# 
   633  0891                     	;# 
   634  0891                     	;# 
   635  0891                     	;# 
   636  0891                     	;# 
   637  0891                     	;# 
   638  0891                     	;# 
   639  0892                     	;# 
   640  0892                     	;# 
   641  0892                     	;# 
   642  0893                     	;# 
   643  0893                     	;# 
   644  0893                     	;# 
   645  0893                     	;# 
   646  0893                     	;# 
   647  0893                     	;# 
   648  0894                     	;# 
   649  0894                     	;# 
   650  0894                     	;# 
   651  0895                     	;# 
   652  0895                     	;# 
   653  0895                     	;# 
   654  0896                     	;# 
   655  0896                     	;# 
   656  0896                     	;# 
   657  089B                     	;# 
   658  0911                     	;# 
   659  0912                     	;# 
   660  0913                     	;# 
   661  0914                     	;# 
   662  0915                     	;# 
   663  0916                     	;# 
   664  0918                     	;# 
   665  0919                     	;# 
   666  091A                     	;# 
   667  091B                     	;# 
   668  091C                     	;# 
   669  091D                     	;# 
   670  091E                     	;# 
   671  091F                     	;# 
   672  0E0F                     	;# 
   673  0E10                     	;# 
   674  0E11                     	;# 
   675  0E12                     	;# 
   676  0E13                     	;# 
   677  0E14                     	;# 
   678  0E15                     	;# 
   679  0E16                     	;# 
   680  0E17                     	;# 
   681  0E18                     	;# 
   682  0E19                     	;# 
   683  0E1A                     	;# 
   684  0E1B                     	;# 
   685  0E1C                     	;# 
   686  0E1D                     	;# 
   687  0E1E                     	;# 
   688  0E1F                     	;# 
   689  0E20                     	;# 
   690  0E21                     	;# 
   691  0E22                     	;# 
   692  0E24                     	;# 
   693  0E25                     	;# 
   694  0E28                     	;# 
   695  0E29                     	;# 
   696  0E2A                     	;# 
   697  0E2B                     	;# 
   698  0E2C                     	;# 
   699  0E2D                     	;# 
   700  0E2E                     	;# 
   701  0E2F                     	;# 
   702  0E90                     	;# 
   703  0E91                     	;# 
   704  0E92                     	;# 
   705  0E94                     	;# 
   706  0E95                     	;# 
   707  0EA0                     	;# 
   708  0EA1                     	;# 
   709  0EA2                     	;# 
   710  0EA3                     	;# 
   711  0EA4                     	;# 
   712  0EA5                     	;# 
   713  0F0F                     	;# 
   714  0F10                     	;# 
   715  0F11                     	;# 
   716  0F12                     	;# 
   717  0F13                     	;# 
   718  0F14                     	;# 
   719  0F15                     	;# 
   720  0F16                     	;# 
   721  0F17                     	;# 
   722  0F18                     	;# 
   723  0F19                     	;# 
   724  0F1A                     	;# 
   725  0F1B                     	;# 
   726  0F1C                     	;# 
   727  0F1D                     	;# 
   728  0F1E                     	;# 
   729  0F1F                     	;# 
   730  0F20                     	;# 
   731  0F21                     	;# 
   732  0F22                     	;# 
   733  0F23                     	;# 
   734  0F24                     	;# 
   735  0F25                     	;# 
   736  0F26                     	;# 
   737  0F27                     	;# 
   738  0F28                     	;# 
   739  0F29                     	;# 
   740  0F2A                     	;# 
   741  0F2B                     	;# 
   742  0F2C                     	;# 
   743  0F2D                     	;# 
   744  0F2E                     	;# 
   745  0F2F                     	;# 
   746  0F30                     	;# 
   747  0F31                     	;# 
   748  0F32                     	;# 
   749  0F33                     	;# 
   750  0F34                     	;# 
   751  0F35                     	;# 
   752  0F36                     	;# 
   753  0F37                     	;# 
   754  0FE4                     	;# 
   755  0FE5                     	;# 
   756  0FE6                     	;# 
   757  0FE7                     	;# 
   758  0FE8                     	;# 
   759  0FE9                     	;# 
   760  0FEA                     	;# 
   761  0FEB                     	;# 
   762  0FED                     	;# 
   763  0FEE                     	;# 
   764  0FEF                     	;# 
   765  0000                     	;# 
   766  0001                     	;# 
   767  0002                     	;# 
   768  0003                     	;# 
   769  0004                     	;# 
   770  0005                     	;# 
   771  0006                     	;# 
   772  0007                     	;# 
   773  0008                     	;# 
   774  0009                     	;# 
   775  000A                     	;# 
   776  000B                     	;# 
   777  000C                     	;# 
   778  000E                     	;# 
   779  0010                     	;# 
   780  0011                     	;# 
   781  0012                     	;# 
   782  0013                     	;# 
   783  0014                     	;# 
   784  0015                     	;# 
   785  0015                     	;# 
   786  0016                     	;# 
   787  0016                     	;# 
   788  0017                     	;# 
   789  0018                     	;# 
   790  0019                     	;# 
   791  0019                     	;# 
   792  001A                     	;# 
   793  001B                     	;# 
   794  001C                     	;# 
   795  001D                     	;# 
   796  001E                     	;# 
   797  001F                     	;# 
   798  008C                     	;# 
   799  008E                     	;# 
   800  0090                     	;# 
   801  0091                     	;# 
   802  0092                     	;# 
   803  0093                     	;# 
   804  0094                     	;# 
   805  0097                     	;# 
   806  009B                     	;# 
   807  009B                     	;# 
   808  009C                     	;# 
   809  009D                     	;# 
   810  009E                     	;# 
   811  009F                     	;# 
   812  010C                     	;# 
   813  010E                     	;# 
   814  0111                     	;# 
   815  0112                     	;# 
   816  0113                     	;# 
   817  0114                     	;# 
   818  0115                     	;# 
   819  0116                     	;# 
   820  0117                     	;# 
   821  0118                     	;# 
   822  0119                     	;# 
   823  018C                     	;# 
   824  018E                     	;# 
   825  0197                     	;# 
   826  0199                     	;# 
   827  0199                     	;# 
   828  0199                     	;# 
   829  019A                     	;# 
   830  019A                     	;# 
   831  019A                     	;# 
   832  019B                     	;# 
   833  019B                     	;# 
   834  019B                     	;# 
   835  019B                     	;# 
   836  019B                     	;# 
   837  019C                     	;# 
   838  019C                     	;# 
   839  019C                     	;# 
   840  019D                     	;# 
   841  019D                     	;# 
   842  019D                     	;# 
   843  019E                     	;# 
   844  019E                     	;# 
   845  019E                     	;# 
   846  019F                     	;# 
   847  019F                     	;# 
   848  019F                     	;# 
   849  019F                     	;# 
   850  019F                     	;# 
   851  020C                     	;# 
   852  020E                     	;# 
   853  0211                     	;# 
   854  0211                     	;# 
   855  0212                     	;# 
   856  0212                     	;# 
   857  0213                     	;# 
   858  0213                     	;# 
   859  0214                     	;# 
   860  0214                     	;# 
   861  0215                     	;# 
   862  0215                     	;# 
   863  0215                     	;# 
   864  0215                     	;# 
   865  0216                     	;# 
   866  0216                     	;# 
   867  0217                     	;# 
   868  0217                     	;# 
   869  0219                     	;# 
   870  021A                     	;# 
   871  021B                     	;# 
   872  021C                     	;# 
   873  021D                     	;# 
   874  021D                     	;# 
   875  021E                     	;# 
   876  021F                     	;# 
   877  028C                     	;# 
   878  028E                     	;# 
   879  0291                     	;# 
   880  0291                     	;# 
   881  0292                     	;# 
   882  0293                     	;# 
   883  0294                     	;# 
   884  0295                     	;# 
   885  0295                     	;# 
   886  0296                     	;# 
   887  0297                     	;# 
   888  0298                     	;# 
   889  029F                     	;# 
   890  030C                     	;# 
   891  030E                     	;# 
   892  0311                     	;# 
   893  0311                     	;# 
   894  0312                     	;# 
   895  0313                     	;# 
   896  0314                     	;# 
   897  0315                     	;# 
   898  0315                     	;# 
   899  0316                     	;# 
   900  0317                     	;# 
   901  0318                     	;# 
   902  038C                     	;# 
   903  038E                     	;# 
   904  0391                     	;# 
   905  0392                     	;# 
   906  0393                     	;# 
   907  0397                     	;# 
   908  0398                     	;# 
   909  0399                     	;# 
   910  039A                     	;# 
   911  039C                     	;# 
   912  039D                     	;# 
   913  039E                     	;# 
   914  039F                     	;# 
   915  0411                     	;# 
   916  0411                     	;# 
   917  0412                     	;# 
   918  0413                     	;# 
   919  0414                     	;# 
   920  0415                     	;# 
   921  0416                     	;# 
   922  0417                     	;# 
   923  0418                     	;# 
   924  0418                     	;# 
   925  0419                     	;# 
   926  041A                     	;# 
   927  041B                     	;# 
   928  041C                     	;# 
   929  041D                     	;# 
   930  041E                     	;# 
   931  041F                     	;# 
   932  0498                     	;# 
   933  0498                     	;# 
   934  0499                     	;# 
   935  049A                     	;# 
   936  049B                     	;# 
   937  049B                     	;# 
   938  049C                     	;# 
   939  049D                     	;# 
   940  049E                     	;# 
   941  049F                     	;# 
   942  0617                     	;# 
   943  0618                     	;# 
   944  0619                     	;# 
   945  0619                     	;# 
   946  061A                     	;# 
   947  061B                     	;# 
   948  061C                     	;# 
   949  061C                     	;# 
   950  061F                     	;# 
   951  0691                     	;# 
   952  0692                     	;# 
   953  0693                     	;# 
   954  0694                     	;# 
   955  0695                     	;# 
   956  0696                     	;# 
   957  0697                     	;# 
   958  0698                     	;# 
   959  0699                     	;# 
   960  0711                     	;# 
   961  0712                     	;# 
   962  0713                     	;# 
   963  0714                     	;# 
   964  0715                     	;# 
   965  0716                     	;# 
   966  0717                     	;# 
   967  0718                     	;# 
   968  0719                     	;# 
   969  0891                     	;# 
   970  0891                     	;# 
   971  0891                     	;# 
   972  0891                     	;# 
   973  0891                     	;# 
   974  0891                     	;# 
   975  0892                     	;# 
   976  0892                     	;# 
   977  0892                     	;# 
   978  0893                     	;# 
   979  0893                     	;# 
   980  0893                     	;# 
   981  0893                     	;# 
   982  0893                     	;# 
   983  0893                     	;# 
   984  0894                     	;# 
   985  0894                     	;# 
   986  0894                     	;# 
   987  0895                     	;# 
   988  0895                     	;# 
   989  0895                     	;# 
   990  0896                     	;# 
   991  0896                     	;# 
   992  0896                     	;# 
   993  089B                     	;# 
   994  0911                     	;# 
   995  0912                     	;# 
   996  0913                     	;# 
   997  0914                     	;# 
   998  0915                     	;# 
   999  0916                     	;# 
  1000  0918                     	;# 
  1001  0919                     	;# 
  1002  091A                     	;# 
  1003  091B                     	;# 
  1004  091C                     	;# 
  1005  091D                     	;# 
  1006  091E                     	;# 
  1007  091F                     	;# 
  1008  0E0F                     	;# 
  1009  0E10                     	;# 
  1010  0E11                     	;# 
  1011  0E12                     	;# 
  1012  0E13                     	;# 
  1013  0E14                     	;# 
  1014  0E15                     	;# 
  1015  0E16                     	;# 
  1016  0E17                     	;# 
  1017  0E18                     	;# 
  1018  0E19                     	;# 
  1019  0E1A                     	;# 
  1020  0E1B                     	;# 
  1021  0E1C                     	;# 
  1022  0E1D                     	;# 
  1023  0E1E                     	;# 
  1024  0E1F                     	;# 
  1025  0E20                     	;# 
  1026  0E21                     	;# 
  1027  0E22                     	;# 
  1028  0E24                     	;# 
  1029  0E25                     	;# 
  1030  0E28                     	;# 
  1031  0E29                     	;# 
  1032  0E2A                     	;# 
  1033  0E2B                     	;# 
  1034  0E2C                     	;# 
  1035  0E2D                     	;# 
  1036  0E2E                     	;# 
  1037  0E2F                     	;# 
  1038  0E90                     	;# 
  1039  0E91                     	;# 
  1040  0E92                     	;# 
  1041  0E94                     	;# 
  1042  0E95                     	;# 
  1043  0EA0                     	;# 
  1044  0EA1                     	;# 
  1045  0EA2                     	;# 
  1046  0EA3                     	;# 
  1047  0EA4                     	;# 
  1048  0EA5                     	;# 
  1049  0F0F                     	;# 
  1050  0F10                     	;# 
  1051  0F11                     	;# 
  1052  0F12                     	;# 
  1053  0F13                     	;# 
  1054  0F14                     	;# 
  1055  0F15                     	;# 
  1056  0F16                     	;# 
  1057  0F17                     	;# 
  1058  0F18                     	;# 
  1059  0F19                     	;# 
  1060  0F1A                     	;# 
  1061  0F1B                     	;# 
  1062  0F1C                     	;# 
  1063  0F1D                     	;# 
  1064  0F1E                     	;# 
  1065  0F1F                     	;# 
  1066  0F20                     	;# 
  1067  0F21                     	;# 
  1068  0F22                     	;# 
  1069  0F23                     	;# 
  1070  0F24                     	;# 
  1071  0F25                     	;# 
  1072  0F26                     	;# 
  1073  0F27                     	;# 
  1074  0F28                     	;# 
  1075  0F29                     	;# 
  1076  0F2A                     	;# 
  1077  0F2B                     	;# 
  1078  0F2C                     	;# 
  1079  0F2D                     	;# 
  1080  0F2E                     	;# 
  1081  0F2F                     	;# 
  1082  0F30                     	;# 
  1083  0F31                     	;# 
  1084  0F32                     	;# 
  1085  0F33                     	;# 
  1086  0F34                     	;# 
  1087  0F35                     	;# 
  1088  0F36                     	;# 
  1089  0F37                     	;# 
  1090  0FE4                     	;# 
  1091  0FE5                     	;# 
  1092  0FE6                     	;# 
  1093  0FE7                     	;# 
  1094  0FE8                     	;# 
  1095  0FE9                     	;# 
  1096  0FEA                     	;# 
  1097  0FEB                     	;# 
  1098  0FED                     	;# 
  1099  0FEE                     	;# 
  1100  0FEF                     	;# 
  1101  0000                     	;# 
  1102  0001                     	;# 
  1103  0002                     	;# 
  1104  0003                     	;# 
  1105  0004                     	;# 
  1106  0005                     	;# 
  1107  0006                     	;# 
  1108  0007                     	;# 
  1109  0008                     	;# 
  1110  0009                     	;# 
  1111  000A                     	;# 
  1112  000B                     	;# 
  1113  000C                     	;# 
  1114  000E                     	;# 
  1115  0010                     	;# 
  1116  0011                     	;# 
  1117  0012                     	;# 
  1118  0013                     	;# 
  1119  0014                     	;# 
  1120  0015                     	;# 
  1121  0015                     	;# 
  1122  0016                     	;# 
  1123  0016                     	;# 
  1124  0017                     	;# 
  1125  0018                     	;# 
  1126  0019                     	;# 
  1127  0019                     	;# 
  1128  001A                     	;# 
  1129  001B                     	;# 
  1130  001C                     	;# 
  1131  001D                     	;# 
  1132  001E                     	;# 
  1133  001F                     	;# 
  1134  008C                     	;# 
  1135  008E                     	;# 
  1136  0090                     	;# 
  1137  0091                     	;# 
  1138  0092                     	;# 
  1139  0093                     	;# 
  1140  0094                     	;# 
  1141  0097                     	;# 
  1142  009B                     	;# 
  1143  009B                     	;# 
  1144  009C                     	;# 
  1145  009D                     	;# 
  1146  009E                     	;# 
  1147  009F                     	;# 
  1148  010C                     	;# 
  1149  010E                     	;# 
  1150  0111                     	;# 
  1151  0112                     	;# 
  1152  0113                     	;# 
  1153  0114                     	;# 
  1154  0115                     	;# 
  1155  0116                     	;# 
  1156  0117                     	;# 
  1157  0118                     	;# 
  1158  0119                     	;# 
  1159  018C                     	;# 
  1160  018E                     	;# 
  1161  0197                     	;# 
  1162  0199                     	;# 
  1163  0199                     	;# 
  1164  0199                     	;# 
  1165  019A                     	;# 
  1166  019A                     	;# 
  1167  019A                     	;# 
  1168  019B                     	;# 
  1169  019B                     	;# 
  1170  019B                     	;# 
  1171  019B                     	;# 
  1172  019B                     	;# 
  1173  019C                     	;# 
  1174  019C                     	;# 
  1175  019C                     	;# 
  1176  019D                     	;# 
  1177  019D                     	;# 
  1178  019D                     	;# 
  1179  019E                     	;# 
  1180  019E                     	;# 
  1181  019E                     	;# 
  1182  019F                     	;# 
  1183  019F                     	;# 
  1184  019F                     	;# 
  1185  019F                     	;# 
  1186  019F                     	;# 
  1187  020C                     	;# 
  1188  020E                     	;# 
  1189  0211                     	;# 
  1190  0211                     	;# 
  1191  0212                     	;# 
  1192  0212                     	;# 
  1193  0213                     	;# 
  1194  0213                     	;# 
  1195  0214                     	;# 
  1196  0214                     	;# 
  1197  0215                     	;# 
  1198  0215                     	;# 
  1199  0215                     	;# 
  1200  0215                     	;# 
  1201  0216                     	;# 
  1202  0216                     	;# 
  1203  0217                     	;# 
  1204  0217                     	;# 
  1205  0219                     	;# 
  1206  021A                     	;# 
  1207  021B                     	;# 
  1208  021C                     	;# 
  1209  021D                     	;# 
  1210  021D                     	;# 
  1211  021E                     	;# 
  1212  021F                     	;# 
  1213  028C                     	;# 
  1214  028E                     	;# 
  1215  0291                     	;# 
  1216  0291                     	;# 
  1217  0292                     	;# 
  1218  0293                     	;# 
  1219  0294                     	;# 
  1220  0295                     	;# 
  1221  0295                     	;# 
  1222  0296                     	;# 
  1223  0297                     	;# 
  1224  0298                     	;# 
  1225  029F                     	;# 
  1226  030C                     	;# 
  1227  030E                     	;# 
  1228  0311                     	;# 
  1229  0311                     	;# 
  1230  0312                     	;# 
  1231  0313                     	;# 
  1232  0314                     	;# 
  1233  0315                     	;# 
  1234  0315                     	;# 
  1235  0316                     	;# 
  1236  0317                     	;# 
  1237  0318                     	;# 
  1238  038C                     	;# 
  1239  038E                     	;# 
  1240  0391                     	;# 
  1241  0392                     	;# 
  1242  0393                     	;# 
  1243  0397                     	;# 
  1244  0398                     	;# 
  1245  0399                     	;# 
  1246  039A                     	;# 
  1247  039C                     	;# 
  1248  039D                     	;# 
  1249  039E                     	;# 
  1250  039F                     	;# 
  1251  0411                     	;# 
  1252  0411                     	;# 
  1253  0412                     	;# 
  1254  0413                     	;# 
  1255  0414                     	;# 
  1256  0415                     	;# 
  1257  0416                     	;# 
  1258  0417                     	;# 
  1259  0418                     	;# 
  1260  0418                     	;# 
  1261  0419                     	;# 
  1262  041A                     	;# 
  1263  041B                     	;# 
  1264  041C                     	;# 
  1265  041D                     	;# 
  1266  041E                     	;# 
  1267  041F                     	;# 
  1268  0498                     	;# 
  1269  0498                     	;# 
  1270  0499                     	;# 
  1271  049A                     	;# 
  1272  049B                     	;# 
  1273  049B                     	;# 
  1274  049C                     	;# 
  1275  049D                     	;# 
  1276  049E                     	;# 
  1277  049F                     	;# 
  1278  0617                     	;# 
  1279  0618                     	;# 
  1280  0619                     	;# 
  1281  0619                     	;# 
  1282  061A                     	;# 
  1283  061B                     	;# 
  1284  061C                     	;# 
  1285  061C                     	;# 
  1286  061F                     	;# 
  1287  0691                     	;# 
  1288  0692                     	;# 
  1289  0693                     	;# 
  1290  0694                     	;# 
  1291  0695                     	;# 
  1292  0696                     	;# 
  1293  0697                     	;# 
  1294  0698                     	;# 
  1295  0699                     	;# 
  1296  0711                     	;# 
  1297  0712                     	;# 
  1298  0713                     	;# 
  1299  0714                     	;# 
  1300  0715                     	;# 
  1301  0716                     	;# 
  1302  0717                     	;# 
  1303  0718                     	;# 
  1304  0719                     	;# 
  1305  0891                     	;# 
  1306  0891                     	;# 
  1307  0891                     	;# 
  1308  0891                     	;# 
  1309  0891                     	;# 
  1310  0891                     	;# 
  1311  0892                     	;# 
  1312  0892                     	;# 
  1313  0892                     	;# 
  1314  0893                     	;# 
  1315  0893                     	;# 
  1316  0893                     	;# 
  1317  0893                     	;# 
  1318  0893                     	;# 
  1319  0893                     	;# 
  1320  0894                     	;# 
  1321  0894                     	;# 
  1322  0894                     	;# 
  1323  0895                     	;# 
  1324  0895                     	;# 
  1325  0895                     	;# 
  1326  0896                     	;# 
  1327  0896                     	;# 
  1328  0896                     	;# 
  1329  089B                     	;# 
  1330  0911                     	;# 
  1331  0912                     	;# 
  1332  0913                     	;# 
  1333  0914                     	;# 
  1334  0915                     	;# 
  1335  0916                     	;# 
  1336  0918                     	;# 
  1337  0919                     	;# 
  1338  091A                     	;# 
  1339  091B                     	;# 
  1340  091C                     	;# 
  1341  091D                     	;# 
  1342  091E                     	;# 
  1343  091F                     	;# 
  1344  0E0F                     	;# 
  1345  0E10                     	;# 
  1346  0E11                     	;# 
  1347  0E12                     	;# 
  1348  0E13                     	;# 
  1349  0E14                     	;# 
  1350  0E15                     	;# 
  1351  0E16                     	;# 
  1352  0E17                     	;# 
  1353  0E18                     	;# 
  1354  0E19                     	;# 
  1355  0E1A                     	;# 
  1356  0E1B                     	;# 
  1357  0E1C                     	;# 
  1358  0E1D                     	;# 
  1359  0E1E                     	;# 
  1360  0E1F                     	;# 
  1361  0E20                     	;# 
  1362  0E21                     	;# 
  1363  0E22                     	;# 
  1364  0E24                     	;# 
  1365  0E25                     	;# 
  1366  0E28                     	;# 
  1367  0E29                     	;# 
  1368  0E2A                     	;# 
  1369  0E2B                     	;# 
  1370  0E2C                     	;# 
  1371  0E2D                     	;# 
  1372  0E2E                     	;# 
  1373  0E2F                     	;# 
  1374  0E90                     	;# 
  1375  0E91                     	;# 
  1376  0E92                     	;# 
  1377  0E94                     	;# 
  1378  0E95                     	;# 
  1379  0EA0                     	;# 
  1380  0EA1                     	;# 
  1381  0EA2                     	;# 
  1382  0EA3                     	;# 
  1383  0EA4                     	;# 
  1384  0EA5                     	;# 
  1385  0F0F                     	;# 
  1386  0F10                     	;# 
  1387  0F11                     	;# 
  1388  0F12                     	;# 
  1389  0F13                     	;# 
  1390  0F14                     	;# 
  1391  0F15                     	;# 
  1392  0F16                     	;# 
  1393  0F17                     	;# 
  1394  0F18                     	;# 
  1395  0F19                     	;# 
  1396  0F1A                     	;# 
  1397  0F1B                     	;# 
  1398  0F1C                     	;# 
  1399  0F1D                     	;# 
  1400  0F1E                     	;# 
  1401  0F1F                     	;# 
  1402  0F20                     	;# 
  1403  0F21                     	;# 
  1404  0F22                     	;# 
  1405  0F23                     	;# 
  1406  0F24                     	;# 
  1407  0F25                     	;# 
  1408  0F26                     	;# 
  1409  0F27                     	;# 
  1410  0F28                     	;# 
  1411  0F29                     	;# 
  1412  0F2A                     	;# 
  1413  0F2B                     	;# 
  1414  0F2C                     	;# 
  1415  0F2D                     	;# 
  1416  0F2E                     	;# 
  1417  0F2F                     	;# 
  1418  0F30                     	;# 
  1419  0F31                     	;# 
  1420  0F32                     	;# 
  1421  0F33                     	;# 
  1422  0F34                     	;# 
  1423  0F35                     	;# 
  1424  0F36                     	;# 
  1425  0F37                     	;# 
  1426  0FE4                     	;# 
  1427  0FE5                     	;# 
  1428  0FE6                     	;# 
  1429  0FE7                     	;# 
  1430  0FE8                     	;# 
  1431  0FE9                     	;# 
  1432  0FEA                     	;# 
  1433  0FEB                     	;# 
  1434  0FED                     	;# 
  1435  0FEE                     	;# 
  1436  0FEF                     	;# 
  1437  0000                     	;# 
  1438  0001                     	;# 
  1439  0002                     	;# 
  1440  0003                     	;# 
  1441  0004                     	;# 
  1442  0005                     	;# 
  1443  0006                     	;# 
  1444  0007                     	;# 
  1445  0008                     	;# 
  1446  0009                     	;# 
  1447  000A                     	;# 
  1448  000B                     	;# 
  1449  000C                     	;# 
  1450  000E                     	;# 
  1451  0010                     	;# 
  1452  0011                     	;# 
  1453  0012                     	;# 
  1454  0013                     	;# 
  1455  0014                     	;# 
  1456  0015                     	;# 
  1457  0015                     	;# 
  1458  0016                     	;# 
  1459  0016                     	;# 
  1460  0017                     	;# 
  1461  0018                     	;# 
  1462  0019                     	;# 
  1463  0019                     	;# 
  1464  001A                     	;# 
  1465  001B                     	;# 
  1466  001C                     	;# 
  1467  001D                     	;# 
  1468  001E                     	;# 
  1469  001F                     	;# 
  1470  008C                     	;# 
  1471  008E                     	;# 
  1472  0090                     	;# 
  1473  0091                     	;# 
  1474  0092                     	;# 
  1475  0093                     	;# 
  1476  0094                     	;# 
  1477  0097                     	;# 
  1478  009B                     	;# 
  1479  009B                     	;# 
  1480  009C                     	;# 
  1481  009D                     	;# 
  1482  009E                     	;# 
  1483  009F                     	;# 
  1484  010C                     	;# 
  1485  010E                     	;# 
  1486  0111                     	;# 
  1487  0112                     	;# 
  1488  0113                     	;# 
  1489  0114                     	;# 
  1490  0115                     	;# 
  1491  0116                     	;# 
  1492  0117                     	;# 
  1493  0118                     	;# 
  1494  0119                     	;# 
  1495  018C                     	;# 
  1496  018E                     	;# 
  1497  0197                     	;# 
  1498  0199                     	;# 
  1499  0199                     	;# 
  1500  0199                     	;# 
  1501  019A                     	;# 
  1502  019A                     	;# 
  1503  019A                     	;# 
  1504  019B                     	;# 
  1505  019B                     	;# 
  1506  019B                     	;# 
  1507  019B                     	;# 
  1508  019B                     	;# 
  1509  019C                     	;# 
  1510  019C                     	;# 
  1511  019C                     	;# 
  1512  019D                     	;# 
  1513  019D                     	;# 
  1514  019D                     	;# 
  1515  019E                     	;# 
  1516  019E                     	;# 
  1517  019E                     	;# 
  1518  019F                     	;# 
  1519  019F                     	;# 
  1520  019F                     	;# 
  1521  019F                     	;# 
  1522  019F                     	;# 
  1523  020C                     	;# 
  1524  020E                     	;# 
  1525  0211                     	;# 
  1526  0211                     	;# 
  1527  0212                     	;# 
  1528  0212                     	;# 
  1529  0213                     	;# 
  1530  0213                     	;# 
  1531  0214                     	;# 
  1532  0214                     	;# 
  1533  0215                     	;# 
  1534  0215                     	;# 
  1535  0215                     	;# 
  1536  0215                     	;# 
  1537  0216                     	;# 
  1538  0216                     	;# 
  1539  0217                     	;# 
  1540  0217                     	;# 
  1541  0219                     	;# 
  1542  021A                     	;# 
  1543  021B                     	;# 
  1544  021C                     	;# 
  1545  021D                     	;# 
  1546  021D                     	;# 
  1547  021E                     	;# 
  1548  021F                     	;# 
  1549  028C                     	;# 
  1550  028E                     	;# 
  1551  0291                     	;# 
  1552  0291                     	;# 
  1553  0292                     	;# 
  1554  0293                     	;# 
  1555  0294                     	;# 
  1556  0295                     	;# 
  1557  0295                     	;# 
  1558  0296                     	;# 
  1559  0297                     	;# 
  1560  0298                     	;# 
  1561  029F                     	;# 
  1562  030C                     	;# 
  1563  030E                     	;# 
  1564  0311                     	;# 
  1565  0311                     	;# 
  1566  0312                     	;# 
  1567  0313                     	;# 
  1568  0314                     	;# 
  1569  0315                     	;# 
  1570  0315                     	;# 
  1571  0316                     	;# 
  1572  0317                     	;# 
  1573  0318                     	;# 
  1574  038C                     	;# 
  1575  038E                     	;# 
  1576  0391                     	;# 
  1577  0392                     	;# 
  1578  0393                     	;# 
  1579  0397                     	;# 
  1580  0398                     	;# 
  1581  0399                     	;# 
  1582  039A                     	;# 
  1583  039C                     	;# 
  1584  039D                     	;# 
  1585  039E                     	;# 
  1586  039F                     	;# 
  1587  0411                     	;# 
  1588  0411                     	;# 
  1589  0412                     	;# 
  1590  0413                     	;# 
  1591  0414                     	;# 
  1592  0415                     	;# 
  1593  0416                     	;# 
  1594  0417                     	;# 
  1595  0418                     	;# 
  1596  0418                     	;# 
  1597  0419                     	;# 
  1598  041A                     	;# 
  1599  041B                     	;# 
  1600  041C                     	;# 
  1601  041D                     	;# 
  1602  041E                     	;# 
  1603  041F                     	;# 
  1604  0498                     	;# 
  1605  0498                     	;# 
  1606  0499                     	;# 
  1607  049A                     	;# 
  1608  049B                     	;# 
  1609  049B                     	;# 
  1610  049C                     	;# 
  1611  049D                     	;# 
  1612  049E                     	;# 
  1613  049F                     	;# 
  1614  0617                     	;# 
  1615  0618                     	;# 
  1616  0619                     	;# 
  1617  0619                     	;# 
  1618  061A                     	;# 
  1619  061B                     	;# 
  1620  061C                     	;# 
  1621  061C                     	;# 
  1622  061F                     	;# 
  1623  0691                     	;# 
  1624  0692                     	;# 
  1625  0693                     	;# 
  1626  0694                     	;# 
  1627  0695                     	;# 
  1628  0696                     	;# 
  1629  0697                     	;# 
  1630  0698                     	;# 
  1631  0699                     	;# 
  1632  0711                     	;# 
  1633  0712                     	;# 
  1634  0713                     	;# 
  1635  0714                     	;# 
  1636  0715                     	;# 
  1637  0716                     	;# 
  1638  0717                     	;# 
  1639  0718                     	;# 
  1640  0719                     	;# 
  1641  0891                     	;# 
  1642  0891                     	;# 
  1643  0891                     	;# 
  1644  0891                     	;# 
  1645  0891                     	;# 
  1646  0891                     	;# 
  1647  0892                     	;# 
  1648  0892                     	;# 
  1649  0892                     	;# 
  1650  0893                     	;# 
  1651  0893                     	;# 
  1652  0893                     	;# 
  1653  0893                     	;# 
  1654  0893                     	;# 
  1655  0893                     	;# 
  1656  0894                     	;# 
  1657  0894                     	;# 
  1658  0894                     	;# 
  1659  0895                     	;# 
  1660  0895                     	;# 
  1661  0895                     	;# 
  1662  0896                     	;# 
  1663  0896                     	;# 
  1664  0896                     	;# 
  1665  089B                     	;# 
  1666  0911                     	;# 
  1667  0912                     	;# 
  1668  0913                     	;# 
  1669  0914                     	;# 
  1670  0915                     	;# 
  1671  0916                     	;# 
  1672  0918                     	;# 
  1673  0919                     	;# 
  1674  091A                     	;# 
  1675  091B                     	;# 
  1676  091C                     	;# 
  1677  091D                     	;# 
  1678  091E                     	;# 
  1679  091F                     	;# 
  1680  0E0F                     	;# 
  1681  0E10                     	;# 
  1682  0E11                     	;# 
  1683  0E12                     	;# 
  1684  0E13                     	;# 
  1685  0E14                     	;# 
  1686  0E15                     	;# 
  1687  0E16                     	;# 
  1688  0E17                     	;# 
  1689  0E18                     	;# 
  1690  0E19                     	;# 
  1691  0E1A                     	;# 
  1692  0E1B                     	;# 
  1693  0E1C                     	;# 
  1694  0E1D                     	;# 
  1695  0E1E                     	;# 
  1696  0E1F                     	;# 
  1697  0E20                     	;# 
  1698  0E21                     	;# 
  1699  0E22                     	;# 
  1700  0E24                     	;# 
  1701  0E25                     	;# 
  1702  0E28                     	;# 
  1703  0E29                     	;# 
  1704  0E2A                     	;# 
  1705  0E2B                     	;# 
  1706  0E2C                     	;# 
  1707  0E2D                     	;# 
  1708  0E2E                     	;# 
  1709  0E2F                     	;# 
  1710  0E90                     	;# 
  1711  0E91                     	;# 
  1712  0E92                     	;# 
  1713  0E94                     	;# 
  1714  0E95                     	;# 
  1715  0EA0                     	;# 
  1716  0EA1                     	;# 
  1717  0EA2                     	;# 
  1718  0EA3                     	;# 
  1719  0EA4                     	;# 
  1720  0EA5                     	;# 
  1721  0F0F                     	;# 
  1722  0F10                     	;# 
  1723  0F11                     	;# 
  1724  0F12                     	;# 
  1725  0F13                     	;# 
  1726  0F14                     	;# 
  1727  0F15                     	;# 
  1728  0F16                     	;# 
  1729  0F17                     	;# 
  1730  0F18                     	;# 
  1731  0F19                     	;# 
  1732  0F1A                     	;# 
  1733  0F1B                     	;# 
  1734  0F1C                     	;# 
  1735  0F1D                     	;# 
  1736  0F1E                     	;# 
  1737  0F1F                     	;# 
  1738  0F20                     	;# 
  1739  0F21                     	;# 
  1740  0F22                     	;# 
  1741  0F23                     	;# 
  1742  0F24                     	;# 
  1743  0F25                     	;# 
  1744  0F26                     	;# 
  1745  0F27                     	;# 
  1746  0F28                     	;# 
  1747  0F29                     	;# 
  1748  0F2A                     	;# 
  1749  0F2B                     	;# 
  1750  0F2C                     	;# 
  1751  0F2D                     	;# 
  1752  0F2E                     	;# 
  1753  0F2F                     	;# 
  1754  0F30                     	;# 
  1755  0F31                     	;# 
  1756  0F32                     	;# 
  1757  0F33                     	;# 
  1758  0F34                     	;# 
  1759  0F35                     	;# 
  1760  0F36                     	;# 
  1761  0F37                     	;# 
  1762  0FE4                     	;# 
  1763  0FE5                     	;# 
  1764  0FE6                     	;# 
  1765  0FE7                     	;# 
  1766  0FE8                     	;# 
  1767  0FE9                     	;# 
  1768  0FEA                     	;# 
  1769  0FEB                     	;# 
  1770  0FED                     	;# 
  1771  0FEE                     	;# 
  1772  0FEF                     	;# 
  1773  0000                     	;# 
  1774  0001                     	;# 
  1775  0002                     	;# 
  1776  0003                     	;# 
  1777  0004                     	;# 
  1778  0005                     	;# 
  1779  0006                     	;# 
  1780  0007                     	;# 
  1781  0008                     	;# 
  1782  0009                     	;# 
  1783  000A                     	;# 
  1784  000B                     	;# 
  1785  000C                     	;# 
  1786  000E                     	;# 
  1787  0010                     	;# 
  1788  0011                     	;# 
  1789  0012                     	;# 
  1790  0013                     	;# 
  1791  0014                     	;# 
  1792  0015                     	;# 
  1793  0015                     	;# 
  1794  0016                     	;# 
  1795  0016                     	;# 
  1796  0017                     	;# 
  1797  0018                     	;# 
  1798  0019                     	;# 
  1799  0019                     	;# 
  1800  001A                     	;# 
  1801  001B                     	;# 
  1802  001C                     	;# 
  1803  001D                     	;# 
  1804  001E                     	;# 
  1805  001F                     	;# 
  1806  008C                     	;# 
  1807  008E                     	;# 
  1808  0090                     	;# 
  1809  0091                     	;# 
  1810  0092                     	;# 
  1811  0093                     	;# 
  1812  0094                     	;# 
  1813  0097                     	;# 
  1814  009B                     	;# 
  1815  009B                     	;# 
  1816  009C                     	;# 
  1817  009D                     	;# 
  1818  009E                     	;# 
  1819  009F                     	;# 
  1820  010C                     	;# 
  1821  010E                     	;# 
  1822  0111                     	;# 
  1823  0112                     	;# 
  1824  0113                     	;# 
  1825  0114                     	;# 
  1826  0115                     	;# 
  1827  0116                     	;# 
  1828  0117                     	;# 
  1829  0118                     	;# 
  1830  0119                     	;# 
  1831  018C                     	;# 
  1832  018E                     	;# 
  1833  0197                     	;# 
  1834  0199                     	;# 
  1835  0199                     	;# 
  1836  0199                     	;# 
  1837  019A                     	;# 
  1838  019A                     	;# 
  1839  019A                     	;# 
  1840  019B                     	;# 
  1841  019B                     	;# 
  1842  019B                     	;# 
  1843  019B                     	;# 
  1844  019B                     	;# 
  1845  019C                     	;# 
  1846  019C                     	;# 
  1847  019C                     	;# 
  1848  019D                     	;# 
  1849  019D                     	;# 
  1850  019D                     	;# 
  1851  019E                     	;# 
  1852  019E                     	;# 
  1853  019E                     	;# 
  1854  019F                     	;# 
  1855  019F                     	;# 
  1856  019F                     	;# 
  1857  019F                     	;# 
  1858  019F                     	;# 
  1859  020C                     	;# 
  1860  020E                     	;# 
  1861  0211                     	;# 
  1862  0211                     	;# 
  1863  0212                     	;# 
  1864  0212                     	;# 
  1865  0213                     	;# 
  1866  0213                     	;# 
  1867  0214                     	;# 
  1868  0214                     	;# 
  1869  0215                     	;# 
  1870  0215                     	;# 
  1871  0215                     	;# 
  1872  0215                     	;# 
  1873  0216                     	;# 
  1874  0216                     	;# 
  1875  0217                     	;# 
  1876  0217                     	;# 
  1877  0219                     	;# 
  1878  021A                     	;# 
  1879  021B                     	;# 
  1880  021C                     	;# 
  1881  021D                     	;# 
  1882  021D                     	;# 
  1883  021E                     	;# 
  1884  021F                     	;# 
  1885  028C                     	;# 
  1886  028E                     	;# 
  1887  0291                     	;# 
  1888  0291                     	;# 
  1889  0292                     	;# 
  1890  0293                     	;# 
  1891  0294                     	;# 
  1892  0295                     	;# 
  1893  0295                     	;# 
  1894  0296                     	;# 
  1895  0297                     	;# 
  1896  0298                     	;# 
  1897  029F                     	;# 
  1898  030C                     	;# 
  1899  030E                     	;# 
  1900  0311                     	;# 
  1901  0311                     	;# 
  1902  0312                     	;# 
  1903  0313                     	;# 
  1904  0314                     	;# 
  1905  0315                     	;# 
  1906  0315                     	;# 
  1907  0316                     	;# 
  1908  0317                     	;# 
  1909  0318                     	;# 
  1910  038C                     	;# 
  1911  038E                     	;# 
  1912  0391                     	;# 
  1913  0392                     	;# 
  1914  0393                     	;# 
  1915  0397                     	;# 
  1916  0398                     	;# 
  1917  0399                     	;# 
  1918  039A                     	;# 
  1919  039C                     	;# 
  1920  039D                     	;# 
  1921  039E                     	;# 
  1922  039F                     	;# 
  1923  0411                     	;# 
  1924  0411                     	;# 
  1925  0412                     	;# 
  1926  0413                     	;# 
  1927  0414                     	;# 
  1928  0415                     	;# 
  1929  0416                     	;# 
  1930  0417                     	;# 
  1931  0418                     	;# 
  1932  0418                     	;# 
  1933  0419                     	;# 
  1934  041A                     	;# 
  1935  041B                     	;# 
  1936  041C                     	;# 
  1937  041D                     	;# 
  1938  041E                     	;# 
  1939  041F                     	;# 
  1940  0498                     	;# 
  1941  0498                     	;# 
  1942  0499                     	;# 
  1943  049A                     	;# 
  1944  049B                     	;# 
  1945  049B                     	;# 
  1946  049C                     	;# 
  1947  049D                     	;# 
  1948  049E                     	;# 
  1949  049F                     	;# 
  1950  0617                     	;# 
  1951  0618                     	;# 
  1952  0619                     	;# 
  1953  0619                     	;# 
  1954  061A                     	;# 
  1955  061B                     	;# 
  1956  061C                     	;# 
  1957  061C                     	;# 
  1958  061F                     	;# 
  1959  0691                     	;# 
  1960  0692                     	;# 
  1961  0693                     	;# 
  1962  0694                     	;# 
  1963  0695                     	;# 
  1964  0696                     	;# 
  1965  0697                     	;# 
  1966  0698                     	;# 
  1967  0699                     	;# 
  1968  0711                     	;# 
  1969  0712                     	;# 
  1970  0713                     	;# 
  1971  0714                     	;# 
  1972  0715                     	;# 
  1973  0716                     	;# 
  1974  0717                     	;# 
  1975  0718                     	;# 
  1976  0719                     	;# 
  1977  0891                     	;# 
  1978  0891                     	;# 
  1979  0891                     	;# 
  1980  0891                     	;# 
  1981  0891                     	;# 
  1982  0891                     	;# 
  1983  0892                     	;# 
  1984  0892                     	;# 
  1985  0892                     	;# 
  1986  0893                     	;# 
  1987  0893                     	;# 
  1988  0893                     	;# 
  1989  0893                     	;# 
  1990  0893                     	;# 
  1991  0893                     	;# 
  1992  0894                     	;# 
  1993  0894                     	;# 
  1994  0894                     	;# 
  1995  0895                     	;# 
  1996  0895                     	;# 
  1997  0895                     	;# 
  1998  0896                     	;# 
  1999  0896                     	;# 
  2000  0896                     	;# 
  2001  089B                     	;# 
  2002  0911                     	;# 
  2003  0912                     	;# 
  2004  0913                     	;# 
  2005  0914                     	;# 
  2006  0915                     	;# 
  2007  0916                     	;# 
  2008  0918                     	;# 
  2009  0919                     	;# 
  2010  091A                     	;# 
  2011  091B                     	;# 
  2012  091C                     	;# 
  2013  091D                     	;# 
  2014  091E                     	;# 
  2015  091F                     	;# 
  2016  0E0F                     	;# 
  2017  0E10                     	;# 
  2018  0E11                     	;# 
  2019  0E12                     	;# 
  2020  0E13                     	;# 
  2021  0E14                     	;# 
  2022  0E15                     	;# 
  2023  0E16                     	;# 
  2024  0E17                     	;# 
  2025  0E18                     	;# 
  2026  0E19                     	;# 
  2027  0E1A                     	;# 
  2028  0E1B                     	;# 
  2029  0E1C                     	;# 
  2030  0E1D                     	;# 
  2031  0E1E                     	;# 
  2032  0E1F                     	;# 
  2033  0E20                     	;# 
  2034  0E21                     	;# 
  2035  0E22                     	;# 
  2036  0E24                     	;# 
  2037  0E25                     	;# 
  2038  0E28                     	;# 
  2039  0E29                     	;# 
  2040  0E2A                     	;# 
  2041  0E2B                     	;# 
  2042  0E2C                     	;# 
  2043  0E2D                     	;# 
  2044  0E2E                     	;# 
  2045  0E2F                     	;# 
  2046  0E90                     	;# 
  2047  0E91                     	;# 
  2048  0E92                     	;# 
  2049  0E94                     	;# 
  2050  0E95                     	;# 
  2051  0EA0                     	;# 
  2052  0EA1                     	;# 
  2053  0EA2                     	;# 
  2054  0EA3                     	;# 
  2055  0EA4                     	;# 
  2056  0EA5                     	;# 
  2057  0F0F                     	;# 
  2058  0F10                     	;# 
  2059  0F11                     	;# 
  2060  0F12                     	;# 
  2061  0F13                     	;# 
  2062  0F14                     	;# 
  2063  0F15                     	;# 
  2064  0F16                     	;# 
  2065  0F17                     	;# 
  2066  0F18                     	;# 
  2067  0F19                     	;# 
  2068  0F1A                     	;# 
  2069  0F1B                     	;# 
  2070  0F1C                     	;# 
  2071  0F1D                     	;# 
  2072  0F1E                     	;# 
  2073  0F1F                     	;# 
  2074  0F20                     	;# 
  2075  0F21                     	;# 
  2076  0F22                     	;# 
  2077  0F23                     	;# 
  2078  0F24                     	;# 
  2079  0F25                     	;# 
  2080  0F26                     	;# 
  2081  0F27                     	;# 
  2082  0F28                     	;# 
  2083  0F29                     	;# 
  2084  0F2A                     	;# 
  2085  0F2B                     	;# 
  2086  0F2C                     	;# 
  2087  0F2D                     	;# 
  2088  0F2E                     	;# 
  2089  0F2F                     	;# 
  2090  0F30                     	;# 
  2091  0F31                     	;# 
  2092  0F32                     	;# 
  2093  0F33                     	;# 
  2094  0F34                     	;# 
  2095  0F35                     	;# 
  2096  0F36                     	;# 
  2097  0F37                     	;# 
  2098  0FE4                     	;# 
  2099  0FE5                     	;# 
  2100  0FE6                     	;# 
  2101  0FE7                     	;# 
  2102  0FE8                     	;# 
  2103  0FE9                     	;# 
  2104  0FEA                     	;# 
  2105  0FEB                     	;# 
  2106  0FED                     	;# 
  2107  0FEE                     	;# 
  2108  0FEF                     	;# 
  2109  0000                     	;# 
  2110  0001                     	;# 
  2111  0002                     	;# 
  2112  0003                     	;# 
  2113  0004                     	;# 
  2114  0005                     	;# 
  2115  0006                     	;# 
  2116  0007                     	;# 
  2117  0008                     	;# 
  2118  0009                     	;# 
  2119  000A                     	;# 
  2120  000B                     	;# 
  2121  000C                     	;# 
  2122  000E                     	;# 
  2123  0010                     	;# 
  2124  0011                     	;# 
  2125  0012                     	;# 
  2126  0013                     	;# 
  2127  0014                     	;# 
  2128  0015                     	;# 
  2129  0015                     	;# 
  2130  0016                     	;# 
  2131  0016                     	;# 
  2132  0017                     	;# 
  2133  0018                     	;# 
  2134  0019                     	;# 
  2135  0019                     	;# 
  2136  001A                     	;# 
  2137  001B                     	;# 
  2138  001C                     	;# 
  2139  001D                     	;# 
  2140  001E                     	;# 
  2141  001F                     	;# 
  2142  008C                     	;# 
  2143  008E                     	;# 
  2144  0090                     	;# 
  2145  0091                     	;# 
  2146  0092                     	;# 
  2147  0093                     	;# 
  2148  0094                     	;# 
  2149  0097                     	;# 
  2150  009B                     	;# 
  2151  009B                     	;# 
  2152  009C                     	;# 
  2153  009D                     	;# 
  2154  009E                     	;# 
  2155  009F                     	;# 
  2156  010C                     	;# 
  2157  010E                     	;# 
  2158  0111                     	;# 
  2159  0112                     	;# 
  2160  0113                     	;# 
  2161  0114                     	;# 
  2162  0115                     	;# 
  2163  0116                     	;# 
  2164  0117                     	;# 
  2165  0118                     	;# 
  2166  0119                     	;# 
  2167  018C                     	;# 
  2168  018E                     	;# 
  2169  0197                     	;# 
  2170  0199                     	;# 
  2171  0199                     	;# 
  2172  0199                     	;# 
  2173  019A                     	;# 
  2174  019A                     	;# 
  2175  019A                     	;# 
  2176  019B                     	;# 
  2177  019B                     	;# 
  2178  019B                     	;# 
  2179  019B                     	;# 
  2180  019B                     	;# 
  2181  019C                     	;# 
  2182  019C                     	;# 
  2183  019C                     	;# 
  2184  019D                     	;# 
  2185  019D                     	;# 
  2186  019D                     	;# 
  2187  019E                     	;# 
  2188  019E                     	;# 
  2189  019E                     	;# 
  2190  019F                     	;# 
  2191  019F                     	;# 
  2192  019F                     	;# 
  2193  019F                     	;# 
  2194  019F                     	;# 
  2195  020C                     	;# 
  2196  020E                     	;# 
  2197  0211                     	;# 
  2198  0211                     	;# 
  2199  0212                     	;# 
  2200  0212                     	;# 
  2201  0213                     	;# 
  2202  0213                     	;# 
  2203  0214                     	;# 
  2204  0214                     	;# 
  2205  0215                     	;# 
  2206  0215                     	;# 
  2207  0215                     	;# 
  2208  0215                     	;# 
  2209  0216                     	;# 
  2210  0216                     	;# 
  2211  0217                     	;# 
  2212  0217                     	;# 
  2213  0219                     	;# 
  2214  021A                     	;# 
  2215  021B                     	;# 
  2216  021C                     	;# 
  2217  021D                     	;# 
  2218  021D                     	;# 
  2219  021E                     	;# 
  2220  021F                     	;# 
  2221  028C                     	;# 
  2222  028E                     	;# 
  2223  0291                     	;# 
  2224  0291                     	;# 
  2225  0292                     	;# 
  2226  0293                     	;# 
  2227  0294                     	;# 
  2228  0295                     	;# 
  2229  0295                     	;# 
  2230  0296                     	;# 
  2231  0297                     	;# 
  2232  0298                     	;# 
  2233  029F                     	;# 
  2234  030C                     	;# 
  2235  030E                     	;# 
  2236  0311                     	;# 
  2237  0311                     	;# 
  2238  0312                     	;# 
  2239  0313                     	;# 
  2240  0314                     	;# 
  2241  0315                     	;# 
  2242  0315                     	;# 
  2243  0316                     	;# 
  2244  0317                     	;# 
  2245  0318                     	;# 
  2246  038C                     	;# 
  2247  038E                     	;# 
  2248  0391                     	;# 
  2249  0392                     	;# 
  2250  0393                     	;# 
  2251  0397                     	;# 
  2252  0398                     	;# 
  2253  0399                     	;# 
  2254  039A                     	;# 
  2255  039C                     	;# 
  2256  039D                     	;# 
  2257  039E                     	;# 
  2258  039F                     	;# 
  2259  0411                     	;# 
  2260  0411                     	;# 
  2261  0412                     	;# 
  2262  0413                     	;# 
  2263  0414                     	;# 
  2264  0415                     	;# 
  2265  0416                     	;# 
  2266  0417                     	;# 
  2267  0418                     	;# 
  2268  0418                     	;# 
  2269  0419                     	;# 
  2270  041A                     	;# 
  2271  041B                     	;# 
  2272  041C                     	;# 
  2273  041D                     	;# 
  2274  041E                     	;# 
  2275  041F                     	;# 
  2276  0498                     	;# 
  2277  0498                     	;# 
  2278  0499                     	;# 
  2279  049A                     	;# 
  2280  049B                     	;# 
  2281  049B                     	;# 
  2282  049C                     	;# 
  2283  049D                     	;# 
  2284  049E                     	;# 
  2285  049F                     	;# 
  2286  0617                     	;# 
  2287  0618                     	;# 
  2288  0619                     	;# 
  2289  0619                     	;# 
  2290  061A                     	;# 
  2291  061B                     	;# 
  2292  061C                     	;# 
  2293  061C                     	;# 
  2294  061F                     	;# 
  2295  0691                     	;# 
  2296  0692                     	;# 
  2297  0693                     	;# 
  2298  0694                     	;# 
  2299  0695                     	;# 
  2300  0696                     	;# 
  2301  0697                     	;# 
  2302  0698                     	;# 
  2303  0699                     	;# 
  2304  0711                     	;# 
  2305  0712                     	;# 
  2306  0713                     	;# 
  2307  0714                     	;# 
  2308  0715                     	;# 
  2309  0716                     	;# 
  2310  0717                     	;# 
  2311  0718                     	;# 
  2312  0719                     	;# 
  2313  0891                     	;# 
  2314  0891                     	;# 
  2315  0891                     	;# 
  2316  0891                     	;# 
  2317  0891                     	;# 
  2318  0891                     	;# 
  2319  0892                     	;# 
  2320  0892                     	;# 
  2321  0892                     	;# 
  2322  0893                     	;# 
  2323  0893                     	;# 
  2324  0893                     	;# 
  2325  0893                     	;# 
  2326  0893                     	;# 
  2327  0893                     	;# 
  2328  0894                     	;# 
  2329  0894                     	;# 
  2330  0894                     	;# 
  2331  0895                     	;# 
  2332  0895                     	;# 
  2333  0895                     	;# 
  2334  0896                     	;# 
  2335  0896                     	;# 
  2336  0896                     	;# 
  2337  089B                     	;# 
  2338  0911                     	;# 
  2339  0912                     	;# 
  2340  0913                     	;# 
  2341  0914                     	;# 
  2342  0915                     	;# 
  2343  0916                     	;# 
  2344  0918                     	;# 
  2345  0919                     	;# 
  2346  091A                     	;# 
  2347  091B                     	;# 
  2348  091C                     	;# 
  2349  091D                     	;# 
  2350  091E                     	;# 
  2351  091F                     	;# 
  2352  0E0F                     	;# 
  2353  0E10                     	;# 
  2354  0E11                     	;# 
  2355  0E12                     	;# 
  2356  0E13                     	;# 
  2357  0E14                     	;# 
  2358  0E15                     	;# 
  2359  0E16                     	;# 
  2360  0E17                     	;# 
  2361  0E18                     	;# 
  2362  0E19                     	;# 
  2363  0E1A                     	;# 
  2364  0E1B                     	;# 
  2365  0E1C                     	;# 
  2366  0E1D                     	;# 
  2367  0E1E                     	;# 
  2368  0E1F                     	;# 
  2369  0E20                     	;# 
  2370  0E21                     	;# 
  2371  0E22                     	;# 
  2372  0E24                     	;# 
  2373  0E25                     	;# 
  2374  0E28                     	;# 
  2375  0E29                     	;# 
  2376  0E2A                     	;# 
  2377  0E2B                     	;# 
  2378  0E2C                     	;# 
  2379  0E2D                     	;# 
  2380  0E2E                     	;# 
  2381  0E2F                     	;# 
  2382  0E90                     	;# 
  2383  0E91                     	;# 
  2384  0E92                     	;# 
  2385  0E94                     	;# 
  2386  0E95                     	;# 
  2387  0EA0                     	;# 
  2388  0EA1                     	;# 
  2389  0EA2                     	;# 
  2390  0EA3                     	;# 
  2391  0EA4                     	;# 
  2392  0EA5                     	;# 
  2393  0F0F                     	;# 
  2394  0F10                     	;# 
  2395  0F11                     	;# 
  2396  0F12                     	;# 
  2397  0F13                     	;# 
  2398  0F14                     	;# 
  2399  0F15                     	;# 
  2400  0F16                     	;# 
  2401  0F17                     	;# 
  2402  0F18                     	;# 
  2403  0F19                     	;# 
  2404  0F1A                     	;# 
  2405  0F1B                     	;# 
  2406  0F1C                     	;# 
  2407  0F1D                     	;# 
  2408  0F1E                     	;# 
  2409  0F1F                     	;# 
  2410  0F20                     	;# 
  2411  0F21                     	;# 
  2412  0F22                     	;# 
  2413  0F23                     	;# 
  2414  0F24                     	;# 
  2415  0F25                     	;# 
  2416  0F26                     	;# 
  2417  0F27                     	;# 
  2418  0F28                     	;# 
  2419  0F29                     	;# 
  2420  0F2A                     	;# 
  2421  0F2B                     	;# 
  2422  0F2C                     	;# 
  2423  0F2D                     	;# 
  2424  0F2E                     	;# 
  2425  0F2F                     	;# 
  2426  0F30                     	;# 
  2427  0F31                     	;# 
  2428  0F32                     	;# 
  2429  0F33                     	;# 
  2430  0F34                     	;# 
  2431  0F35                     	;# 
  2432  0F36                     	;# 
  2433  0F37                     	;# 
  2434  0FE4                     	;# 
  2435  0FE5                     	;# 
  2436  0FE6                     	;# 
  2437  0FE7                     	;# 
  2438  0FE8                     	;# 
  2439  0FE9                     	;# 
  2440  0FEA                     	;# 
  2441  0FEB                     	;# 
  2442  0FED                     	;# 
  2443  0FEE                     	;# 
  2444  0FEF                     	;# 
  2445  0000                     	;# 
  2446  0001                     	;# 
  2447  0002                     	;# 
  2448  0003                     	;# 
  2449  0004                     	;# 
  2450  0005                     	;# 
  2451  0006                     	;# 
  2452  0007                     	;# 
  2453  0008                     	;# 
  2454  0009                     	;# 
  2455  000A                     	;# 
  2456  000B                     	;# 
  2457  000C                     	;# 
  2458  000E                     	;# 
  2459  0010                     	;# 
  2460  0011                     	;# 
  2461  0012                     	;# 
  2462  0013                     	;# 
  2463  0014                     	;# 
  2464  0015                     	;# 
  2465  0015                     	;# 
  2466  0016                     	;# 
  2467  0016                     	;# 
  2468  0017                     	;# 
  2469  0018                     	;# 
  2470  0019                     	;# 
  2471  0019                     	;# 
  2472  001A                     	;# 
  2473  001B                     	;# 
  2474  001C                     	;# 
  2475  001D                     	;# 
  2476  001E                     	;# 
  2477  001F                     	;# 
  2478  008C                     	;# 
  2479  008E                     	;# 
  2480  0090                     	;# 
  2481  0091                     	;# 
  2482  0092                     	;# 
  2483  0093                     	;# 
  2484  0094                     	;# 
  2485  0097                     	;# 
  2486  009B                     	;# 
  2487  009B                     	;# 
  2488  009C                     	;# 
  2489  009D                     	;# 
  2490  009E                     	;# 
  2491  009F                     	;# 
  2492  010C                     	;# 
  2493  010E                     	;# 
  2494  0111                     	;# 
  2495  0112                     	;# 
  2496  0113                     	;# 
  2497  0114                     	;# 
  2498  0115                     	;# 
  2499  0116                     	;# 
  2500  0117                     	;# 
  2501  0118                     	;# 
  2502  0119                     	;# 
  2503  018C                     	;# 
  2504  018E                     	;# 
  2505  0197                     	;# 
  2506  0199                     	;# 
  2507  0199                     	;# 
  2508  0199                     	;# 
  2509  019A                     	;# 
  2510  019A                     	;# 
  2511  019A                     	;# 
  2512  019B                     	;# 
  2513  019B                     	;# 
  2514  019B                     	;# 
  2515  019B                     	;# 
  2516  019B                     	;# 
  2517  019C                     	;# 
  2518  019C                     	;# 
  2519  019C                     	;# 
  2520  019D                     	;# 
  2521  019D                     	;# 
  2522  019D                     	;# 
  2523  019E                     	;# 
  2524  019E                     	;# 
  2525  019E                     	;# 
  2526  019F                     	;# 
  2527  019F                     	;# 
  2528  019F                     	;# 
  2529  019F                     	;# 
  2530  019F                     	;# 
  2531  020C                     	;# 
  2532  020E                     	;# 
  2533  0211                     	;# 
  2534  0211                     	;# 
  2535  0212                     	;# 
  2536  0212                     	;# 
  2537  0213                     	;# 
  2538  0213                     	;# 
  2539  0214                     	;# 
  2540  0214                     	;# 
  2541  0215                     	;# 
  2542  0215                     	;# 
  2543  0215                     	;# 
  2544  0215                     	;# 
  2545  0216                     	;# 
  2546  0216                     	;# 
  2547  0217                     	;# 
  2548  0217                     	;# 
  2549  0219                     	;# 
  2550  021A                     	;# 
  2551  021B                     	;# 
  2552  021C                     	;# 
  2553  021D                     	;# 
  2554  021D                     	;# 
  2555  021E                     	;# 
  2556  021F                     	;# 
  2557  028C                     	;# 
  2558  028E                     	;# 
  2559  0291                     	;# 
  2560  0291                     	;# 
  2561  0292                     	;# 
  2562  0293                     	;# 
  2563  0294                     	;# 
  2564  0295                     	;# 
  2565  0295                     	;# 
  2566  0296                     	;# 
  2567  0297                     	;# 
  2568  0298                     	;# 
  2569  029F                     	;# 
  2570  030C                     	;# 
  2571  030E                     	;# 
  2572  0311                     	;# 
  2573  0311                     	;# 
  2574  0312                     	;# 
  2575  0313                     	;# 
  2576  0314                     	;# 
  2577  0315                     	;# 
  2578  0315                     	;# 
  2579  0316                     	;# 
  2580  0317                     	;# 
  2581  0318                     	;# 
  2582  038C                     	;# 
  2583  038E                     	;# 
  2584  0391                     	;# 
  2585  0392                     	;# 
  2586  0393                     	;# 
  2587  0397                     	;# 
  2588  0398                     	;# 
  2589  0399                     	;# 
  2590  039A                     	;# 
  2591  039C                     	;# 
  2592  039D                     	;# 
  2593  039E                     	;# 
  2594  039F                     	;# 
  2595  0411                     	;# 
  2596  0411                     	;# 
  2597  0412                     	;# 
  2598  0413                     	;# 
  2599  0414                     	;# 
  2600  0415                     	;# 
  2601  0416                     	;# 
  2602  0417                     	;# 
  2603  0418                     	;# 
  2604  0418                     	;# 
  2605  0419                     	;# 
  2606  041A                     	;# 
  2607  041B                     	;# 
  2608  041C                     	;# 
  2609  041D                     	;# 
  2610  041E                     	;# 
  2611  041F                     	;# 
  2612  0498                     	;# 
  2613  0498                     	;# 
  2614  0499                     	;# 
  2615  049A                     	;# 
  2616  049B                     	;# 
  2617  049B                     	;# 
  2618  049C                     	;# 
  2619  049D                     	;# 
  2620  049E                     	;# 
  2621  049F                     	;# 
  2622  0617                     	;# 
  2623  0618                     	;# 
  2624  0619                     	;# 
  2625  0619                     	;# 
  2626  061A                     	;# 
  2627  061B                     	;# 
  2628  061C                     	;# 
  2629  061C                     	;# 
  2630  061F                     	;# 
  2631  0691                     	;# 
  2632  0692                     	;# 
  2633  0693                     	;# 
  2634  0694                     	;# 
  2635  0695                     	;# 
  2636  0696                     	;# 
  2637  0697                     	;# 
  2638  0698                     	;# 
  2639  0699                     	;# 
  2640  0711                     	;# 
  2641  0712                     	;# 
  2642  0713                     	;# 
  2643  0714                     	;# 
  2644  0715                     	;# 
  2645  0716                     	;# 
  2646  0717                     	;# 
  2647  0718                     	;# 
  2648  0719                     	;# 
  2649  0891                     	;# 
  2650  0891                     	;# 
  2651  0891                     	;# 
  2652  0891                     	;# 
  2653  0891                     	;# 
  2654  0891                     	;# 
  2655  0892                     	;# 
  2656  0892                     	;# 
  2657  0892                     	;# 
  2658  0893                     	;# 
  2659  0893                     	;# 
  2660  0893                     	;# 
  2661  0893                     	;# 
  2662  0893                     	;# 
  2663  0893                     	;# 
  2664  0894                     	;# 
  2665  0894                     	;# 
  2666  0894                     	;# 
  2667  0895                     	;# 
  2668  0895                     	;# 
  2669  0895                     	;# 
  2670  0896                     	;# 
  2671  0896                     	;# 
  2672  0896                     	;# 
  2673  089B                     	;# 
  2674  0911                     	;# 
  2675  0912                     	;# 
  2676  0913                     	;# 
  2677  0914                     	;# 
  2678  0915                     	;# 
  2679  0916                     	;# 
  2680  0918                     	;# 
  2681  0919                     	;# 
  2682  091A                     	;# 
  2683  091B                     	;# 
  2684  091C                     	;# 
  2685  091D                     	;# 
  2686  091E                     	;# 
  2687  091F                     	;# 
  2688  0E0F                     	;# 
  2689  0E10                     	;# 
  2690  0E11                     	;# 
  2691  0E12                     	;# 
  2692  0E13                     	;# 
  2693  0E14                     	;# 
  2694  0E15                     	;# 
  2695  0E16                     	;# 
  2696  0E17                     	;# 
  2697  0E18                     	;# 
  2698  0E19                     	;# 
  2699  0E1A                     	;# 
  2700  0E1B                     	;# 
  2701  0E1C                     	;# 
  2702  0E1D                     	;# 
  2703  0E1E                     	;# 
  2704  0E1F                     	;# 
  2705  0E20                     	;# 
  2706  0E21                     	;# 
  2707  0E22                     	;# 
  2708  0E24                     	;# 
  2709  0E25                     	;# 
  2710  0E28                     	;# 
  2711  0E29                     	;# 
  2712  0E2A                     	;# 
  2713  0E2B                     	;# 
  2714  0E2C                     	;# 
  2715  0E2D                     	;# 
  2716  0E2E                     	;# 
  2717  0E2F                     	;# 
  2718  0E90                     	;# 
  2719  0E91                     	;# 
  2720  0E92                     	;# 
  2721  0E94                     	;# 
  2722  0E95                     	;# 
  2723  0EA0                     	;# 
  2724  0EA1                     	;# 
  2725  0EA2                     	;# 
  2726  0EA3                     	;# 
  2727  0EA4                     	;# 
  2728  0EA5                     	;# 
  2729  0F0F                     	;# 
  2730  0F10                     	;# 
  2731  0F11                     	;# 
  2732  0F12                     	;# 
  2733  0F13                     	;# 
  2734  0F14                     	;# 
  2735  0F15                     	;# 
  2736  0F16                     	;# 
  2737  0F17                     	;# 
  2738  0F18                     	;# 
  2739  0F19                     	;# 
  2740  0F1A                     	;# 
  2741  0F1B                     	;# 
  2742  0F1C                     	;# 
  2743  0F1D                     	;# 
  2744  0F1E                     	;# 
  2745  0F1F                     	;# 
  2746  0F20                     	;# 
  2747  0F21                     	;# 
  2748  0F22                     	;# 
  2749  0F23                     	;# 
  2750  0F24                     	;# 
  2751  0F25                     	;# 
  2752  0F26                     	;# 
  2753  0F27                     	;# 
  2754  0F28                     	;# 
  2755  0F29                     	;# 
  2756  0F2A                     	;# 
  2757  0F2B                     	;# 
  2758  0F2C                     	;# 
  2759  0F2D                     	;# 
  2760  0F2E                     	;# 
  2761  0F2F                     	;# 
  2762  0F30                     	;# 
  2763  0F31                     	;# 
  2764  0F32                     	;# 
  2765  0F33                     	;# 
  2766  0F34                     	;# 
  2767  0F35                     	;# 
  2768  0F36                     	;# 
  2769  0F37                     	;# 
  2770  0FE4                     	;# 
  2771  0FE5                     	;# 
  2772  0FE6                     	;# 
  2773  0FE7                     	;# 
  2774  0FE8                     	;# 
  2775  0FE9                     	;# 
  2776  0FEA                     	;# 
  2777  0FEB                     	;# 
  2778  0FED                     	;# 
  2779  0FEE                     	;# 
  2780  0FEF                     	;# 
  2781  0000                     	;# 
  2782  0001                     	;# 
  2783  0002                     	;# 
  2784  0003                     	;# 
  2785  0004                     	;# 
  2786  0005                     	;# 
  2787  0006                     	;# 
  2788  0007                     	;# 
  2789  0008                     	;# 
  2790  0009                     	;# 
  2791  000A                     	;# 
  2792  000B                     	;# 
  2793  000C                     	;# 
  2794  000E                     	;# 
  2795  0010                     	;# 
  2796  0011                     	;# 
  2797  0012                     	;# 
  2798  0013                     	;# 
  2799  0014                     	;# 
  2800  0015                     	;# 
  2801  0015                     	;# 
  2802  0016                     	;# 
  2803  0016                     	;# 
  2804  0017                     	;# 
  2805  0018                     	;# 
  2806  0019                     	;# 
  2807  0019                     	;# 
  2808  001A                     	;# 
  2809  001B                     	;# 
  2810  001C                     	;# 
  2811  001D                     	;# 
  2812  001E                     	;# 
  2813  001F                     	;# 
  2814  008C                     	;# 
  2815  008E                     	;# 
  2816  0090                     	;# 
  2817  0091                     	;# 
  2818  0092                     	;# 
  2819  0093                     	;# 
  2820  0094                     	;# 
  2821  0097                     	;# 
  2822  009B                     	;# 
  2823  009B                     	;# 
  2824  009C                     	;# 
  2825  009D                     	;# 
  2826  009E                     	;# 
  2827  009F                     	;# 
  2828  010C                     	;# 
  2829  010E                     	;# 
  2830  0111                     	;# 
  2831  0112                     	;# 
  2832  0113                     	;# 
  2833  0114                     	;# 
  2834  0115                     	;# 
  2835  0116                     	;# 
  2836  0117                     	;# 
  2837  0118                     	;# 
  2838  0119                     	;# 
  2839  018C                     	;# 
  2840  018E                     	;# 
  2841  0197                     	;# 
  2842  0199                     	;# 
  2843  0199                     	;# 
  2844  0199                     	;# 
  2845  019A                     	;# 
  2846  019A                     	;# 
  2847  019A                     	;# 
  2848  019B                     	;# 
  2849  019B                     	;# 
  2850  019B                     	;# 
  2851  019B                     	;# 
  2852  019B                     	;# 
  2853  019C                     	;# 
  2854  019C                     	;# 
  2855  019C                     	;# 
  2856  019D                     	;# 
  2857  019D                     	;# 
  2858  019D                     	;# 
  2859  019E                     	;# 
  2860  019E                     	;# 
  2861  019E                     	;# 
  2862  019F                     	;# 
  2863  019F                     	;# 
  2864  019F                     	;# 
  2865  019F                     	;# 
  2866  019F                     	;# 
  2867  020C                     	;# 
  2868  020E                     	;# 
  2869  0211                     	;# 
  2870  0211                     	;# 
  2871  0212                     	;# 
  2872  0212                     	;# 
  2873  0213                     	;# 
  2874  0213                     	;# 
  2875  0214                     	;# 
  2876  0214                     	;# 
  2877  0215                     	;# 
  2878  0215                     	;# 
  2879  0215                     	;# 
  2880  0215                     	;# 
  2881  0216                     	;# 
  2882  0216                     	;# 
  2883  0217                     	;# 
  2884  0217                     	;# 
  2885  0219                     	;# 
  2886  021A                     	;# 
  2887  021B                     	;# 
  2888  021C                     	;# 
  2889  021D                     	;# 
  2890  021D                     	;# 
  2891  021E                     	;# 
  2892  021F                     	;# 
  2893  028C                     	;# 
  2894  028E                     	;# 
  2895  0291                     	;# 
  2896  0291                     	;# 
  2897  0292                     	;# 
  2898  0293                     	;# 
  2899  0294                     	;# 
  2900  0295                     	;# 
  2901  0295                     	;# 
  2902  0296                     	;# 
  2903  0297                     	;# 
  2904  0298                     	;# 
  2905  029F                     	;# 
  2906  030C                     	;# 
  2907  030E                     	;# 
  2908  0311                     	;# 
  2909  0311                     	;# 
  2910  0312                     	;# 
  2911  0313                     	;# 
  2912  0314                     	;# 
  2913  0315                     	;# 
  2914  0315                     	;# 
  2915  0316                     	;# 
  2916  0317                     	;# 
  2917  0318                     	;# 
  2918  038C                     	;# 
  2919  038E                     	;# 
  2920  0391                     	;# 
  2921  0392                     	;# 
  2922  0393                     	;# 
  2923  0397                     	;# 
  2924  0398                     	;# 
  2925  0399                     	;# 
  2926  039A                     	;# 
  2927  039C                     	;# 
  2928  039D                     	;# 
  2929  039E                     	;# 
  2930  039F                     	;# 
  2931  0411                     	;# 
  2932  0411                     	;# 
  2933  0412                     	;# 
  2934  0413                     	;# 
  2935  0414                     	;# 
  2936  0415                     	;# 
  2937  0416                     	;# 
  2938  0417                     	;# 
  2939  0418                     	;# 
  2940  0418                     	;# 
  2941  0419                     	;# 
  2942  041A                     	;# 
  2943  041B                     	;# 
  2944  041C                     	;# 
  2945  041D                     	;# 
  2946  041E                     	;# 
  2947  041F                     	;# 
  2948  0498                     	;# 
  2949  0498                     	;# 
  2950  0499                     	;# 
  2951  049A                     	;# 
  2952  049B                     	;# 
  2953  049B                     	;# 
  2954  049C                     	;# 
  2955  049D                     	;# 
  2956  049E                     	;# 
  2957  049F                     	;# 
  2958  0617                     	;# 
  2959  0618                     	;# 
  2960  0619                     	;# 
  2961  0619                     	;# 
  2962  061A                     	;# 
  2963  061B                     	;# 
  2964  061C                     	;# 
  2965  061C                     	;# 
  2966  061F                     	;# 
  2967  0691                     	;# 
  2968  0692                     	;# 
  2969  0693                     	;# 
  2970  0694                     	;# 
  2971  0695                     	;# 
  2972  0696                     	;# 
  2973  0697                     	;# 
  2974  0698                     	;# 
  2975  0699                     	;# 
  2976  0711                     	;# 
  2977  0712                     	;# 
  2978  0713                     	;# 
  2979  0714                     	;# 
  2980  0715                     	;# 
  2981  0716                     	;# 
  2982  0717                     	;# 
  2983  0718                     	;# 
  2984  0719                     	;# 
  2985  0891                     	;# 
  2986  0891                     	;# 
  2987  0891                     	;# 
  2988  0891                     	;# 
  2989  0891                     	;# 
  2990  0891                     	;# 
  2991  0892                     	;# 
  2992  0892                     	;# 
  2993  0892                     	;# 
  2994  0893                     	;# 
  2995  0893                     	;# 
  2996  0893                     	;# 
  2997  0893                     	;# 
  2998  0893                     	;# 
  2999  0893                     	;# 
  3000  0894                     	;# 
  3001  0894                     	;# 
  3002  0894                     	;# 
  3003  0895                     	;# 
  3004  0895                     	;# 
  3005  0895                     	;# 
  3006  0896                     	;# 
  3007  0896                     	;# 
  3008  0896                     	;# 
  3009  089B                     	;# 
  3010  0911                     	;# 
  3011  0912                     	;# 
  3012  0913                     	;# 
  3013  0914                     	;# 
  3014  0915                     	;# 
  3015  0916                     	;# 
  3016  0918                     	;# 
  3017  0919                     	;# 
  3018  091A                     	;# 
  3019  091B                     	;# 
  3020  091C                     	;# 
  3021  091D                     	;# 
  3022  091E                     	;# 
  3023  091F                     	;# 
  3024  0E0F                     	;# 
  3025  0E10                     	;# 
  3026  0E11                     	;# 
  3027  0E12                     	;# 
  3028  0E13                     	;# 
  3029  0E14                     	;# 
  3030  0E15                     	;# 
  3031  0E16                     	;# 
  3032  0E17                     	;# 
  3033  0E18                     	;# 
  3034  0E19                     	;# 
  3035  0E1A                     	;# 
  3036  0E1B                     	;# 
  3037  0E1C                     	;# 
  3038  0E1D                     	;# 
  3039  0E1E                     	;# 
  3040  0E1F                     	;# 
  3041  0E20                     	;# 
  3042  0E21                     	;# 
  3043  0E22                     	;# 
  3044  0E24                     	;# 
  3045  0E25                     	;# 
  3046  0E28                     	;# 
  3047  0E29                     	;# 
  3048  0E2A                     	;# 
  3049  0E2B                     	;# 
  3050  0E2C                     	;# 
  3051  0E2D                     	;# 
  3052  0E2E                     	;# 
  3053  0E2F                     	;# 
  3054  0E90                     	;# 
  3055  0E91                     	;# 
  3056  0E92                     	;# 
  3057  0E94                     	;# 
  3058  0E95                     	;# 
  3059  0EA0                     	;# 
  3060  0EA1                     	;# 
  3061  0EA2                     	;# 
  3062  0EA3                     	;# 
  3063  0EA4                     	;# 
  3064  0EA5                     	;# 
  3065  0F0F                     	;# 
  3066  0F10                     	;# 
  3067  0F11                     	;# 
  3068  0F12                     	;# 
  3069  0F13                     	;# 
  3070  0F14                     	;# 
  3071  0F15                     	;# 
  3072  0F16                     	;# 
  3073  0F17                     	;# 
  3074  0F18                     	;# 
  3075  0F19                     	;# 
  3076  0F1A                     	;# 
  3077  0F1B                     	;# 
  3078  0F1C                     	;# 
  3079  0F1D                     	;# 
  3080  0F1E                     	;# 
  3081  0F1F                     	;# 
  3082  0F20                     	;# 
  3083  0F21                     	;# 
  3084  0F22                     	;# 
  3085  0F23                     	;# 
  3086  0F24                     	;# 
  3087  0F25                     	;# 
  3088  0F26                     	;# 
  3089  0F27                     	;# 
  3090  0F28                     	;# 
  3091  0F29                     	;# 
  3092  0F2A                     	;# 
  3093  0F2B                     	;# 
  3094  0F2C                     	;# 
  3095  0F2D                     	;# 
  3096  0F2E                     	;# 
  3097  0F2F                     	;# 
  3098  0F30                     	;# 
  3099  0F31                     	;# 
  3100  0F32                     	;# 
  3101  0F33                     	;# 
  3102  0F34                     	;# 
  3103  0F35                     	;# 
  3104  0F36                     	;# 
  3105  0F37                     	;# 
  3106  0FE4                     	;# 
  3107  0FE5                     	;# 
  3108  0FE6                     	;# 
  3109  0FE7                     	;# 
  3110  0FE8                     	;# 
  3111  0FE9                     	;# 
  3112  0FEA                     	;# 
  3113  0FEB                     	;# 
  3114  0FED                     	;# 
  3115  0FEE                     	;# 
  3116  0FEF                     	;_stage_stash
  3117                           
  3118                           	psect	idataBANK1
  3119  0560                     __pidataBANK1:	
  3120                           
  3121                           ;initializer for InitWigwagPattern@F447
  3122  0560  3400               	retlw	0
  3123  0561  3401               	retlw	1
  3124  0562  3400               	retlw	0
  3125  0563  3401               	retlw	1
  3126                           
  3127                           ;initializer for InitWigwagPattern@F444
  3128  0564  3401               	retlw	1
  3129  0565  3400               	retlw	0
  3130  0566  3401               	retlw	1
  3131  0567  3400               	retlw	0
  3132                           
  3133                           	psect	nvBANK0
  3134  006A                     __pnvBANK0:	
  3135  006A                     _TMR1_InterruptHandler:	
  3136  006A                     	ds	2
  3137  006C                     _timer1ReloadVal:	
  3138  006C                     	ds	2
  3139  006E                     _IOCCF0_InterruptHandler:	
  3140  006E                     	ds	2
  3141  000E                     _PORTCbits	set	14
  3142  001C                     _T1GCONbits	set	28
  3143  001B                     _T1CONbits	set	27
  3144  0019                     _TMR1L	set	25
  3145  001A                     _TMR1H	set	26
  3146  001C                     _T1GCON	set	28
  3147  0011                     _PIR1bits	set	17
  3148  000B                     _INTCONbits	set	11
  3149  0010                     _PIR0bits	set	16
  3150  0091                     _PIE1bits	set	145
  3151  0090                     _PIE0bits	set	144
  3152  008E                     _TRISC	set	142
  3153  008C                     _TRISA	set	140
  3154  0097                     _WDTCON	set	151
  3155  010E                     _LATCbits	set	270
  3156  010E                     _LATC	set	270
  3157  010C                     _LATA	set	268
  3158  018C                     _ANSELA	set	396
  3159  018E                     _ANSELC	set	398
  3160  020E                     _WPUC	set	526
  3161  020C                     _WPUA	set	524
  3162  028E                     _ODCONC	set	654
  3163  028C                     _ODCONA	set	652
  3164  030E                     _SLRCONC	set	782
  3165  030C                     _SLRCONA	set	780
  3166  0397                     _IOCCPbits	set	919
  3167  0398                     _IOCCNbits	set	920
  3168  0399                     _IOCCFbits	set	921
  3169  038E                     _INLVLC	set	910
  3170  038C                     _INLVLA	set	908
  3171  0916                     _PMD5	set	2326
  3172  0915                     _PMD4	set	2325
  3173  0914                     _PMD3	set	2324
  3174  0913                     _PMD2	set	2323
  3175  0912                     _PMD1	set	2322
  3176  0911                     _PMD0	set	2321
  3177  091E                     _OSCTUNE	set	2334
  3178  091F                     _OSCFRQ	set	2335
  3179  091D                     _OSCEN	set	2333
  3180  091B                     _OSCCON3	set	2331
  3181  0919                     _OSCCON1	set	2329
  3182                           
  3183                           ; #config settings
  3184  0000                     
  3185                           	psect	cinit
  3186  002A                     start_initialization:	
  3187  002A                     __initialization:		;BIGRAM
  3188                           
  3189                           ; Initialize objects allocated to BANK1
  3190  002A  3060               	movlw	low __pidataBANK1
  3191  002B  0084               	movwf	4
  3192  002C  3085               	movlw	(high __pidataBANK1)| (0+128)
  3193  002D  0085               	movwf	5
  3194  002E  0021               	movlb	1	; select bank1
  3195  002F  0012               	moviw fsr0++
  3196  0030  00C7               	movwf	__pdataBANK1& (0+127)
  3197  0031  0012               	moviw fsr0++
  3198  0032  00C8               	movwf	(__pdataBANK1+1)& (0+127)
  3199  0033  0012               	moviw fsr0++
  3200  0034  00C9               	movwf	(__pdataBANK1+2)& (0+127)
  3201  0035  0012               	moviw fsr0++
  3202  0036  00CA               	movwf	(__pdataBANK1+3)& (0+127)
  3203  0037  0012               	moviw fsr0++
  3204  0038  00CB               	movwf	(__pdataBANK1+4)& (0+127)
  3205  0039  0012               	moviw fsr0++
  3206  003A  00CC               	movwf	(__pdataBANK1+5)& (0+127)
  3207  003B  0012               	moviw fsr0++
  3208  003C  00CD               	movwf	(__pdataBANK1+6)& (0+127)
  3209  003D  0012               	moviw fsr0++
  3210  003E  00CE               	movwf	(__pdataBANK1+7)& (0+127)
  3211                           
  3212                           ; Clear objects allocated to BIGRAM
  3213  003F  30F0               	movlw	low (0+8432)
  3214  0040  0084               	movwf	4
  3215  0041  3020               	movlw	high (0+8432)
  3216  0042  0085               	movwf	5
  3217  0043  3000               	movlw	0
  3218  0044  00FE               	movwf	btemp
  3219  0045  3003               	movlw	3
  3220  0046  00FF               	movwf	btemp+1
  3221  0047  3185  2542  3180   	fcall	clear_ram0
  3222                           
  3223                           ; Clear objects allocated to COMMON
  3224  004A  01FA               	clrf	__pbssCOMMON& (0+127)
  3225  004B  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  3226                           
  3227                           ; Clear objects allocated to BANK0
  3228  004C  305A               	movlw	low __pbssBANK0
  3229  004D  0084               	movwf	4
  3230  004E  3000               	movlw	high __pbssBANK0
  3231  004F  0085               	movwf	5
  3232  0050  3010               	movlw	16
  3233  0051  00FE               	movwf	btemp
  3234  0052  3000               	movlw	0
  3235  0053  00FF               	movwf	btemp+1
  3236  0054  3185  2542  3180   	fcall	clear_ram0
  3237                           
  3238                           ; Clear objects allocated to BANK1
  3239  0057  30A0               	movlw	low __pbssBANK1
  3240  0058  0084               	movwf	4
  3241  0059  3000               	movlw	high __pbssBANK1
  3242  005A  0085               	movwf	5
  3243  005B  3027               	movlw	39
  3244  005C  00FE               	movwf	btemp
  3245  005D  3000               	movlw	0
  3246  005E  00FF               	movwf	btemp+1
  3247  005F  3185  2542  3180   	fcall	clear_ram0
  3248  0062                     end_of_initialization:	
  3249                           ;End of C runtime variable initialization code
  3250                           
  3251  0062                     __end_of__initialization:	
  3252  0062  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3253  0063  0020               	movlb	0
  3254  0064  3184  2CB6         	ljmp	_main	;jump to C main() function
  3255                           
  3256                           	psect	bssCOMMON
  3257  007A                     __pbssCOMMON:	
  3258  007A                     _last_pc_input_state:	
  3259  007A                     	ds	1
  3260  007B                     _cur_pc_input_state:	
  3261  007B                     	ds	1
  3262                           
  3263                           	psect	bssBANK0
  3264  005A                     __pbssBANK0:	
  3265  005A                     _start_time:	
  3266  005A                     	ds	2
  3267  005C                     _pattern_list_iter:	
  3268  005C                     	ds	2
  3269  005E                     _stage_list_iter:	
  3270  005E                     	ds	2
  3271  0060                     _cur_sec:	
  3272  0060                     	ds	2
  3273  0062                     _cur_hsec:	
  3274  0062                     	ds	2
  3275  0064                     _cur_ms:	
  3276  0064                     	ds	2
  3277  0066                     _temp_ms:	
  3278  0066                     	ds	2
  3279  0068                     _update_stage:	
  3280  0068                     	ds	1
  3281  0069                     _ts_trigger:	
  3282  0069                     	ds	1
  3283                           
  3284                           	psect	bssBANK1
  3285  00A0                     __pbssBANK1:	
  3286  00A0                     NewStage@F419:	
  3287  00A0                     	ds	4
  3288  00A4                     _Wigwag:	
  3289  00A4                     	ds	3
  3290  00A7                     _pattern_stash:	
  3291  00A7                     	ds	18
  3292  00B9                     _pattern_selector:	
  3293  00B9                     	ds	14
  3294                           
  3295                           	psect	dataBANK1
  3296  00C7                     __pdataBANK1:	
  3297  00C7                     InitWigwagPattern@F447:	
  3298  00C7                     	ds	4
  3299  00CB                     InitWigwagPattern@F444:	
  3300  00CB                     	ds	4
  3301                           
  3302                           	psect	clrtext
  3303  0542                     clear_ram0:	
  3304                           ;	Called with FSR0 containing the base address, and
  3305                           ;	btemp/btemp+1 has the size to clear
  3306                           
  3307  0542  0064               	clrwdt	;clear the watchdog before getting into this loop
  3308  0543                     clrloop0:	
  3309  0543  0180               	clrf	0	;clear RAM location pointed to by FSR
  3310  0544  3101               	addfsr 0,1
  3311  0545  3001               	movlw	1
  3312  0546  02FE               	subwf	btemp,f
  3313  0547  3000               	movlw	0
  3314  0548  3BFF               	subwfb	btemp+1,f
  3315  0549  087F               	movf	btemp+1,w
  3316  054A  047E               	iorwf	btemp,w
  3317  054B  1D03               	skipz
  3318  054C  2D43               	goto	clrloop0	;have we reached the end yet?
  3319  054D  3400               	retlw	0	;all done for this memory range, return
  3320                           
  3321                           	psect	cstackBANK1
  3322  00CF                     __pcstackBANK1:	
  3323  00CF                     ??_main:	
  3324                           
  3325                           ; 1 bytes @ 0x0
  3326  00CF                     	ds	1
  3327                           
  3328                           	psect	cstackCOMMON
  3329  0070                     __pcstackCOMMON:	
  3330  0070                     ?_PMD_Initialize:	
  3331  0070                     ?_PIN_MANAGER_Initialize:	
  3332                           ; 1 bytes @ 0x0
  3333                           
  3334  0070                     ?_OSCILLATOR_Initialize:	
  3335                           ; 1 bytes @ 0x0
  3336                           
  3337  0070                     ?_WDT_Initialize:	
  3338                           ; 1 bytes @ 0x0
  3339                           
  3340  0070                     ?_TMR1_Initialize:	
  3341                           ; 1 bytes @ 0x0
  3342                           
  3343  0070                     ?_IOCCF0_DefaultInterruptHandler:	
  3344                           ; 1 bytes @ 0x0
  3345                           
  3346  0070                     ??_IOCCF0_DefaultInterruptHandler:	
  3347                           ; 1 bytes @ 0x0
  3348                           
  3349  0070                     ?_IOCCF0_ISR:	
  3350                           ; 1 bytes @ 0x0
  3351                           
  3352  0070                     ??_IOCCF0_ISR:	
  3353                           ; 1 bytes @ 0x0
  3354                           
  3355  0070                     ?_TMR1_ISR:	
  3356                           ; 1 bytes @ 0x0
  3357                           
  3358  0070                     ?_TMR1_DefaultInterruptHandler:	
  3359                           ; 1 bytes @ 0x0
  3360                           
  3361  0070                     ??_TMR1_DefaultInterruptHandler:	
  3362                           ; 1 bytes @ 0x0
  3363                           
  3364  0070                     ?_SetOutputs:	
  3365                           ; 1 bytes @ 0x0
  3366                           
  3367  0070                     ?_PatternCycleInputChanged:	
  3368                           ; 1 bytes @ 0x0
  3369                           
  3370  0070                     ?_SYSTEM_Initialize:	
  3371                           ; 1 bytes @ 0x0
  3372                           
  3373  0070                     ?_PIN_MANAGER_IOC:	
  3374                           ; 1 bytes @ 0x0
  3375                           
  3376  0070                     ??_PIN_MANAGER_IOC:	
  3377                           ; 1 bytes @ 0x0
  3378                           
  3379  0070                     ?_INTERRUPT_InterruptManager:	
  3380                           ; 1 bytes @ 0x0
  3381                           
  3382  0070                     ?_TMR1_StartTimer:	
  3383                           ; 1 bytes @ 0x0
  3384                           
  3385  0070                     ?_TMR1_WriteTimer:	
  3386                           ; 1 bytes @ 0x0
  3387                           
  3388  0070                     ?_setup:	
  3389                           ; 1 bytes @ 0x0
  3390                           
  3391  0070                     ?_main:	
  3392                           ; 1 bytes @ 0x0
  3393                           
  3394  0070                     TMR1_WriteTimer@timerVal:	
  3395                           ; 1 bytes @ 0x0
  3396                           
  3397                           
  3398                           ; 2 bytes @ 0x0
  3399  0070                     	ds	2
  3400  0072                     ??_PMD_Initialize:	
  3401  0072                     ??_OSCILLATOR_Initialize:	
  3402                           ; 1 bytes @ 0x2
  3403                           
  3404  0072                     ??_WDT_Initialize:	
  3405                           ; 1 bytes @ 0x2
  3406                           
  3407  0072                     ?_IOCCF0_SetInterruptHandler:	
  3408                           ; 1 bytes @ 0x2
  3409                           
  3410  0072                     ??_TMR1_ISR:	
  3411                           ; 1 bytes @ 0x2
  3412                           
  3413  0072                     ?_TMR1_SetInterruptHandler:	
  3414                           ; 1 bytes @ 0x2
  3415                           
  3416  0072                     ??_PatternCycleInputChanged:	
  3417                           ; 1 bytes @ 0x2
  3418                           
  3419  0072                     ??_INTERRUPT_InterruptManager:	
  3420                           ; 1 bytes @ 0x2
  3421                           
  3422  0072                     ??_TMR1_StartTimer:	
  3423                           ; 1 bytes @ 0x2
  3424                           
  3425  0072                     ??_TMR1_WriteTimer:	
  3426                           ; 1 bytes @ 0x2
  3427                           
  3428  0072                     ?_SetLight:	
  3429                           ; 1 bytes @ 0x2
  3430                           
  3431  0072                     ?_AssignLightStates:	
  3432                           ; 1 bytes @ 0x2
  3433                           
  3434  0072                     ?___wmul:	
  3435                           ; 1 bytes @ 0x2
  3436                           
  3437  0072                     SetLight@state:	
  3438                           ; 2 bytes @ 0x2
  3439                           
  3440  0072                     IOCCF0_SetInterruptHandler@InterruptHandler:	
  3441                           ; 1 bytes @ 0x2
  3442                           
  3443  0072                     TMR1_SetInterruptHandler@InterruptHandler:	
  3444                           ; 2 bytes @ 0x2
  3445                           
  3446  0072                     AssignLightStates@stage:	
  3447                           ; 2 bytes @ 0x2
  3448                           
  3449  0072                     ___wmul@multiplier:	
  3450                           ; 2 bytes @ 0x2
  3451                           
  3452                           
  3453                           ; 2 bytes @ 0x2
  3454  0072                     	ds	1
  3455  0073                     ??_SetLight:	
  3456                           
  3457                           ; 1 bytes @ 0x3
  3458  0073                     	ds	1
  3459  0074                     ??_PIN_MANAGER_Initialize:	
  3460  0074                     ??_TMR1_Initialize:	
  3461                           ; 1 bytes @ 0x4
  3462                           
  3463  0074                     ??_IOCCF0_SetInterruptHandler:	
  3464                           ; 1 bytes @ 0x4
  3465                           
  3466  0074                     ??_TMR1_SetInterruptHandler:	
  3467                           ; 1 bytes @ 0x4
  3468                           
  3469  0074                     ??_SYSTEM_Initialize:	
  3470                           ; 1 bytes @ 0x4
  3471                           
  3472  0074                     AssignLightStates@states:	
  3473                           ; 1 bytes @ 0x4
  3474                           
  3475  0074                     PatternCycleInputChanged@delay_count:	
  3476                           ; 1 bytes @ 0x4
  3477                           
  3478  0074                     ___wmul@multiplicand:	
  3479                           ; 2 bytes @ 0x4
  3480                           
  3481                           
  3482                           ; 2 bytes @ 0x4
  3483  0074                     	ds	1
  3484  0075                     ??_AssignLightStates:	
  3485  0075                     SetLight@light:	
  3486                           ; 1 bytes @ 0x5
  3487                           
  3488                           
  3489                           ; 1 bytes @ 0x5
  3490  0075                     	ds	1
  3491  0076                     ??_SetOutputs:	
  3492  0076                     ?_FlashPattern:	
  3493                           ; 1 bytes @ 0x6
  3494                           
  3495  0076                     ??___wmul:	
  3496                           ; 1 bytes @ 0x6
  3497                           
  3498  0076                     FlashPattern@pattern:	
  3499                           ; 1 bytes @ 0x6
  3500                           
  3501  0076                     ___wmul@product:	
  3502                           ; 2 bytes @ 0x6
  3503                           
  3504                           
  3505                           ; 2 bytes @ 0x6
  3506  0076                     	ds	1
  3507  0077                     ?_NewStage:	
  3508  0077                     SetOutputs@state:	
  3509                           ; 2 bytes @ 0x7
  3510                           
  3511                           
  3512                           ; 1 bytes @ 0x7
  3513  0077                     	ds	1
  3514  0078                     FlashPattern@current_time:	
  3515                           
  3516                           ; 2 bytes @ 0x8
  3517  0078                     	ds	1
  3518  0079                     ??_ConstructStage:	
  3519  0079                     ?_NewPattern:	
  3520                           ; 1 bytes @ 0x9
  3521                           
  3522                           
  3523                           ; 2 bytes @ 0x9
  3524  0079                     	ds	1
  3525  007A                     ??_setup:	
  3526                           
  3527                           	psect	cstackBANK0
  3528  0020                     __pcstackBANK0:	
  3529                           ; 1 bytes @ 0xA
  3530                           
  3531  0020                     ??_FlashPattern:	
  3532  0020                     AssignLightStates@i:	
  3533                           ; 1 bytes @ 0x0
  3534                           
  3535                           
  3536                           ; 2 bytes @ 0x0
  3537  0020                     	ds	2
  3538  0022                     ??_NewStage:	
  3539                           
  3540                           ; 1 bytes @ 0x2
  3541  0022                     	ds	4
  3542  0026                     NewStage@init_states:	
  3543                           
  3544                           ; 4 bytes @ 0x6
  3545  0026                     	ds	4
  3546  002A                     NewStage@new_stage:	
  3547                           
  3548                           ; 2 bytes @ 0xA
  3549  002A                     	ds	2
  3550  002C                     ??_NewPattern:	
  3551  002C                     ?_CopyStageData:	
  3552                           ; 1 bytes @ 0xC
  3553                           
  3554  002C                     ?_ConstructStage:	
  3555                           ; 2 bytes @ 0xC
  3556                           
  3557  002C                     ConstructStage@time_ms:	
  3558                           ; 2 bytes @ 0xC
  3559                           
  3560  002C                     CopyStageData@dest:	
  3561                           ; 2 bytes @ 0xC
  3562                           
  3563                           
  3564                           ; 2 bytes @ 0xC
  3565  002C                     	ds	2
  3566  002E                     ConstructStage@next:	
  3567  002E                     NewPattern@new_pattern:	
  3568                           ; 1 bytes @ 0xE
  3569                           
  3570  002E                     CopyStageData@source:	
  3571                           ; 2 bytes @ 0xE
  3572                           
  3573                           
  3574                           ; 2 bytes @ 0xE
  3575  002E                     	ds	1
  3576  002F                     ConstructStage@states:	
  3577                           
  3578                           ; 1 bytes @ 0xF
  3579  002F                     	ds	1
  3580  0030                     ??_CopyStageData:	
  3581  0030                     ConstructStage@new_stage:	
  3582                           ; 1 bytes @ 0x10
  3583                           
  3584                           
  3585                           ; 2 bytes @ 0x10
  3586  0030                     	ds	3
  3587  0033                     CopyStageData@i:	
  3588                           
  3589                           ; 2 bytes @ 0x13
  3590  0033                     	ds	2
  3591  0035                     ?_AppendStage:	
  3592  0035                     AppendStage@head:	
  3593                           ; 1 bytes @ 0x15
  3594                           
  3595                           
  3596                           ; 2 bytes @ 0x15
  3597  0035                     	ds	2
  3598  0037                     AppendStage@new_stage:	
  3599                           
  3600                           ; 2 bytes @ 0x17
  3601  0037                     	ds	2
  3602  0039                     ??_AppendStage:	
  3603                           
  3604                           ; 1 bytes @ 0x19
  3605  0039                     	ds	2
  3606  003B                     AppendStage@last_stage:	
  3607                           
  3608                           ; 2 bytes @ 0x1B
  3609  003B                     	ds	2
  3610  003D                     ?_InitWigwagPattern:	
  3611  003D                     InitWigwagPattern@pattern:	
  3612                           ; 1 bytes @ 0x1D
  3613                           
  3614                           
  3615                           ; 2 bytes @ 0x1D
  3616  003D                     	ds	2
  3617  003F                     ??_InitWigwagPattern:	
  3618                           
  3619                           ; 1 bytes @ 0x1F
  3620  003F                     	ds	1
  3621  0040                     InitWigwagPattern@left_side_states:	
  3622                           
  3623                           ; 4 bytes @ 0x20
  3624  0040                     	ds	4
  3625  0044                     InitWigwagPattern@right_side_states:	
  3626                           
  3627                           ; 4 bytes @ 0x24
  3628  0044                     	ds	4
  3629  0048                     InitWigwagPattern@left_side_on:	
  3630                           
  3631                           ; 2 bytes @ 0x28
  3632  0048                     	ds	2
  3633  004A                     InitWigwagPattern@right_side_on:	
  3634                           
  3635                           ; 2 bytes @ 0x2A
  3636  004A                     	ds	2
  3637  004C                     InitWigwagPattern@i:	
  3638                           
  3639                           ; 2 bytes @ 0x2C
  3640  004C                     	ds	2
  3641  004E                     InitWigwagPattern@i_855:	
  3642                           
  3643                           ; 2 bytes @ 0x2E
  3644  004E                     	ds	2
  3645  0050                     InitWigwagPattern@off:	
  3646                           
  3647                           ; 2 bytes @ 0x30
  3648  0050                     	ds	2
  3649  0052                     InitWigwagPattern@head:	
  3650                           
  3651                           ; 2 bytes @ 0x32
  3652  0052                     	ds	2
  3653  0054                     ?_InitPatternSelector:	
  3654  0054                     InitPatternSelector@p_selector:	
  3655                           ; 1 bytes @ 0x34
  3656                           
  3657                           
  3658                           ; 2 bytes @ 0x34
  3659  0054                     	ds	2
  3660  0056                     ??_InitPatternSelector:	
  3661                           
  3662                           ; 1 bytes @ 0x36
  3663  0056                     	ds	2
  3664  0058                     InitPatternSelector@i:	
  3665                           
  3666                           ; 2 bytes @ 0x38
  3667  0058                     	ds	2
  3668                           
  3669                           	psect	maintext
  3670  04B6                     __pmaintext:	
  3671 ;;
  3672 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3673 ;;
  3674 ;; *************** function _main *****************
  3675 ;; Defined at:
  3676 ;;		line 35 in file "main.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;		None
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;		None
  3681 ;; Return value:  Size  Location     Type
  3682 ;;                  1    wreg      void 
  3683 ;; Registers used:
  3684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3685 ;; Tracked objects:
  3686 ;;		On entry : B1F/0
  3687 ;;		On exit  : 0/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3692 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3693 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3694 ;;Total ram usage:        1 bytes
  3695 ;; Hardware stack levels required when called:   10
  3696 ;; This function calls:
  3697 ;;		_FlashPattern
  3698 ;;		_PatternCycleInputChanged
  3699 ;;		_setup
  3700 ;; This function is called by:
  3701 ;;		Startup code after reset
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           
  3706                           ;psect for function _main
  3707  04B6                     _main:	
  3708  04B6                     l2124:	
  3709                           ;incstack = 0
  3710                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3711                           
  3712                           
  3713                           ;main.c: 37:     setup();
  3714  04B6  3184  24D0  3184   	fcall	_setup
  3715  04B9                     l2126:	
  3716                           
  3717                           ;main.c: 40:     {;main.c: 41:         cur_pc_input_state = PORTCbits.RC5;
  3718  04B9  3000               	movlw	0
  3719  04BA  0020               	movlb	0	; select bank0
  3720  04BB  1A8E               	btfsc	14,5	;volatile
  3721  04BC  3001               	movlw	1
  3722  04BD  00FB               	movwf	_cur_pc_input_state
  3723  04BE                     l2128:	
  3724                           
  3725                           ;main.c: 46:         if ( PatternCycleInputChanged() )
  3726  04BE  3183  23F8  3184   	fcall	_PatternCycleInputChanged
  3727  04C1                     l2134:	
  3728                           
  3729                           ;main.c: 66:         last_pc_input_state = cur_pc_input_state;
  3730  04C1  087B               	movf	_cur_pc_input_state,w
  3731  04C2  0021               	movlb	1	; select bank1
  3732  04C3  00CF               	movwf	??_main^(0+128)
  3733  04C4  084F               	movf	??_main^(0+128),w
  3734  04C5  00FA               	movwf	_last_pc_input_state
  3735  04C6                     l2136:	
  3736                           
  3737                           ;main.c: 68:         FlashPattern( pattern_selector.patterns[0] );
  3738  04C6  083A               	movf	(_pattern_selector+1)^(0+128),w
  3739  04C7  00F7               	movwf	FlashPattern@pattern+1
  3740  04C8  0839               	movf	_pattern_selector^(0+128),w
  3741  04C9  00F6               	movwf	FlashPattern@pattern
  3742  04CA  3181  217C  3184   	fcall	_FlashPattern
  3743  04CD  2CB9               	goto	l2126
  3744  04CE  3180  2828         	ljmp	start
  3745  04D0                     __end_of_main:	
  3746                           
  3747                           	psect	text1
  3748  04D0                     __ptext1:	
  3749 ;; *************** function _setup *****************
  3750 ;; Defined at:
  3751 ;;		line 13 in file "main.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;		None
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;		None
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  1    wreg      void 
  3758 ;; Registers used:
  3759 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3769 ;;Total ram usage:        0 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:    9
  3772 ;; This function calls:
  3773 ;;		_InitPatternSelector
  3774 ;;		_SYSTEM_Initialize
  3775 ;;		_SetOutputs
  3776 ;;		_TMR1_Initialize
  3777 ;;		_TMR1_StartTimer
  3778 ;; This function is called by:
  3779 ;;		_main
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783                           
  3784                           ;psect for function _setup
  3785  04D0                     _setup:	
  3786  04D0                     l2096:	
  3787                           ;incstack = 0
  3788                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3789                           
  3790                           
  3791                           ;main.c: 16:     SYSTEM_Initialize();
  3792  04D0  3185  2523  3184   	fcall	_SYSTEM_Initialize
  3793  04D3                     l2098:	
  3794                           
  3795                           ;main.c: 18:     (INTCONbits.GIE = 1);
  3796  04D3  178B               	bsf	11,7	;volatile
  3797  04D4                     l2100:	
  3798                           
  3799                           ;main.c: 21:     (INTCONbits.PEIE = 1);
  3800  04D4  170B               	bsf	11,6	;volatile
  3801                           
  3802                           ;main.c: 24:     TMR1_Initialize();
  3803  04D5  3184  24FE  3184   	fcall	_TMR1_Initialize
  3804  04D8                     l2102:	
  3805                           
  3806                           ;main.c: 25:     TMR1_StartTimer();
  3807  04D8  3185  2586  3184   	fcall	_TMR1_StartTimer
  3808  04DB                     l2104:	
  3809                           
  3810                           ;main.c: 28:     SetOutputs( 0 );
  3811  04DB  3000               	movlw	0
  3812  04DC  3184  2475  3184   	fcall	_SetOutputs
  3813  04DF                     l2106:	
  3814                           
  3815                           ;main.c: 30:     InitPatternSelector( &pattern_selector );
  3816  04DF  30B9               	movlw	low _pattern_selector
  3817  04E0  0020               	movlb	0	; select bank0
  3818  04E1  00D4               	movwf	InitPatternSelector@p_selector
  3819  04E2  3000               	movlw	high _pattern_selector
  3820  04E3  00D5               	movwf	InitPatternSelector@p_selector+1
  3821  04E4  3183  2308  3184   	fcall	_InitPatternSelector
  3822  04E7                     l291:	
  3823  04E7  0008               	return
  3824  04E8                     __end_of_setup:	
  3825                           
  3826                           	psect	text2
  3827  0586                     __ptext2:	
  3828 ;; *************** function _TMR1_StartTimer *****************
  3829 ;; Defined at:
  3830 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;		None
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;		None
  3835 ;; Return value:  Size  Location     Type
  3836 ;;                  1    wreg      void 
  3837 ;; Registers used:
  3838 ;;		None
  3839 ;; Tracked objects:
  3840 ;;		On entry : 0/0
  3841 ;;		On exit  : 0/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3848 ;;Total ram usage:        0 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; Hardware stack levels required when called:    4
  3851 ;; This function calls:
  3852 ;;		Nothing
  3853 ;; This function is called by:
  3854 ;;		_setup
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           
  3859                           ;psect for function _TMR1_StartTimer
  3860  0586                     _TMR1_StartTimer:	
  3861  0586                     l1794:	
  3862                           ;incstack = 0
  3863                           ; Regs used in _TMR1_StartTimer: []
  3864                           
  3865                           
  3866                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
  3867  0586  0020               	movlb	0	; select bank0
  3868  0587  141B               	bsf	27,0	;volatile
  3869  0588                     l210:	
  3870  0588  0008               	return
  3871  0589                     __end_of_TMR1_StartTimer:	
  3872                           
  3873                           	psect	text3
  3874  0475                     __ptext3:	
  3875 ;; *************** function _SetOutputs *****************
  3876 ;; Defined at:
  3877 ;;		line 38 in file "Lights.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;  state           1    wreg     const _Bool 
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;  state           1    7[COMMON] const _Bool 
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3892 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3893 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3894 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3895 ;;Total ram usage:        2 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    5
  3898 ;; This function calls:
  3899 ;;		_SetLight
  3900 ;; This function is called by:
  3901 ;;		_setup
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           
  3906                           ;psect for function _SetOutputs
  3907  0475                     _SetOutputs:	
  3908                           
  3909                           ;incstack = 0
  3910                           ; Regs used in _SetOutputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3911                           ;SetOutputs@state stored from wreg
  3912  0475  00F7               	movwf	SetOutputs@state
  3913  0476                     l2078:	
  3914                           
  3915                           ;Lights.c: 38: void SetOutputs( const _Bool state );Lights.c: 39: {;Lights.c: 40:     Se
      +                          tLight( L1, state );
  3916  0476  0877               	movf	SetOutputs@state,w
  3917  0477  00F6               	movwf	??_SetOutputs
  3918  0478  0876               	movf	??_SetOutputs,w
  3919  0479  00F2               	movwf	SetLight@state
  3920  047A  3000               	movlw	0
  3921  047B  3181  21F0  3184   	fcall	_SetLight
  3922                           
  3923                           ;Lights.c: 41:     SetLight( L2, state );
  3924  047E  0877               	movf	SetOutputs@state,w
  3925  047F  00F6               	movwf	??_SetOutputs
  3926  0480  0876               	movf	??_SetOutputs,w
  3927  0481  00F2               	movwf	SetLight@state
  3928  0482  3001               	movlw	1
  3929  0483  3181  21F0  3184   	fcall	_SetLight
  3930                           
  3931                           ;Lights.c: 42:     SetLight( L3, state );
  3932  0486  0877               	movf	SetOutputs@state,w
  3933  0487  00F6               	movwf	??_SetOutputs
  3934  0488  0876               	movf	??_SetOutputs,w
  3935  0489  00F2               	movwf	SetLight@state
  3936  048A  3002               	movlw	2
  3937  048B  3181  21F0  3184   	fcall	_SetLight
  3938                           
  3939                           ;Lights.c: 43:     SetLight( L4, state );
  3940  048E  0877               	movf	SetOutputs@state,w
  3941  048F  00F6               	movwf	??_SetOutputs
  3942  0490  0876               	movf	??_SetOutputs,w
  3943  0491  00F2               	movwf	SetLight@state
  3944  0492  3003               	movlw	3
  3945  0493  3181  21F0  3184   	fcall	_SetLight
  3946  0496                     l366:	
  3947  0496  0008               	return
  3948  0497                     __end_of_SetOutputs:	
  3949                           
  3950                           	psect	text4
  3951  0523                     __ptext4:	
  3952 ;; *************** function _SYSTEM_Initialize *****************
  3953 ;; Defined at:
  3954 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;		None
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;		None
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg, status,2, status,0, pclath, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3972 ;;Total ram usage:        0 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    6
  3975 ;; This function calls:
  3976 ;;		_OSCILLATOR_Initialize
  3977 ;;		_PIN_MANAGER_Initialize
  3978 ;;		_PMD_Initialize
  3979 ;;		_TMR1_Initialize
  3980 ;;		_WDT_Initialize
  3981 ;; This function is called by:
  3982 ;;		_setup
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           
  3987                           ;psect for function _SYSTEM_Initialize
  3988  0523                     _SYSTEM_Initialize:	
  3989  0523                     l1778:	
  3990                           ;incstack = 0
  3991                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3992                           
  3993                           
  3994                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
  3995  0523  3185  2568  3185   	fcall	_PMD_Initialize
  3996  0526                     l1780:	
  3997                           
  3998                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  3999  0526  3184  2425  3185   	fcall	_PIN_MANAGER_Initialize
  4000  0529                     l1782:	
  4001                           
  4002                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  4003  0529  3185  254E  3185   	fcall	_OSCILLATOR_Initialize
  4004  052C                     l1784:	
  4005                           
  4006                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  4007  052C  3185  2582  3185   	fcall	_WDT_Initialize
  4008  052F                     l1786:	
  4009                           
  4010                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  4011  052F  3184  24FE  3185   	fcall	_TMR1_Initialize
  4012  0532                     l51:	
  4013  0532  0008               	return
  4014  0533                     __end_of_SYSTEM_Initialize:	
  4015                           
  4016                           	psect	text5
  4017  0582                     __ptext5:	
  4018 ;; *************** function _WDT_Initialize *****************
  4019 ;; Defined at:
  4020 ;;		line 74 in file "mcc_generated_files/mcc.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;		None
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;		None
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  1    wreg      void 
  4027 ;; Registers used:
  4028 ;;		wreg
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4038 ;;Total ram usage:        0 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    4
  4041 ;; This function calls:
  4042 ;;		Nothing
  4043 ;; This function is called by:
  4044 ;;		_SYSTEM_Initialize
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           
  4049                           ;psect for function _WDT_Initialize
  4050  0582                     _WDT_Initialize:	
  4051  0582                     l1676:	
  4052                           ;incstack = 0
  4053                           ; Regs used in _WDT_Initialize: [wreg]
  4054                           
  4055                           
  4056                           ;mcc_generated_files/mcc.c: 77:     WDTCON = 0x16;
  4057  0582  3016               	movlw	22
  4058  0583  0021               	movlb	1	; select bank1
  4059  0584  0097               	movwf	23	;volatile
  4060  0585                     l57:	
  4061  0585  0008               	return
  4062  0586                     __end_of_WDT_Initialize:	
  4063                           
  4064                           	psect	text6
  4065  04FE                     __ptext6:	
  4066 ;; *************** function _TMR1_Initialize *****************
  4067 ;; Defined at:
  4068 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;		None
  4071 ;; Auto vars:     Size  Location     Type
  4072 ;;		None
  4073 ;; Return value:  Size  Location     Type
  4074 ;;                  1    wreg      void 
  4075 ;; Registers used:
  4076 ;;		wreg, status,2, status,0, pclath, cstack
  4077 ;; Tracked objects:
  4078 ;;		On entry : 0/0
  4079 ;;		On exit  : 0/0
  4080 ;;		Unchanged: 0/0
  4081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4086 ;;Total ram usage:        0 bytes
  4087 ;; Hardware stack levels used:    1
  4088 ;; Hardware stack levels required when called:    5
  4089 ;; This function calls:
  4090 ;;		_TMR1_SetInterruptHandler
  4091 ;; This function is called by:
  4092 ;;		_SYSTEM_Initialize
  4093 ;;		_setup
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           
  4098                           ;psect for function _TMR1_Initialize
  4099  04FE                     _TMR1_Initialize:	
  4100  04FE                     l1678:	
  4101                           ;incstack = 0
  4102                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4103                           
  4104                           
  4105                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  4106  04FE  0020               	movlb	0	; select bank0
  4107  04FF  019C               	clrf	28	;volatile
  4108  0500                     l1680:	
  4109                           
  4110                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xFF;
  4111  0500  30FF               	movlw	255
  4112  0501  009A               	movwf	26	;volatile
  4113  0502                     l1682:	
  4114                           
  4115                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0x00;
  4116  0502  0199               	clrf	25	;volatile
  4117  0503                     l1684:	
  4118                           
  4119                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  4120  0503  1011               	bcf	17,0	;volatile
  4121                           
  4122                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  4123  0504  081A               	movf	26,w	;volatile
  4124  0505  00ED               	movwf	_timer1ReloadVal+1	;volatile
  4125  0506  0819               	movf	25,w	;volatile
  4126  0507  00EC               	movwf	_timer1ReloadVal	;volatile
  4127  0508                     l1686:	
  4128                           
  4129                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  4130  0508  0021               	movlb	1	; select bank1
  4131  0509  1411               	bsf	17,0	;volatile
  4132  050A                     l1688:	
  4133                           
  4134                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  4135  050A  307C               	movlw	low _TMR1_DefaultInterruptHandler
  4136  050B  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  4137  050C  3005               	movlw	high _TMR1_DefaultInterruptHandler
  4138  050D  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  4139  050E  3185  2570  3184   	fcall	_TMR1_SetInterruptHandler
  4140  0511                     l207:	
  4141  0511  0008               	return
  4142  0512                     __end_of_TMR1_Initialize:	
  4143                           
  4144                           	psect	text7
  4145  0570                     __ptext7:	
  4146 ;; *************** function _TMR1_SetInterruptHandler *****************
  4147 ;; Defined at:
  4148 ;;		line 172 in file "mcc_generated_files/tmr1.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  4151 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;		None
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  1    wreg      void 
  4156 ;; Registers used:
  4157 ;;		wreg
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4163 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4167 ;;Total ram usage:        2 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:    4
  4170 ;; This function calls:
  4171 ;;		Nothing
  4172 ;; This function is called by:
  4173 ;;		_TMR1_Initialize
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           
  4178                           ;psect for function _TMR1_SetInterruptHandler
  4179  0570                     _TMR1_SetInterruptHandler:	
  4180  0570                     l1578:	
  4181                           ;incstack = 0
  4182                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  4183                           
  4184                           
  4185                           ;mcc_generated_files/tmr1.c: 173:     TMR1_InterruptHandler = InterruptHandler;
  4186  0570  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  4187  0571  0020               	movlb	0	; select bank0
  4188  0572  00EB               	movwf	_TMR1_InterruptHandler+1
  4189  0573  0872               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  4190  0574  00EA               	movwf	_TMR1_InterruptHandler
  4191  0575                     l237:	
  4192  0575  0008               	return
  4193  0576                     __end_of_TMR1_SetInterruptHandler:	
  4194                           
  4195                           	psect	text8
  4196  0568                     __ptext8:	
  4197 ;; *************** function _PMD_Initialize *****************
  4198 ;; Defined at:
  4199 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;		None
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  1    wreg      void 
  4206 ;; Registers used:
  4207 ;;		status,2
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;Total ram usage:        0 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    4
  4220 ;; This function calls:
  4221 ;;		Nothing
  4222 ;; This function is called by:
  4223 ;;		_SYSTEM_Initialize
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           
  4228                           ;psect for function _PMD_Initialize
  4229  0568                     _PMD_Initialize:	
  4230  0568                     l1634:	
  4231                           ;incstack = 0
  4232                           ; Regs used in _PMD_Initialize: [status,2]
  4233                           
  4234                           
  4235                           ;mcc_generated_files/mcc.c: 83:     PMD0 = 0x00;
  4236  0568  0032               	movlb	18	; select bank18
  4237  0569  0191               	clrf	17	;volatile
  4238                           
  4239                           ;mcc_generated_files/mcc.c: 85:     PMD1 = 0x00;
  4240  056A  0192               	clrf	18	;volatile
  4241                           
  4242                           ;mcc_generated_files/mcc.c: 87:     PMD2 = 0x00;
  4243  056B  0193               	clrf	19	;volatile
  4244                           
  4245                           ;mcc_generated_files/mcc.c: 89:     PMD3 = 0x00;
  4246  056C  0194               	clrf	20	;volatile
  4247                           
  4248                           ;mcc_generated_files/mcc.c: 91:     PMD4 = 0x00;
  4249  056D  0195               	clrf	21	;volatile
  4250                           
  4251                           ;mcc_generated_files/mcc.c: 93:     PMD5 = 0x00;
  4252  056E  0196               	clrf	22	;volatile
  4253  056F                     l60:	
  4254  056F  0008               	return
  4255  0570                     __end_of_PMD_Initialize:	
  4256                           
  4257                           	psect	text9
  4258  0425                     __ptext9:	
  4259 ;; *************** function _PIN_MANAGER_Initialize *****************
  4260 ;; Defined at:
  4261 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;		None
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;		None
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  1    wreg      void 
  4268 ;; Registers used:
  4269 ;;		wreg, status,2, status,0, pclath, cstack
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4279 ;;Total ram usage:        0 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; Hardware stack levels required when called:    5
  4282 ;; This function calls:
  4283 ;;		_IOCCF0_SetInterruptHandler
  4284 ;; This function is called by:
  4285 ;;		_SYSTEM_Initialize
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288                           
  4289                           
  4290                           ;psect for function _PIN_MANAGER_Initialize
  4291  0425                     _PIN_MANAGER_Initialize:	
  4292  0425                     l1636:	
  4293                           ;incstack = 0
  4294                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4295                           
  4296                           
  4297                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
  4298  0425  0022               	movlb	2	; select bank2
  4299  0426  018C               	clrf	12	;volatile
  4300  0427                     l1638:	
  4301                           
  4302                           ;mcc_generated_files/pin_manager.c: 63:     LATC = 0x20;
  4303  0427  3020               	movlw	32
  4304  0428  008E               	movwf	14	;volatile
  4305  0429                     l1640:	
  4306                           
  4307                           ;mcc_generated_files/pin_manager.c: 68:     TRISA = 0x37;
  4308  0429  3037               	movlw	55
  4309  042A  0021               	movlb	1	; select bank1
  4310  042B  008C               	movwf	12	;volatile
  4311  042C                     l1642:	
  4312                           
  4313                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x21;
  4314  042C  3021               	movlw	33
  4315  042D  008E               	movwf	14	;volatile
  4316  042E                     l1644:	
  4317                           
  4318                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  4319  042E  0023               	movlb	3	; select bank3
  4320  042F  018E               	clrf	14	;volatile
  4321                           
  4322                           ;mcc_generated_files/pin_manager.c: 75:     ANSELA = 0x33;
  4323  0430  3033               	movlw	51
  4324  0431  008C               	movwf	12	;volatile
  4325  0432                     l1646:	
  4326                           
  4327                           ;mcc_generated_files/pin_manager.c: 80:     WPUA = 0x00;
  4328  0432  0024               	movlb	4	; select bank4
  4329  0433  018C               	clrf	12	;volatile
  4330  0434                     l1648:	
  4331                           
  4332                           ;mcc_generated_files/pin_manager.c: 81:     WPUC = 0x1E;
  4333  0434  301E               	movlw	30
  4334  0435  008E               	movwf	14	;volatile
  4335                           
  4336                           ;mcc_generated_files/pin_manager.c: 86:     ODCONA = 0x00;
  4337  0436  0025               	movlb	5	; select bank5
  4338  0437  018C               	clrf	12	;volatile
  4339                           
  4340                           ;mcc_generated_files/pin_manager.c: 87:     ODCONC = 0x00;
  4341  0438  018E               	clrf	14	;volatile
  4342  0439                     l1650:	
  4343                           
  4344                           ;mcc_generated_files/pin_manager.c: 92:     SLRCONA = 0x37;
  4345  0439  3037               	movlw	55
  4346  043A  0026               	movlb	6	; select bank6
  4347  043B  008C               	movwf	12	;volatile
  4348  043C                     l1652:	
  4349                           
  4350                           ;mcc_generated_files/pin_manager.c: 93:     SLRCONC = 0x3F;
  4351  043C  303F               	movlw	63
  4352  043D  008E               	movwf	14	;volatile
  4353  043E                     l1654:	
  4354                           
  4355                           ;mcc_generated_files/pin_manager.c: 98:     INLVLA = 0x3F;
  4356  043E  303F               	movlw	63
  4357  043F  0027               	movlb	7	; select bank7
  4358  0440  008C               	movwf	12	;volatile
  4359  0441                     l1656:	
  4360                           
  4361                           ;mcc_generated_files/pin_manager.c: 99:     INLVLC = 0x3F;
  4362  0441  303F               	movlw	63
  4363  0442  008E               	movwf	14	;volatile
  4364  0443                     l1658:	
  4365                           
  4366                           ;mcc_generated_files/pin_manager.c: 106:     IOCCFbits.IOCCF0 = 0;
  4367  0443  1019               	bcf	25,0	;volatile
  4368  0444                     l1660:	
  4369                           
  4370                           ;mcc_generated_files/pin_manager.c: 108:     IOCCNbits.IOCCN0 = 0;
  4371  0444  1018               	bcf	24,0	;volatile
  4372  0445                     l1662:	
  4373                           
  4374                           ;mcc_generated_files/pin_manager.c: 110:     IOCCPbits.IOCCP0 = 1;
  4375  0445  1417               	bsf	23,0	;volatile
  4376  0446                     l1664:	
  4377                           
  4378                           ;mcc_generated_files/pin_manager.c: 115:     IOCCF0_SetInterruptHandler(IOCCF0_DefaultIn
      +                          terruptHandler);
  4379  0446  3089               	movlw	low _IOCCF0_DefaultInterruptHandler
  4380  0447  00F2               	movwf	IOCCF0_SetInterruptHandler@InterruptHandler
  4381  0448  3005               	movlw	high _IOCCF0_DefaultInterruptHandler
  4382  0449  00F3               	movwf	IOCCF0_SetInterruptHandler@InterruptHandler+1
  4383  044A  3185  2576  3184   	fcall	_IOCCF0_SetInterruptHandler
  4384  044D                     l1666:	
  4385                           
  4386                           ;mcc_generated_files/pin_manager.c: 118:     PIE0bits.IOCIE = 1;
  4387  044D  0021               	movlb	1	; select bank1
  4388  044E  1610               	bsf	16,4	;volatile
  4389  044F                     l121:	
  4390  044F  0008               	return
  4391  0450                     __end_of_PIN_MANAGER_Initialize:	
  4392                           
  4393                           	psect	text10
  4394  0576                     __ptext10:	
  4395 ;; *************** function _IOCCF0_SetInterruptHandler *****************
  4396 ;; Defined at:
  4397 ;;		line 149 in file "mcc_generated_files/pin_manager.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  4400 ;;		 -> IOCCF0_DefaultInterruptHandler(1), 
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      void 
  4405 ;; Registers used:
  4406 ;;		wreg
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;Total ram usage:        2 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    4
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		_PIN_MANAGER_Initialize
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           
  4427                           ;psect for function _IOCCF0_SetInterruptHandler
  4428  0576                     _IOCCF0_SetInterruptHandler:	
  4429  0576                     l1576:	
  4430                           ;incstack = 0
  4431                           ; Regs used in _IOCCF0_SetInterruptHandler: [wreg]
  4432                           
  4433                           
  4434                           ;mcc_generated_files/pin_manager.c: 150:     IOCCF0_InterruptHandler = InterruptHandler;
  4435  0576  0873               	movf	IOCCF0_SetInterruptHandler@InterruptHandler+1,w
  4436  0577  0020               	movlb	0	; select bank0
  4437  0578  00EF               	movwf	_IOCCF0_InterruptHandler+1
  4438  0579  0872               	movf	IOCCF0_SetInterruptHandler@InterruptHandler,w
  4439  057A  00EE               	movwf	_IOCCF0_InterruptHandler
  4440  057B                     l132:	
  4441  057B  0008               	return
  4442  057C                     __end_of_IOCCF0_SetInterruptHandler:	
  4443                           
  4444                           	psect	text11
  4445  054E                     __ptext11:	
  4446 ;; *************** function _OSCILLATOR_Initialize *****************
  4447 ;; Defined at:
  4448 ;;		line 60 in file "mcc_generated_files/mcc.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;		None
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;		None
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  1    wreg      void 
  4455 ;; Registers used:
  4456 ;;		wreg, status,2
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;Total ram usage:        0 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    4
  4469 ;; This function calls:
  4470 ;;		Nothing
  4471 ;; This function is called by:
  4472 ;;		_SYSTEM_Initialize
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           
  4477                           ;psect for function _OSCILLATOR_Initialize
  4478  054E                     _OSCILLATOR_Initialize:	
  4479  054E                     l1668:	
  4480                           ;incstack = 0
  4481                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4482                           
  4483                           
  4484                           ;mcc_generated_files/mcc.c: 63:     OSCCON1 = 0x62;
  4485  054E  3062               	movlw	98
  4486  054F  0032               	movlb	18	; select bank18
  4487  0550  0099               	movwf	25	;volatile
  4488  0551                     l1670:	
  4489                           
  4490                           ;mcc_generated_files/mcc.c: 65:     OSCCON3 = 0x00;
  4491  0551  019B               	clrf	27	;volatile
  4492  0552                     l1672:	
  4493                           
  4494                           ;mcc_generated_files/mcc.c: 67:     OSCEN = 0x00;
  4495  0552  019D               	clrf	29	;volatile
  4496                           
  4497                           ;mcc_generated_files/mcc.c: 69:     OSCFRQ = 0x03;
  4498  0553  3003               	movlw	3
  4499  0554  009F               	movwf	31	;volatile
  4500  0555                     l1674:	
  4501                           
  4502                           ;mcc_generated_files/mcc.c: 71:     OSCTUNE = 0x00;
  4503  0555  019E               	clrf	30	;volatile
  4504  0556                     l54:	
  4505  0556  0008               	return
  4506  0557                     __end_of_OSCILLATOR_Initialize:	
  4507                           
  4508                           	psect	text12
  4509  0308                     __ptext12:	
  4510 ;; *************** function _InitPatternSelector *****************
  4511 ;; Defined at:
  4512 ;;		line 10 in file "PatternSelector.c"
  4513 ;; Parameters:    Size  Location     Type
  4514 ;;  p_selector      2   52[BANK0 ] PTR struct PatternSelect
  4515 ;;		 -> pattern_selector(14), 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;  i               2   56[BANK0 ] int 
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  1    wreg      void 
  4520 ;; Registers used:
  4521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4527 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4528 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4529 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4530 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4531 ;;Total ram usage:        6 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; Hardware stack levels required when called:    8
  4534 ;; This function calls:
  4535 ;;		_InitWigwagPattern
  4536 ;;		_NewPattern
  4537 ;; This function is called by:
  4538 ;;		_setup
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           
  4543                           ;psect for function _InitPatternSelector
  4544  0308                     _InitPatternSelector:	
  4545  0308                     l2080:	
  4546                           ;incstack = 0
  4547                           ; Regs used in _InitPatternSelector: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4548                           
  4549                           
  4550                           ;PatternSelector.c: 10: void InitPatternSelector( struct PatternSelector* p_selector );P
      +                          atternSelector.c: 11: {;PatternSelector.c: 13:     for ( int i = 0; i < MAX_PATTERNS; i+
      +                          + )
  4551  0308  0020               	movlb	0	; select bank0
  4552  0309  01D8               	clrf	InitPatternSelector@i
  4553  030A  01D9               	clrf	InitPatternSelector@i+1
  4554  030B                     l2086:	
  4555                           
  4556                           ;PatternSelector.c: 14:     {;PatternSelector.c: 15:         p_selector->patterns[i] = N
      +                          ewPattern();
  4557  030B  3183  2354  3183   	fcall	_NewPattern
  4558  030E  0020               	movlb	0	; select bank0
  4559  030F  0859               	movf	InitPatternSelector@i+1,w
  4560  0310  00D7               	movwf	??_InitPatternSelector+1
  4561  0311  0858               	movf	InitPatternSelector@i,w
  4562  0312  00D6               	movwf	??_InitPatternSelector
  4563  0313  35D6               	lslf	??_InitPatternSelector,f
  4564  0314  0DD7               	rlf	??_InitPatternSelector+1,f
  4565  0315  0856               	movf	??_InitPatternSelector,w
  4566  0316  0754               	addwf	InitPatternSelector@p_selector,w
  4567  0317  0086               	movwf	6
  4568  0318  0857               	movf	??_InitPatternSelector+1,w
  4569  0319  3D55               	addwfc	InitPatternSelector@p_selector+1,w
  4570  031A  0087               	movwf	7
  4571  031B  0879               	movf	?_NewPattern,w
  4572  031C  3FC0               	movwi [0]fsr1
  4573  031D  087A               	movf	?_NewPattern+1,w
  4574  031E  3FC1               	movwi [1]fsr1
  4575  031F                     l2088:	
  4576                           
  4577                           ;PatternSelector.c: 16:     }
  4578  031F  3001               	movlw	1
  4579  0320  07D8               	addwf	InitPatternSelector@i,f
  4580  0321  3000               	movlw	0
  4581  0322  3DD9               	addwfc	InitPatternSelector@i+1,f
  4582  0323                     l2090:	
  4583  0323  0859               	movf	InitPatternSelector@i+1,w
  4584  0324  3A80               	xorlw	128
  4585  0325  00D6               	movwf	??_InitPatternSelector
  4586  0326  3080               	movlw	128
  4587  0327  0256               	subwf	??_InitPatternSelector,w
  4588  0328  1D03               	skipz
  4589  0329  2B2C               	goto	u975
  4590  032A  3006               	movlw	6
  4591  032B  0258               	subwf	InitPatternSelector@i,w
  4592  032C                     u975:	
  4593  032C  1C03               	skipc
  4594  032D  2B2F               	goto	u971
  4595  032E  2B30               	goto	u970
  4596  032F                     u971:	
  4597  032F  2B0B               	goto	l2086
  4598  0330                     u970:	
  4599  0330                     l2092:	
  4600                           
  4601                           ;PatternSelector.c: 17:     InitWigwagPattern( p_selector->patterns[0] );
  4602  0330  0020               	movlb	0	; select bank0
  4603  0331  0854               	movf	InitPatternSelector@p_selector,w
  4604  0332  0086               	movwf	6
  4605  0333  0855               	movf	InitPatternSelector@p_selector+1,w
  4606  0334  0087               	movwf	7
  4607  0335  3F40               	moviw [0]fsr1
  4608  0336  00BD               	movwf	InitWigwagPattern@pattern
  4609  0337  3F41               	moviw [1]fsr1
  4610  0338  00BE               	movwf	InitWigwagPattern@pattern+1
  4611  0339  3180  2066  3183   	fcall	_InitWigwagPattern
  4612  033C                     l2094:	
  4613                           
  4614                           ;PatternSelector.c: 18:     p_selector->current_stage = p_selector->patterns[0]->first_s
      +                          tage;
  4615  033C  0020               	movlb	0	; select bank0
  4616  033D  0854               	movf	InitPatternSelector@p_selector,w
  4617  033E  0086               	movwf	6
  4618  033F  0855               	movf	InitPatternSelector@p_selector+1,w
  4619  0340  0087               	movwf	7
  4620  0341  3F40               	moviw [0]fsr1
  4621  0342  00D6               	movwf	??_InitPatternSelector
  4622  0343  3F41               	moviw [1]fsr1
  4623  0344  00D7               	movwf	??_InitPatternSelector+1
  4624  0345  0856               	movf	??_InitPatternSelector,w
  4625  0346  0086               	movwf	6
  4626  0347  0857               	movf	??_InitPatternSelector+1,w
  4627  0348  0087               	movwf	7
  4628  0349  3141               	addfsr 1,1
  4629  034A  0854               	movf	InitPatternSelector@p_selector,w
  4630  034B  0084               	movwf	4
  4631  034C  0855               	movf	InitPatternSelector@p_selector+1,w
  4632  034D  0085               	movwf	5
  4633  034E  310C               	addfsr 0,12
  4634  034F  3F40               	moviw [0]fsr1
  4635  0350  3F80               	movwi [0]fsr0
  4636  0351  3F41               	moviw [1]fsr1
  4637  0352  3F81               	movwi [1]fsr0
  4638  0353                     l323:	
  4639  0353  0008               	return
  4640  0354                     __end_of_InitPatternSelector:	
  4641                           
  4642                           	psect	text13
  4643  0354                     __ptext13:	
  4644 ;; *************** function _NewPattern *****************
  4645 ;; Defined at:
  4646 ;;		line 14 in file "Pattern.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;		None
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;  new_pattern     2   14[BANK0 ] PTR struct Pattern
  4651 ;;		 -> pattern_stash(18), 
  4652 ;; Return value:  Size  Location     Type
  4653 ;;                  2    9[COMMON] PTR struct Pattern
  4654 ;; Registers used:
  4655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4662 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;Total ram usage:        4 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; Hardware stack levels required when called:    6
  4668 ;; This function calls:
  4669 ;;		_NewStage
  4670 ;;		___wmul
  4671 ;; This function is called by:
  4672 ;;		_InitPatternSelector
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           
  4677                           ;psect for function _NewPattern
  4678  0354                     _NewPattern:	
  4679  0354                     l1990:	
  4680                           ;incstack = 0
  4681                           ; Regs used in _NewPattern: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4682                           
  4683                           
  4684                           ;Pattern.c: 16:     if ( pattern_list_iter >= MAX_PATTERNS )
  4685  0354  3000               	movlw	0
  4686  0355  0020               	movlb	0	; select bank0
  4687  0356  025D               	subwf	_pattern_list_iter+1,w
  4688  0357  3006               	movlw	6
  4689  0358  1903               	skipnz
  4690  0359  025C               	subwf	_pattern_list_iter,w
  4691  035A  1C03               	skipc
  4692  035B  2B5D               	goto	u821
  4693  035C  2B5E               	goto	u820
  4694  035D                     u821:	
  4695  035D  2B61               	goto	l1996
  4696  035E                     u820:	
  4697  035E                     l1992:	
  4698                           
  4699                           ;Pattern.c: 17:     {;Pattern.c: 18:         return ((void*)0);
  4700  035E  01F9               	clrf	?_NewPattern
  4701  035F  01FA               	clrf	?_NewPattern+1
  4702  0360  2B91               	goto	l424
  4703  0361                     l1996:	
  4704                           
  4705                           ;Pattern.c: 20:     struct Pattern* new_pattern = &pattern_stash[ pattern_list_iter++ ];
  4706  0361  085D               	movf	_pattern_list_iter+1,w
  4707  0362  00F3               	movwf	___wmul@multiplier+1
  4708  0363  085C               	movf	_pattern_list_iter,w
  4709  0364  00F2               	movwf	___wmul@multiplier
  4710  0365  3003               	movlw	3
  4711  0366  00F4               	movwf	___wmul@multiplicand
  4712  0367  3000               	movlw	0
  4713  0368  00F5               	movwf	___wmul@multiplicand+1
  4714  0369  3184  2497  3183   	fcall	___wmul
  4715  036C  30A7               	movlw	low _pattern_stash
  4716  036D  0020               	movlb	0	; select bank0
  4717  036E  00AC               	movwf	??_NewPattern
  4718  036F  3000               	movlw	high _pattern_stash
  4719  0370  00AD               	movwf	??_NewPattern+1
  4720  0371  0872               	movf	?___wmul,w
  4721  0372  072C               	addwf	??_NewPattern,w
  4722  0373  00AE               	movwf	NewPattern@new_pattern
  4723  0374  0873               	movf	?___wmul+1,w
  4724  0375  3D2D               	addwfc	??_NewPattern+1,w
  4725  0376  00AF               	movwf	NewPattern@new_pattern+1
  4726  0377                     l1998:	
  4727  0377  3001               	movlw	1
  4728  0378  07DC               	addwf	_pattern_list_iter,f
  4729  0379  3000               	movlw	0
  4730  037A  3DDD               	addwfc	_pattern_list_iter+1,f
  4731  037B                     l2000:	
  4732                           
  4733                           ;Pattern.c: 21:     new_pattern->name = WIGWAG;
  4734  037B  082E               	movf	NewPattern@new_pattern,w
  4735  037C  0086               	movwf	6
  4736  037D  082F               	movf	NewPattern@new_pattern+1,w
  4737  037E  0087               	movwf	7
  4738  037F  0181               	clrf	1
  4739  0380                     l2002:	
  4740                           
  4741                           ;Pattern.c: 22:     new_pattern->first_stage = NewStage();
  4742  0380  3182  22B9  3183   	fcall	_NewStage
  4743  0383  0020               	movlb	0	; select bank0
  4744  0384  082E               	movf	NewPattern@new_pattern,w
  4745  0385  0086               	movwf	6
  4746  0386  082F               	movf	NewPattern@new_pattern+1,w
  4747  0387  0087               	movwf	7
  4748  0388  3141               	addfsr 1,1
  4749  0389  0877               	movf	?_NewStage,w
  4750  038A  3FC0               	movwi [0]fsr1
  4751  038B  0878               	movf	?_NewStage+1,w
  4752  038C  3FC1               	movwi [1]fsr1
  4753  038D                     l2004:	
  4754                           
  4755                           ;Pattern.c: 24:     return new_pattern;
  4756  038D  082F               	movf	NewPattern@new_pattern+1,w
  4757  038E  00FA               	movwf	?_NewPattern+1
  4758  038F  082E               	movf	NewPattern@new_pattern,w
  4759  0390  00F9               	movwf	?_NewPattern
  4760  0391                     l424:	
  4761  0391  0008               	return
  4762  0392                     __end_of_NewPattern:	
  4763                           
  4764                           	psect	text14
  4765  0497                     __ptext14:	
  4766 ;; *************** function ___wmul *****************
  4767 ;; Defined at:
  4768 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;  multiplier      2    2[COMMON] unsigned int 
  4771 ;;  multiplicand    2    4[COMMON] unsigned int 
  4772 ;; Auto vars:     Size  Location     Type
  4773 ;;  product         2    6[COMMON] unsigned int 
  4774 ;; Return value:  Size  Location     Type
  4775 ;;                  2    2[COMMON] unsigned int 
  4776 ;; Registers used:
  4777 ;;		wreg, status,2, status,0
  4778 ;; Tracked objects:
  4779 ;;		On entry : 0/0
  4780 ;;		On exit  : 0/0
  4781 ;;		Unchanged: 0/0
  4782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4783 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4786 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4787 ;;Total ram usage:        6 bytes
  4788 ;; Hardware stack levels used:    1
  4789 ;; Hardware stack levels required when called:    4
  4790 ;; This function calls:
  4791 ;;		Nothing
  4792 ;; This function is called by:
  4793 ;;		_NewPattern
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           
  4798                           ;psect for function ___wmul
  4799  0497                     ___wmul:	
  4800  0497                     l1620:	
  4801                           ;incstack = 0
  4802                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4803                           
  4804  0497  01F6               	clrf	___wmul@product
  4805  0498  01F7               	clrf	___wmul@product+1
  4806  0499                     l1622:	
  4807  0499  1C72               	btfss	___wmul@multiplier,0
  4808  049A  2C9C               	goto	u461
  4809  049B  2C9D               	goto	u460
  4810  049C                     u461:	
  4811  049C  2CA1               	goto	l660
  4812  049D                     u460:	
  4813  049D                     l1624:	
  4814  049D  0874               	movf	___wmul@multiplicand,w
  4815  049E  07F6               	addwf	___wmul@product,f
  4816  049F  0875               	movf	___wmul@multiplicand+1,w
  4817  04A0  3DF7               	addwfc	___wmul@product+1,f
  4818  04A1                     l660:	
  4819  04A1  3001               	movlw	1
  4820  04A2                     u475:	
  4821  04A2  35F4               	lslf	___wmul@multiplicand,f
  4822  04A3  0DF5               	rlf	___wmul@multiplicand+1,f
  4823  04A4  0B89               	decfsz	9,f
  4824  04A5  2CA2               	goto	u475
  4825  04A6                     l1626:	
  4826  04A6  3001               	movlw	1
  4827  04A7                     u485:	
  4828  04A7  36F3               	lsrf	___wmul@multiplier+1,f
  4829  04A8  0CF2               	rrf	___wmul@multiplier,f
  4830  04A9  0B89               	decfsz	9,f
  4831  04AA  2CA7               	goto	u485
  4832  04AB                     l1628:	
  4833  04AB  0872               	movf	___wmul@multiplier,w
  4834  04AC  0473               	iorwf	___wmul@multiplier+1,w
  4835  04AD  1D03               	btfss	3,2
  4836  04AE  2CB0               	goto	u491
  4837  04AF  2CB1               	goto	u490
  4838  04B0                     u491:	
  4839  04B0  2C99               	goto	l1622
  4840  04B1                     u490:	
  4841  04B1                     l1630:	
  4842  04B1  0877               	movf	___wmul@product+1,w
  4843  04B2  00F3               	movwf	?___wmul+1
  4844  04B3  0876               	movf	___wmul@product,w
  4845  04B4  00F2               	movwf	?___wmul
  4846  04B5                     l662:	
  4847  04B5  0008               	return
  4848  04B6                     __end_of___wmul:	
  4849                           
  4850                           	psect	text15
  4851  0066                     __ptext15:	
  4852 ;; *************** function _InitWigwagPattern *****************
  4853 ;; Defined at:
  4854 ;;		line 101 in file "Pattern.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;  pattern         2   29[BANK0 ] PTR struct Pattern
  4857 ;;		 -> pattern_stash(18), NULL(0), 
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;  i               2   46[BANK0 ] int 
  4860 ;;  i               2   44[BANK0 ] int 
  4861 ;;  right_side_s    4   36[BANK0 ] _Bool [4]
  4862 ;;  left_side_st    4   32[BANK0 ] _Bool [4]
  4863 ;;  head            2   50[BANK0 ] PTR struct Stage
  4864 ;;		 -> stage_stash(768), NULL(0), 
  4865 ;;  off             2   48[BANK0 ] PTR struct Stage
  4866 ;;		 -> stage_stash(768), NULL(0), 
  4867 ;;  right_side_o    2   42[BANK0 ] PTR struct Stage
  4868 ;;		 -> stage_stash(768), NULL(0), 
  4869 ;;  left_side_on    2   40[BANK0 ] PTR struct Stage
  4870 ;;		 -> stage_stash(768), NULL(0), 
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      void 
  4873 ;; Registers used:
  4874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4880 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4881 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;Total ram usage:       23 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    7
  4887 ;; This function calls:
  4888 ;;		_AppendStage
  4889 ;;		_ConstructStage
  4890 ;;		_CopyStageData
  4891 ;;		_NewStage
  4892 ;; This function is called by:
  4893 ;;		_InitPatternSelector
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           
  4898                           ;psect for function _InitWigwagPattern
  4899  0066                     _InitWigwagPattern:	
  4900  0066                     l2008:	
  4901                           ;incstack = 0
  4902                           ; Regs used in _InitWigwagPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4903                           
  4904                           
  4905                           ;Pattern.c: 101: void InitWigwagPattern( struct Pattern* pattern );Pattern.c: 102: {;Pat
      +                          tern.c: 104:     pattern->name = WIGWAG;
  4906  0066  0020               	movlb	0	; select bank0
  4907  0067  083D               	movf	InitWigwagPattern@pattern,w
  4908  0068  0086               	movwf	6
  4909  0069  083E               	movf	InitWigwagPattern@pattern+1,w
  4910  006A  0087               	movwf	7
  4911  006B  0181               	clrf	1
  4912  006C                     l2010:	
  4913                           
  4914                           ;Pattern.c: 107:     _Bool left_side_states[NUM_LIGHTS] = { 1, 0, 1, 0 };
  4915  006C  0021               	movlb	1	; select bank1
  4916  006D  084E               	movf	(InitWigwagPattern@F444+3)^(0+128),w
  4917  006E  0020               	movlb	0	; select bank0
  4918  006F  00C3               	movwf	InitWigwagPattern@left_side_states+3
  4919  0070  0021               	movlb	1	; select bank1
  4920  0071  084D               	movf	(InitWigwagPattern@F444+2)^(0+128),w
  4921  0072  0020               	movlb	0	; select bank0
  4922  0073  00C2               	movwf	InitWigwagPattern@left_side_states+2
  4923  0074  0021               	movlb	1	; select bank1
  4924  0075  084C               	movf	(InitWigwagPattern@F444+1)^(0+128),w
  4925  0076  0020               	movlb	0	; select bank0
  4926  0077  00C1               	movwf	InitWigwagPattern@left_side_states+1
  4927  0078  0021               	movlb	1	; select bank1
  4928  0079  084B               	movf	InitWigwagPattern@F444^(0+128),w
  4929  007A  0020               	movlb	0	; select bank0
  4930  007B  00C0               	movwf	InitWigwagPattern@left_side_states
  4931  007C                     l2012:	
  4932                           
  4933                           ;Pattern.c: 108:     struct Stage* left_side_on = ConstructStage( left_side_states, 80UL
      +                          , ((void*)0) );
  4934  007C  3050               	movlw	80
  4935  007D  00AC               	movwf	ConstructStage@time_ms
  4936  007E  3000               	movlw	0
  4937  007F  00AD               	movwf	ConstructStage@time_ms+1
  4938  0080  01AE               	clrf	ConstructStage@next
  4939  0081  3040               	movlw	(low (InitWigwagPattern@left_side_states| 0))& (0+255)
  4940  0082  3183  23CB  3180   	fcall	_ConstructStage
  4941  0085  0020               	movlb	0	; select bank0
  4942  0086  082D               	movf	?_ConstructStage+1,w
  4943  0087  00C9               	movwf	InitWigwagPattern@left_side_on+1
  4944  0088  082C               	movf	?_ConstructStage,w
  4945  0089  00C8               	movwf	InitWigwagPattern@left_side_on
  4946  008A                     l2014:	
  4947                           
  4948                           ;Pattern.c: 110:     _Bool right_side_states[NUM_LIGHTS] = { 0, 1, 0, 1 };
  4949  008A  0021               	movlb	1	; select bank1
  4950  008B  084A               	movf	(InitWigwagPattern@F447+3)^(0+128),w
  4951  008C  0020               	movlb	0	; select bank0
  4952  008D  00C7               	movwf	InitWigwagPattern@right_side_states+3
  4953  008E  0021               	movlb	1	; select bank1
  4954  008F  0849               	movf	(InitWigwagPattern@F447+2)^(0+128),w
  4955  0090  0020               	movlb	0	; select bank0
  4956  0091  00C6               	movwf	InitWigwagPattern@right_side_states+2
  4957  0092  0021               	movlb	1	; select bank1
  4958  0093  0848               	movf	(InitWigwagPattern@F447+1)^(0+128),w
  4959  0094  0020               	movlb	0	; select bank0
  4960  0095  00C5               	movwf	InitWigwagPattern@right_side_states+1
  4961  0096  0021               	movlb	1	; select bank1
  4962  0097  0847               	movf	InitWigwagPattern@F447^(0+128),w
  4963  0098  0020               	movlb	0	; select bank0
  4964  0099  00C4               	movwf	InitWigwagPattern@right_side_states
  4965  009A                     l2016:	
  4966                           
  4967                           ;Pattern.c: 111:     struct Stage* right_side_on = ConstructStage( right_side_states, 80
      +                          UL, ((void*)0) );
  4968  009A  3050               	movlw	80
  4969  009B  00AC               	movwf	ConstructStage@time_ms
  4970  009C  3000               	movlw	0
  4971  009D  00AD               	movwf	ConstructStage@time_ms+1
  4972  009E  01AE               	clrf	ConstructStage@next
  4973  009F  3044               	movlw	(low (InitWigwagPattern@right_side_states| 0))& (0+255)
  4974  00A0  3183  23CB  3180   	fcall	_ConstructStage
  4975  00A3  0020               	movlb	0	; select bank0
  4976  00A4  082D               	movf	?_ConstructStage+1,w
  4977  00A5  00CB               	movwf	InitWigwagPattern@right_side_on+1
  4978  00A6  082C               	movf	?_ConstructStage,w
  4979  00A7  00CA               	movwf	InitWigwagPattern@right_side_on
  4980  00A8                     l2018:	
  4981                           
  4982                           ;Pattern.c: 113:     struct Stage* off = NewStage();
  4983  00A8  3182  22B9  3180   	fcall	_NewStage
  4984  00AB  0878               	movf	?_NewStage+1,w
  4985  00AC  0020               	movlb	0	; select bank0
  4986  00AD  00D1               	movwf	InitWigwagPattern@off+1
  4987  00AE  0877               	movf	?_NewStage,w
  4988  00AF  00D0               	movwf	InitWigwagPattern@off
  4989  00B0                     l2020:	
  4990                           
  4991                           ;Pattern.c: 115:     pattern->first_stage = NewStage();
  4992  00B0  3182  22B9  3180   	fcall	_NewStage
  4993  00B3  0020               	movlb	0	; select bank0
  4994  00B4  083D               	movf	InitWigwagPattern@pattern,w
  4995  00B5  0086               	movwf	6
  4996  00B6  083E               	movf	InitWigwagPattern@pattern+1,w
  4997  00B7  0087               	movwf	7
  4998  00B8  3141               	addfsr 1,1
  4999  00B9  0877               	movf	?_NewStage,w
  5000  00BA  3FC0               	movwi [0]fsr1
  5001  00BB  0878               	movf	?_NewStage+1,w
  5002  00BC  3FC1               	movwi [1]fsr1
  5003  00BD                     l2022:	
  5004                           
  5005                           ;Pattern.c: 116:     struct Stage* head = pattern->first_stage;
  5006  00BD  083D               	movf	InitWigwagPattern@pattern,w
  5007  00BE  0086               	movwf	6
  5008  00BF  083E               	movf	InitWigwagPattern@pattern+1,w
  5009  00C0  0087               	movwf	7
  5010  00C1  3141               	addfsr 1,1
  5011  00C2  3F40               	moviw [0]fsr1
  5012  00C3  00D2               	movwf	InitWigwagPattern@head
  5013  00C4  3F41               	moviw [1]fsr1
  5014  00C5  00D3               	movwf	InitWigwagPattern@head+1
  5015  00C6                     l2024:	
  5016                           
  5017                           ;Pattern.c: 119:     for( int i = 0; i < 3; i++ )
  5018  00C6  01CC               	clrf	InitWigwagPattern@i
  5019  00C7  01CD               	clrf	InitWigwagPattern@i+1
  5020  00C8                     l2030:	
  5021                           
  5022                           ;Pattern.c: 120:     {;Pattern.c: 121:         AppendStage( head, CopyStageData( NewStag
      +                          e(), left_side_on ) );
  5023  00C8  0020               	movlb	0	; select bank0
  5024  00C9  0853               	movf	InitWigwagPattern@head+1,w
  5025  00CA  00B6               	movwf	AppendStage@head+1
  5026  00CB  0852               	movf	InitWigwagPattern@head,w
  5027  00CC  00B5               	movwf	AppendStage@head
  5028  00CD  3182  22B9  3180   	fcall	_NewStage
  5029  00D0  0878               	movf	?_NewStage+1,w
  5030  00D1  0020               	movlb	0	; select bank0
  5031  00D2  00AD               	movwf	CopyStageData@dest+1
  5032  00D3  0877               	movf	?_NewStage,w
  5033  00D4  00AC               	movwf	CopyStageData@dest
  5034  00D5  0849               	movf	InitWigwagPattern@left_side_on+1,w
  5035  00D6  00AF               	movwf	CopyStageData@source+1
  5036  00D7  0848               	movf	InitWigwagPattern@left_side_on,w
  5037  00D8  00AE               	movwf	CopyStageData@source
  5038  00D9  3183  2392  3180   	fcall	_CopyStageData
  5039  00DC  0020               	movlb	0	; select bank0
  5040  00DD  082D               	movf	?_CopyStageData+1,w
  5041  00DE  00B8               	movwf	AppendStage@new_stage+1
  5042  00DF  082C               	movf	?_CopyStageData,w
  5043  00E0  00B7               	movwf	AppendStage@new_stage
  5044  00E1  3182  2261  3180   	fcall	_AppendStage
  5045                           
  5046                           ;Pattern.c: 122:         AppendStage( head, CopyStageData( NewStage(), off ) );
  5047  00E4  0020               	movlb	0	; select bank0
  5048  00E5  0853               	movf	InitWigwagPattern@head+1,w
  5049  00E6  00B6               	movwf	AppendStage@head+1
  5050  00E7  0852               	movf	InitWigwagPattern@head,w
  5051  00E8  00B5               	movwf	AppendStage@head
  5052  00E9  3182  22B9  3180   	fcall	_NewStage
  5053  00EC  0878               	movf	?_NewStage+1,w
  5054  00ED  0020               	movlb	0	; select bank0
  5055  00EE  00AD               	movwf	CopyStageData@dest+1
  5056  00EF  0877               	movf	?_NewStage,w
  5057  00F0  00AC               	movwf	CopyStageData@dest
  5058  00F1  0851               	movf	InitWigwagPattern@off+1,w
  5059  00F2  00AF               	movwf	CopyStageData@source+1
  5060  00F3  0850               	movf	InitWigwagPattern@off,w
  5061  00F4  00AE               	movwf	CopyStageData@source
  5062  00F5  3183  2392  3180   	fcall	_CopyStageData
  5063  00F8  0020               	movlb	0	; select bank0
  5064  00F9  082D               	movf	?_CopyStageData+1,w
  5065  00FA  00B8               	movwf	AppendStage@new_stage+1
  5066  00FB  082C               	movf	?_CopyStageData,w
  5067  00FC  00B7               	movwf	AppendStage@new_stage
  5068  00FD  3182  2261  3180   	fcall	_AppendStage
  5069  0100                     l2032:	
  5070                           
  5071                           ;Pattern.c: 123:     }
  5072  0100  3001               	movlw	1
  5073  0101  0020               	movlb	0	; select bank0
  5074  0102  07CC               	addwf	InitWigwagPattern@i,f
  5075  0103  3000               	movlw	0
  5076  0104  3DCD               	addwfc	InitWigwagPattern@i+1,f
  5077  0105                     l2034:	
  5078  0105  084D               	movf	InitWigwagPattern@i+1,w
  5079  0106  3A80               	xorlw	128
  5080  0107  00BF               	movwf	??_InitWigwagPattern
  5081  0108  3080               	movlw	128
  5082  0109  023F               	subwf	??_InitWigwagPattern,w
  5083  010A  1D03               	skipz
  5084  010B  290E               	goto	u835
  5085  010C  3003               	movlw	3
  5086  010D  024C               	subwf	InitWigwagPattern@i,w
  5087  010E                     u835:	
  5088  010E  1C03               	skipc
  5089  010F  2911               	goto	u831
  5090  0110  2912               	goto	u830
  5091  0111                     u831:	
  5092  0111  28C8               	goto	l2030
  5093  0112                     u830:	
  5094  0112                     l2036:	
  5095                           
  5096                           ;Pattern.c: 126:     AppendStage( head, CopyStageData( NewStage(), off ) );
  5097  0112  0020               	movlb	0	; select bank0
  5098  0113  0853               	movf	InitWigwagPattern@head+1,w
  5099  0114  00B6               	movwf	AppendStage@head+1
  5100  0115  0852               	movf	InitWigwagPattern@head,w
  5101  0116  00B5               	movwf	AppendStage@head
  5102  0117  3182  22B9  3180   	fcall	_NewStage
  5103  011A  0878               	movf	?_NewStage+1,w
  5104  011B  0020               	movlb	0	; select bank0
  5105  011C  00AD               	movwf	CopyStageData@dest+1
  5106  011D  0877               	movf	?_NewStage,w
  5107  011E  00AC               	movwf	CopyStageData@dest
  5108  011F  0851               	movf	InitWigwagPattern@off+1,w
  5109  0120  00AF               	movwf	CopyStageData@source+1
  5110  0121  0850               	movf	InitWigwagPattern@off,w
  5111  0122  00AE               	movwf	CopyStageData@source
  5112  0123  3183  2392  3180   	fcall	_CopyStageData
  5113  0126  0020               	movlb	0	; select bank0
  5114  0127  082D               	movf	?_CopyStageData+1,w
  5115  0128  00B8               	movwf	AppendStage@new_stage+1
  5116  0129  082C               	movf	?_CopyStageData,w
  5117  012A  00B7               	movwf	AppendStage@new_stage
  5118  012B  3182  2261  3180   	fcall	_AppendStage
  5119  012E                     l2038:	
  5120                           
  5121                           ;Pattern.c: 129:     for( int i = 0; i < 3; i++ )
  5122  012E  0020               	movlb	0	; select bank0
  5123  012F  01CE               	clrf	InitWigwagPattern@i_855
  5124  0130  01CF               	clrf	InitWigwagPattern@i_855+1
  5125  0131                     l2044:	
  5126                           
  5127                           ;Pattern.c: 130:     {;Pattern.c: 131:         AppendStage( head, CopyStageData( NewStag
      +                          e(), right_side_on ) );
  5128  0131  0020               	movlb	0	; select bank0
  5129  0132  0853               	movf	InitWigwagPattern@head+1,w
  5130  0133  00B6               	movwf	AppendStage@head+1
  5131  0134  0852               	movf	InitWigwagPattern@head,w
  5132  0135  00B5               	movwf	AppendStage@head
  5133  0136  3182  22B9  3180   	fcall	_NewStage
  5134  0139  0878               	movf	?_NewStage+1,w
  5135  013A  0020               	movlb	0	; select bank0
  5136  013B  00AD               	movwf	CopyStageData@dest+1
  5137  013C  0877               	movf	?_NewStage,w
  5138  013D  00AC               	movwf	CopyStageData@dest
  5139  013E  084B               	movf	InitWigwagPattern@right_side_on+1,w
  5140  013F  00AF               	movwf	CopyStageData@source+1
  5141  0140  084A               	movf	InitWigwagPattern@right_side_on,w
  5142  0141  00AE               	movwf	CopyStageData@source
  5143  0142  3183  2392  3180   	fcall	_CopyStageData
  5144  0145  0020               	movlb	0	; select bank0
  5145  0146  082D               	movf	?_CopyStageData+1,w
  5146  0147  00B8               	movwf	AppendStage@new_stage+1
  5147  0148  082C               	movf	?_CopyStageData,w
  5148  0149  00B7               	movwf	AppendStage@new_stage
  5149  014A  3182  2261  3180   	fcall	_AppendStage
  5150                           
  5151                           ;Pattern.c: 132:         AppendStage( head, CopyStageData( NewStage(), off ) );
  5152  014D  0020               	movlb	0	; select bank0
  5153  014E  0853               	movf	InitWigwagPattern@head+1,w
  5154  014F  00B6               	movwf	AppendStage@head+1
  5155  0150  0852               	movf	InitWigwagPattern@head,w
  5156  0151  00B5               	movwf	AppendStage@head
  5157  0152  3182  22B9  3180   	fcall	_NewStage
  5158  0155  0878               	movf	?_NewStage+1,w
  5159  0156  0020               	movlb	0	; select bank0
  5160  0157  00AD               	movwf	CopyStageData@dest+1
  5161  0158  0877               	movf	?_NewStage,w
  5162  0159  00AC               	movwf	CopyStageData@dest
  5163  015A  0851               	movf	InitWigwagPattern@off+1,w
  5164  015B  00AF               	movwf	CopyStageData@source+1
  5165  015C  0850               	movf	InitWigwagPattern@off,w
  5166  015D  00AE               	movwf	CopyStageData@source
  5167  015E  3183  2392  3180   	fcall	_CopyStageData
  5168  0161  0020               	movlb	0	; select bank0
  5169  0162  082D               	movf	?_CopyStageData+1,w
  5170  0163  00B8               	movwf	AppendStage@new_stage+1
  5171  0164  082C               	movf	?_CopyStageData,w
  5172  0165  00B7               	movwf	AppendStage@new_stage
  5173  0166  3182  2261  3180   	fcall	_AppendStage
  5174  0169                     l2046:	
  5175                           
  5176                           ;Pattern.c: 133:     }
  5177  0169  3001               	movlw	1
  5178  016A  0020               	movlb	0	; select bank0
  5179  016B  07CE               	addwf	InitWigwagPattern@i_855,f
  5180  016C  3000               	movlw	0
  5181  016D  3DCF               	addwfc	InitWigwagPattern@i_855+1,f
  5182  016E                     l2048:	
  5183  016E  084F               	movf	InitWigwagPattern@i_855+1,w
  5184  016F  3A80               	xorlw	128
  5185  0170  00BF               	movwf	??_InitWigwagPattern
  5186  0171  3080               	movlw	128
  5187  0172  023F               	subwf	??_InitWigwagPattern,w
  5188  0173  1D03               	skipz
  5189  0174  2977               	goto	u845
  5190  0175  3003               	movlw	3
  5191  0176  024E               	subwf	InitWigwagPattern@i_855,w
  5192  0177                     u845:	
  5193  0177  1C03               	skipc
  5194  0178  297A               	goto	u841
  5195  0179  297B               	goto	u840
  5196  017A                     u841:	
  5197  017A  2931               	goto	l2044
  5198  017B                     u840:	
  5199  017B                     l471:	
  5200  017B  0008               	return
  5201  017C                     __end_of_InitWigwagPattern:	
  5202                           
  5203                           	psect	text16
  5204  0392                     __ptext16:	
  5205 ;; *************** function _CopyStageData *****************
  5206 ;; Defined at:
  5207 ;;		line 65 in file "Pattern.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;  dest            2   12[BANK0 ] PTR struct Stage
  5210 ;;		 -> stage_stash(768), NULL(0), 
  5211 ;;  source          2   14[BANK0 ] PTR struct Stage
  5212 ;;		 -> stage_stash(768), NULL(0), 
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;  i               2   19[BANK0 ] int 
  5215 ;; Return value:  Size  Location     Type
  5216 ;;                  2   12[BANK0 ] PTR struct Stage
  5217 ;; Registers used:
  5218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5224 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5225 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5226 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;Total ram usage:        9 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:    4
  5231 ;; This function calls:
  5232 ;;		Nothing
  5233 ;; This function is called by:
  5234 ;;		_InitWigwagPattern
  5235 ;;		_CopyStage
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           
  5240                           ;psect for function _CopyStageData
  5241  0392                     _CopyStageData:	
  5242  0392                     l1590:	
  5243                           ;incstack = 0
  5244                           ; Regs used in _CopyStageData: [wreg-fsr1h+status,2+status,0]
  5245                           
  5246                           
  5247                           ;Pattern.c: 65: struct Stage* CopyStageData( struct Stage* dest, struct Stage* source );
      +                          Pattern.c: 66: {;Pattern.c: 67:     for( int i = 0; i < NUM_LIGHTS; i++ )
  5248  0392  0020               	movlb	0	; select bank0
  5249  0393  01B3               	clrf	CopyStageData@i
  5250  0394  01B4               	clrf	CopyStageData@i+1
  5251  0395                     l1596:	
  5252                           
  5253                           ;Pattern.c: 68:         dest->light_states[i] = source->light_states[i];
  5254  0395  0020               	movlb	0	; select bank0
  5255  0396  0833               	movf	CopyStageData@i,w
  5256  0397  072E               	addwf	CopyStageData@source,w
  5257  0398  0086               	movwf	6
  5258  0399  0834               	movf	CopyStageData@i+1,w
  5259  039A  3D2F               	addwfc	CopyStageData@source+1,w
  5260  039B  0087               	movwf	7
  5261  039C  0801               	movf	1,w
  5262  039D  00B0               	movwf	??_CopyStageData
  5263  039E  0833               	movf	CopyStageData@i,w
  5264  039F  072C               	addwf	CopyStageData@dest,w
  5265  03A0  00B1               	movwf	??_CopyStageData+1
  5266  03A1  0834               	movf	CopyStageData@i+1,w
  5267  03A2  3D2D               	addwfc	CopyStageData@dest+1,w
  5268  03A3  00B2               	movwf	??_CopyStageData+2
  5269  03A4  0831               	movf	??_CopyStageData+1,w
  5270  03A5  0086               	movwf	6
  5271  03A6  0832               	movf	??_CopyStageData+2,w
  5272  03A7  0087               	movwf	7
  5273  03A8  0830               	movf	??_CopyStageData,w
  5274  03A9  0081               	movwf	1
  5275  03AA                     l1598:	
  5276  03AA  3001               	movlw	1
  5277  03AB  07B3               	addwf	CopyStageData@i,f
  5278  03AC  3000               	movlw	0
  5279  03AD  3DB4               	addwfc	CopyStageData@i+1,f
  5280  03AE                     l1600:	
  5281  03AE  0834               	movf	CopyStageData@i+1,w
  5282  03AF  3A80               	xorlw	128
  5283  03B0  00B0               	movwf	??_CopyStageData
  5284  03B1  3080               	movlw	128
  5285  03B2  0230               	subwf	??_CopyStageData,w
  5286  03B3  1D03               	skipz
  5287  03B4  2BB7               	goto	u435
  5288  03B5  3004               	movlw	4
  5289  03B6  0233               	subwf	CopyStageData@i,w
  5290  03B7                     u435:	
  5291  03B7  1C03               	skipc
  5292  03B8  2BBA               	goto	u431
  5293  03B9  2BBB               	goto	u430
  5294  03BA                     u431:	
  5295  03BA  2B95               	goto	l1596
  5296  03BB                     u430:	
  5297  03BB                     l1602:	
  5298                           
  5299                           ;Pattern.c: 69:     dest->time_ms = source->time_ms;
  5300  03BB  0020               	movlb	0	; select bank0
  5301  03BC  082E               	movf	CopyStageData@source,w
  5302  03BD  0086               	movwf	6
  5303  03BE  082F               	movf	CopyStageData@source+1,w
  5304  03BF  0087               	movwf	7
  5305  03C0  3144               	addfsr 1,4
  5306  03C1  082C               	movf	CopyStageData@dest,w
  5307  03C2  0084               	movwf	4
  5308  03C3  082D               	movf	CopyStageData@dest+1,w
  5309  03C4  0085               	movwf	5
  5310  03C5  3104               	addfsr 0,4
  5311  03C6  3F40               	moviw [0]fsr1
  5312  03C7  3F80               	movwi [0]fsr0
  5313  03C8  3F41               	moviw [1]fsr1
  5314  03C9  3F81               	movwi [1]fsr0
  5315  03CA                     l1604:	
  5316  03CA                     l446:	
  5317                           ;Pattern.c: 70:     return dest;
  5318                           
  5319  03CA  0008               	return
  5320  03CB                     __end_of_CopyStageData:	
  5321                           
  5322                           	psect	text17
  5323  03CB                     __ptext17:	
  5324 ;; *************** function _ConstructStage *****************
  5325 ;; Defined at:
  5326 ;;		line 49 in file "Pattern.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;  states          1    wreg     PTR const _Bool 
  5329 ;;		 -> InitWigwagPattern@right_side_states(4), InitWigwagPattern@left_side_states(4), 
  5330 ;;  time_ms         2   12[BANK0 ] const unsigned short 
  5331 ;;  next            1   14[BANK0 ] PTR struct Stage
  5332 ;;		 -> NULL(0), 
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;  states          1   15[BANK0 ] PTR const _Bool 
  5335 ;;		 -> InitWigwagPattern@right_side_states(4), InitWigwagPattern@left_side_states(4), 
  5336 ;;  new_stage       2   16[BANK0 ] PTR struct Stage
  5337 ;;		 -> stage_stash(768), NULL(0), 
  5338 ;; Return value:  Size  Location     Type
  5339 ;;                  2   12[BANK0 ] PTR struct Stage
  5340 ;; Registers used:
  5341 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5342 ;; Tracked objects:
  5343 ;;		On entry : 0/0
  5344 ;;		On exit  : 0/0
  5345 ;;		Unchanged: 0/0
  5346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5347 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;Total ram usage:        7 bytes
  5352 ;; Hardware stack levels used:    1
  5353 ;; Hardware stack levels required when called:    6
  5354 ;; This function calls:
  5355 ;;		_AssignLightStates
  5356 ;;		_NewStage
  5357 ;; This function is called by:
  5358 ;;		_InitWigwagPattern
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           
  5363                           ;psect for function _ConstructStage
  5364  03CB                     _ConstructStage:	
  5365                           
  5366                           ;incstack = 0
  5367                           ; Regs used in _ConstructStage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5368                           ;ConstructStage@states stored from wreg
  5369  03CB  0020               	movlb	0	; select bank0
  5370  03CC  00AF               	movwf	ConstructStage@states
  5371  03CD                     l1980:	
  5372                           
  5373                           ;Pattern.c: 49: struct Stage* ConstructStage( const _Bool states[NUM_LIGHTS], const uint
      +                           time_ms, struct Stage* next );Pattern.c: 50: {;Pattern.c: 51:     struct Stage* new_sta
      +                          ge = NewStage();
  5374  03CD  3182  22B9  3183   	fcall	_NewStage
  5375  03D0  0878               	movf	?_NewStage+1,w
  5376  03D1  0020               	movlb	0	; select bank0
  5377  03D2  00B1               	movwf	ConstructStage@new_stage+1
  5378  03D3  0877               	movf	?_NewStage,w
  5379  03D4  00B0               	movwf	ConstructStage@new_stage
  5380                           
  5381                           ;Pattern.c: 52:     AssignLightStates( new_stage, states );
  5382  03D5  0831               	movf	ConstructStage@new_stage+1,w
  5383  03D6  00F3               	movwf	AssignLightStates@stage+1
  5384  03D7  0830               	movf	ConstructStage@new_stage,w
  5385  03D8  00F2               	movwf	AssignLightStates@stage
  5386  03D9  082F               	movf	ConstructStage@states,w
  5387  03DA  00F9               	movwf	??_ConstructStage
  5388  03DB  0879               	movf	??_ConstructStage,w
  5389  03DC  00F4               	movwf	AssignLightStates@states
  5390  03DD  3184  2450  3183   	fcall	_AssignLightStates
  5391  03E0                     l1982:	
  5392                           
  5393                           ;Pattern.c: 53:     new_stage->time_ms = time_ms;
  5394  03E0  0020               	movlb	0	; select bank0
  5395  03E1  0830               	movf	ConstructStage@new_stage,w
  5396  03E2  0086               	movwf	6
  5397  03E3  0831               	movf	ConstructStage@new_stage+1,w
  5398  03E4  0087               	movwf	7
  5399  03E5  3144               	addfsr 1,4
  5400  03E6  082C               	movf	ConstructStage@time_ms,w
  5401  03E7  3FC0               	movwi [0]fsr1
  5402  03E8  082D               	movf	ConstructStage@time_ms+1,w
  5403  03E9  3FC1               	movwi [1]fsr1
  5404  03EA                     l1984:	
  5405                           
  5406                           ;Pattern.c: 54:     new_stage->next = next;
  5407  03EA  0830               	movf	ConstructStage@new_stage,w
  5408  03EB  0086               	movwf	6
  5409  03EC  0831               	movf	ConstructStage@new_stage+1,w
  5410  03ED  0087               	movwf	7
  5411  03EE  3146               	addfsr 1,6
  5412  03EF  082E               	movf	ConstructStage@next,w
  5413  03F0  3FC0               	movwi [0]fsr1
  5414  03F1  3000               	movlw	0
  5415  03F2  3FC1               	movwi [1]fsr1
  5416  03F3                     l1986:	
  5417                           
  5418                           ;Pattern.c: 55:     return new_stage;
  5419  03F3  0831               	movf	ConstructStage@new_stage+1,w
  5420  03F4  00AD               	movwf	?_ConstructStage+1
  5421  03F5  0830               	movf	ConstructStage@new_stage,w
  5422  03F6  00AC               	movwf	?_ConstructStage
  5423  03F7                     l438:	
  5424  03F7  0008               	return
  5425  03F8                     __end_of_ConstructStage:	
  5426                           
  5427                           	psect	text18
  5428  02B9                     __ptext18:	
  5429 ;; *************** function _NewStage *****************
  5430 ;; Defined at:
  5431 ;;		line 35 in file "Pattern.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;		None
  5434 ;; Auto vars:     Size  Location     Type
  5435 ;;  init_states     4    6[BANK0 ] _Bool [4]
  5436 ;;  new_stage       2   10[BANK0 ] PTR struct Stage
  5437 ;;		 -> stage_stash(768), 
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  2    7[COMMON] PTR struct Stage
  5440 ;; Registers used:
  5441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5449 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5450 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5451 ;;Total ram usage:       10 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; Hardware stack levels required when called:    5
  5454 ;; This function calls:
  5455 ;;		_AssignLightStates
  5456 ;; This function is called by:
  5457 ;;		_NewPattern
  5458 ;;		_ConstructStage
  5459 ;;		_InitWigwagPattern
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           
  5464                           ;psect for function _NewStage
  5465  02B9                     _NewStage:	
  5466  02B9                     l1958:	
  5467                           ;incstack = 0
  5468                           ; Regs used in _NewStage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5469                           
  5470                           
  5471                           ;Pattern.c: 37:     if ( stage_list_iter >= MAX_STAGES )
  5472  02B9  3000               	movlw	0
  5473  02BA  0020               	movlb	0	; select bank0
  5474  02BB  025F               	subwf	_stage_list_iter+1,w
  5475  02BC  3060               	movlw	96
  5476  02BD  1903               	skipnz
  5477  02BE  025E               	subwf	_stage_list_iter,w
  5478  02BF  1C03               	skipc
  5479  02C0  2AC2               	goto	u811
  5480  02C1  2AC3               	goto	u810
  5481  02C2                     u811:	
  5482  02C2  2AC6               	goto	l1964
  5483  02C3                     u810:	
  5484  02C3                     l1960:	
  5485                           
  5486                           ;Pattern.c: 38:         return ((void*)0);
  5487  02C3  01F7               	clrf	?_NewStage
  5488  02C4  01F8               	clrf	?_NewStage+1
  5489  02C5  2B07               	goto	l433
  5490  02C6                     l1964:	
  5491                           
  5492                           ;Pattern.c: 40:     struct Stage* new_stage = &stage_stash[ stage_list_iter++ ];
  5493  02C6  085F               	movf	_stage_list_iter+1,w
  5494  02C7  00A3               	movwf	??_NewStage+1
  5495  02C8  085E               	movf	_stage_list_iter,w
  5496  02C9  00A2               	movwf	??_NewStage
  5497  02CA  35A2               	lslf	??_NewStage,f
  5498  02CB  0DA3               	rlf	??_NewStage+1,f
  5499  02CC  35A2               	lslf	??_NewStage,f
  5500  02CD  0DA3               	rlf	??_NewStage+1,f
  5501  02CE  35A2               	lslf	??_NewStage,f
  5502  02CF  0DA3               	rlf	??_NewStage+1,f
  5503  02D0  30F0               	movlw	240
  5504  02D1  00A4               	movwf	??_NewStage+2
  5505  02D2  3020               	movlw	32
  5506  02D3  00A5               	movwf	??_NewStage+3
  5507  02D4  0822               	movf	??_NewStage,w
  5508  02D5  0724               	addwf	??_NewStage+2,w
  5509  02D6  00AA               	movwf	NewStage@new_stage
  5510  02D7  0823               	movf	??_NewStage+1,w
  5511  02D8  3D25               	addwfc	??_NewStage+3,w
  5512  02D9  00AB               	movwf	NewStage@new_stage+1
  5513  02DA                     l1966:	
  5514  02DA  3001               	movlw	1
  5515  02DB  07DE               	addwf	_stage_list_iter,f
  5516  02DC  3000               	movlw	0
  5517  02DD  3DDF               	addwfc	_stage_list_iter+1,f
  5518  02DE                     l1968:	
  5519                           
  5520                           ;Pattern.c: 41:     _Bool init_states[NUM_LIGHTS] = { 0, 0, 0, 0 };
  5521  02DE  3000               	movlw	0
  5522  02DF  00A9               	movwf	NewStage@init_states+3
  5523  02E0  3000               	movlw	0
  5524  02E1  00A8               	movwf	NewStage@init_states+2
  5525  02E2  3000               	movlw	0
  5526  02E3  00A7               	movwf	NewStage@init_states+1
  5527  02E4  3000               	movlw	0
  5528  02E5  00A6               	movwf	NewStage@init_states
  5529  02E6                     l1970:	
  5530                           
  5531                           ;Pattern.c: 42:     AssignLightStates( new_stage, init_states );
  5532  02E6  082B               	movf	NewStage@new_stage+1,w
  5533  02E7  00F3               	movwf	AssignLightStates@stage+1
  5534  02E8  082A               	movf	NewStage@new_stage,w
  5535  02E9  00F2               	movwf	AssignLightStates@stage
  5536  02EA  3026               	movlw	(low (NewStage@init_states| 0))& (0+255)
  5537  02EB  00A2               	movwf	??_NewStage
  5538  02EC  0822               	movf	??_NewStage,w
  5539  02ED  00F4               	movwf	AssignLightStates@states
  5540  02EE  3184  2450  3182   	fcall	_AssignLightStates
  5541  02F1                     l1972:	
  5542                           
  5543                           ;Pattern.c: 43:     new_stage->time_ms = 80UL;
  5544  02F1  0020               	movlb	0	; select bank0
  5545  02F2  082A               	movf	NewStage@new_stage,w
  5546  02F3  0086               	movwf	6
  5547  02F4  082B               	movf	NewStage@new_stage+1,w
  5548  02F5  0087               	movwf	7
  5549  02F6  3144               	addfsr 1,4
  5550  02F7  3050               	movlw	80
  5551  02F8  3FC0               	movwi [0]fsr1
  5552  02F9  3000               	movlw	0
  5553  02FA  3FC1               	movwi [1]fsr1
  5554  02FB                     l1974:	
  5555                           
  5556                           ;Pattern.c: 44:     new_stage->next = ((void*)0);
  5557  02FB  082A               	movf	NewStage@new_stage,w
  5558  02FC  0086               	movwf	6
  5559  02FD  082B               	movf	NewStage@new_stage+1,w
  5560  02FE  0087               	movwf	7
  5561  02FF  3146               	addfsr 1,6
  5562  0300  3000               	movlw	0
  5563  0301  3FC0               	movwi [0]fsr1
  5564  0302  3FC1               	movwi [1]fsr1
  5565  0303                     l1976:	
  5566                           
  5567                           ;Pattern.c: 46:     return new_stage;
  5568  0303  082B               	movf	NewStage@new_stage+1,w
  5569  0304  00F8               	movwf	?_NewStage+1
  5570  0305  082A               	movf	NewStage@new_stage,w
  5571  0306  00F7               	movwf	?_NewStage
  5572  0307                     l433:	
  5573  0307  0008               	return
  5574  0308                     __end_of_NewStage:	
  5575                           
  5576                           	psect	text19
  5577  0450                     __ptext19:	
  5578 ;; *************** function _AssignLightStates *****************
  5579 ;; Defined at:
  5580 ;;		line 27 in file "Pattern.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  stage           2    2[COMMON] PTR struct Stage
  5583 ;;		 -> stage_stash(768), NULL(0), 
  5584 ;;  states          1    4[COMMON] PTR const _Bool 
  5585 ;;		 -> InitWigwagPattern@right_side_states(4), InitWigwagPattern@left_side_states(4), NewStage@init_states(4), 
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  i               2    0[BANK0 ] unsigned short 
  5588 ;; Return value:  Size  Location     Type
  5589 ;;                  1    wreg      void 
  5590 ;; Registers used:
  5591 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5597 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5598 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5599 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5600 ;;      Totals:         7       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5601 ;;Total ram usage:        9 bytes
  5602 ;; Hardware stack levels used:    1
  5603 ;; Hardware stack levels required when called:    4
  5604 ;; This function calls:
  5605 ;;		Nothing
  5606 ;; This function is called by:
  5607 ;;		_NewStage
  5608 ;;		_ConstructStage
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           
  5613                           ;psect for function _AssignLightStates
  5614  0450                     _AssignLightStates:	
  5615  0450                     l1946:	
  5616                           ;incstack = 0
  5617                           ; Regs used in _AssignLightStates: [wreg+fsr1l+fsr1h+status,2+status,0]
  5618                           
  5619                           
  5620                           ;Pattern.c: 27: void AssignLightStates( struct Stage* stage, const _Bool states[ NUM_LIG
      +                          HTS ] );Pattern.c: 28: {;Pattern.c: 29:     for( uint i = 0; i < NUM_LIGHTS; i++ )
  5621  0450  0020               	movlb	0	; select bank0
  5622  0451  01A0               	clrf	AssignLightStates@i
  5623  0452  01A1               	clrf	AssignLightStates@i+1
  5624  0453                     l1952:	
  5625                           
  5626                           ;Pattern.c: 30:     {;Pattern.c: 31:         stage->light_states[i] = states[i];
  5627  0453  0820               	movf	AssignLightStates@i,w
  5628  0454  0774               	addwf	AssignLightStates@states,w
  5629  0455  00F5               	movwf	??_AssignLightStates
  5630  0456  0875               	movf	??_AssignLightStates,w
  5631  0457  0086               	movwf	6
  5632  0458  0187               	clrf	7
  5633  0459  0801               	movf	1,w
  5634  045A  00F6               	movwf	??_AssignLightStates+1
  5635  045B  0820               	movf	AssignLightStates@i,w
  5636  045C  0772               	addwf	AssignLightStates@stage,w
  5637  045D  00F7               	movwf	??_AssignLightStates+2
  5638  045E  0821               	movf	AssignLightStates@i+1,w
  5639  045F  3D73               	addwfc	AssignLightStates@stage+1,w
  5640  0460  00F8               	movwf	??_AssignLightStates+3
  5641  0461  0877               	movf	??_AssignLightStates+2,w
  5642  0462  0086               	movwf	6
  5643  0463  0878               	movf	??_AssignLightStates+3,w
  5644  0464  0087               	movwf	7
  5645  0465  0876               	movf	??_AssignLightStates+1,w
  5646  0466  0081               	movwf	1
  5647  0467                     l1954:	
  5648                           
  5649                           ;Pattern.c: 32:     }
  5650  0467  3001               	movlw	1
  5651  0468  07A0               	addwf	AssignLightStates@i,f
  5652  0469  3000               	movlw	0
  5653  046A  3DA1               	addwfc	AssignLightStates@i+1,f
  5654  046B                     l1956:	
  5655  046B  3000               	movlw	0
  5656  046C  0221               	subwf	AssignLightStates@i+1,w
  5657  046D  3004               	movlw	4
  5658  046E  1903               	skipnz
  5659  046F  0220               	subwf	AssignLightStates@i,w
  5660  0470  1C03               	skipc
  5661  0471  2C73               	goto	u801
  5662  0472  2C74               	goto	u800
  5663  0473                     u801:	
  5664  0473  2C53               	goto	l1952
  5665  0474                     u800:	
  5666  0474                     l429:	
  5667  0474  0008               	return
  5668  0475                     __end_of_AssignLightStates:	
  5669                           
  5670                           	psect	text20
  5671  0261                     __ptext20:	
  5672 ;; *************** function _AppendStage *****************
  5673 ;; Defined at:
  5674 ;;		line 73 in file "Pattern.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;  head            2   21[BANK0 ] PTR struct Stage
  5677 ;;		 -> stage_stash(768), NULL(0), 
  5678 ;;  new_stage       2   23[BANK0 ] PTR struct Stage
  5679 ;;		 -> stage_stash(768), NULL(0), 
  5680 ;; Auto vars:     Size  Location     Type
  5681 ;;  last_stage      2   27[BANK0 ] PTR struct Stage
  5682 ;;		 -> stage_stash(768), NULL(0), 
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  1    wreg      void 
  5685 ;; Registers used:
  5686 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5692 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;Total ram usage:        8 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    4
  5699 ;; This function calls:
  5700 ;;		Nothing
  5701 ;; This function is called by:
  5702 ;;		_InitWigwagPattern
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           
  5707                           ;psect for function _AppendStage
  5708  0261                     _AppendStage:	
  5709  0261                     l1608:	
  5710                           ;incstack = 0
  5711                           ; Regs used in _AppendStage: [wreg+fsr1l+fsr1h+status,2+status,0]
  5712                           
  5713                           
  5714                           ;Pattern.c: 73: void AppendStage( struct Stage* head, struct Stage* new_stage );Pattern.
      +                          c: 74: {;Pattern.c: 75:     if ( head->next == ((void*)0) )
  5715  0261  0020               	movlb	0	; select bank0
  5716  0262  0835               	movf	AppendStage@head,w
  5717  0263  0086               	movwf	6
  5718  0264  0836               	movf	AppendStage@head+1,w
  5719  0265  0087               	movwf	7
  5720  0266  3146               	addfsr 1,6
  5721  0267  0016               	moviw fsr1++
  5722  0268  0401               	iorwf	1,w
  5723  0269  1D03               	btfss	3,2
  5724  026A  2A6C               	goto	u441
  5725  026B  2A6D               	goto	u440
  5726  026C                     u441:	
  5727  026C  2A80               	goto	l1612
  5728  026D                     u440:	
  5729  026D                     l1610:	
  5730                           
  5731                           ;Pattern.c: 76:     {;Pattern.c: 77:         head->next = new_stage;
  5732  026D  0835               	movf	AppendStage@head,w
  5733  026E  0086               	movwf	6
  5734  026F  0836               	movf	AppendStage@head+1,w
  5735  0270  0087               	movwf	7
  5736  0271  3146               	addfsr 1,6
  5737  0272  0837               	movf	AppendStage@new_stage,w
  5738  0273  3FC0               	movwi [0]fsr1
  5739  0274  0838               	movf	AppendStage@new_stage+1,w
  5740  0275  3FC1               	movwi [1]fsr1
  5741                           
  5742                           ;Pattern.c: 78:         new_stage->next = head;
  5743  0276  0837               	movf	AppendStage@new_stage,w
  5744  0277  0086               	movwf	6
  5745  0278  0838               	movf	AppendStage@new_stage+1,w
  5746  0279  0087               	movwf	7
  5747  027A  3146               	addfsr 1,6
  5748  027B  0835               	movf	AppendStage@head,w
  5749  027C  3FC0               	movwi [0]fsr1
  5750  027D  0836               	movf	AppendStage@head+1,w
  5751  027E  3FC1               	movwi [1]fsr1
  5752                           
  5753                           ;Pattern.c: 79:     }
  5754  027F  2AB8               	goto	l454
  5755  0280                     l1612:	
  5756                           
  5757                           ;Pattern.c: 81:     {;Pattern.c: 82:         struct Stage* last_stage = head->next;
  5758  0280  0835               	movf	AppendStage@head,w
  5759  0281  0086               	movwf	6
  5760  0282  0836               	movf	AppendStage@head+1,w
  5761  0283  0087               	movwf	7
  5762  0284  3146               	addfsr 1,6
  5763  0285  3F40               	moviw [0]fsr1
  5764  0286  00BB               	movwf	AppendStage@last_stage
  5765  0287  3F41               	moviw [1]fsr1
  5766  0288  00BC               	movwf	AppendStage@last_stage+1
  5767                           
  5768                           ;Pattern.c: 83:         while( last_stage->next != head )
  5769  0289  2A93               	goto	l1616
  5770  028A                     l1614:	
  5771                           
  5772                           ;Pattern.c: 84:             last_stage = last_stage->next;
  5773  028A  083B               	movf	AppendStage@last_stage,w
  5774  028B  0086               	movwf	6
  5775  028C  083C               	movf	AppendStage@last_stage+1,w
  5776  028D  0087               	movwf	7
  5777  028E  3146               	addfsr 1,6
  5778  028F  3F40               	moviw [0]fsr1
  5779  0290  00BB               	movwf	AppendStage@last_stage
  5780  0291  3F41               	moviw [1]fsr1
  5781  0292  00BC               	movwf	AppendStage@last_stage+1
  5782  0293                     l1616:	
  5783                           
  5784                           ;Pattern.c: 83:         while( last_stage->next != head )
  5785  0293  083B               	movf	AppendStage@last_stage,w
  5786  0294  0086               	movwf	6
  5787  0295  083C               	movf	AppendStage@last_stage+1,w
  5788  0296  0087               	movwf	7
  5789  0297  3146               	addfsr 1,6
  5790  0298  3F40               	moviw [0]fsr1
  5791  0299  00B9               	movwf	??_AppendStage
  5792  029A  3F41               	moviw [1]fsr1
  5793  029B  00BA               	movwf	??_AppendStage+1
  5794  029C  0836               	movf	AppendStage@head+1,w
  5795  029D  063A               	xorwf	??_AppendStage+1,w
  5796  029E  1D03               	skipz
  5797  029F  2AA2               	goto	u455
  5798  02A0  0835               	movf	AppendStage@head,w
  5799  02A1  0639               	xorwf	??_AppendStage,w
  5800  02A2                     u455:	
  5801  02A2  1D03               	skipz
  5802  02A3  2AA5               	goto	u451
  5803  02A4  2AA6               	goto	u450
  5804  02A5                     u451:	
  5805  02A5  2A8A               	goto	l1614
  5806  02A6                     u450:	
  5807  02A6                     l1618:	
  5808                           
  5809                           ;Pattern.c: 87:         last_stage->next = new_stage;
  5810  02A6  083B               	movf	AppendStage@last_stage,w
  5811  02A7  0086               	movwf	6
  5812  02A8  083C               	movf	AppendStage@last_stage+1,w
  5813  02A9  0087               	movwf	7
  5814  02AA  3146               	addfsr 1,6
  5815  02AB  0837               	movf	AppendStage@new_stage,w
  5816  02AC  3FC0               	movwi [0]fsr1
  5817  02AD  0838               	movf	AppendStage@new_stage+1,w
  5818  02AE  3FC1               	movwi [1]fsr1
  5819                           
  5820                           ;Pattern.c: 88:         new_stage->next = head;
  5821  02AF  0837               	movf	AppendStage@new_stage,w
  5822  02B0  0086               	movwf	6
  5823  02B1  0838               	movf	AppendStage@new_stage+1,w
  5824  02B2  0087               	movwf	7
  5825  02B3  3146               	addfsr 1,6
  5826  02B4  0835               	movf	AppendStage@head,w
  5827  02B5  3FC0               	movwi [0]fsr1
  5828  02B6  0836               	movf	AppendStage@head+1,w
  5829  02B7  3FC1               	movwi [1]fsr1
  5830  02B8                     l454:	
  5831  02B8  0008               	return
  5832  02B9                     __end_of_AppendStage:	
  5833                           
  5834                           	psect	text21
  5835  03F8                     __ptext21:	
  5836 ;; *************** function _PatternCycleInputChanged *****************
  5837 ;; Defined at:
  5838 ;;		line 21 in file "TurnSignal.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;		None
  5841 ;; Auto vars:     Size  Location     Type
  5842 ;;  delay_count     2    4[COMMON] unsigned short 
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  1    wreg      _Bool 
  5845 ;; Registers used:
  5846 ;;		wreg, status,2, status,0
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5853 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5854 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5855 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5856 ;;Total ram usage:        4 bytes
  5857 ;; Hardware stack levels used:    1
  5858 ;; Hardware stack levels required when called:    4
  5859 ;; This function calls:
  5860 ;;		Nothing
  5861 ;; This function is called by:
  5862 ;;		_main
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           
  5867                           ;psect for function _PatternCycleInputChanged
  5868  03F8                     _PatternCycleInputChanged:	
  5869  03F8                     l1854:	
  5870                           ;incstack = 0
  5871                           ; Regs used in _PatternCycleInputChanged: [wreg+status,2+status,0]
  5872                           
  5873                           
  5874                           ;TurnSignal.c: 23:     if ( cur_pc_input_state != last_pc_input_state )
  5875  03F8  087B               	movf	_cur_pc_input_state,w
  5876  03F9  067A               	xorwf	_last_pc_input_state,w
  5877  03FA  1903               	skipnz
  5878  03FB  2BFD               	goto	u701
  5879  03FC  2BFE               	goto	u700
  5880  03FD                     u701:	
  5881  03FD  2C11               	goto	l1862
  5882  03FE                     u700:	
  5883  03FE                     l1856:	
  5884                           
  5885                           ;TurnSignal.c: 24:     {;TurnSignal.c: 25:         uint delay_count = 0;
  5886  03FE  01F4               	clrf	PatternCycleInputChanged@delay_count
  5887  03FF  01F5               	clrf	PatternCycleInputChanged@delay_count+1
  5888                           
  5889                           ;TurnSignal.c: 27:         while ( delay_count++ < 3 )
  5890  0400  2C13               	goto	l1866
  5891  0401                     l1858:	
  5892                           
  5893                           ;TurnSignal.c: 28:         {;TurnSignal.c: 29:             _delay((unsigned long)((10)*(
      +                          1000000/4000.0)));
  5894  0401  3004               	movlw	4
  5895  0402  00F2               	movwf	??_PatternCycleInputChanged
  5896  0403  303E               	movlw	62
  5897  0404                     u1007:	
  5898  0404  0B89               	decfsz	9,f
  5899  0405  2C04               	goto	u1007
  5900  0406  0BF2               	decfsz	??_PatternCycleInputChanged,f
  5901  0407  2C04               	goto	u1007
  5902  0408                     l1860:	
  5903                           
  5904                           ;TurnSignal.c: 31:             if( PORTCbits.RC5 != cur_pc_input_state )
  5905  0408  0020               	movlb	0	; select bank0
  5906  0409  0E0E               	swapf	14,w	;volatile
  5907  040A  0C89               	rrf	9,f
  5908  040B  3901               	andlw	1
  5909  040C  067B               	xorwf	_cur_pc_input_state,w
  5910  040D  1903               	skipnz
  5911  040E  2C10               	goto	u711
  5912  040F  2C11               	goto	u710
  5913  0410                     u711:	
  5914  0410  2C13               	goto	l1866
  5915  0411                     u710:	
  5916  0411                     l1862:	
  5917                           
  5918                           ;TurnSignal.c: 32:             {;TurnSignal.c: 33:                 return 0;
  5919  0411  3000               	movlw	0
  5920  0412  2C24               	goto	l400
  5921  0413                     l1866:	
  5922                           
  5923                           ;TurnSignal.c: 27:         while ( delay_count++ < 3 )
  5924  0413  0875               	movf	PatternCycleInputChanged@delay_count+1,w
  5925  0414  00F3               	movwf	??_PatternCycleInputChanged+1
  5926  0415  0874               	movf	PatternCycleInputChanged@delay_count,w
  5927  0416  00F2               	movwf	??_PatternCycleInputChanged
  5928  0417  0AF4               	incf	PatternCycleInputChanged@delay_count,f
  5929  0418  1903               	skipnz
  5930  0419  0AF5               	incf	PatternCycleInputChanged@delay_count+1,f
  5931  041A  3000               	movlw	0
  5932  041B  0273               	subwf	??_PatternCycleInputChanged+1,w
  5933  041C  3003               	movlw	3
  5934  041D  1903               	skipnz
  5935  041E  0272               	subwf	??_PatternCycleInputChanged,w
  5936  041F  1C03               	skipc
  5937  0420  2C22               	goto	u721
  5938  0421  2C23               	goto	u720
  5939  0422                     u721:	
  5940  0422  2C01               	goto	l1858
  5941  0423                     u720:	
  5942  0423                     l1872:	
  5943                           
  5944                           ;TurnSignal.c: 40:     return 1;
  5945  0423  3001               	movlw	1
  5946  0424                     l400:	
  5947  0424  0008               	return
  5948  0425                     __end_of_PatternCycleInputChanged:	
  5949                           
  5950                           	psect	text22
  5951  017C                     __ptext22:	
  5952 ;; *************** function _FlashPattern *****************
  5953 ;; Defined at:
  5954 ;;		line 11 in file "PatternFlasher.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  pattern         2    6[COMMON] PTR struct Pattern
  5957 ;;		 -> pattern_stash(18), NULL(0), 
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;  current_time    2    8[COMMON] unsigned short 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  1    wreg      void 
  5962 ;; Registers used:
  5963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5969 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5970 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5971 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5972 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5973 ;;Total ram usage:        8 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    5
  5976 ;; This function calls:
  5977 ;;		_SetLight
  5978 ;; This function is called by:
  5979 ;;		_main
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           
  5984                           ;psect for function _FlashPattern
  5985  017C                     _FlashPattern:	
  5986  017C                     l2108:	
  5987                           ;incstack = 0
  5988                           ; Regs used in _FlashPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5989                           
  5990                           
  5991                           ;PatternFlasher.c: 11: void FlashPattern( struct Pattern* pattern );PatternFlasher.c: 12
      +                          : {;PatternFlasher.c: 13:     uint current_time = cur_ms;
  5992  017C  0020               	movlb	0	; select bank0
  5993  017D  0865               	movf	_cur_ms+1,w	;volatile
  5994  017E  00F9               	movwf	FlashPattern@current_time+1
  5995  017F  0864               	movf	_cur_ms,w	;volatile
  5996  0180  00F8               	movwf	FlashPattern@current_time
  5997  0181                     l2110:	
  5998                           
  5999                           ;PatternFlasher.c: 15:     if ( current_time - start_time > pattern_selector.current_sta
      +                          ge->time_ms )
  6000  0181  085A               	movf	_start_time,w
  6001  0182  0278               	subwf	FlashPattern@current_time,w
  6002  0183  00A0               	movwf	??_FlashPattern
  6003  0184  085B               	movf	_start_time+1,w
  6004  0185  3B79               	subwfb	FlashPattern@current_time+1,w
  6005  0186  00A1               	movwf	??_FlashPattern+1
  6006  0187  0021               	movlb	1	; select bank1
  6007  0188  0845               	movf	(_pattern_selector^(0+128)+12),w
  6008  0189  0086               	movwf	6
  6009  018A  0846               	movf	((_pattern_selector+1)^(0+128)+12),w
  6010  018B  0087               	movwf	7
  6011  018C  3144               	addfsr 1,4
  6012  018D  3F40               	moviw [0]fsr1
  6013  018E  0020               	movlb	0	; select bank0
  6014  018F  00A2               	movwf	??_FlashPattern+2
  6015  0190  3F41               	moviw [1]fsr1
  6016  0191  00A3               	movwf	??_FlashPattern+3
  6017  0192  0821               	movf	??_FlashPattern+1,w
  6018  0193  0223               	subwf	??_FlashPattern+3,w
  6019  0194  1D03               	skipz
  6020  0195  2998               	goto	u985
  6021  0196  0820               	movf	??_FlashPattern,w
  6022  0197  0222               	subwf	??_FlashPattern+2,w
  6023  0198                     u985:	
  6024  0198  1803               	skipnc
  6025  0199  299B               	goto	u981
  6026  019A  299C               	goto	u980
  6027  019B                     u981:	
  6028  019B  29AD               	goto	l2118
  6029  019C                     u980:	
  6030  019C                     l2112:	
  6031                           
  6032                           ;PatternFlasher.c: 16:     {;PatternFlasher.c: 17:         pattern_selector.current_stag
      +                          e = pattern_selector.current_stage->next;
  6033  019C  0021               	movlb	1	; select bank1
  6034  019D  0845               	movf	(_pattern_selector^(0+128)+12),w
  6035  019E  0086               	movwf	6
  6036  019F  0846               	movf	((_pattern_selector+1)^(0+128)+12),w
  6037  01A0  0087               	movwf	7
  6038  01A1  3146               	addfsr 1,6
  6039  01A2  3F40               	moviw [0]fsr1
  6040  01A3  00C5               	movwf	(_pattern_selector^(0+128)+12)
  6041  01A4  3F41               	moviw [1]fsr1
  6042  01A5  00C6               	movwf	((_pattern_selector+1)^(0+128)+12)
  6043  01A6                     l2114:	
  6044                           
  6045                           ;PatternFlasher.c: 18:         start_time = current_time;
  6046  01A6  0879               	movf	FlashPattern@current_time+1,w
  6047  01A7  0020               	movlb	0	; select bank0
  6048  01A8  00DB               	movwf	_start_time+1
  6049  01A9  0878               	movf	FlashPattern@current_time,w
  6050  01AA  00DA               	movwf	_start_time
  6051  01AB                     l2116:	
  6052                           
  6053                           ;PatternFlasher.c: 19:         update_stage = 1;
  6054  01AB  01E8               	clrf	_update_stage
  6055  01AC  0AE8               	incf	_update_stage,f
  6056  01AD                     l2118:	
  6057                           
  6058                           ;PatternFlasher.c: 23:     if ( update_stage == 1 )
  6059  01AD  0368               	decf	_update_stage,w
  6060  01AE  1D03               	btfss	3,2
  6061  01AF  29B1               	goto	u991
  6062  01B0  29B2               	goto	u990
  6063  01B1                     u991:	
  6064  01B1  29EF               	goto	l508
  6065  01B2                     u990:	
  6066  01B2                     l2120:	
  6067                           
  6068                           ;PatternFlasher.c: 24:     {;PatternFlasher.c: 25:         SetLight( L1, pattern_selecto
      +                          r.current_stage->light_states[L1] );
  6069  01B2  0021               	movlb	1	; select bank1
  6070  01B3  0845               	movf	(_pattern_selector^(0+128)+12),w
  6071  01B4  0086               	movwf	6
  6072  01B5  0846               	movf	((_pattern_selector+1)^(0+128)+12),w
  6073  01B6  0087               	movwf	7
  6074  01B7  0801               	movf	1,w
  6075  01B8  0020               	movlb	0	; select bank0
  6076  01B9  00A0               	movwf	??_FlashPattern
  6077  01BA  0820               	movf	??_FlashPattern,w
  6078  01BB  00F2               	movwf	SetLight@state
  6079  01BC  3000               	movlw	0
  6080  01BD  3181  21F0  3181   	fcall	_SetLight
  6081                           
  6082                           ;PatternFlasher.c: 26:         SetLight( L2, pattern_selector.current_stage->light_state
      +                          s[L2] );
  6083  01C0  0021               	movlb	1	; select bank1
  6084  01C1  0845               	movf	(_pattern_selector^(0+128)+12),w
  6085  01C2  0086               	movwf	6
  6086  01C3  0846               	movf	((_pattern_selector+1)^(0+128)+12),w
  6087  01C4  0087               	movwf	7
  6088  01C5  3141               	addfsr 1,1
  6089  01C6  0801               	movf	1,w
  6090  01C7  0020               	movlb	0	; select bank0
  6091  01C8  00A0               	movwf	??_FlashPattern
  6092  01C9  0820               	movf	??_FlashPattern,w
  6093  01CA  00F2               	movwf	SetLight@state
  6094  01CB  3001               	movlw	1
  6095  01CC  3181  21F0  3181   	fcall	_SetLight
  6096                           
  6097                           ;PatternFlasher.c: 27:         SetLight( L3, pattern_selector.current_stage->light_state
      +                          s[L3] );
  6098  01CF  0021               	movlb	1	; select bank1
  6099  01D0  0845               	movf	(_pattern_selector^(0+128)+12),w
  6100  01D1  0086               	movwf	6
  6101  01D2  0846               	movf	((_pattern_selector+1)^(0+128)+12),w
  6102  01D3  0087               	movwf	7
  6103  01D4  3142               	addfsr 1,2
  6104  01D5  0801               	movf	1,w
  6105  01D6  0020               	movlb	0	; select bank0
  6106  01D7  00A0               	movwf	??_FlashPattern
  6107  01D8  0820               	movf	??_FlashPattern,w
  6108  01D9  00F2               	movwf	SetLight@state
  6109  01DA  3002               	movlw	2
  6110  01DB  3181  21F0  3181   	fcall	_SetLight
  6111                           
  6112                           ;PatternFlasher.c: 28:         SetLight( L4, pattern_selector.current_stage->light_state
      +                          s[L4] );
  6113  01DE  0021               	movlb	1	; select bank1
  6114  01DF  0845               	movf	(_pattern_selector^(0+128)+12),w
  6115  01E0  0086               	movwf	6
  6116  01E1  0846               	movf	((_pattern_selector+1)^(0+128)+12),w
  6117  01E2  0087               	movwf	7
  6118  01E3  3143               	addfsr 1,3
  6119  01E4  0801               	movf	1,w
  6120  01E5  0020               	movlb	0	; select bank0
  6121  01E6  00A0               	movwf	??_FlashPattern
  6122  01E7  0820               	movf	??_FlashPattern,w
  6123  01E8  00F2               	movwf	SetLight@state
  6124  01E9  3003               	movlw	3
  6125  01EA  3181  21F0  3181   	fcall	_SetLight
  6126  01ED                     l2122:	
  6127                           
  6128                           ;PatternFlasher.c: 29:         update_stage = 0;
  6129  01ED  0020               	movlb	0	; select bank0
  6130  01EE  01E8               	clrf	_update_stage
  6131  01EF                     l508:	
  6132  01EF  0008               	return
  6133  01F0                     __end_of_FlashPattern:	
  6134                           
  6135                           	psect	text23
  6136  01F0                     __ptext23:	
  6137 ;; *************** function _SetLight *****************
  6138 ;; Defined at:
  6139 ;;		line 12 in file "Lights.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;  light           1    wreg     const enum E6336
  6142 ;;  state           1    2[COMMON] const _Bool 
  6143 ;; Auto vars:     Size  Location     Type
  6144 ;;  light           1    5[COMMON] const enum E6336
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  1    wreg      void 
  6147 ;; Registers used:
  6148 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6154 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6156 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6157 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;Total ram usage:        4 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:    4
  6161 ;; This function calls:
  6162 ;;		Nothing
  6163 ;; This function is called by:
  6164 ;;		_SetOutputs
  6165 ;;		_FlashPattern
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           
  6170                           ;psect for function _SetLight
  6171  01F0                     _SetLight:	
  6172                           
  6173                           ;incstack = 0
  6174                           ; Regs used in _SetLight: [wreg-fsr0h+status,2+status,0]
  6175                           ;SetLight@light stored from wreg
  6176  01F0  00F5               	movwf	SetLight@light
  6177  01F1                     l2050:	
  6178                           
  6179                           ;Lights.c: 12: void SetLight( const enum Light light, const _Bool state );Lights.c: 13: 
      +                          {;Lights.c: 15:     switch ( light )
  6180  01F1  2A4A               	goto	l2072
  6181  01F2                     l2052:	
  6182                           
  6183                           ;Lights.c: 18:             if ( PORTCbits.RC1 != state )
  6184  01F2  0020               	movlb	0	; select bank0
  6185  01F3  0C0E               	rrf	14,w	;volatile
  6186  01F4  3901               	andlw	1
  6187  01F5  0672               	xorwf	SetLight@state,w
  6188  01F6  1903               	skipnz
  6189  01F7  29F9               	goto	u851
  6190  01F8  29FA               	goto	u850
  6191  01F9                     u851:	
  6192  01F9  2A60               	goto	l363
  6193  01FA                     u850:	
  6194  01FA                     l2054:	
  6195  01FA  1003               	clrc
  6196  01FB  0022               	movlb	2	; select bank2
  6197  01FC  1C8E               	btfss	14,1	;volatile
  6198  01FD  1403               	setc
  6199  01FE  1803               	btfsc	3,0
  6200  01FF  2A01               	goto	u861
  6201  0200  2A04               	goto	u860
  6202  0201                     u861:	
  6203  0201  0022               	movlb	2	; select bank2
  6204  0202  148E               	bsf	14,1	;volatile
  6205  0203  2A06               	goto	u874
  6206  0204                     u860:	
  6207  0204  0022               	movlb	2	; select bank2
  6208  0205  108E               	bcf	14,1	;volatile
  6209  0206                     u874:	
  6210  0206  2A60               	goto	l363
  6211  0207                     l2056:	
  6212                           
  6213                           ;Lights.c: 22:             if ( PORTCbits.RC2 != state )
  6214  0207  0020               	movlb	0	; select bank0
  6215  0208  0C0E               	rrf	14,w	;volatile
  6216  0209  0C89               	rrf	9,f
  6217  020A  3901               	andlw	1
  6218  020B  0672               	xorwf	SetLight@state,w
  6219  020C  1903               	skipnz
  6220  020D  2A0F               	goto	u881
  6221  020E  2A10               	goto	u880
  6222  020F                     u881:	
  6223  020F  2A60               	goto	l363
  6224  0210                     u880:	
  6225  0210                     l2058:	
  6226  0210  1003               	clrc
  6227  0211  0022               	movlb	2	; select bank2
  6228  0212  1D0E               	btfss	14,2	;volatile
  6229  0213  1403               	setc
  6230  0214  1803               	btfsc	3,0
  6231  0215  2A17               	goto	u891
  6232  0216  2A1A               	goto	u890
  6233  0217                     u891:	
  6234  0217  0022               	movlb	2	; select bank2
  6235  0218  150E               	bsf	14,2	;volatile
  6236  0219  2A1C               	goto	u904
  6237  021A                     u890:	
  6238  021A  0022               	movlb	2	; select bank2
  6239  021B  110E               	bcf	14,2	;volatile
  6240  021C                     u904:	
  6241  021C  2A60               	goto	l363
  6242  021D                     l2060:	
  6243                           
  6244                           ;Lights.c: 26:             if ( PORTCbits.RC3 != state )
  6245  021D  0020               	movlb	0	; select bank0
  6246  021E  0C0E               	rrf	14,w	;volatile
  6247  021F  00F3               	movwf	??_SetLight
  6248  0220  0CF3               	rrf	??_SetLight,f
  6249  0221  0C73               	rrf	??_SetLight,w
  6250  0222  3901               	andlw	1
  6251  0223  0672               	xorwf	SetLight@state,w
  6252  0224  1903               	skipnz
  6253  0225  2A27               	goto	u911
  6254  0226  2A28               	goto	u910
  6255  0227                     u911:	
  6256  0227  2A60               	goto	l363
  6257  0228                     u910:	
  6258  0228                     l2062:	
  6259  0228  1003               	clrc
  6260  0229  0022               	movlb	2	; select bank2
  6261  022A  1D8E               	btfss	14,3	;volatile
  6262  022B  1403               	setc
  6263  022C  1803               	btfsc	3,0
  6264  022D  2A2F               	goto	u921
  6265  022E  2A32               	goto	u920
  6266  022F                     u921:	
  6267  022F  0022               	movlb	2	; select bank2
  6268  0230  158E               	bsf	14,3	;volatile
  6269  0231  2A34               	goto	u934
  6270  0232                     u920:	
  6271  0232  0022               	movlb	2	; select bank2
  6272  0233  118E               	bcf	14,3	;volatile
  6273  0234                     u934:	
  6274  0234  2A60               	goto	l363
  6275  0235                     l2064:	
  6276                           
  6277                           ;Lights.c: 31:             if ( PORTCbits.RC4 != state )
  6278  0235  0020               	movlb	0	; select bank0
  6279  0236  0E0E               	swapf	14,w	;volatile
  6280  0237  3901               	andlw	1
  6281  0238  0672               	xorwf	SetLight@state,w
  6282  0239  1903               	skipnz
  6283  023A  2A3C               	goto	u941
  6284  023B  2A3D               	goto	u940
  6285  023C                     u941:	
  6286  023C  2A60               	goto	l363
  6287  023D                     u940:	
  6288  023D                     l2066:	
  6289  023D  1003               	clrc
  6290  023E  0022               	movlb	2	; select bank2
  6291  023F  1E0E               	btfss	14,4	;volatile
  6292  0240  1403               	setc
  6293  0241  1803               	btfsc	3,0
  6294  0242  2A44               	goto	u951
  6295  0243  2A47               	goto	u950
  6296  0244                     u951:	
  6297  0244  0022               	movlb	2	; select bank2
  6298  0245  160E               	bsf	14,4	;volatile
  6299  0246  2A49               	goto	u964
  6300  0247                     u950:	
  6301  0247  0022               	movlb	2	; select bank2
  6302  0248  120E               	bcf	14,4	;volatile
  6303  0249                     u964:	
  6304  0249  2A60               	goto	l363
  6305  024A                     l2072:	
  6306  024A  0875               	movf	SetLight@light,w
  6307  024B  00F3               	movwf	??_SetLight
  6308  024C  01F4               	clrf	??_SetLight+1
  6309                           
  6310                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6311                           ; Switch size 1, requested type "simple"
  6312                           ; Number of cases is 1, Range of values is 0 to 0
  6313                           ; switch strategies available:
  6314                           ; Name         Instructions Cycles
  6315                           ; simple_byte            4     3 (average)
  6316                           ; direct_byte            8     6 (fixed)
  6317                           ; jumptable            260     6 (fixed)
  6318                           ;	Chosen strategy is simple_byte
  6319  024D  0874               	movf	??_SetLight+1,w
  6320  024E  3A00               	xorlw	0	; case 0
  6321  024F  1903               	skipnz
  6322  0250  2A52               	goto	l2158
  6323  0251  2A35               	goto	l2064
  6324  0252                     l2158:	
  6325                           
  6326                           ; Switch size 1, requested type "simple"
  6327                           ; Number of cases is 4, Range of values is 0 to 3
  6328                           ; switch strategies available:
  6329                           ; Name         Instructions Cycles
  6330                           ; simple_byte           13     7 (average)
  6331                           ; direct_byte           14     6 (fixed)
  6332                           ; jumptable            260     6 (fixed)
  6333                           ;	Chosen strategy is simple_byte
  6334  0252  0873               	movf	??_SetLight,w
  6335  0253  3A00               	xorlw	0	; case 0
  6336  0254  1903               	skipnz
  6337  0255  29F2               	goto	l2052
  6338  0256  3A01               	xorlw	1	; case 1
  6339  0257  1903               	skipnz
  6340  0258  2A07               	goto	l2056
  6341  0259  3A03               	xorlw	3	; case 2
  6342  025A  1903               	skipnz
  6343  025B  2A1D               	goto	l2060
  6344  025C  3A01               	xorlw	1	; case 3
  6345  025D  1903               	skipnz
  6346  025E  2A35               	goto	l2064
  6347  025F  2A35               	goto	l2064
  6348  0260                     l363:	
  6349  0260  0008               	return
  6350  0261                     __end_of_SetLight:	
  6351                           
  6352                           	psect	intentry
  6353  0004                     __pintentry:	
  6354 ;; *************** function _INTERRUPT_InterruptManager *****************
  6355 ;; Defined at:
  6356 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6357 ;; Parameters:    Size  Location     Type
  6358 ;;		None
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;		None
  6361 ;; Return value:  Size  Location     Type
  6362 ;;                  1    wreg      void 
  6363 ;; Registers used:
  6364 ;;		wreg, status,2, status,0, pclath, cstack
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;Total ram usage:        0 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; Hardware stack levels required when called:    3
  6377 ;; This function calls:
  6378 ;;		_PIN_MANAGER_IOC
  6379 ;;		_TMR1_ISR
  6380 ;; This function is called by:
  6381 ;;		Interrupt level 1
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385  0004                     _INTERRUPT_InterruptManager:	
  6386                           
  6387                           ;incstack = 0
  6388  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  6389                           
  6390                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  6391  0005  3180               	pagesel	$
  6392  0006                     i1l1892:	
  6393                           
  6394                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
  6395  0006  0021               	movlb	1	; select bank1
  6396  0007  1E10               	btfss	16,4	;volatile
  6397  0008  280A               	goto	u75_21
  6398  0009  280B               	goto	u75_20
  6399  000A                     u75_21:	
  6400  000A  2814               	goto	i1l168
  6401  000B                     u75_20:	
  6402  000B                     i1l1894:	
  6403  000B  0020               	movlb	0	; select bank0
  6404  000C  1E10               	btfss	16,4	;volatile
  6405  000D  280F               	goto	u76_21
  6406  000E  2810               	goto	u76_20
  6407  000F                     u76_21:	
  6408  000F  2814               	goto	i1l168
  6409  0010                     u76_20:	
  6410  0010                     i1l1896:	
  6411                           
  6412                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
  6413  0010  3185  2557  3180   	fcall	_PIN_MANAGER_IOC
  6414                           
  6415                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  6416  0013  2826               	goto	i1l174
  6417  0014                     i1l168:	
  6418                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  6419                           
  6420  0014  1F0B               	btfss	11,6	;volatile
  6421  0015  2817               	goto	u77_21
  6422  0016  2818               	goto	u77_20
  6423  0017                     u77_21:	
  6424  0017  2826               	goto	i1l174
  6425  0018                     u77_20:	
  6426  0018                     i1l1898:	
  6427                           
  6428                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  6429  0018  0021               	movlb	1	; select bank1
  6430  0019  1C11               	btfss	17,0	;volatile
  6431  001A  281C               	goto	u78_21
  6432  001B  281D               	goto	u78_20
  6433  001C                     u78_21:	
  6434  001C  2826               	goto	i1l173
  6435  001D                     u78_20:	
  6436  001D                     i1l1900:	
  6437  001D  0020               	movlb	0	; select bank0
  6438  001E  1C11               	btfss	17,0	;volatile
  6439  001F  2821               	goto	u79_21
  6440  0020  2822               	goto	u79_20
  6441  0021                     u79_21:	
  6442  0021  2826               	goto	i1l173
  6443  0022                     u79_20:	
  6444  0022                     i1l1902:	
  6445                           
  6446                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR1_ISR();
  6447  0022  3184  24E8  3180   	fcall	_TMR1_ISR
  6448                           
  6449                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  6450  0025  2826               	goto	i1l174
  6451  0026                     i1l173:	
  6452                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
  6453                           
  6454  0026                     i1l174:	
  6455  0026  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6456  0027  0009               	retfie
  6457  0028                     __end_of_INTERRUPT_InterruptManager:	
  6458                           
  6459                           	psect	text25
  6460  04E8                     __ptext25:	
  6461 ;; *************** function _TMR1_ISR *****************
  6462 ;; Defined at:
  6463 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;		None
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;		None
  6468 ;; Return value:  Size  Location     Type
  6469 ;;                  1    wreg      void 
  6470 ;; Registers used:
  6471 ;;		wreg, status,2, status,0, pclath, cstack
  6472 ;; Tracked objects:
  6473 ;;		On entry : 0/0
  6474 ;;		On exit  : 0/0
  6475 ;;		Unchanged: 0/0
  6476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;Total ram usage:        0 bytes
  6482 ;; Hardware stack levels used:    1
  6483 ;; Hardware stack levels required when called:    1
  6484 ;; This function calls:
  6485 ;;		Absolute function
  6486 ;;		_TMR1_DefaultInterruptHandler
  6487 ;;		_TMR1_WriteTimer
  6488 ;; This function is called by:
  6489 ;;		_INTERRUPT_InterruptManager
  6490 ;; This function uses a non-reentrant model
  6491 ;;
  6492                           
  6493                           
  6494                           ;psect for function _TMR1_ISR
  6495  04E8                     _TMR1_ISR:	
  6496  04E8                     i1l1834:	
  6497                           ;incstack = 0
  6498                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  6499                           
  6500                           
  6501                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
  6502  04E8  0020               	movlb	0	; select bank0
  6503  04E9  1011               	bcf	17,0	;volatile
  6504  04EA                     i1l1836:	
  6505                           
  6506                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
  6507  04EA  086D               	movf	_timer1ReloadVal+1,w	;volatile
  6508  04EB  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  6509  04EC  086C               	movf	_timer1ReloadVal,w	;volatile
  6510  04ED  00F0               	movwf	TMR1_WriteTimer@timerVal
  6511  04EE  3185  2512  3184   	fcall	_TMR1_WriteTimer
  6512  04F1                     i1l1838:	
  6513                           
  6514                           ;mcc_generated_files/tmr1.c: 165:     if(TMR1_InterruptHandler)
  6515  04F1  0020               	movlb	0	; select bank0
  6516  04F2  086A               	movf	_TMR1_InterruptHandler,w
  6517  04F3  046B               	iorwf	_TMR1_InterruptHandler+1,w
  6518  04F4  1903               	btfsc	3,2
  6519  04F5  2CF7               	goto	u69_21
  6520  04F6  2CF8               	goto	u69_20
  6521  04F7                     u69_21:	
  6522  04F7  2CFD               	goto	i1l234
  6523  04F8                     u69_20:	
  6524  04F8                     i1l1840:	
  6525                           
  6526                           ;mcc_generated_files/tmr1.c: 166:     {;mcc_generated_files/tmr1.c: 167:         TMR1_In
      +                          terruptHandler();
  6527  04F8  086B               	movf	_TMR1_InterruptHandler+1,w
  6528  04F9  008A               	movwf	10
  6529  04FA  086A               	movf	_TMR1_InterruptHandler,w
  6530  04FB  000A               	callw
  6531  04FC  3184               	pagesel	$
  6532  04FD                     i1l234:	
  6533  04FD  0008               	return
  6534  04FE                     __end_of_TMR1_ISR:	
  6535                           
  6536                           	psect	text26
  6537  0512                     __ptext26:	
  6538 ;; *************** function _TMR1_WriteTimer *****************
  6539 ;; Defined at:
  6540 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;  timerVal        2    0[COMMON] unsigned short 
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;		None
  6545 ;; Return value:  Size  Location     Type
  6546 ;;                  1    wreg      void 
  6547 ;; Registers used:
  6548 ;;		wreg, status,2
  6549 ;; Tracked objects:
  6550 ;;		On entry : 0/0
  6551 ;;		On exit  : 0/0
  6552 ;;		Unchanged: 0/0
  6553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6554 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;Total ram usage:        2 bytes
  6559 ;; Hardware stack levels used:    1
  6560 ;; This function calls:
  6561 ;;		Nothing
  6562 ;; This function is called by:
  6563 ;;		_TMR1_ISR
  6564 ;;		_TMR1_Reload
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           
  6569                           ;psect for function _TMR1_WriteTimer
  6570  0512                     _TMR1_WriteTimer:	
  6571  0512                     i1l1796:	
  6572                           ;incstack = 0
  6573                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
  6574                           
  6575                           
  6576                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.T1SYNC == 1)
  6577  0512  0020               	movlb	0	; select bank0
  6578  0513  1D1B               	btfss	27,2	;volatile
  6579  0514  2D16               	goto	u66_21
  6580  0515  2D17               	goto	u66_20
  6581  0516                     u66_21:	
  6582  0516  2D1E               	goto	i1l1806
  6583  0517                     u66_20:	
  6584  0517                     i1l1798:	
  6585                           
  6586                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  6587  0517  101B               	bcf	27,0	;volatile
  6588  0518                     i1l1800:	
  6589                           
  6590                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
  6591  0518  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  6592  0519  009A               	movwf	26	;volatile
  6593  051A                     i1l1802:	
  6594                           
  6595                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
  6596  051A  0870               	movf	TMR1_WriteTimer@timerVal,w
  6597  051B  0099               	movwf	25	;volatile
  6598  051C                     i1l1804:	
  6599                           
  6600                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  6601  051C  141B               	bsf	27,0	;volatile
  6602                           
  6603                           ;mcc_generated_files/tmr1.c: 133:     }
  6604  051D  2D22               	goto	i1l221
  6605  051E                     i1l1806:	
  6606                           
  6607                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
  6608  051E  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  6609  051F  009A               	movwf	26	;volatile
  6610  0520                     i1l1808:	
  6611                           
  6612                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
  6613  0520  0870               	movf	TMR1_WriteTimer@timerVal,w
  6614  0521  0099               	movwf	25	;volatile
  6615  0522                     i1l221:	
  6616  0522  0008               	return
  6617  0523                     __end_of_TMR1_WriteTimer:	
  6618                           
  6619                           	psect	text27
  6620  057C                     __ptext27:	
  6621 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  6622 ;; Defined at:
  6623 ;;		line 176 in file "mcc_generated_files/tmr1.c"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;		None
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;		None
  6628 ;; Return value:  Size  Location     Type
  6629 ;;                  1    wreg      void 
  6630 ;; Registers used:
  6631 ;;		wreg
  6632 ;; Tracked objects:
  6633 ;;		On entry : 0/0
  6634 ;;		On exit  : 0/0
  6635 ;;		Unchanged: 0/0
  6636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;Total ram usage:        0 bytes
  6642 ;; Hardware stack levels used:    1
  6643 ;; This function calls:
  6644 ;;		Nothing
  6645 ;; This function is called by:
  6646 ;;		_TMR1_Initialize
  6647 ;;		_TMR1_ISR
  6648 ;; This function uses a non-reentrant model
  6649 ;;
  6650                           
  6651                           
  6652                           ;psect for function _TMR1_DefaultInterruptHandler
  6653  057C                     _TMR1_DefaultInterruptHandler:	
  6654  057C                     i1l1810:	
  6655                           ;incstack = 0
  6656                           ; Regs used in _TMR1_DefaultInterruptHandler: [wreg]
  6657                           
  6658                           
  6659                           ;mcc_generated_files/tmr1.c: 177:     cur_ms++;
  6660  057C  3001               	movlw	1
  6661  057D  0020               	movlb	0	; select bank0
  6662  057E  07E4               	addwf	_cur_ms,f	;volatile
  6663  057F  3000               	movlw	0
  6664  0580  3DE5               	addwfc	_cur_ms+1,f	;volatile
  6665  0581                     i1l240:	
  6666  0581  0008               	return
  6667  0582                     __end_of_TMR1_DefaultInterruptHandler:	
  6668                           
  6669                           	psect	text28
  6670  0557                     __ptext28:	
  6671 ;; *************** function _PIN_MANAGER_IOC *****************
  6672 ;; Defined at:
  6673 ;;		line 122 in file "mcc_generated_files/pin_manager.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;		None
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;		None
  6678 ;; Return value:  Size  Location     Type
  6679 ;;                  1    wreg      void 
  6680 ;; Registers used:
  6681 ;;		wreg, status,2, status,0, pclath, cstack
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;Total ram usage:        0 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:    2
  6694 ;; This function calls:
  6695 ;;		_IOCCF0_ISR
  6696 ;; This function is called by:
  6697 ;;		_INTERRUPT_InterruptManager
  6698 ;; This function uses a non-reentrant model
  6699 ;;
  6700                           
  6701                           
  6702                           ;psect for function _PIN_MANAGER_IOC
  6703  0557                     _PIN_MANAGER_IOC:	
  6704  0557                     i1l1830:	
  6705                           ;incstack = 0
  6706                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  6707                           
  6708                           
  6709                           ;mcc_generated_files/pin_manager.c: 125:     if(IOCCFbits.IOCCF0 == 1)
  6710  0557  0027               	movlb	7	; select bank7
  6711  0558  1C19               	btfss	25,0	;volatile
  6712  0559  2D5B               	goto	u68_21
  6713  055A  2D5C               	goto	u68_20
  6714  055B                     u68_21:	
  6715  055B  2D5F               	goto	i1l125
  6716  055C                     u68_20:	
  6717  055C                     i1l1832:	
  6718                           
  6719                           ;mcc_generated_files/pin_manager.c: 126:     {;mcc_generated_files/pin_manager.c: 127:  
      +                                 IOCCF0_ISR();
  6720  055C  3185  2533  3185   	fcall	_IOCCF0_ISR
  6721  055F                     i1l125:	
  6722  055F  0008               	return
  6723  0560                     __end_of_PIN_MANAGER_IOC:	
  6724                           
  6725                           	psect	text29
  6726  0533                     __ptext29:	
  6727 ;; *************** function _IOCCF0_ISR *****************
  6728 ;; Defined at:
  6729 ;;		line 134 in file "mcc_generated_files/pin_manager.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;		None
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;		None
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  1    wreg      void 
  6736 ;; Registers used:
  6737 ;;		wreg, status,2, status,0, pclath, cstack
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6747 ;;Total ram usage:        0 bytes
  6748 ;; Hardware stack levels used:    1
  6749 ;; Hardware stack levels required when called:    1
  6750 ;; This function calls:
  6751 ;;		Absolute function
  6752 ;;		_IOCCF0_DefaultInterruptHandler
  6753 ;; This function is called by:
  6754 ;;		_PIN_MANAGER_IOC
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           
  6759                           ;psect for function _IOCCF0_ISR
  6760  0533                     _IOCCF0_ISR:	
  6761  0533                     i1l1788:	
  6762                           ;incstack = 0
  6763                           ; Regs used in _IOCCF0_ISR: [wreg+status,2+status,0+pclath+cstack]
  6764                           
  6765                           
  6766                           ;mcc_generated_files/pin_manager.c: 139:     if(IOCCF0_InterruptHandler)
  6767  0533  0020               	movlb	0	; select bank0
  6768  0534  086E               	movf	_IOCCF0_InterruptHandler,w
  6769  0535  046F               	iorwf	_IOCCF0_InterruptHandler+1,w
  6770  0536  1903               	btfsc	3,2
  6771  0537  2D39               	goto	u65_21
  6772  0538  2D3A               	goto	u65_20
  6773  0539                     u65_21:	
  6774  0539  2D3F               	goto	i1l1792
  6775  053A                     u65_20:	
  6776  053A                     i1l1790:	
  6777                           
  6778                           ;mcc_generated_files/pin_manager.c: 140:     {;mcc_generated_files/pin_manager.c: 141:  
      +                                 IOCCF0_InterruptHandler();
  6779  053A  086F               	movf	_IOCCF0_InterruptHandler+1,w
  6780  053B  008A               	movwf	10
  6781  053C  086E               	movf	_IOCCF0_InterruptHandler,w
  6782  053D  000A               	callw
  6783  053E  3185               	pagesel	$
  6784  053F                     i1l1792:	
  6785                           
  6786                           ;mcc_generated_files/pin_manager.c: 143:     IOCCFbits.IOCCF0 = 0;
  6787  053F  0027               	movlb	7	; select bank7
  6788  0540  1019               	bcf	25,0	;volatile
  6789  0541                     i1l129:	
  6790  0541  0008               	return
  6791  0542                     __end_of_IOCCF0_ISR:	
  6792                           
  6793                           	psect	text30
  6794  0589                     __ptext30:	
  6795 ;; *************** function _IOCCF0_DefaultInterruptHandler *****************
  6796 ;; Defined at:
  6797 ;;		line 156 in file "mcc_generated_files/pin_manager.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;		None
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;		None
  6802 ;; Return value:  Size  Location     Type
  6803 ;;                  1    wreg      void 
  6804 ;; Registers used:
  6805 ;;		None
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;Total ram usage:        0 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; This function calls:
  6818 ;;		Nothing
  6819 ;; This function is called by:
  6820 ;;		_PIN_MANAGER_Initialize
  6821 ;;		_IOCCF0_ISR
  6822 ;; This function uses a non-reentrant model
  6823 ;;
  6824                           
  6825                           
  6826                           ;psect for function _IOCCF0_DefaultInterruptHandler
  6827  0589                     _IOCCF0_DefaultInterruptHandler:	
  6828  0589                     i1l135:	
  6829                           ;incstack = 0
  6830                           ; Regs used in _IOCCF0_DefaultInterruptHandler: []
  6831                           
  6832  0589  0008               	return
  6833  058A                     __end_of_IOCCF0_DefaultInterruptHandler:	
  6834  007E                     btemp	set	126	;btemp
  6835  007E                     int$flags	set	126
  6836  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         57
    Persistent  38
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     58      80
    BANK1            80      1      48
    BANK2            80      0       0
    BANK3             0      0       0
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0
    BANK7             0      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    GetStage@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    stage_stash.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    stage_stash.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_stash.first_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_stash.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.patterns.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.patterns.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_GetStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_CopyStageData.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_CopyStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_ConstructStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewPattern.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewPattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    FlashPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    pattern_selector.current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@pattern.first_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@right_side_on.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@right_side_on	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@left_side_on.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@left_side_on	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    sp__GetStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__GetStage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    GetStage@get_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@last_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@last_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@last_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStageData.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@source.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@dest.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@source	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@dest	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStage	PTR struct Stage size(1) Largest target is 0

    CopyStage@dest.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStage@source.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStage@dest.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStageData	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__ConstructStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__ConstructStage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@new_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@next	PTR struct Stage size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    ConstructStage@states	PTR const _Bool  size(1) Largest target is 4
		 -> InitWigwagPattern@right_side_states(BANK0[4]), InitWigwagPattern@left_side_states(BANK0[4]), 

    ConstructStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), 

    AssignLightStates@stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AssignLightStates@states	PTR const _Bool  size(1) Largest target is 4
		 -> InitWigwagPattern@right_side_states(BANK0[4]), InitWigwagPattern@left_side_states(BANK0[4]), NewStage@init_states(BANK0[4]), 

    AssignLightStates@stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern.first_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewStage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), 

    InitPatternSelector@p_selector.current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S454Stage$next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector	PTR struct PatternSelector size(2) Largest target is 14
		 -> pattern_selector(BANK1[14]), 

    S466PatternSelector$current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S466PatternSelector$patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    pattern_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    S463Pattern$first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    Wigwag.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCCF0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF0_DefaultInterruptHandler(), 

    IOCCF0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCCF0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_FlashPattern
    _SetOutputs->_SetLight
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF0_SetInterruptHandler
    _InitWigwagPattern->_ConstructStage
    _ConstructStage->_AssignLightStates
    _NewStage->_AssignLightStates
    _FlashPattern->_SetLight

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _setup->_InitPatternSelector
    _InitPatternSelector->_InitWigwagPattern
    _NewPattern->_NewStage
    _InitWigwagPattern->_AppendStage
    _CopyStageData->_NewStage
    _ConstructStage->_NewStage
    _NewStage->_AssignLightStates
    _AppendStage->_CopyStageData

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    9272
                                              0 BANK1      1     1      0
                       _FlashPattern
           _PatternCycleInputChanged
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    8227
                _InitPatternSelector
                  _SYSTEM_Initialize
                         _SetOutputs
                    _TMR1_Initialize
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetOutputs                                           2     2      0     999
                                              6 COMMON     2     2      0
                           _SetLight
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     196
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      98
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0      98
         _IOCCF0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCCF0_SetInterruptHandler                           2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternSelector                                  6     4      2    6934
                                             52 BANK0      6     4      2
                  _InitWigwagPattern
                         _NewPattern
 ---------------------------------------------------------------------------------
 (3) _NewPattern                                           4     4      0    1156
                                             12 BANK0      4     4      0
                           _NewStage
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     344
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _InitWigwagPattern                                   23    21      2    5484
                                             29 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (4) _CopyStageData                                        9     5      4    1112
                                             12 BANK0      9     5      4
                           _NewStage (ARG)
 ---------------------------------------------------------------------------------
 (4) _ConstructStage                                       7     4      3    1920
                                              9 COMMON     1     1      0
                                             12 BANK0      6     3      3
                  _AssignLightStates
                           _NewStage
 ---------------------------------------------------------------------------------
 (4) _NewStage                                            10    10      0     716
                                              2 BANK0     10    10      0
                  _AssignLightStates
 ---------------------------------------------------------------------------------
 (5) _AssignLightStates                                    9     6      3     552
                                              2 COMMON     7     4      3
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _AppendStage                                          8     4      4    1048
                                             21 BANK0      8     4      4
                      _CopyStageData (ARG)
                           _NewStage (ARG)
 ---------------------------------------------------------------------------------
 (1) _PatternCycleInputChanged                             4     4      0      23
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _FlashPattern                                         8     6      2    1022
                                              6 COMMON     4     2      2
                                              0 BANK0      4     4      0
                           _SetLight
 ---------------------------------------------------------------------------------
 (3) _SetLight                                             4     3      1     875
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           0     0      0     240
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0     240
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (9) _TMR1_WriteTimer                                      2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (9) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCCF0_ISR
 ---------------------------------------------------------------------------------
 (9) _IOCCF0_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _IOCCF0_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FlashPattern
     _SetLight
   _PatternCycleInputChanged
   _setup
     _InitPatternSelector
       _InitWigwagPattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _NewPattern
         _NewStage
           _AssignLightStates
         ___wmul
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCCF0_SetInterruptHandler
       _PMD_Initialize
       _TMR1_Initialize
         _TMR1_SetInterruptHandler
       _WDT_Initialize
     _SetOutputs
       _SetLight
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR1_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCCF0_ISR
       Absolute function(Fake) *
       _IOCCF0_DefaultInterruptHandler *
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3A      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      1      30       7       60.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      8C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      8C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu May 07 14:17:03 2020

                              _update_stage 0068                                 __CFG_CP$OFF 0000  
                                        l51 0532                                          l60 056F  
                                        l54 0556                                          l57 0585  
                        ConstructStage@next 002E                         ___wmul@multiplicand 0074  
                               __CFG_LVP$ON 0000                                         l121 044F  
                                       l210 0588                                         l132 057B  
                                       l207 0511                                         l400 0424  
                                       l323 0353                                         l237 0575  
                                       l424 0391                                         l433 0307  
                                       l363 0260                                         l291 04E7  
                                       l508 01EF                                         l429 0474  
                                       l454 02B8                                         l438 03F7  
                                       l446 03CA                                         l366 0496  
                                       l471 017B                                         l660 04A1  
                                       l662 04B5                                         u430 03BB  
                                       u431 03BA                                         u440 026D  
                                       u441 026C                                         u450 02A6  
                              __CFG_CPD$OFF 0000                                         u451 02A5  
                                       u435 03B7                                         u700 03FE  
                                       u460 049D                                         u701 03FD  
                                       u461 049C                                         u710 0411  
                                       u711 0410                                         u455 02A2  
                                       u720 0423                                         u800 0474  
                                       u721 0422                                         u801 0473  
                                       u810 02C3                                         u490 04B1  
                                       u811 02C2                                         u491 04B0  
                                       u475 04A2                                         u820 035E  
                                       u485 04A7                                         u821 035D  
                                       u910 0228                                         u830 0112  
                                       u911 0227                                         u831 0111  
                                       u920 0232                                         u904 021C  
                                       u840 017B                                         u921 022F  
                                       u841 017A                                         u850 01FA  
                                       u851 01F9                                         u835 010E  
                                       u940 023D                                         u860 0204  
                                       u941 023C                                         u861 0201  
                                       u845 0177                                         u950 0247  
                                       u934 0234                                         u951 0244  
                                       u880 0210                                         u881 020F  
                                       u890 021A                                         u874 0206  
                                       u970 0330                                         u891 0217  
                                       u971 032F                                         u964 0249  
                                       u980 019C                                         u981 019B  
                                       u990 01B2                                         u991 01B1  
                                       u975 032C                                         u985 0198  
                           _timer1ReloadVal 006C                     __size_of_PMD_Initialize 0008  
                                       wreg 0009          __end_of_IOCCF0_SetInterruptHandler 057C  
                _IOCCF0_SetInterruptHandler 0576                                        l2000 037B  
                                      l2010 006C                                        l2002 0380  
                                      l2020 00B0                                        l2012 007C  
                                      l2004 038D                                        l2100 04D4  
                                      l2110 0181                                        l2030 00C8  
                                      l2022 00BD                                        l2014 008A  
                                      l2102 04D8                                        l2120 01B2  
                                      l2112 019C                                        l2032 0100  
                                      l2024 00C6                                        l2016 009A  
                                      l2008 0066                                        l2104 04DB  
                                      l2050 01F1                                        l2122 01ED  
                                      l2114 01A6                                        l2034 0105  
                                      l2018 00A8                                        l2106 04DF  
                                      l2060 021D                                        l2052 01F2  
                                      l2116 01AB                                        l2108 017C  
                                      l2044 0131                                        l2036 0112  
                                      l2124 04B6                                        l2062 0228  
                                      l2054 01FA                                        l2118 01AD  
                                      l2046 0169                                        l2038 012E  
                                      l2134 04C1                                        l2126 04B9  
                                      l2064 0235                                        l2056 0207  
                                      l2072 024A                                        l1600 03AE  
                                      l2048 016E                                        l2080 0308  
                                      l2136 04C6                                        l2128 04BE  
                                      l2066 023D                                        l2058 0210  
                                      l1610 026D                                        l1602 03BB  
                                      l2090 0323                                        l1612 0280  
                                      l1604 03CA                                        l1620 0497  
                                      l2092 0330                                        l2158 0252  
                                      l1614 028A                                        l1630 04B1  
                                      l1622 0499                                        l2094 033C  
                                      l2086 030B                                        l2078 0476  
                                      l1616 0293                                        l1608 0261  
                                      l1624 049D                                        l2088 031F  
                                      l1640 0429                                        l2096 04D0  
                                      l1618 02A6                                        l1626 04A6  
                                      l1650 0439                                        l1642 042C  
                                      l1634 0568                                        l2098 04D3  
                                      l1628 04AB                                        l1660 0444  
                                      l1652 043C                                        l1644 042E  
                                      l1636 0425                                        l1590 0392  
                                      l1670 0551                                        l1662 0445  
                                      l1654 043E                                        l1646 0432  
                                      l1638 0427                                        l1672 0552  
                                      l1576 0576                                        l1664 0446  
                                      l1656 0441                                        l1648 0434  
                                      l1680 0500                                        l1674 0555  
                                      l1666 044D                                        l1658 0443  
                                      l1578 0570                                        l1682 0502  
                                      l1860 0408                                        l1596 0395  
                                      l1668 054E                                        l1684 0503  
                                      l1676 0582                                        l1780 0526  
                                      l1862 0411                                        l1854 03F8  
                                      l1598 03AA                                        l1686 0508  
                                      l1678 04FE                                        l1782 0529  
                                      l1872 0423                                        l1856 03FE  
                                      l1952 0453                                        l1960 02C3  
                                      l1688 050A                                        l1784 052C  
                                      l1858 0401                                        l1866 0413  
                                      l1954 0467                                        l1946 0450  
                                      l1970 02E6                                        l1786 052F  
                                      l1778 0523                                        l1794 0586  
                                      l1956 046B                                        l1972 02F1  
                                      l1964 02C6                                        l1980 03CD  
                                      l1974 02FB                                        l1966 02DA  
                                      l1958 02B9                                        l1982 03E0  
                                      l1990 0354                                        l1976 0303  
                                      l1968 02DE                                        l1984 03EA  
                                      l1992 035E                                        l1986 03F3  
                                      l1996 0361                                        l1998 0377  
                           ?_ConstructStage 002C                                        u1007 0404  
                                      _LATA 010C                                        _LATC 010E  
                                      _PMD0 0911                                        _PMD1 0912  
                                      _PMD2 0913                                        _PMD3 0914  
                                      _PMD4 0915                                        _PMD5 0916  
                                      _WPUA 020C                                        _WPUC 020E  
                              __CFG_WRT$OFF 0000                               SetLight@light 0075  
                             __CFG_FCMEN$ON 0000                        ConstructStage@states 002F  
                             SetLight@state 0072                                        _main 04B6  
                       __end_of_AppendStage 02B9                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                             __CFG_BOREN$ON 0000                               __CFG_BORV$LOW 0000  
                                      start 0028                  ??_TMR1_SetInterruptHandler 0074  
                             __CFG_CSWEN$ON 0000                               __CFG_MCLRE$ON 0000  
                            CopyStageData@i 0033                             ??_CopyStageData 0030  
            __size_of_OSCILLATOR_Initialize 0009               __end_of_OSCILLATOR_Initialize 0557  
                       __size_of_IOCCF0_ISR 000F                                       ?_main 0070  
                             __CFG_WDTE$OFF 0000                             _TMR1_StartTimer 0586  
                            __CFG_DEBUG$OFF 0000                                       i1l125 055F  
                                     i1l221 0522                                       i1l135 0589  
                                     i1l240 0581                                       i1l129 0541  
                                     i1l234 04FD                                       i1l173 0026  
                                     i1l174 0026                                       i1l168 0014  
                                     _OSCEN 091D                                       _TMR1H 001A  
                                     _TMR1L 0019                                       u65_20 053A  
                                     u65_21 0539                                       _TRISA 008C  
                                     _TRISC 008E                                       u66_20 0517  
                                     u66_21 0516                                       u75_20 000B  
                                     u75_21 000A                                       u68_20 055C  
                                     u76_20 0010                                       u68_21 055B  
                                     u76_21 000F                                       u69_20 04F8  
                                     u77_20 0018                                       u69_21 04F7  
                                     u77_21 0017                                       u78_20 001D  
                                     u78_21 001C                                       u79_20 0022  
                                     u79_21 0021                       ConstructStage@time_ms 002C  
                          __end_of_TMR1_ISR 04FE                     __end_of_PIN_MANAGER_IOC 0560  
                            _WDT_Initialize 0582                                       _setup 04D0  
                   __end_of_TMR1_Initialize 0512                                       pclath 000A  
                      __end_of_FlashPattern 01F0                                       status 0003  
             InitPatternSelector@p_selector 0054                                       wtemp0 007E  
                  FlashPattern@current_time 0078                    _PatternCycleInputChanged 03F8  
                           _TMR1_WriteTimer 0512                           _pattern_list_iter 005C  
                           __initialization 002A                         NewStage@init_states 0026  
                              __end_of_main 04D0                                  _NewPattern 0354  
               ?_INTERRUPT_InterruptManager 0070                            __end_of_NewStage 0308  
                                    ??_main 00CF                            __end_of_SetLight 0261  
               __end_of_InitPatternSelector 0354                      __end_of_WDT_Initialize 0586  
                        _cur_pc_input_state 007B                                 _AppendStage 0261  
                                    ?_setup 0070                                      _ANSELA 018C  
                                    _ANSELC 018E                          __CFG_RSTOSC$HFINT1 0000  
                                    _T1GCON 001C                     TMR1_WriteTimer@timerVal 0070  
                                    _ODCONA 028C                                      _ODCONC 028E  
                                    i1l1800 0518                                      i1l1810 057C  
                                    i1l1802 051A                                      i1l1804 051C  
                                    i1l1900 001D                                      i1l1830 0557  
                                    i1l1806 051E                                      i1l1902 0022  
                                    i1l1832 055C                                      i1l1808 0520  
                                    i1l1840 04F8                                      i1l1834 04E8  
                                    i1l1836 04EA                                      i1l1790 053A  
                                    i1l1838 04F1                                      i1l1792 053F  
                                    i1l1788 0533                                      i1l1796 0512  
                                    i1l1892 0006                                      i1l1798 0517  
                                    i1l1894 000B                                      i1l1896 0010  
                                    i1l1898 0018                                      _INLVLA 038C  
                                    _INLVLC 038E                                      _OSCFRQ 091F  
                                    _WDTCON 0097                                  _SetOutputs 0475  
                            __CFG_PWRTE$OFF 0000        __end_of_TMR1_DefaultInterruptHandler 0582  
     __size_of_TMR1_DefaultInterruptHandler 0006                _TMR1_DefaultInterruptHandler 057C  
                           SetOutputs@state 0077                                      _Wigwag 00A4  
                   __end_of_TMR1_StartTimer 0589                                      ___wmul 0497  
                            __CFG_STVREN$ON 0000           InitWigwagPattern@left_side_states 0040  
                                    _cur_ms 0064                         CopyStageData@source 002E  
                            _PMD_Initialize 0568                             ?_WDT_Initialize 0070  
  TMR1_SetInterruptHandler@InterruptHandler 0072  IOCCF0_SetInterruptHandler@InterruptHandler 0072  
                          ?_PIN_MANAGER_IOC 0070                     __end_of_TMR1_WriteTimer 0523  
                              ??_IOCCF0_ISR 0070                            ?_TMR1_Initialize 0070  
                    AssignLightStates@stage 0072                           _SYSTEM_Initialize 0523  
                   __end_of__initialization 0062                          ?_SYSTEM_Initialize 0070  
                            __pcstackCOMMON 0070          InitWigwagPattern@right_side_states 0044  
                              __pidataBANK1 0560                         ??_SYSTEM_Initialize 0074  
                                 ?_TMR1_ISR 0070               ?_TMR1_DefaultInterruptHandler 0070  
                               ?_NewPattern 0079                               __end_of_setup 04E8  
                    __end_of_PMD_Initialize 0570                          __end_of_IOCCF0_ISR 0542  
                         NewStage@new_stage 002A                            ??_ConstructStage 0079  
               ?_IOCCF0_SetInterruptHandler 0072                       __size_of_FlashPattern 0074  
                 __end_of_SYSTEM_Initialize 0533                                     ??_setup 007A  
                              NewStage@F419 00A0                                  __pbssBANK0 005A  
                                __pbssBANK1 00A0                                   ?_NewStage 0077  
                               ?_SetOutputs 0070                                   ?_SetLight 0072  
                        AssignLightStates@i 0020                        AppendStage@new_stage 0037  
                                __pmaintext 04B6                                     ?___wmul 0072  
                          ?_TMR1_StartTimer 0070                                  ??_TMR1_ISR 0072  
                           __CFG_PPS1WAY$ON 0000                                  __pintentry 0004  
          ??_IOCCF0_DefaultInterruptHandler 0070             ?_IOCCF0_DefaultInterruptHandler 0070  
                           ?_PMD_Initialize 0070                          InitWigwagPattern@i 004C  
                              _FlashPattern 017C                                     _OSCCON1 0919  
                                   _OSCCON3 091B                                     _OSCTUNE 091E  
                ??_PatternCycleInputChanged 0072                                     _SLRCONA 030C  
                                   _SLRCONC 030E                            ?_TMR1_WriteTimer 0070  
                       __size_of_NewPattern 003E                     ConstructStage@new_stage 0030  
                                ??_NewStage 0022                                  ??_SetLight 0073  
                           __size_of___wmul 001F         PatternCycleInputChanged@delay_count 0074  
                     __end_of_CopyStageData 03CB                        InitWigwagPattern@off 0050  
                                   __ptext1 04D0                                     __ptext2 0586  
                                   __ptext3 0475                                     __ptext4 0523  
                                   __ptext5 0582                                     __ptext6 04FE  
                                   __ptext7 0570                                     __ptext8 0568  
                                   __ptext9 0425              ??_TMR1_DefaultInterruptHandler 0070  
                                 _T1CONbits 001B                                     _cur_sec 0060  
                     _OSCILLATOR_Initialize 054E                         __size_of_SetOutputs 0022  
         __size_of_TMR1_SetInterruptHandler 0006                    ??_PIN_MANAGER_Initialize 0074  
                 ?_TMR1_SetInterruptHandler 0072                                   _IOCCFbits 0399  
                                   _temp_ms 0066                                   _IOCCNbits 0398  
                                 _IOCCPbits 0397                                ?_AppendStage 0035  
                __size_of_SYSTEM_Initialize 0010                                     clrloop0 0543  
                      end_of_initialization 0062                         _last_pc_input_state 007A  
                          ??_WDT_Initialize 0072                                   _PORTCbits 000E  
                   AssignLightStates@states 0074                            __CFG_FEXTOSC$OFF 0000  
                                _start_time 005A                __size_of_InitPatternSelector 004C  
                                _ts_trigger 0069                                ??_NewPattern 002C  
                            __end_of___wmul 04B6                           __size_of_TMR1_ISR 0016  
                         CopyStageData@dest 002C                      ?_OSCILLATOR_Initialize 0070  
                      InitPatternSelector@i 0058                         start_initialization 002A  
                          _pattern_selector 00B9             __size_of_PIN_MANAGER_Initialize 002B  
                           AppendStage@head 0035                               _pattern_stash 00A7  
                     NewPattern@new_pattern 002E                          __end_of_NewPattern 0392  
                              ??_SetOutputs 0076                    __size_of_PIN_MANAGER_IOC 0009  
                  InitWigwagPattern@pattern 003D                           __size_of_NewStage 004F  
                          __CFG_LPBOREN$OFF 0000                    __size_of_TMR1_Initialize 0014  
                         __size_of_SetLight 0071                            ??_PMD_Initialize 0072  
                                  ??___wmul 0076                                 __pdataBANK1 00C7  
                               __pbssBIGRAM 20F0                                 __pbssCOMMON 007A  
                     AppendStage@last_stage 003B                                   ___latbits 0002  
                        __end_of_SetOutputs 0497                               __pcstackBANK0 0020  
                             __pcstackBANK1 00CF                      InitWigwagPattern@i_855 004E  
    __end_of_IOCCF0_DefaultInterruptHandler 058A     __size_of_IOCCF0_DefaultInterruptHandler 0001  
            _IOCCF0_DefaultInterruptHandler 0589                        __size_of_AppendStage 0058  
                                 __pnvBANK0 006A                      _PIN_MANAGER_Initialize 0425  
          __end_of_TMR1_SetInterruptHandler 0576                           _AssignLightStates 0450  
                         _InitWigwagPattern 0066                          ?_AssignLightStates 0072  
              ??_INTERRUPT_InterruptManager 0072                          ?_InitWigwagPattern 003D  
                  __size_of_TMR1_StartTimer 0003                         ??_AssignLightStates 0075  
                       ??_InitWigwagPattern 003F                              __size_of_setup 0018  
                            ___wmul@product 0076                     __size_of_ConstructStage 002D  
                                  _LATCbits 010E                                   clear_ram0 0542  
                                  _PIE0bits 0090                                    _PIE1bits 0091  
                  __size_of_TMR1_WriteTimer 0011                   __end_of_AssignLightStates 0475  
       __size_of_INTERRUPT_InterruptManager 0024                                    _PIR0bits 0010  
                                  _PIR1bits 0011           __size_of_PatternCycleInputChanged 002D  
                 ?_PatternCycleInputChanged 0070                   __end_of_InitWigwagPattern 017C  
                                  _TMR1_ISR 04E8                           ??_PIN_MANAGER_IOC 0070  
                       _InitPatternSelector 0308                           ??_TMR1_Initialize 0074  
                         ___wmul@multiplier 0072                        ?_InitPatternSelector 0054  
                    __size_of_CopyStageData 0039                                    _NewStage 02B9  
                                  _SetLight 01F0                             _stage_list_iter 005E  
                   ??_OSCILLATOR_Initialize 0072                       InitWigwagPattern@F444 00CB  
                     InitWigwagPattern@F447 00C7                    _TMR1_SetInterruptHandler 0570  
                     InitWigwagPattern@head 0052                       _TMR1_InterruptHandler 006A  
                   _IOCCF0_InterruptHandler 006E                                    __ptext10 0576  
                                  __ptext11 054E                                    __ptext20 0261  
                                  __ptext12 0308                                    __ptext21 03F8  
                                  __ptext13 0354                                  _T1GCONbits 001C  
                                  __ptext30 0589                                    __ptext22 017C  
                                  __ptext14 0497                                    __ptext23 01F0  
                                  __ptext15 0066                                    __ptext16 0392  
                                  __ptext25 04E8                                    __ptext17 03CB  
                                  __ptext26 0512                                    __ptext18 02B9  
                                  __ptext27 057C                                    __ptext19 0450  
                                  __ptext28 0557                                    __ptext29 0533  
              ??_IOCCF0_SetInterruptHandler 0074              InitWigwagPattern@right_side_on 004A  
                     ??_InitPatternSelector 0056                           ??_TMR1_StartTimer 0072  
                                _IOCCF0_ISR 0533                                    _cur_hsec 0062  
                             __size_of_main 001A                  __size_of_AssignLightStates 0025  
             InitWigwagPattern@left_side_on 0048                  __size_of_InitWigwagPattern 0116  
                                  int$flags 007E          __end_of_INTERRUPT_InterruptManager 0028  
                _INTERRUPT_InterruptManager 0004                           ??_TMR1_WriteTimer 0072  
                             _CopyStageData 0392                         FlashPattern@pattern 0076  
                             ?_FlashPattern 0076         __size_of_IOCCF0_SetInterruptHandler 0006  
                                _INTCONbits 000B                     __size_of_WDT_Initialize 0004  
                                  intlevel1 0000                              _ConstructStage 03CB  
                   ?_PIN_MANAGER_Initialize 0070                           __CFG_CLKOUTEN$OFF 0000  
                            ?_CopyStageData 002C                              ??_FlashPattern 0020  
                             ??_AppendStage 0039            __end_of_PatternCycleInputChanged 0425  
                    __end_of_ConstructStage 03F8                                 ?_IOCCF0_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 0450                             _PIN_MANAGER_IOC 0557  
                               _stage_stash 20F0                             _TMR1_Initialize 04FE  
