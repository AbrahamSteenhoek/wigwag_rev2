

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu May 07 13:31:47 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F18325
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	dabs	1,0x620,48
    43                           	dabs	1,0x5A0,80
    44                           	dabs	1,0x520,80
    45                           	dabs	1,0x4A0,80
    46                           	dabs	1,0x420,80
    47                           	dabs	1,0x3A0,80
    48                           	dabs	1,0x320,80
    49                           	dabs	1,0x2A0,80
    50                           	dabs	1,0x220,80
    51                           	dabs	1,0x1A0,80
    52                           	dabs	1,0x20F0,0,_stage_stash
    53                           	dabs	1,0x7E,2
    54  0000                     
    55                           ; Version 2.10
    56                           ; Generated 31/07/2019 GMT
    57                           ; 
    58                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC16F18325 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0007                     	;# 
    97  0008                     	;# 
    98  0009                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000E                     	;# 
   103  0010                     	;# 
   104  0011                     	;# 
   105  0012                     	;# 
   106  0013                     	;# 
   107  0014                     	;# 
   108  0015                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  0019                     	;# 
   116  001A                     	;# 
   117  001B                     	;# 
   118  001C                     	;# 
   119  001D                     	;# 
   120  001E                     	;# 
   121  001F                     	;# 
   122  008C                     	;# 
   123  008E                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0097                     	;# 
   130  009B                     	;# 
   131  009B                     	;# 
   132  009C                     	;# 
   133  009D                     	;# 
   134  009E                     	;# 
   135  009F                     	;# 
   136  010C                     	;# 
   137  010E                     	;# 
   138  0111                     	;# 
   139  0112                     	;# 
   140  0113                     	;# 
   141  0114                     	;# 
   142  0115                     	;# 
   143  0116                     	;# 
   144  0117                     	;# 
   145  0118                     	;# 
   146  0119                     	;# 
   147  018C                     	;# 
   148  018E                     	;# 
   149  0197                     	;# 
   150  0199                     	;# 
   151  0199                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019A                     	;# 
   155  019A                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019B                     	;# 
   159  019B                     	;# 
   160  019B                     	;# 
   161  019C                     	;# 
   162  019C                     	;# 
   163  019C                     	;# 
   164  019D                     	;# 
   165  019D                     	;# 
   166  019D                     	;# 
   167  019E                     	;# 
   168  019E                     	;# 
   169  019E                     	;# 
   170  019F                     	;# 
   171  019F                     	;# 
   172  019F                     	;# 
   173  019F                     	;# 
   174  019F                     	;# 
   175  020C                     	;# 
   176  020E                     	;# 
   177  0211                     	;# 
   178  0211                     	;# 
   179  0212                     	;# 
   180  0212                     	;# 
   181  0213                     	;# 
   182  0213                     	;# 
   183  0214                     	;# 
   184  0214                     	;# 
   185  0215                     	;# 
   186  0215                     	;# 
   187  0215                     	;# 
   188  0215                     	;# 
   189  0216                     	;# 
   190  0216                     	;# 
   191  0217                     	;# 
   192  0217                     	;# 
   193  0219                     	;# 
   194  021A                     	;# 
   195  021B                     	;# 
   196  021C                     	;# 
   197  021D                     	;# 
   198  021D                     	;# 
   199  021E                     	;# 
   200  021F                     	;# 
   201  028C                     	;# 
   202  028E                     	;# 
   203  0291                     	;# 
   204  0291                     	;# 
   205  0292                     	;# 
   206  0293                     	;# 
   207  0294                     	;# 
   208  0295                     	;# 
   209  0295                     	;# 
   210  0296                     	;# 
   211  0297                     	;# 
   212  0298                     	;# 
   213  029F                     	;# 
   214  030C                     	;# 
   215  030E                     	;# 
   216  0311                     	;# 
   217  0311                     	;# 
   218  0312                     	;# 
   219  0313                     	;# 
   220  0314                     	;# 
   221  0315                     	;# 
   222  0315                     	;# 
   223  0316                     	;# 
   224  0317                     	;# 
   225  0318                     	;# 
   226  038C                     	;# 
   227  038E                     	;# 
   228  0391                     	;# 
   229  0392                     	;# 
   230  0393                     	;# 
   231  0397                     	;# 
   232  0398                     	;# 
   233  0399                     	;# 
   234  039A                     	;# 
   235  039C                     	;# 
   236  039D                     	;# 
   237  039E                     	;# 
   238  039F                     	;# 
   239  0411                     	;# 
   240  0411                     	;# 
   241  0412                     	;# 
   242  0413                     	;# 
   243  0414                     	;# 
   244  0415                     	;# 
   245  0416                     	;# 
   246  0417                     	;# 
   247  0418                     	;# 
   248  0418                     	;# 
   249  0419                     	;# 
   250  041A                     	;# 
   251  041B                     	;# 
   252  041C                     	;# 
   253  041D                     	;# 
   254  041E                     	;# 
   255  041F                     	;# 
   256  0498                     	;# 
   257  0498                     	;# 
   258  0499                     	;# 
   259  049A                     	;# 
   260  049B                     	;# 
   261  049B                     	;# 
   262  049C                     	;# 
   263  049D                     	;# 
   264  049E                     	;# 
   265  049F                     	;# 
   266  0617                     	;# 
   267  0618                     	;# 
   268  0619                     	;# 
   269  0619                     	;# 
   270  061A                     	;# 
   271  061B                     	;# 
   272  061C                     	;# 
   273  061C                     	;# 
   274  061F                     	;# 
   275  0691                     	;# 
   276  0692                     	;# 
   277  0693                     	;# 
   278  0694                     	;# 
   279  0695                     	;# 
   280  0696                     	;# 
   281  0697                     	;# 
   282  0698                     	;# 
   283  0699                     	;# 
   284  0711                     	;# 
   285  0712                     	;# 
   286  0713                     	;# 
   287  0714                     	;# 
   288  0715                     	;# 
   289  0716                     	;# 
   290  0717                     	;# 
   291  0718                     	;# 
   292  0719                     	;# 
   293  0891                     	;# 
   294  0891                     	;# 
   295  0891                     	;# 
   296  0891                     	;# 
   297  0891                     	;# 
   298  0891                     	;# 
   299  0892                     	;# 
   300  0892                     	;# 
   301  0892                     	;# 
   302  0893                     	;# 
   303  0893                     	;# 
   304  0893                     	;# 
   305  0893                     	;# 
   306  0893                     	;# 
   307  0893                     	;# 
   308  0894                     	;# 
   309  0894                     	;# 
   310  0894                     	;# 
   311  0895                     	;# 
   312  0895                     	;# 
   313  0895                     	;# 
   314  0896                     	;# 
   315  0896                     	;# 
   316  0896                     	;# 
   317  089B                     	;# 
   318  0911                     	;# 
   319  0912                     	;# 
   320  0913                     	;# 
   321  0914                     	;# 
   322  0915                     	;# 
   323  0916                     	;# 
   324  0918                     	;# 
   325  0919                     	;# 
   326  091A                     	;# 
   327  091B                     	;# 
   328  091C                     	;# 
   329  091D                     	;# 
   330  091E                     	;# 
   331  091F                     	;# 
   332  0E0F                     	;# 
   333  0E10                     	;# 
   334  0E11                     	;# 
   335  0E12                     	;# 
   336  0E13                     	;# 
   337  0E14                     	;# 
   338  0E15                     	;# 
   339  0E16                     	;# 
   340  0E17                     	;# 
   341  0E18                     	;# 
   342  0E19                     	;# 
   343  0E1A                     	;# 
   344  0E1B                     	;# 
   345  0E1C                     	;# 
   346  0E1D                     	;# 
   347  0E1E                     	;# 
   348  0E1F                     	;# 
   349  0E20                     	;# 
   350  0E21                     	;# 
   351  0E22                     	;# 
   352  0E24                     	;# 
   353  0E25                     	;# 
   354  0E28                     	;# 
   355  0E29                     	;# 
   356  0E2A                     	;# 
   357  0E2B                     	;# 
   358  0E2C                     	;# 
   359  0E2D                     	;# 
   360  0E2E                     	;# 
   361  0E2F                     	;# 
   362  0E90                     	;# 
   363  0E91                     	;# 
   364  0E92                     	;# 
   365  0E94                     	;# 
   366  0E95                     	;# 
   367  0EA0                     	;# 
   368  0EA1                     	;# 
   369  0EA2                     	;# 
   370  0EA3                     	;# 
   371  0EA4                     	;# 
   372  0EA5                     	;# 
   373  0F0F                     	;# 
   374  0F10                     	;# 
   375  0F11                     	;# 
   376  0F12                     	;# 
   377  0F13                     	;# 
   378  0F14                     	;# 
   379  0F15                     	;# 
   380  0F16                     	;# 
   381  0F17                     	;# 
   382  0F18                     	;# 
   383  0F19                     	;# 
   384  0F1A                     	;# 
   385  0F1B                     	;# 
   386  0F1C                     	;# 
   387  0F1D                     	;# 
   388  0F1E                     	;# 
   389  0F1F                     	;# 
   390  0F20                     	;# 
   391  0F21                     	;# 
   392  0F22                     	;# 
   393  0F23                     	;# 
   394  0F24                     	;# 
   395  0F25                     	;# 
   396  0F26                     	;# 
   397  0F27                     	;# 
   398  0F28                     	;# 
   399  0F29                     	;# 
   400  0F2A                     	;# 
   401  0F2B                     	;# 
   402  0F2C                     	;# 
   403  0F2D                     	;# 
   404  0F2E                     	;# 
   405  0F2F                     	;# 
   406  0F30                     	;# 
   407  0F31                     	;# 
   408  0F32                     	;# 
   409  0F33                     	;# 
   410  0F34                     	;# 
   411  0F35                     	;# 
   412  0F36                     	;# 
   413  0F37                     	;# 
   414  0FE4                     	;# 
   415  0FE5                     	;# 
   416  0FE6                     	;# 
   417  0FE7                     	;# 
   418  0FE8                     	;# 
   419  0FE9                     	;# 
   420  0FEA                     	;# 
   421  0FEB                     	;# 
   422  0FED                     	;# 
   423  0FEE                     	;# 
   424  0FEF                     	;# 
   425  0000                     	;# 
   426  0001                     	;# 
   427  0002                     	;# 
   428  0003                     	;# 
   429  0004                     	;# 
   430  0005                     	;# 
   431  0006                     	;# 
   432  0007                     	;# 
   433  0008                     	;# 
   434  0009                     	;# 
   435  000A                     	;# 
   436  000B                     	;# 
   437  000C                     	;# 
   438  000E                     	;# 
   439  0010                     	;# 
   440  0011                     	;# 
   441  0012                     	;# 
   442  0013                     	;# 
   443  0014                     	;# 
   444  0015                     	;# 
   445  0015                     	;# 
   446  0016                     	;# 
   447  0016                     	;# 
   448  0017                     	;# 
   449  0018                     	;# 
   450  0019                     	;# 
   451  0019                     	;# 
   452  001A                     	;# 
   453  001B                     	;# 
   454  001C                     	;# 
   455  001D                     	;# 
   456  001E                     	;# 
   457  001F                     	;# 
   458  008C                     	;# 
   459  008E                     	;# 
   460  0090                     	;# 
   461  0091                     	;# 
   462  0092                     	;# 
   463  0093                     	;# 
   464  0094                     	;# 
   465  0097                     	;# 
   466  009B                     	;# 
   467  009B                     	;# 
   468  009C                     	;# 
   469  009D                     	;# 
   470  009E                     	;# 
   471  009F                     	;# 
   472  010C                     	;# 
   473  010E                     	;# 
   474  0111                     	;# 
   475  0112                     	;# 
   476  0113                     	;# 
   477  0114                     	;# 
   478  0115                     	;# 
   479  0116                     	;# 
   480  0117                     	;# 
   481  0118                     	;# 
   482  0119                     	;# 
   483  018C                     	;# 
   484  018E                     	;# 
   485  0197                     	;# 
   486  0199                     	;# 
   487  0199                     	;# 
   488  0199                     	;# 
   489  019A                     	;# 
   490  019A                     	;# 
   491  019A                     	;# 
   492  019B                     	;# 
   493  019B                     	;# 
   494  019B                     	;# 
   495  019B                     	;# 
   496  019B                     	;# 
   497  019C                     	;# 
   498  019C                     	;# 
   499  019C                     	;# 
   500  019D                     	;# 
   501  019D                     	;# 
   502  019D                     	;# 
   503  019E                     	;# 
   504  019E                     	;# 
   505  019E                     	;# 
   506  019F                     	;# 
   507  019F                     	;# 
   508  019F                     	;# 
   509  019F                     	;# 
   510  019F                     	;# 
   511  020C                     	;# 
   512  020E                     	;# 
   513  0211                     	;# 
   514  0211                     	;# 
   515  0212                     	;# 
   516  0212                     	;# 
   517  0213                     	;# 
   518  0213                     	;# 
   519  0214                     	;# 
   520  0214                     	;# 
   521  0215                     	;# 
   522  0215                     	;# 
   523  0215                     	;# 
   524  0215                     	;# 
   525  0216                     	;# 
   526  0216                     	;# 
   527  0217                     	;# 
   528  0217                     	;# 
   529  0219                     	;# 
   530  021A                     	;# 
   531  021B                     	;# 
   532  021C                     	;# 
   533  021D                     	;# 
   534  021D                     	;# 
   535  021E                     	;# 
   536  021F                     	;# 
   537  028C                     	;# 
   538  028E                     	;# 
   539  0291                     	;# 
   540  0291                     	;# 
   541  0292                     	;# 
   542  0293                     	;# 
   543  0294                     	;# 
   544  0295                     	;# 
   545  0295                     	;# 
   546  0296                     	;# 
   547  0297                     	;# 
   548  0298                     	;# 
   549  029F                     	;# 
   550  030C                     	;# 
   551  030E                     	;# 
   552  0311                     	;# 
   553  0311                     	;# 
   554  0312                     	;# 
   555  0313                     	;# 
   556  0314                     	;# 
   557  0315                     	;# 
   558  0315                     	;# 
   559  0316                     	;# 
   560  0317                     	;# 
   561  0318                     	;# 
   562  038C                     	;# 
   563  038E                     	;# 
   564  0391                     	;# 
   565  0392                     	;# 
   566  0393                     	;# 
   567  0397                     	;# 
   568  0398                     	;# 
   569  0399                     	;# 
   570  039A                     	;# 
   571  039C                     	;# 
   572  039D                     	;# 
   573  039E                     	;# 
   574  039F                     	;# 
   575  0411                     	;# 
   576  0411                     	;# 
   577  0412                     	;# 
   578  0413                     	;# 
   579  0414                     	;# 
   580  0415                     	;# 
   581  0416                     	;# 
   582  0417                     	;# 
   583  0418                     	;# 
   584  0418                     	;# 
   585  0419                     	;# 
   586  041A                     	;# 
   587  041B                     	;# 
   588  041C                     	;# 
   589  041D                     	;# 
   590  041E                     	;# 
   591  041F                     	;# 
   592  0498                     	;# 
   593  0498                     	;# 
   594  0499                     	;# 
   595  049A                     	;# 
   596  049B                     	;# 
   597  049B                     	;# 
   598  049C                     	;# 
   599  049D                     	;# 
   600  049E                     	;# 
   601  049F                     	;# 
   602  0617                     	;# 
   603  0618                     	;# 
   604  0619                     	;# 
   605  0619                     	;# 
   606  061A                     	;# 
   607  061B                     	;# 
   608  061C                     	;# 
   609  061C                     	;# 
   610  061F                     	;# 
   611  0691                     	;# 
   612  0692                     	;# 
   613  0693                     	;# 
   614  0694                     	;# 
   615  0695                     	;# 
   616  0696                     	;# 
   617  0697                     	;# 
   618  0698                     	;# 
   619  0699                     	;# 
   620  0711                     	;# 
   621  0712                     	;# 
   622  0713                     	;# 
   623  0714                     	;# 
   624  0715                     	;# 
   625  0716                     	;# 
   626  0717                     	;# 
   627  0718                     	;# 
   628  0719                     	;# 
   629  0891                     	;# 
   630  0891                     	;# 
   631  0891                     	;# 
   632  0891                     	;# 
   633  0891                     	;# 
   634  0891                     	;# 
   635  0892                     	;# 
   636  0892                     	;# 
   637  0892                     	;# 
   638  0893                     	;# 
   639  0893                     	;# 
   640  0893                     	;# 
   641  0893                     	;# 
   642  0893                     	;# 
   643  0893                     	;# 
   644  0894                     	;# 
   645  0894                     	;# 
   646  0894                     	;# 
   647  0895                     	;# 
   648  0895                     	;# 
   649  0895                     	;# 
   650  0896                     	;# 
   651  0896                     	;# 
   652  0896                     	;# 
   653  089B                     	;# 
   654  0911                     	;# 
   655  0912                     	;# 
   656  0913                     	;# 
   657  0914                     	;# 
   658  0915                     	;# 
   659  0916                     	;# 
   660  0918                     	;# 
   661  0919                     	;# 
   662  091A                     	;# 
   663  091B                     	;# 
   664  091C                     	;# 
   665  091D                     	;# 
   666  091E                     	;# 
   667  091F                     	;# 
   668  0E0F                     	;# 
   669  0E10                     	;# 
   670  0E11                     	;# 
   671  0E12                     	;# 
   672  0E13                     	;# 
   673  0E14                     	;# 
   674  0E15                     	;# 
   675  0E16                     	;# 
   676  0E17                     	;# 
   677  0E18                     	;# 
   678  0E19                     	;# 
   679  0E1A                     	;# 
   680  0E1B                     	;# 
   681  0E1C                     	;# 
   682  0E1D                     	;# 
   683  0E1E                     	;# 
   684  0E1F                     	;# 
   685  0E20                     	;# 
   686  0E21                     	;# 
   687  0E22                     	;# 
   688  0E24                     	;# 
   689  0E25                     	;# 
   690  0E28                     	;# 
   691  0E29                     	;# 
   692  0E2A                     	;# 
   693  0E2B                     	;# 
   694  0E2C                     	;# 
   695  0E2D                     	;# 
   696  0E2E                     	;# 
   697  0E2F                     	;# 
   698  0E90                     	;# 
   699  0E91                     	;# 
   700  0E92                     	;# 
   701  0E94                     	;# 
   702  0E95                     	;# 
   703  0EA0                     	;# 
   704  0EA1                     	;# 
   705  0EA2                     	;# 
   706  0EA3                     	;# 
   707  0EA4                     	;# 
   708  0EA5                     	;# 
   709  0F0F                     	;# 
   710  0F10                     	;# 
   711  0F11                     	;# 
   712  0F12                     	;# 
   713  0F13                     	;# 
   714  0F14                     	;# 
   715  0F15                     	;# 
   716  0F16                     	;# 
   717  0F17                     	;# 
   718  0F18                     	;# 
   719  0F19                     	;# 
   720  0F1A                     	;# 
   721  0F1B                     	;# 
   722  0F1C                     	;# 
   723  0F1D                     	;# 
   724  0F1E                     	;# 
   725  0F1F                     	;# 
   726  0F20                     	;# 
   727  0F21                     	;# 
   728  0F22                     	;# 
   729  0F23                     	;# 
   730  0F24                     	;# 
   731  0F25                     	;# 
   732  0F26                     	;# 
   733  0F27                     	;# 
   734  0F28                     	;# 
   735  0F29                     	;# 
   736  0F2A                     	;# 
   737  0F2B                     	;# 
   738  0F2C                     	;# 
   739  0F2D                     	;# 
   740  0F2E                     	;# 
   741  0F2F                     	;# 
   742  0F30                     	;# 
   743  0F31                     	;# 
   744  0F32                     	;# 
   745  0F33                     	;# 
   746  0F34                     	;# 
   747  0F35                     	;# 
   748  0F36                     	;# 
   749  0F37                     	;# 
   750  0FE4                     	;# 
   751  0FE5                     	;# 
   752  0FE6                     	;# 
   753  0FE7                     	;# 
   754  0FE8                     	;# 
   755  0FE9                     	;# 
   756  0FEA                     	;# 
   757  0FEB                     	;# 
   758  0FED                     	;# 
   759  0FEE                     	;# 
   760  0FEF                     	;# 
   761  0000                     	;# 
   762  0001                     	;# 
   763  0002                     	;# 
   764  0003                     	;# 
   765  0004                     	;# 
   766  0005                     	;# 
   767  0006                     	;# 
   768  0007                     	;# 
   769  0008                     	;# 
   770  0009                     	;# 
   771  000A                     	;# 
   772  000B                     	;# 
   773  000C                     	;# 
   774  000E                     	;# 
   775  0010                     	;# 
   776  0011                     	;# 
   777  0012                     	;# 
   778  0013                     	;# 
   779  0014                     	;# 
   780  0015                     	;# 
   781  0015                     	;# 
   782  0016                     	;# 
   783  0016                     	;# 
   784  0017                     	;# 
   785  0018                     	;# 
   786  0019                     	;# 
   787  0019                     	;# 
   788  001A                     	;# 
   789  001B                     	;# 
   790  001C                     	;# 
   791  001D                     	;# 
   792  001E                     	;# 
   793  001F                     	;# 
   794  008C                     	;# 
   795  008E                     	;# 
   796  0090                     	;# 
   797  0091                     	;# 
   798  0092                     	;# 
   799  0093                     	;# 
   800  0094                     	;# 
   801  0097                     	;# 
   802  009B                     	;# 
   803  009B                     	;# 
   804  009C                     	;# 
   805  009D                     	;# 
   806  009E                     	;# 
   807  009F                     	;# 
   808  010C                     	;# 
   809  010E                     	;# 
   810  0111                     	;# 
   811  0112                     	;# 
   812  0113                     	;# 
   813  0114                     	;# 
   814  0115                     	;# 
   815  0116                     	;# 
   816  0117                     	;# 
   817  0118                     	;# 
   818  0119                     	;# 
   819  018C                     	;# 
   820  018E                     	;# 
   821  0197                     	;# 
   822  0199                     	;# 
   823  0199                     	;# 
   824  0199                     	;# 
   825  019A                     	;# 
   826  019A                     	;# 
   827  019A                     	;# 
   828  019B                     	;# 
   829  019B                     	;# 
   830  019B                     	;# 
   831  019B                     	;# 
   832  019B                     	;# 
   833  019C                     	;# 
   834  019C                     	;# 
   835  019C                     	;# 
   836  019D                     	;# 
   837  019D                     	;# 
   838  019D                     	;# 
   839  019E                     	;# 
   840  019E                     	;# 
   841  019E                     	;# 
   842  019F                     	;# 
   843  019F                     	;# 
   844  019F                     	;# 
   845  019F                     	;# 
   846  019F                     	;# 
   847  020C                     	;# 
   848  020E                     	;# 
   849  0211                     	;# 
   850  0211                     	;# 
   851  0212                     	;# 
   852  0212                     	;# 
   853  0213                     	;# 
   854  0213                     	;# 
   855  0214                     	;# 
   856  0214                     	;# 
   857  0215                     	;# 
   858  0215                     	;# 
   859  0215                     	;# 
   860  0215                     	;# 
   861  0216                     	;# 
   862  0216                     	;# 
   863  0217                     	;# 
   864  0217                     	;# 
   865  0219                     	;# 
   866  021A                     	;# 
   867  021B                     	;# 
   868  021C                     	;# 
   869  021D                     	;# 
   870  021D                     	;# 
   871  021E                     	;# 
   872  021F                     	;# 
   873  028C                     	;# 
   874  028E                     	;# 
   875  0291                     	;# 
   876  0291                     	;# 
   877  0292                     	;# 
   878  0293                     	;# 
   879  0294                     	;# 
   880  0295                     	;# 
   881  0295                     	;# 
   882  0296                     	;# 
   883  0297                     	;# 
   884  0298                     	;# 
   885  029F                     	;# 
   886  030C                     	;# 
   887  030E                     	;# 
   888  0311                     	;# 
   889  0311                     	;# 
   890  0312                     	;# 
   891  0313                     	;# 
   892  0314                     	;# 
   893  0315                     	;# 
   894  0315                     	;# 
   895  0316                     	;# 
   896  0317                     	;# 
   897  0318                     	;# 
   898  038C                     	;# 
   899  038E                     	;# 
   900  0391                     	;# 
   901  0392                     	;# 
   902  0393                     	;# 
   903  0397                     	;# 
   904  0398                     	;# 
   905  0399                     	;# 
   906  039A                     	;# 
   907  039C                     	;# 
   908  039D                     	;# 
   909  039E                     	;# 
   910  039F                     	;# 
   911  0411                     	;# 
   912  0411                     	;# 
   913  0412                     	;# 
   914  0413                     	;# 
   915  0414                     	;# 
   916  0415                     	;# 
   917  0416                     	;# 
   918  0417                     	;# 
   919  0418                     	;# 
   920  0418                     	;# 
   921  0419                     	;# 
   922  041A                     	;# 
   923  041B                     	;# 
   924  041C                     	;# 
   925  041D                     	;# 
   926  041E                     	;# 
   927  041F                     	;# 
   928  0498                     	;# 
   929  0498                     	;# 
   930  0499                     	;# 
   931  049A                     	;# 
   932  049B                     	;# 
   933  049B                     	;# 
   934  049C                     	;# 
   935  049D                     	;# 
   936  049E                     	;# 
   937  049F                     	;# 
   938  0617                     	;# 
   939  0618                     	;# 
   940  0619                     	;# 
   941  0619                     	;# 
   942  061A                     	;# 
   943  061B                     	;# 
   944  061C                     	;# 
   945  061C                     	;# 
   946  061F                     	;# 
   947  0691                     	;# 
   948  0692                     	;# 
   949  0693                     	;# 
   950  0694                     	;# 
   951  0695                     	;# 
   952  0696                     	;# 
   953  0697                     	;# 
   954  0698                     	;# 
   955  0699                     	;# 
   956  0711                     	;# 
   957  0712                     	;# 
   958  0713                     	;# 
   959  0714                     	;# 
   960  0715                     	;# 
   961  0716                     	;# 
   962  0717                     	;# 
   963  0718                     	;# 
   964  0719                     	;# 
   965  0891                     	;# 
   966  0891                     	;# 
   967  0891                     	;# 
   968  0891                     	;# 
   969  0891                     	;# 
   970  0891                     	;# 
   971  0892                     	;# 
   972  0892                     	;# 
   973  0892                     	;# 
   974  0893                     	;# 
   975  0893                     	;# 
   976  0893                     	;# 
   977  0893                     	;# 
   978  0893                     	;# 
   979  0893                     	;# 
   980  0894                     	;# 
   981  0894                     	;# 
   982  0894                     	;# 
   983  0895                     	;# 
   984  0895                     	;# 
   985  0895                     	;# 
   986  0896                     	;# 
   987  0896                     	;# 
   988  0896                     	;# 
   989  089B                     	;# 
   990  0911                     	;# 
   991  0912                     	;# 
   992  0913                     	;# 
   993  0914                     	;# 
   994  0915                     	;# 
   995  0916                     	;# 
   996  0918                     	;# 
   997  0919                     	;# 
   998  091A                     	;# 
   999  091B                     	;# 
  1000  091C                     	;# 
  1001  091D                     	;# 
  1002  091E                     	;# 
  1003  091F                     	;# 
  1004  0E0F                     	;# 
  1005  0E10                     	;# 
  1006  0E11                     	;# 
  1007  0E12                     	;# 
  1008  0E13                     	;# 
  1009  0E14                     	;# 
  1010  0E15                     	;# 
  1011  0E16                     	;# 
  1012  0E17                     	;# 
  1013  0E18                     	;# 
  1014  0E19                     	;# 
  1015  0E1A                     	;# 
  1016  0E1B                     	;# 
  1017  0E1C                     	;# 
  1018  0E1D                     	;# 
  1019  0E1E                     	;# 
  1020  0E1F                     	;# 
  1021  0E20                     	;# 
  1022  0E21                     	;# 
  1023  0E22                     	;# 
  1024  0E24                     	;# 
  1025  0E25                     	;# 
  1026  0E28                     	;# 
  1027  0E29                     	;# 
  1028  0E2A                     	;# 
  1029  0E2B                     	;# 
  1030  0E2C                     	;# 
  1031  0E2D                     	;# 
  1032  0E2E                     	;# 
  1033  0E2F                     	;# 
  1034  0E90                     	;# 
  1035  0E91                     	;# 
  1036  0E92                     	;# 
  1037  0E94                     	;# 
  1038  0E95                     	;# 
  1039  0EA0                     	;# 
  1040  0EA1                     	;# 
  1041  0EA2                     	;# 
  1042  0EA3                     	;# 
  1043  0EA4                     	;# 
  1044  0EA5                     	;# 
  1045  0F0F                     	;# 
  1046  0F10                     	;# 
  1047  0F11                     	;# 
  1048  0F12                     	;# 
  1049  0F13                     	;# 
  1050  0F14                     	;# 
  1051  0F15                     	;# 
  1052  0F16                     	;# 
  1053  0F17                     	;# 
  1054  0F18                     	;# 
  1055  0F19                     	;# 
  1056  0F1A                     	;# 
  1057  0F1B                     	;# 
  1058  0F1C                     	;# 
  1059  0F1D                     	;# 
  1060  0F1E                     	;# 
  1061  0F1F                     	;# 
  1062  0F20                     	;# 
  1063  0F21                     	;# 
  1064  0F22                     	;# 
  1065  0F23                     	;# 
  1066  0F24                     	;# 
  1067  0F25                     	;# 
  1068  0F26                     	;# 
  1069  0F27                     	;# 
  1070  0F28                     	;# 
  1071  0F29                     	;# 
  1072  0F2A                     	;# 
  1073  0F2B                     	;# 
  1074  0F2C                     	;# 
  1075  0F2D                     	;# 
  1076  0F2E                     	;# 
  1077  0F2F                     	;# 
  1078  0F30                     	;# 
  1079  0F31                     	;# 
  1080  0F32                     	;# 
  1081  0F33                     	;# 
  1082  0F34                     	;# 
  1083  0F35                     	;# 
  1084  0F36                     	;# 
  1085  0F37                     	;# 
  1086  0FE4                     	;# 
  1087  0FE5                     	;# 
  1088  0FE6                     	;# 
  1089  0FE7                     	;# 
  1090  0FE8                     	;# 
  1091  0FE9                     	;# 
  1092  0FEA                     	;# 
  1093  0FEB                     	;# 
  1094  0FED                     	;# 
  1095  0FEE                     	;# 
  1096  0FEF                     	;# 
  1097  0000                     	;# 
  1098  0001                     	;# 
  1099  0002                     	;# 
  1100  0003                     	;# 
  1101  0004                     	;# 
  1102  0005                     	;# 
  1103  0006                     	;# 
  1104  0007                     	;# 
  1105  0008                     	;# 
  1106  0009                     	;# 
  1107  000A                     	;# 
  1108  000B                     	;# 
  1109  000C                     	;# 
  1110  000E                     	;# 
  1111  0010                     	;# 
  1112  0011                     	;# 
  1113  0012                     	;# 
  1114  0013                     	;# 
  1115  0014                     	;# 
  1116  0015                     	;# 
  1117  0015                     	;# 
  1118  0016                     	;# 
  1119  0016                     	;# 
  1120  0017                     	;# 
  1121  0018                     	;# 
  1122  0019                     	;# 
  1123  0019                     	;# 
  1124  001A                     	;# 
  1125  001B                     	;# 
  1126  001C                     	;# 
  1127  001D                     	;# 
  1128  001E                     	;# 
  1129  001F                     	;# 
  1130  008C                     	;# 
  1131  008E                     	;# 
  1132  0090                     	;# 
  1133  0091                     	;# 
  1134  0092                     	;# 
  1135  0093                     	;# 
  1136  0094                     	;# 
  1137  0097                     	;# 
  1138  009B                     	;# 
  1139  009B                     	;# 
  1140  009C                     	;# 
  1141  009D                     	;# 
  1142  009E                     	;# 
  1143  009F                     	;# 
  1144  010C                     	;# 
  1145  010E                     	;# 
  1146  0111                     	;# 
  1147  0112                     	;# 
  1148  0113                     	;# 
  1149  0114                     	;# 
  1150  0115                     	;# 
  1151  0116                     	;# 
  1152  0117                     	;# 
  1153  0118                     	;# 
  1154  0119                     	;# 
  1155  018C                     	;# 
  1156  018E                     	;# 
  1157  0197                     	;# 
  1158  0199                     	;# 
  1159  0199                     	;# 
  1160  0199                     	;# 
  1161  019A                     	;# 
  1162  019A                     	;# 
  1163  019A                     	;# 
  1164  019B                     	;# 
  1165  019B                     	;# 
  1166  019B                     	;# 
  1167  019B                     	;# 
  1168  019B                     	;# 
  1169  019C                     	;# 
  1170  019C                     	;# 
  1171  019C                     	;# 
  1172  019D                     	;# 
  1173  019D                     	;# 
  1174  019D                     	;# 
  1175  019E                     	;# 
  1176  019E                     	;# 
  1177  019E                     	;# 
  1178  019F                     	;# 
  1179  019F                     	;# 
  1180  019F                     	;# 
  1181  019F                     	;# 
  1182  019F                     	;# 
  1183  020C                     	;# 
  1184  020E                     	;# 
  1185  0211                     	;# 
  1186  0211                     	;# 
  1187  0212                     	;# 
  1188  0212                     	;# 
  1189  0213                     	;# 
  1190  0213                     	;# 
  1191  0214                     	;# 
  1192  0214                     	;# 
  1193  0215                     	;# 
  1194  0215                     	;# 
  1195  0215                     	;# 
  1196  0215                     	;# 
  1197  0216                     	;# 
  1198  0216                     	;# 
  1199  0217                     	;# 
  1200  0217                     	;# 
  1201  0219                     	;# 
  1202  021A                     	;# 
  1203  021B                     	;# 
  1204  021C                     	;# 
  1205  021D                     	;# 
  1206  021D                     	;# 
  1207  021E                     	;# 
  1208  021F                     	;# 
  1209  028C                     	;# 
  1210  028E                     	;# 
  1211  0291                     	;# 
  1212  0291                     	;# 
  1213  0292                     	;# 
  1214  0293                     	;# 
  1215  0294                     	;# 
  1216  0295                     	;# 
  1217  0295                     	;# 
  1218  0296                     	;# 
  1219  0297                     	;# 
  1220  0298                     	;# 
  1221  029F                     	;# 
  1222  030C                     	;# 
  1223  030E                     	;# 
  1224  0311                     	;# 
  1225  0311                     	;# 
  1226  0312                     	;# 
  1227  0313                     	;# 
  1228  0314                     	;# 
  1229  0315                     	;# 
  1230  0315                     	;# 
  1231  0316                     	;# 
  1232  0317                     	;# 
  1233  0318                     	;# 
  1234  038C                     	;# 
  1235  038E                     	;# 
  1236  0391                     	;# 
  1237  0392                     	;# 
  1238  0393                     	;# 
  1239  0397                     	;# 
  1240  0398                     	;# 
  1241  0399                     	;# 
  1242  039A                     	;# 
  1243  039C                     	;# 
  1244  039D                     	;# 
  1245  039E                     	;# 
  1246  039F                     	;# 
  1247  0411                     	;# 
  1248  0411                     	;# 
  1249  0412                     	;# 
  1250  0413                     	;# 
  1251  0414                     	;# 
  1252  0415                     	;# 
  1253  0416                     	;# 
  1254  0417                     	;# 
  1255  0418                     	;# 
  1256  0418                     	;# 
  1257  0419                     	;# 
  1258  041A                     	;# 
  1259  041B                     	;# 
  1260  041C                     	;# 
  1261  041D                     	;# 
  1262  041E                     	;# 
  1263  041F                     	;# 
  1264  0498                     	;# 
  1265  0498                     	;# 
  1266  0499                     	;# 
  1267  049A                     	;# 
  1268  049B                     	;# 
  1269  049B                     	;# 
  1270  049C                     	;# 
  1271  049D                     	;# 
  1272  049E                     	;# 
  1273  049F                     	;# 
  1274  0617                     	;# 
  1275  0618                     	;# 
  1276  0619                     	;# 
  1277  0619                     	;# 
  1278  061A                     	;# 
  1279  061B                     	;# 
  1280  061C                     	;# 
  1281  061C                     	;# 
  1282  061F                     	;# 
  1283  0691                     	;# 
  1284  0692                     	;# 
  1285  0693                     	;# 
  1286  0694                     	;# 
  1287  0695                     	;# 
  1288  0696                     	;# 
  1289  0697                     	;# 
  1290  0698                     	;# 
  1291  0699                     	;# 
  1292  0711                     	;# 
  1293  0712                     	;# 
  1294  0713                     	;# 
  1295  0714                     	;# 
  1296  0715                     	;# 
  1297  0716                     	;# 
  1298  0717                     	;# 
  1299  0718                     	;# 
  1300  0719                     	;# 
  1301  0891                     	;# 
  1302  0891                     	;# 
  1303  0891                     	;# 
  1304  0891                     	;# 
  1305  0891                     	;# 
  1306  0891                     	;# 
  1307  0892                     	;# 
  1308  0892                     	;# 
  1309  0892                     	;# 
  1310  0893                     	;# 
  1311  0893                     	;# 
  1312  0893                     	;# 
  1313  0893                     	;# 
  1314  0893                     	;# 
  1315  0893                     	;# 
  1316  0894                     	;# 
  1317  0894                     	;# 
  1318  0894                     	;# 
  1319  0895                     	;# 
  1320  0895                     	;# 
  1321  0895                     	;# 
  1322  0896                     	;# 
  1323  0896                     	;# 
  1324  0896                     	;# 
  1325  089B                     	;# 
  1326  0911                     	;# 
  1327  0912                     	;# 
  1328  0913                     	;# 
  1329  0914                     	;# 
  1330  0915                     	;# 
  1331  0916                     	;# 
  1332  0918                     	;# 
  1333  0919                     	;# 
  1334  091A                     	;# 
  1335  091B                     	;# 
  1336  091C                     	;# 
  1337  091D                     	;# 
  1338  091E                     	;# 
  1339  091F                     	;# 
  1340  0E0F                     	;# 
  1341  0E10                     	;# 
  1342  0E11                     	;# 
  1343  0E12                     	;# 
  1344  0E13                     	;# 
  1345  0E14                     	;# 
  1346  0E15                     	;# 
  1347  0E16                     	;# 
  1348  0E17                     	;# 
  1349  0E18                     	;# 
  1350  0E19                     	;# 
  1351  0E1A                     	;# 
  1352  0E1B                     	;# 
  1353  0E1C                     	;# 
  1354  0E1D                     	;# 
  1355  0E1E                     	;# 
  1356  0E1F                     	;# 
  1357  0E20                     	;# 
  1358  0E21                     	;# 
  1359  0E22                     	;# 
  1360  0E24                     	;# 
  1361  0E25                     	;# 
  1362  0E28                     	;# 
  1363  0E29                     	;# 
  1364  0E2A                     	;# 
  1365  0E2B                     	;# 
  1366  0E2C                     	;# 
  1367  0E2D                     	;# 
  1368  0E2E                     	;# 
  1369  0E2F                     	;# 
  1370  0E90                     	;# 
  1371  0E91                     	;# 
  1372  0E92                     	;# 
  1373  0E94                     	;# 
  1374  0E95                     	;# 
  1375  0EA0                     	;# 
  1376  0EA1                     	;# 
  1377  0EA2                     	;# 
  1378  0EA3                     	;# 
  1379  0EA4                     	;# 
  1380  0EA5                     	;# 
  1381  0F0F                     	;# 
  1382  0F10                     	;# 
  1383  0F11                     	;# 
  1384  0F12                     	;# 
  1385  0F13                     	;# 
  1386  0F14                     	;# 
  1387  0F15                     	;# 
  1388  0F16                     	;# 
  1389  0F17                     	;# 
  1390  0F18                     	;# 
  1391  0F19                     	;# 
  1392  0F1A                     	;# 
  1393  0F1B                     	;# 
  1394  0F1C                     	;# 
  1395  0F1D                     	;# 
  1396  0F1E                     	;# 
  1397  0F1F                     	;# 
  1398  0F20                     	;# 
  1399  0F21                     	;# 
  1400  0F22                     	;# 
  1401  0F23                     	;# 
  1402  0F24                     	;# 
  1403  0F25                     	;# 
  1404  0F26                     	;# 
  1405  0F27                     	;# 
  1406  0F28                     	;# 
  1407  0F29                     	;# 
  1408  0F2A                     	;# 
  1409  0F2B                     	;# 
  1410  0F2C                     	;# 
  1411  0F2D                     	;# 
  1412  0F2E                     	;# 
  1413  0F2F                     	;# 
  1414  0F30                     	;# 
  1415  0F31                     	;# 
  1416  0F32                     	;# 
  1417  0F33                     	;# 
  1418  0F34                     	;# 
  1419  0F35                     	;# 
  1420  0F36                     	;# 
  1421  0F37                     	;# 
  1422  0FE4                     	;# 
  1423  0FE5                     	;# 
  1424  0FE6                     	;# 
  1425  0FE7                     	;# 
  1426  0FE8                     	;# 
  1427  0FE9                     	;# 
  1428  0FEA                     	;# 
  1429  0FEB                     	;# 
  1430  0FED                     	;# 
  1431  0FEE                     	;# 
  1432  0FEF                     	;# 
  1433  0000                     	;# 
  1434  0001                     	;# 
  1435  0002                     	;# 
  1436  0003                     	;# 
  1437  0004                     	;# 
  1438  0005                     	;# 
  1439  0006                     	;# 
  1440  0007                     	;# 
  1441  0008                     	;# 
  1442  0009                     	;# 
  1443  000A                     	;# 
  1444  000B                     	;# 
  1445  000C                     	;# 
  1446  000E                     	;# 
  1447  0010                     	;# 
  1448  0011                     	;# 
  1449  0012                     	;# 
  1450  0013                     	;# 
  1451  0014                     	;# 
  1452  0015                     	;# 
  1453  0015                     	;# 
  1454  0016                     	;# 
  1455  0016                     	;# 
  1456  0017                     	;# 
  1457  0018                     	;# 
  1458  0019                     	;# 
  1459  0019                     	;# 
  1460  001A                     	;# 
  1461  001B                     	;# 
  1462  001C                     	;# 
  1463  001D                     	;# 
  1464  001E                     	;# 
  1465  001F                     	;# 
  1466  008C                     	;# 
  1467  008E                     	;# 
  1468  0090                     	;# 
  1469  0091                     	;# 
  1470  0092                     	;# 
  1471  0093                     	;# 
  1472  0094                     	;# 
  1473  0097                     	;# 
  1474  009B                     	;# 
  1475  009B                     	;# 
  1476  009C                     	;# 
  1477  009D                     	;# 
  1478  009E                     	;# 
  1479  009F                     	;# 
  1480  010C                     	;# 
  1481  010E                     	;# 
  1482  0111                     	;# 
  1483  0112                     	;# 
  1484  0113                     	;# 
  1485  0114                     	;# 
  1486  0115                     	;# 
  1487  0116                     	;# 
  1488  0117                     	;# 
  1489  0118                     	;# 
  1490  0119                     	;# 
  1491  018C                     	;# 
  1492  018E                     	;# 
  1493  0197                     	;# 
  1494  0199                     	;# 
  1495  0199                     	;# 
  1496  0199                     	;# 
  1497  019A                     	;# 
  1498  019A                     	;# 
  1499  019A                     	;# 
  1500  019B                     	;# 
  1501  019B                     	;# 
  1502  019B                     	;# 
  1503  019B                     	;# 
  1504  019B                     	;# 
  1505  019C                     	;# 
  1506  019C                     	;# 
  1507  019C                     	;# 
  1508  019D                     	;# 
  1509  019D                     	;# 
  1510  019D                     	;# 
  1511  019E                     	;# 
  1512  019E                     	;# 
  1513  019E                     	;# 
  1514  019F                     	;# 
  1515  019F                     	;# 
  1516  019F                     	;# 
  1517  019F                     	;# 
  1518  019F                     	;# 
  1519  020C                     	;# 
  1520  020E                     	;# 
  1521  0211                     	;# 
  1522  0211                     	;# 
  1523  0212                     	;# 
  1524  0212                     	;# 
  1525  0213                     	;# 
  1526  0213                     	;# 
  1527  0214                     	;# 
  1528  0214                     	;# 
  1529  0215                     	;# 
  1530  0215                     	;# 
  1531  0215                     	;# 
  1532  0215                     	;# 
  1533  0216                     	;# 
  1534  0216                     	;# 
  1535  0217                     	;# 
  1536  0217                     	;# 
  1537  0219                     	;# 
  1538  021A                     	;# 
  1539  021B                     	;# 
  1540  021C                     	;# 
  1541  021D                     	;# 
  1542  021D                     	;# 
  1543  021E                     	;# 
  1544  021F                     	;# 
  1545  028C                     	;# 
  1546  028E                     	;# 
  1547  0291                     	;# 
  1548  0291                     	;# 
  1549  0292                     	;# 
  1550  0293                     	;# 
  1551  0294                     	;# 
  1552  0295                     	;# 
  1553  0295                     	;# 
  1554  0296                     	;# 
  1555  0297                     	;# 
  1556  0298                     	;# 
  1557  029F                     	;# 
  1558  030C                     	;# 
  1559  030E                     	;# 
  1560  0311                     	;# 
  1561  0311                     	;# 
  1562  0312                     	;# 
  1563  0313                     	;# 
  1564  0314                     	;# 
  1565  0315                     	;# 
  1566  0315                     	;# 
  1567  0316                     	;# 
  1568  0317                     	;# 
  1569  0318                     	;# 
  1570  038C                     	;# 
  1571  038E                     	;# 
  1572  0391                     	;# 
  1573  0392                     	;# 
  1574  0393                     	;# 
  1575  0397                     	;# 
  1576  0398                     	;# 
  1577  0399                     	;# 
  1578  039A                     	;# 
  1579  039C                     	;# 
  1580  039D                     	;# 
  1581  039E                     	;# 
  1582  039F                     	;# 
  1583  0411                     	;# 
  1584  0411                     	;# 
  1585  0412                     	;# 
  1586  0413                     	;# 
  1587  0414                     	;# 
  1588  0415                     	;# 
  1589  0416                     	;# 
  1590  0417                     	;# 
  1591  0418                     	;# 
  1592  0418                     	;# 
  1593  0419                     	;# 
  1594  041A                     	;# 
  1595  041B                     	;# 
  1596  041C                     	;# 
  1597  041D                     	;# 
  1598  041E                     	;# 
  1599  041F                     	;# 
  1600  0498                     	;# 
  1601  0498                     	;# 
  1602  0499                     	;# 
  1603  049A                     	;# 
  1604  049B                     	;# 
  1605  049B                     	;# 
  1606  049C                     	;# 
  1607  049D                     	;# 
  1608  049E                     	;# 
  1609  049F                     	;# 
  1610  0617                     	;# 
  1611  0618                     	;# 
  1612  0619                     	;# 
  1613  0619                     	;# 
  1614  061A                     	;# 
  1615  061B                     	;# 
  1616  061C                     	;# 
  1617  061C                     	;# 
  1618  061F                     	;# 
  1619  0691                     	;# 
  1620  0692                     	;# 
  1621  0693                     	;# 
  1622  0694                     	;# 
  1623  0695                     	;# 
  1624  0696                     	;# 
  1625  0697                     	;# 
  1626  0698                     	;# 
  1627  0699                     	;# 
  1628  0711                     	;# 
  1629  0712                     	;# 
  1630  0713                     	;# 
  1631  0714                     	;# 
  1632  0715                     	;# 
  1633  0716                     	;# 
  1634  0717                     	;# 
  1635  0718                     	;# 
  1636  0719                     	;# 
  1637  0891                     	;# 
  1638  0891                     	;# 
  1639  0891                     	;# 
  1640  0891                     	;# 
  1641  0891                     	;# 
  1642  0891                     	;# 
  1643  0892                     	;# 
  1644  0892                     	;# 
  1645  0892                     	;# 
  1646  0893                     	;# 
  1647  0893                     	;# 
  1648  0893                     	;# 
  1649  0893                     	;# 
  1650  0893                     	;# 
  1651  0893                     	;# 
  1652  0894                     	;# 
  1653  0894                     	;# 
  1654  0894                     	;# 
  1655  0895                     	;# 
  1656  0895                     	;# 
  1657  0895                     	;# 
  1658  0896                     	;# 
  1659  0896                     	;# 
  1660  0896                     	;# 
  1661  089B                     	;# 
  1662  0911                     	;# 
  1663  0912                     	;# 
  1664  0913                     	;# 
  1665  0914                     	;# 
  1666  0915                     	;# 
  1667  0916                     	;# 
  1668  0918                     	;# 
  1669  0919                     	;# 
  1670  091A                     	;# 
  1671  091B                     	;# 
  1672  091C                     	;# 
  1673  091D                     	;# 
  1674  091E                     	;# 
  1675  091F                     	;# 
  1676  0E0F                     	;# 
  1677  0E10                     	;# 
  1678  0E11                     	;# 
  1679  0E12                     	;# 
  1680  0E13                     	;# 
  1681  0E14                     	;# 
  1682  0E15                     	;# 
  1683  0E16                     	;# 
  1684  0E17                     	;# 
  1685  0E18                     	;# 
  1686  0E19                     	;# 
  1687  0E1A                     	;# 
  1688  0E1B                     	;# 
  1689  0E1C                     	;# 
  1690  0E1D                     	;# 
  1691  0E1E                     	;# 
  1692  0E1F                     	;# 
  1693  0E20                     	;# 
  1694  0E21                     	;# 
  1695  0E22                     	;# 
  1696  0E24                     	;# 
  1697  0E25                     	;# 
  1698  0E28                     	;# 
  1699  0E29                     	;# 
  1700  0E2A                     	;# 
  1701  0E2B                     	;# 
  1702  0E2C                     	;# 
  1703  0E2D                     	;# 
  1704  0E2E                     	;# 
  1705  0E2F                     	;# 
  1706  0E90                     	;# 
  1707  0E91                     	;# 
  1708  0E92                     	;# 
  1709  0E94                     	;# 
  1710  0E95                     	;# 
  1711  0EA0                     	;# 
  1712  0EA1                     	;# 
  1713  0EA2                     	;# 
  1714  0EA3                     	;# 
  1715  0EA4                     	;# 
  1716  0EA5                     	;# 
  1717  0F0F                     	;# 
  1718  0F10                     	;# 
  1719  0F11                     	;# 
  1720  0F12                     	;# 
  1721  0F13                     	;# 
  1722  0F14                     	;# 
  1723  0F15                     	;# 
  1724  0F16                     	;# 
  1725  0F17                     	;# 
  1726  0F18                     	;# 
  1727  0F19                     	;# 
  1728  0F1A                     	;# 
  1729  0F1B                     	;# 
  1730  0F1C                     	;# 
  1731  0F1D                     	;# 
  1732  0F1E                     	;# 
  1733  0F1F                     	;# 
  1734  0F20                     	;# 
  1735  0F21                     	;# 
  1736  0F22                     	;# 
  1737  0F23                     	;# 
  1738  0F24                     	;# 
  1739  0F25                     	;# 
  1740  0F26                     	;# 
  1741  0F27                     	;# 
  1742  0F28                     	;# 
  1743  0F29                     	;# 
  1744  0F2A                     	;# 
  1745  0F2B                     	;# 
  1746  0F2C                     	;# 
  1747  0F2D                     	;# 
  1748  0F2E                     	;# 
  1749  0F2F                     	;# 
  1750  0F30                     	;# 
  1751  0F31                     	;# 
  1752  0F32                     	;# 
  1753  0F33                     	;# 
  1754  0F34                     	;# 
  1755  0F35                     	;# 
  1756  0F36                     	;# 
  1757  0F37                     	;# 
  1758  0FE4                     	;# 
  1759  0FE5                     	;# 
  1760  0FE6                     	;# 
  1761  0FE7                     	;# 
  1762  0FE8                     	;# 
  1763  0FE9                     	;# 
  1764  0FEA                     	;# 
  1765  0FEB                     	;# 
  1766  0FED                     	;# 
  1767  0FEE                     	;# 
  1768  0FEF                     	;# 
  1769  0000                     	;# 
  1770  0001                     	;# 
  1771  0002                     	;# 
  1772  0003                     	;# 
  1773  0004                     	;# 
  1774  0005                     	;# 
  1775  0006                     	;# 
  1776  0007                     	;# 
  1777  0008                     	;# 
  1778  0009                     	;# 
  1779  000A                     	;# 
  1780  000B                     	;# 
  1781  000C                     	;# 
  1782  000E                     	;# 
  1783  0010                     	;# 
  1784  0011                     	;# 
  1785  0012                     	;# 
  1786  0013                     	;# 
  1787  0014                     	;# 
  1788  0015                     	;# 
  1789  0015                     	;# 
  1790  0016                     	;# 
  1791  0016                     	;# 
  1792  0017                     	;# 
  1793  0018                     	;# 
  1794  0019                     	;# 
  1795  0019                     	;# 
  1796  001A                     	;# 
  1797  001B                     	;# 
  1798  001C                     	;# 
  1799  001D                     	;# 
  1800  001E                     	;# 
  1801  001F                     	;# 
  1802  008C                     	;# 
  1803  008E                     	;# 
  1804  0090                     	;# 
  1805  0091                     	;# 
  1806  0092                     	;# 
  1807  0093                     	;# 
  1808  0094                     	;# 
  1809  0097                     	;# 
  1810  009B                     	;# 
  1811  009B                     	;# 
  1812  009C                     	;# 
  1813  009D                     	;# 
  1814  009E                     	;# 
  1815  009F                     	;# 
  1816  010C                     	;# 
  1817  010E                     	;# 
  1818  0111                     	;# 
  1819  0112                     	;# 
  1820  0113                     	;# 
  1821  0114                     	;# 
  1822  0115                     	;# 
  1823  0116                     	;# 
  1824  0117                     	;# 
  1825  0118                     	;# 
  1826  0119                     	;# 
  1827  018C                     	;# 
  1828  018E                     	;# 
  1829  0197                     	;# 
  1830  0199                     	;# 
  1831  0199                     	;# 
  1832  0199                     	;# 
  1833  019A                     	;# 
  1834  019A                     	;# 
  1835  019A                     	;# 
  1836  019B                     	;# 
  1837  019B                     	;# 
  1838  019B                     	;# 
  1839  019B                     	;# 
  1840  019B                     	;# 
  1841  019C                     	;# 
  1842  019C                     	;# 
  1843  019C                     	;# 
  1844  019D                     	;# 
  1845  019D                     	;# 
  1846  019D                     	;# 
  1847  019E                     	;# 
  1848  019E                     	;# 
  1849  019E                     	;# 
  1850  019F                     	;# 
  1851  019F                     	;# 
  1852  019F                     	;# 
  1853  019F                     	;# 
  1854  019F                     	;# 
  1855  020C                     	;# 
  1856  020E                     	;# 
  1857  0211                     	;# 
  1858  0211                     	;# 
  1859  0212                     	;# 
  1860  0212                     	;# 
  1861  0213                     	;# 
  1862  0213                     	;# 
  1863  0214                     	;# 
  1864  0214                     	;# 
  1865  0215                     	;# 
  1866  0215                     	;# 
  1867  0215                     	;# 
  1868  0215                     	;# 
  1869  0216                     	;# 
  1870  0216                     	;# 
  1871  0217                     	;# 
  1872  0217                     	;# 
  1873  0219                     	;# 
  1874  021A                     	;# 
  1875  021B                     	;# 
  1876  021C                     	;# 
  1877  021D                     	;# 
  1878  021D                     	;# 
  1879  021E                     	;# 
  1880  021F                     	;# 
  1881  028C                     	;# 
  1882  028E                     	;# 
  1883  0291                     	;# 
  1884  0291                     	;# 
  1885  0292                     	;# 
  1886  0293                     	;# 
  1887  0294                     	;# 
  1888  0295                     	;# 
  1889  0295                     	;# 
  1890  0296                     	;# 
  1891  0297                     	;# 
  1892  0298                     	;# 
  1893  029F                     	;# 
  1894  030C                     	;# 
  1895  030E                     	;# 
  1896  0311                     	;# 
  1897  0311                     	;# 
  1898  0312                     	;# 
  1899  0313                     	;# 
  1900  0314                     	;# 
  1901  0315                     	;# 
  1902  0315                     	;# 
  1903  0316                     	;# 
  1904  0317                     	;# 
  1905  0318                     	;# 
  1906  038C                     	;# 
  1907  038E                     	;# 
  1908  0391                     	;# 
  1909  0392                     	;# 
  1910  0393                     	;# 
  1911  0397                     	;# 
  1912  0398                     	;# 
  1913  0399                     	;# 
  1914  039A                     	;# 
  1915  039C                     	;# 
  1916  039D                     	;# 
  1917  039E                     	;# 
  1918  039F                     	;# 
  1919  0411                     	;# 
  1920  0411                     	;# 
  1921  0412                     	;# 
  1922  0413                     	;# 
  1923  0414                     	;# 
  1924  0415                     	;# 
  1925  0416                     	;# 
  1926  0417                     	;# 
  1927  0418                     	;# 
  1928  0418                     	;# 
  1929  0419                     	;# 
  1930  041A                     	;# 
  1931  041B                     	;# 
  1932  041C                     	;# 
  1933  041D                     	;# 
  1934  041E                     	;# 
  1935  041F                     	;# 
  1936  0498                     	;# 
  1937  0498                     	;# 
  1938  0499                     	;# 
  1939  049A                     	;# 
  1940  049B                     	;# 
  1941  049B                     	;# 
  1942  049C                     	;# 
  1943  049D                     	;# 
  1944  049E                     	;# 
  1945  049F                     	;# 
  1946  0617                     	;# 
  1947  0618                     	;# 
  1948  0619                     	;# 
  1949  0619                     	;# 
  1950  061A                     	;# 
  1951  061B                     	;# 
  1952  061C                     	;# 
  1953  061C                     	;# 
  1954  061F                     	;# 
  1955  0691                     	;# 
  1956  0692                     	;# 
  1957  0693                     	;# 
  1958  0694                     	;# 
  1959  0695                     	;# 
  1960  0696                     	;# 
  1961  0697                     	;# 
  1962  0698                     	;# 
  1963  0699                     	;# 
  1964  0711                     	;# 
  1965  0712                     	;# 
  1966  0713                     	;# 
  1967  0714                     	;# 
  1968  0715                     	;# 
  1969  0716                     	;# 
  1970  0717                     	;# 
  1971  0718                     	;# 
  1972  0719                     	;# 
  1973  0891                     	;# 
  1974  0891                     	;# 
  1975  0891                     	;# 
  1976  0891                     	;# 
  1977  0891                     	;# 
  1978  0891                     	;# 
  1979  0892                     	;# 
  1980  0892                     	;# 
  1981  0892                     	;# 
  1982  0893                     	;# 
  1983  0893                     	;# 
  1984  0893                     	;# 
  1985  0893                     	;# 
  1986  0893                     	;# 
  1987  0893                     	;# 
  1988  0894                     	;# 
  1989  0894                     	;# 
  1990  0894                     	;# 
  1991  0895                     	;# 
  1992  0895                     	;# 
  1993  0895                     	;# 
  1994  0896                     	;# 
  1995  0896                     	;# 
  1996  0896                     	;# 
  1997  089B                     	;# 
  1998  0911                     	;# 
  1999  0912                     	;# 
  2000  0913                     	;# 
  2001  0914                     	;# 
  2002  0915                     	;# 
  2003  0916                     	;# 
  2004  0918                     	;# 
  2005  0919                     	;# 
  2006  091A                     	;# 
  2007  091B                     	;# 
  2008  091C                     	;# 
  2009  091D                     	;# 
  2010  091E                     	;# 
  2011  091F                     	;# 
  2012  0E0F                     	;# 
  2013  0E10                     	;# 
  2014  0E11                     	;# 
  2015  0E12                     	;# 
  2016  0E13                     	;# 
  2017  0E14                     	;# 
  2018  0E15                     	;# 
  2019  0E16                     	;# 
  2020  0E17                     	;# 
  2021  0E18                     	;# 
  2022  0E19                     	;# 
  2023  0E1A                     	;# 
  2024  0E1B                     	;# 
  2025  0E1C                     	;# 
  2026  0E1D                     	;# 
  2027  0E1E                     	;# 
  2028  0E1F                     	;# 
  2029  0E20                     	;# 
  2030  0E21                     	;# 
  2031  0E22                     	;# 
  2032  0E24                     	;# 
  2033  0E25                     	;# 
  2034  0E28                     	;# 
  2035  0E29                     	;# 
  2036  0E2A                     	;# 
  2037  0E2B                     	;# 
  2038  0E2C                     	;# 
  2039  0E2D                     	;# 
  2040  0E2E                     	;# 
  2041  0E2F                     	;# 
  2042  0E90                     	;# 
  2043  0E91                     	;# 
  2044  0E92                     	;# 
  2045  0E94                     	;# 
  2046  0E95                     	;# 
  2047  0EA0                     	;# 
  2048  0EA1                     	;# 
  2049  0EA2                     	;# 
  2050  0EA3                     	;# 
  2051  0EA4                     	;# 
  2052  0EA5                     	;# 
  2053  0F0F                     	;# 
  2054  0F10                     	;# 
  2055  0F11                     	;# 
  2056  0F12                     	;# 
  2057  0F13                     	;# 
  2058  0F14                     	;# 
  2059  0F15                     	;# 
  2060  0F16                     	;# 
  2061  0F17                     	;# 
  2062  0F18                     	;# 
  2063  0F19                     	;# 
  2064  0F1A                     	;# 
  2065  0F1B                     	;# 
  2066  0F1C                     	;# 
  2067  0F1D                     	;# 
  2068  0F1E                     	;# 
  2069  0F1F                     	;# 
  2070  0F20                     	;# 
  2071  0F21                     	;# 
  2072  0F22                     	;# 
  2073  0F23                     	;# 
  2074  0F24                     	;# 
  2075  0F25                     	;# 
  2076  0F26                     	;# 
  2077  0F27                     	;# 
  2078  0F28                     	;# 
  2079  0F29                     	;# 
  2080  0F2A                     	;# 
  2081  0F2B                     	;# 
  2082  0F2C                     	;# 
  2083  0F2D                     	;# 
  2084  0F2E                     	;# 
  2085  0F2F                     	;# 
  2086  0F30                     	;# 
  2087  0F31                     	;# 
  2088  0F32                     	;# 
  2089  0F33                     	;# 
  2090  0F34                     	;# 
  2091  0F35                     	;# 
  2092  0F36                     	;# 
  2093  0F37                     	;# 
  2094  0FE4                     	;# 
  2095  0FE5                     	;# 
  2096  0FE6                     	;# 
  2097  0FE7                     	;# 
  2098  0FE8                     	;# 
  2099  0FE9                     	;# 
  2100  0FEA                     	;# 
  2101  0FEB                     	;# 
  2102  0FED                     	;# 
  2103  0FEE                     	;# 
  2104  0FEF                     	;# 
  2105  0000                     	;# 
  2106  0001                     	;# 
  2107  0002                     	;# 
  2108  0003                     	;# 
  2109  0004                     	;# 
  2110  0005                     	;# 
  2111  0006                     	;# 
  2112  0007                     	;# 
  2113  0008                     	;# 
  2114  0009                     	;# 
  2115  000A                     	;# 
  2116  000B                     	;# 
  2117  000C                     	;# 
  2118  000E                     	;# 
  2119  0010                     	;# 
  2120  0011                     	;# 
  2121  0012                     	;# 
  2122  0013                     	;# 
  2123  0014                     	;# 
  2124  0015                     	;# 
  2125  0015                     	;# 
  2126  0016                     	;# 
  2127  0016                     	;# 
  2128  0017                     	;# 
  2129  0018                     	;# 
  2130  0019                     	;# 
  2131  0019                     	;# 
  2132  001A                     	;# 
  2133  001B                     	;# 
  2134  001C                     	;# 
  2135  001D                     	;# 
  2136  001E                     	;# 
  2137  001F                     	;# 
  2138  008C                     	;# 
  2139  008E                     	;# 
  2140  0090                     	;# 
  2141  0091                     	;# 
  2142  0092                     	;# 
  2143  0093                     	;# 
  2144  0094                     	;# 
  2145  0097                     	;# 
  2146  009B                     	;# 
  2147  009B                     	;# 
  2148  009C                     	;# 
  2149  009D                     	;# 
  2150  009E                     	;# 
  2151  009F                     	;# 
  2152  010C                     	;# 
  2153  010E                     	;# 
  2154  0111                     	;# 
  2155  0112                     	;# 
  2156  0113                     	;# 
  2157  0114                     	;# 
  2158  0115                     	;# 
  2159  0116                     	;# 
  2160  0117                     	;# 
  2161  0118                     	;# 
  2162  0119                     	;# 
  2163  018C                     	;# 
  2164  018E                     	;# 
  2165  0197                     	;# 
  2166  0199                     	;# 
  2167  0199                     	;# 
  2168  0199                     	;# 
  2169  019A                     	;# 
  2170  019A                     	;# 
  2171  019A                     	;# 
  2172  019B                     	;# 
  2173  019B                     	;# 
  2174  019B                     	;# 
  2175  019B                     	;# 
  2176  019B                     	;# 
  2177  019C                     	;# 
  2178  019C                     	;# 
  2179  019C                     	;# 
  2180  019D                     	;# 
  2181  019D                     	;# 
  2182  019D                     	;# 
  2183  019E                     	;# 
  2184  019E                     	;# 
  2185  019E                     	;# 
  2186  019F                     	;# 
  2187  019F                     	;# 
  2188  019F                     	;# 
  2189  019F                     	;# 
  2190  019F                     	;# 
  2191  020C                     	;# 
  2192  020E                     	;# 
  2193  0211                     	;# 
  2194  0211                     	;# 
  2195  0212                     	;# 
  2196  0212                     	;# 
  2197  0213                     	;# 
  2198  0213                     	;# 
  2199  0214                     	;# 
  2200  0214                     	;# 
  2201  0215                     	;# 
  2202  0215                     	;# 
  2203  0215                     	;# 
  2204  0215                     	;# 
  2205  0216                     	;# 
  2206  0216                     	;# 
  2207  0217                     	;# 
  2208  0217                     	;# 
  2209  0219                     	;# 
  2210  021A                     	;# 
  2211  021B                     	;# 
  2212  021C                     	;# 
  2213  021D                     	;# 
  2214  021D                     	;# 
  2215  021E                     	;# 
  2216  021F                     	;# 
  2217  028C                     	;# 
  2218  028E                     	;# 
  2219  0291                     	;# 
  2220  0291                     	;# 
  2221  0292                     	;# 
  2222  0293                     	;# 
  2223  0294                     	;# 
  2224  0295                     	;# 
  2225  0295                     	;# 
  2226  0296                     	;# 
  2227  0297                     	;# 
  2228  0298                     	;# 
  2229  029F                     	;# 
  2230  030C                     	;# 
  2231  030E                     	;# 
  2232  0311                     	;# 
  2233  0311                     	;# 
  2234  0312                     	;# 
  2235  0313                     	;# 
  2236  0314                     	;# 
  2237  0315                     	;# 
  2238  0315                     	;# 
  2239  0316                     	;# 
  2240  0317                     	;# 
  2241  0318                     	;# 
  2242  038C                     	;# 
  2243  038E                     	;# 
  2244  0391                     	;# 
  2245  0392                     	;# 
  2246  0393                     	;# 
  2247  0397                     	;# 
  2248  0398                     	;# 
  2249  0399                     	;# 
  2250  039A                     	;# 
  2251  039C                     	;# 
  2252  039D                     	;# 
  2253  039E                     	;# 
  2254  039F                     	;# 
  2255  0411                     	;# 
  2256  0411                     	;# 
  2257  0412                     	;# 
  2258  0413                     	;# 
  2259  0414                     	;# 
  2260  0415                     	;# 
  2261  0416                     	;# 
  2262  0417                     	;# 
  2263  0418                     	;# 
  2264  0418                     	;# 
  2265  0419                     	;# 
  2266  041A                     	;# 
  2267  041B                     	;# 
  2268  041C                     	;# 
  2269  041D                     	;# 
  2270  041E                     	;# 
  2271  041F                     	;# 
  2272  0498                     	;# 
  2273  0498                     	;# 
  2274  0499                     	;# 
  2275  049A                     	;# 
  2276  049B                     	;# 
  2277  049B                     	;# 
  2278  049C                     	;# 
  2279  049D                     	;# 
  2280  049E                     	;# 
  2281  049F                     	;# 
  2282  0617                     	;# 
  2283  0618                     	;# 
  2284  0619                     	;# 
  2285  0619                     	;# 
  2286  061A                     	;# 
  2287  061B                     	;# 
  2288  061C                     	;# 
  2289  061C                     	;# 
  2290  061F                     	;# 
  2291  0691                     	;# 
  2292  0692                     	;# 
  2293  0693                     	;# 
  2294  0694                     	;# 
  2295  0695                     	;# 
  2296  0696                     	;# 
  2297  0697                     	;# 
  2298  0698                     	;# 
  2299  0699                     	;# 
  2300  0711                     	;# 
  2301  0712                     	;# 
  2302  0713                     	;# 
  2303  0714                     	;# 
  2304  0715                     	;# 
  2305  0716                     	;# 
  2306  0717                     	;# 
  2307  0718                     	;# 
  2308  0719                     	;# 
  2309  0891                     	;# 
  2310  0891                     	;# 
  2311  0891                     	;# 
  2312  0891                     	;# 
  2313  0891                     	;# 
  2314  0891                     	;# 
  2315  0892                     	;# 
  2316  0892                     	;# 
  2317  0892                     	;# 
  2318  0893                     	;# 
  2319  0893                     	;# 
  2320  0893                     	;# 
  2321  0893                     	;# 
  2322  0893                     	;# 
  2323  0893                     	;# 
  2324  0894                     	;# 
  2325  0894                     	;# 
  2326  0894                     	;# 
  2327  0895                     	;# 
  2328  0895                     	;# 
  2329  0895                     	;# 
  2330  0896                     	;# 
  2331  0896                     	;# 
  2332  0896                     	;# 
  2333  089B                     	;# 
  2334  0911                     	;# 
  2335  0912                     	;# 
  2336  0913                     	;# 
  2337  0914                     	;# 
  2338  0915                     	;# 
  2339  0916                     	;# 
  2340  0918                     	;# 
  2341  0919                     	;# 
  2342  091A                     	;# 
  2343  091B                     	;# 
  2344  091C                     	;# 
  2345  091D                     	;# 
  2346  091E                     	;# 
  2347  091F                     	;# 
  2348  0E0F                     	;# 
  2349  0E10                     	;# 
  2350  0E11                     	;# 
  2351  0E12                     	;# 
  2352  0E13                     	;# 
  2353  0E14                     	;# 
  2354  0E15                     	;# 
  2355  0E16                     	;# 
  2356  0E17                     	;# 
  2357  0E18                     	;# 
  2358  0E19                     	;# 
  2359  0E1A                     	;# 
  2360  0E1B                     	;# 
  2361  0E1C                     	;# 
  2362  0E1D                     	;# 
  2363  0E1E                     	;# 
  2364  0E1F                     	;# 
  2365  0E20                     	;# 
  2366  0E21                     	;# 
  2367  0E22                     	;# 
  2368  0E24                     	;# 
  2369  0E25                     	;# 
  2370  0E28                     	;# 
  2371  0E29                     	;# 
  2372  0E2A                     	;# 
  2373  0E2B                     	;# 
  2374  0E2C                     	;# 
  2375  0E2D                     	;# 
  2376  0E2E                     	;# 
  2377  0E2F                     	;# 
  2378  0E90                     	;# 
  2379  0E91                     	;# 
  2380  0E92                     	;# 
  2381  0E94                     	;# 
  2382  0E95                     	;# 
  2383  0EA0                     	;# 
  2384  0EA1                     	;# 
  2385  0EA2                     	;# 
  2386  0EA3                     	;# 
  2387  0EA4                     	;# 
  2388  0EA5                     	;# 
  2389  0F0F                     	;# 
  2390  0F10                     	;# 
  2391  0F11                     	;# 
  2392  0F12                     	;# 
  2393  0F13                     	;# 
  2394  0F14                     	;# 
  2395  0F15                     	;# 
  2396  0F16                     	;# 
  2397  0F17                     	;# 
  2398  0F18                     	;# 
  2399  0F19                     	;# 
  2400  0F1A                     	;# 
  2401  0F1B                     	;# 
  2402  0F1C                     	;# 
  2403  0F1D                     	;# 
  2404  0F1E                     	;# 
  2405  0F1F                     	;# 
  2406  0F20                     	;# 
  2407  0F21                     	;# 
  2408  0F22                     	;# 
  2409  0F23                     	;# 
  2410  0F24                     	;# 
  2411  0F25                     	;# 
  2412  0F26                     	;# 
  2413  0F27                     	;# 
  2414  0F28                     	;# 
  2415  0F29                     	;# 
  2416  0F2A                     	;# 
  2417  0F2B                     	;# 
  2418  0F2C                     	;# 
  2419  0F2D                     	;# 
  2420  0F2E                     	;# 
  2421  0F2F                     	;# 
  2422  0F30                     	;# 
  2423  0F31                     	;# 
  2424  0F32                     	;# 
  2425  0F33                     	;# 
  2426  0F34                     	;# 
  2427  0F35                     	;# 
  2428  0F36                     	;# 
  2429  0F37                     	;# 
  2430  0FE4                     	;# 
  2431  0FE5                     	;# 
  2432  0FE6                     	;# 
  2433  0FE7                     	;# 
  2434  0FE8                     	;# 
  2435  0FE9                     	;# 
  2436  0FEA                     	;# 
  2437  0FEB                     	;# 
  2438  0FED                     	;# 
  2439  0FEE                     	;# 
  2440  0FEF                     	;# 
  2441  0000                     	;# 
  2442  0001                     	;# 
  2443  0002                     	;# 
  2444  0003                     	;# 
  2445  0004                     	;# 
  2446  0005                     	;# 
  2447  0006                     	;# 
  2448  0007                     	;# 
  2449  0008                     	;# 
  2450  0009                     	;# 
  2451  000A                     	;# 
  2452  000B                     	;# 
  2453  000C                     	;# 
  2454  000E                     	;# 
  2455  0010                     	;# 
  2456  0011                     	;# 
  2457  0012                     	;# 
  2458  0013                     	;# 
  2459  0014                     	;# 
  2460  0015                     	;# 
  2461  0015                     	;# 
  2462  0016                     	;# 
  2463  0016                     	;# 
  2464  0017                     	;# 
  2465  0018                     	;# 
  2466  0019                     	;# 
  2467  0019                     	;# 
  2468  001A                     	;# 
  2469  001B                     	;# 
  2470  001C                     	;# 
  2471  001D                     	;# 
  2472  001E                     	;# 
  2473  001F                     	;# 
  2474  008C                     	;# 
  2475  008E                     	;# 
  2476  0090                     	;# 
  2477  0091                     	;# 
  2478  0092                     	;# 
  2479  0093                     	;# 
  2480  0094                     	;# 
  2481  0097                     	;# 
  2482  009B                     	;# 
  2483  009B                     	;# 
  2484  009C                     	;# 
  2485  009D                     	;# 
  2486  009E                     	;# 
  2487  009F                     	;# 
  2488  010C                     	;# 
  2489  010E                     	;# 
  2490  0111                     	;# 
  2491  0112                     	;# 
  2492  0113                     	;# 
  2493  0114                     	;# 
  2494  0115                     	;# 
  2495  0116                     	;# 
  2496  0117                     	;# 
  2497  0118                     	;# 
  2498  0119                     	;# 
  2499  018C                     	;# 
  2500  018E                     	;# 
  2501  0197                     	;# 
  2502  0199                     	;# 
  2503  0199                     	;# 
  2504  0199                     	;# 
  2505  019A                     	;# 
  2506  019A                     	;# 
  2507  019A                     	;# 
  2508  019B                     	;# 
  2509  019B                     	;# 
  2510  019B                     	;# 
  2511  019B                     	;# 
  2512  019B                     	;# 
  2513  019C                     	;# 
  2514  019C                     	;# 
  2515  019C                     	;# 
  2516  019D                     	;# 
  2517  019D                     	;# 
  2518  019D                     	;# 
  2519  019E                     	;# 
  2520  019E                     	;# 
  2521  019E                     	;# 
  2522  019F                     	;# 
  2523  019F                     	;# 
  2524  019F                     	;# 
  2525  019F                     	;# 
  2526  019F                     	;# 
  2527  020C                     	;# 
  2528  020E                     	;# 
  2529  0211                     	;# 
  2530  0211                     	;# 
  2531  0212                     	;# 
  2532  0212                     	;# 
  2533  0213                     	;# 
  2534  0213                     	;# 
  2535  0214                     	;# 
  2536  0214                     	;# 
  2537  0215                     	;# 
  2538  0215                     	;# 
  2539  0215                     	;# 
  2540  0215                     	;# 
  2541  0216                     	;# 
  2542  0216                     	;# 
  2543  0217                     	;# 
  2544  0217                     	;# 
  2545  0219                     	;# 
  2546  021A                     	;# 
  2547  021B                     	;# 
  2548  021C                     	;# 
  2549  021D                     	;# 
  2550  021D                     	;# 
  2551  021E                     	;# 
  2552  021F                     	;# 
  2553  028C                     	;# 
  2554  028E                     	;# 
  2555  0291                     	;# 
  2556  0291                     	;# 
  2557  0292                     	;# 
  2558  0293                     	;# 
  2559  0294                     	;# 
  2560  0295                     	;# 
  2561  0295                     	;# 
  2562  0296                     	;# 
  2563  0297                     	;# 
  2564  0298                     	;# 
  2565  029F                     	;# 
  2566  030C                     	;# 
  2567  030E                     	;# 
  2568  0311                     	;# 
  2569  0311                     	;# 
  2570  0312                     	;# 
  2571  0313                     	;# 
  2572  0314                     	;# 
  2573  0315                     	;# 
  2574  0315                     	;# 
  2575  0316                     	;# 
  2576  0317                     	;# 
  2577  0318                     	;# 
  2578  038C                     	;# 
  2579  038E                     	;# 
  2580  0391                     	;# 
  2581  0392                     	;# 
  2582  0393                     	;# 
  2583  0397                     	;# 
  2584  0398                     	;# 
  2585  0399                     	;# 
  2586  039A                     	;# 
  2587  039C                     	;# 
  2588  039D                     	;# 
  2589  039E                     	;# 
  2590  039F                     	;# 
  2591  0411                     	;# 
  2592  0411                     	;# 
  2593  0412                     	;# 
  2594  0413                     	;# 
  2595  0414                     	;# 
  2596  0415                     	;# 
  2597  0416                     	;# 
  2598  0417                     	;# 
  2599  0418                     	;# 
  2600  0418                     	;# 
  2601  0419                     	;# 
  2602  041A                     	;# 
  2603  041B                     	;# 
  2604  041C                     	;# 
  2605  041D                     	;# 
  2606  041E                     	;# 
  2607  041F                     	;# 
  2608  0498                     	;# 
  2609  0498                     	;# 
  2610  0499                     	;# 
  2611  049A                     	;# 
  2612  049B                     	;# 
  2613  049B                     	;# 
  2614  049C                     	;# 
  2615  049D                     	;# 
  2616  049E                     	;# 
  2617  049F                     	;# 
  2618  0617                     	;# 
  2619  0618                     	;# 
  2620  0619                     	;# 
  2621  0619                     	;# 
  2622  061A                     	;# 
  2623  061B                     	;# 
  2624  061C                     	;# 
  2625  061C                     	;# 
  2626  061F                     	;# 
  2627  0691                     	;# 
  2628  0692                     	;# 
  2629  0693                     	;# 
  2630  0694                     	;# 
  2631  0695                     	;# 
  2632  0696                     	;# 
  2633  0697                     	;# 
  2634  0698                     	;# 
  2635  0699                     	;# 
  2636  0711                     	;# 
  2637  0712                     	;# 
  2638  0713                     	;# 
  2639  0714                     	;# 
  2640  0715                     	;# 
  2641  0716                     	;# 
  2642  0717                     	;# 
  2643  0718                     	;# 
  2644  0719                     	;# 
  2645  0891                     	;# 
  2646  0891                     	;# 
  2647  0891                     	;# 
  2648  0891                     	;# 
  2649  0891                     	;# 
  2650  0891                     	;# 
  2651  0892                     	;# 
  2652  0892                     	;# 
  2653  0892                     	;# 
  2654  0893                     	;# 
  2655  0893                     	;# 
  2656  0893                     	;# 
  2657  0893                     	;# 
  2658  0893                     	;# 
  2659  0893                     	;# 
  2660  0894                     	;# 
  2661  0894                     	;# 
  2662  0894                     	;# 
  2663  0895                     	;# 
  2664  0895                     	;# 
  2665  0895                     	;# 
  2666  0896                     	;# 
  2667  0896                     	;# 
  2668  0896                     	;# 
  2669  089B                     	;# 
  2670  0911                     	;# 
  2671  0912                     	;# 
  2672  0913                     	;# 
  2673  0914                     	;# 
  2674  0915                     	;# 
  2675  0916                     	;# 
  2676  0918                     	;# 
  2677  0919                     	;# 
  2678  091A                     	;# 
  2679  091B                     	;# 
  2680  091C                     	;# 
  2681  091D                     	;# 
  2682  091E                     	;# 
  2683  091F                     	;# 
  2684  0E0F                     	;# 
  2685  0E10                     	;# 
  2686  0E11                     	;# 
  2687  0E12                     	;# 
  2688  0E13                     	;# 
  2689  0E14                     	;# 
  2690  0E15                     	;# 
  2691  0E16                     	;# 
  2692  0E17                     	;# 
  2693  0E18                     	;# 
  2694  0E19                     	;# 
  2695  0E1A                     	;# 
  2696  0E1B                     	;# 
  2697  0E1C                     	;# 
  2698  0E1D                     	;# 
  2699  0E1E                     	;# 
  2700  0E1F                     	;# 
  2701  0E20                     	;# 
  2702  0E21                     	;# 
  2703  0E22                     	;# 
  2704  0E24                     	;# 
  2705  0E25                     	;# 
  2706  0E28                     	;# 
  2707  0E29                     	;# 
  2708  0E2A                     	;# 
  2709  0E2B                     	;# 
  2710  0E2C                     	;# 
  2711  0E2D                     	;# 
  2712  0E2E                     	;# 
  2713  0E2F                     	;# 
  2714  0E90                     	;# 
  2715  0E91                     	;# 
  2716  0E92                     	;# 
  2717  0E94                     	;# 
  2718  0E95                     	;# 
  2719  0EA0                     	;# 
  2720  0EA1                     	;# 
  2721  0EA2                     	;# 
  2722  0EA3                     	;# 
  2723  0EA4                     	;# 
  2724  0EA5                     	;# 
  2725  0F0F                     	;# 
  2726  0F10                     	;# 
  2727  0F11                     	;# 
  2728  0F12                     	;# 
  2729  0F13                     	;# 
  2730  0F14                     	;# 
  2731  0F15                     	;# 
  2732  0F16                     	;# 
  2733  0F17                     	;# 
  2734  0F18                     	;# 
  2735  0F19                     	;# 
  2736  0F1A                     	;# 
  2737  0F1B                     	;# 
  2738  0F1C                     	;# 
  2739  0F1D                     	;# 
  2740  0F1E                     	;# 
  2741  0F1F                     	;# 
  2742  0F20                     	;# 
  2743  0F21                     	;# 
  2744  0F22                     	;# 
  2745  0F23                     	;# 
  2746  0F24                     	;# 
  2747  0F25                     	;# 
  2748  0F26                     	;# 
  2749  0F27                     	;# 
  2750  0F28                     	;# 
  2751  0F29                     	;# 
  2752  0F2A                     	;# 
  2753  0F2B                     	;# 
  2754  0F2C                     	;# 
  2755  0F2D                     	;# 
  2756  0F2E                     	;# 
  2757  0F2F                     	;# 
  2758  0F30                     	;# 
  2759  0F31                     	;# 
  2760  0F32                     	;# 
  2761  0F33                     	;# 
  2762  0F34                     	;# 
  2763  0F35                     	;# 
  2764  0F36                     	;# 
  2765  0F37                     	;# 
  2766  0FE4                     	;# 
  2767  0FE5                     	;# 
  2768  0FE6                     	;# 
  2769  0FE7                     	;# 
  2770  0FE8                     	;# 
  2771  0FE9                     	;# 
  2772  0FEA                     	;# 
  2773  0FEB                     	;# 
  2774  0FED                     	;# 
  2775  0FEE                     	;# 
  2776  0FEF                     	;# 
  2777  0000                     	;# 
  2778  0001                     	;# 
  2779  0002                     	;# 
  2780  0003                     	;# 
  2781  0004                     	;# 
  2782  0005                     	;# 
  2783  0006                     	;# 
  2784  0007                     	;# 
  2785  0008                     	;# 
  2786  0009                     	;# 
  2787  000A                     	;# 
  2788  000B                     	;# 
  2789  000C                     	;# 
  2790  000E                     	;# 
  2791  0010                     	;# 
  2792  0011                     	;# 
  2793  0012                     	;# 
  2794  0013                     	;# 
  2795  0014                     	;# 
  2796  0015                     	;# 
  2797  0015                     	;# 
  2798  0016                     	;# 
  2799  0016                     	;# 
  2800  0017                     	;# 
  2801  0018                     	;# 
  2802  0019                     	;# 
  2803  0019                     	;# 
  2804  001A                     	;# 
  2805  001B                     	;# 
  2806  001C                     	;# 
  2807  001D                     	;# 
  2808  001E                     	;# 
  2809  001F                     	;# 
  2810  008C                     	;# 
  2811  008E                     	;# 
  2812  0090                     	;# 
  2813  0091                     	;# 
  2814  0092                     	;# 
  2815  0093                     	;# 
  2816  0094                     	;# 
  2817  0097                     	;# 
  2818  009B                     	;# 
  2819  009B                     	;# 
  2820  009C                     	;# 
  2821  009D                     	;# 
  2822  009E                     	;# 
  2823  009F                     	;# 
  2824  010C                     	;# 
  2825  010E                     	;# 
  2826  0111                     	;# 
  2827  0112                     	;# 
  2828  0113                     	;# 
  2829  0114                     	;# 
  2830  0115                     	;# 
  2831  0116                     	;# 
  2832  0117                     	;# 
  2833  0118                     	;# 
  2834  0119                     	;# 
  2835  018C                     	;# 
  2836  018E                     	;# 
  2837  0197                     	;# 
  2838  0199                     	;# 
  2839  0199                     	;# 
  2840  0199                     	;# 
  2841  019A                     	;# 
  2842  019A                     	;# 
  2843  019A                     	;# 
  2844  019B                     	;# 
  2845  019B                     	;# 
  2846  019B                     	;# 
  2847  019B                     	;# 
  2848  019B                     	;# 
  2849  019C                     	;# 
  2850  019C                     	;# 
  2851  019C                     	;# 
  2852  019D                     	;# 
  2853  019D                     	;# 
  2854  019D                     	;# 
  2855  019E                     	;# 
  2856  019E                     	;# 
  2857  019E                     	;# 
  2858  019F                     	;# 
  2859  019F                     	;# 
  2860  019F                     	;# 
  2861  019F                     	;# 
  2862  019F                     	;# 
  2863  020C                     	;# 
  2864  020E                     	;# 
  2865  0211                     	;# 
  2866  0211                     	;# 
  2867  0212                     	;# 
  2868  0212                     	;# 
  2869  0213                     	;# 
  2870  0213                     	;# 
  2871  0214                     	;# 
  2872  0214                     	;# 
  2873  0215                     	;# 
  2874  0215                     	;# 
  2875  0215                     	;# 
  2876  0215                     	;# 
  2877  0216                     	;# 
  2878  0216                     	;# 
  2879  0217                     	;# 
  2880  0217                     	;# 
  2881  0219                     	;# 
  2882  021A                     	;# 
  2883  021B                     	;# 
  2884  021C                     	;# 
  2885  021D                     	;# 
  2886  021D                     	;# 
  2887  021E                     	;# 
  2888  021F                     	;# 
  2889  028C                     	;# 
  2890  028E                     	;# 
  2891  0291                     	;# 
  2892  0291                     	;# 
  2893  0292                     	;# 
  2894  0293                     	;# 
  2895  0294                     	;# 
  2896  0295                     	;# 
  2897  0295                     	;# 
  2898  0296                     	;# 
  2899  0297                     	;# 
  2900  0298                     	;# 
  2901  029F                     	;# 
  2902  030C                     	;# 
  2903  030E                     	;# 
  2904  0311                     	;# 
  2905  0311                     	;# 
  2906  0312                     	;# 
  2907  0313                     	;# 
  2908  0314                     	;# 
  2909  0315                     	;# 
  2910  0315                     	;# 
  2911  0316                     	;# 
  2912  0317                     	;# 
  2913  0318                     	;# 
  2914  038C                     	;# 
  2915  038E                     	;# 
  2916  0391                     	;# 
  2917  0392                     	;# 
  2918  0393                     	;# 
  2919  0397                     	;# 
  2920  0398                     	;# 
  2921  0399                     	;# 
  2922  039A                     	;# 
  2923  039C                     	;# 
  2924  039D                     	;# 
  2925  039E                     	;# 
  2926  039F                     	;# 
  2927  0411                     	;# 
  2928  0411                     	;# 
  2929  0412                     	;# 
  2930  0413                     	;# 
  2931  0414                     	;# 
  2932  0415                     	;# 
  2933  0416                     	;# 
  2934  0417                     	;# 
  2935  0418                     	;# 
  2936  0418                     	;# 
  2937  0419                     	;# 
  2938  041A                     	;# 
  2939  041B                     	;# 
  2940  041C                     	;# 
  2941  041D                     	;# 
  2942  041E                     	;# 
  2943  041F                     	;# 
  2944  0498                     	;# 
  2945  0498                     	;# 
  2946  0499                     	;# 
  2947  049A                     	;# 
  2948  049B                     	;# 
  2949  049B                     	;# 
  2950  049C                     	;# 
  2951  049D                     	;# 
  2952  049E                     	;# 
  2953  049F                     	;# 
  2954  0617                     	;# 
  2955  0618                     	;# 
  2956  0619                     	;# 
  2957  0619                     	;# 
  2958  061A                     	;# 
  2959  061B                     	;# 
  2960  061C                     	;# 
  2961  061C                     	;# 
  2962  061F                     	;# 
  2963  0691                     	;# 
  2964  0692                     	;# 
  2965  0693                     	;# 
  2966  0694                     	;# 
  2967  0695                     	;# 
  2968  0696                     	;# 
  2969  0697                     	;# 
  2970  0698                     	;# 
  2971  0699                     	;# 
  2972  0711                     	;# 
  2973  0712                     	;# 
  2974  0713                     	;# 
  2975  0714                     	;# 
  2976  0715                     	;# 
  2977  0716                     	;# 
  2978  0717                     	;# 
  2979  0718                     	;# 
  2980  0719                     	;# 
  2981  0891                     	;# 
  2982  0891                     	;# 
  2983  0891                     	;# 
  2984  0891                     	;# 
  2985  0891                     	;# 
  2986  0891                     	;# 
  2987  0892                     	;# 
  2988  0892                     	;# 
  2989  0892                     	;# 
  2990  0893                     	;# 
  2991  0893                     	;# 
  2992  0893                     	;# 
  2993  0893                     	;# 
  2994  0893                     	;# 
  2995  0893                     	;# 
  2996  0894                     	;# 
  2997  0894                     	;# 
  2998  0894                     	;# 
  2999  0895                     	;# 
  3000  0895                     	;# 
  3001  0895                     	;# 
  3002  0896                     	;# 
  3003  0896                     	;# 
  3004  0896                     	;# 
  3005  089B                     	;# 
  3006  0911                     	;# 
  3007  0912                     	;# 
  3008  0913                     	;# 
  3009  0914                     	;# 
  3010  0915                     	;# 
  3011  0916                     	;# 
  3012  0918                     	;# 
  3013  0919                     	;# 
  3014  091A                     	;# 
  3015  091B                     	;# 
  3016  091C                     	;# 
  3017  091D                     	;# 
  3018  091E                     	;# 
  3019  091F                     	;# 
  3020  0E0F                     	;# 
  3021  0E10                     	;# 
  3022  0E11                     	;# 
  3023  0E12                     	;# 
  3024  0E13                     	;# 
  3025  0E14                     	;# 
  3026  0E15                     	;# 
  3027  0E16                     	;# 
  3028  0E17                     	;# 
  3029  0E18                     	;# 
  3030  0E19                     	;# 
  3031  0E1A                     	;# 
  3032  0E1B                     	;# 
  3033  0E1C                     	;# 
  3034  0E1D                     	;# 
  3035  0E1E                     	;# 
  3036  0E1F                     	;# 
  3037  0E20                     	;# 
  3038  0E21                     	;# 
  3039  0E22                     	;# 
  3040  0E24                     	;# 
  3041  0E25                     	;# 
  3042  0E28                     	;# 
  3043  0E29                     	;# 
  3044  0E2A                     	;# 
  3045  0E2B                     	;# 
  3046  0E2C                     	;# 
  3047  0E2D                     	;# 
  3048  0E2E                     	;# 
  3049  0E2F                     	;# 
  3050  0E90                     	;# 
  3051  0E91                     	;# 
  3052  0E92                     	;# 
  3053  0E94                     	;# 
  3054  0E95                     	;# 
  3055  0EA0                     	;# 
  3056  0EA1                     	;# 
  3057  0EA2                     	;# 
  3058  0EA3                     	;# 
  3059  0EA4                     	;# 
  3060  0EA5                     	;# 
  3061  0F0F                     	;# 
  3062  0F10                     	;# 
  3063  0F11                     	;# 
  3064  0F12                     	;# 
  3065  0F13                     	;# 
  3066  0F14                     	;# 
  3067  0F15                     	;# 
  3068  0F16                     	;# 
  3069  0F17                     	;# 
  3070  0F18                     	;# 
  3071  0F19                     	;# 
  3072  0F1A                     	;# 
  3073  0F1B                     	;# 
  3074  0F1C                     	;# 
  3075  0F1D                     	;# 
  3076  0F1E                     	;# 
  3077  0F1F                     	;# 
  3078  0F20                     	;# 
  3079  0F21                     	;# 
  3080  0F22                     	;# 
  3081  0F23                     	;# 
  3082  0F24                     	;# 
  3083  0F25                     	;# 
  3084  0F26                     	;# 
  3085  0F27                     	;# 
  3086  0F28                     	;# 
  3087  0F29                     	;# 
  3088  0F2A                     	;# 
  3089  0F2B                     	;# 
  3090  0F2C                     	;# 
  3091  0F2D                     	;# 
  3092  0F2E                     	;# 
  3093  0F2F                     	;# 
  3094  0F30                     	;# 
  3095  0F31                     	;# 
  3096  0F32                     	;# 
  3097  0F33                     	;# 
  3098  0F34                     	;# 
  3099  0F35                     	;# 
  3100  0F36                     	;# 
  3101  0F37                     	;# 
  3102  0FE4                     	;# 
  3103  0FE5                     	;# 
  3104  0FE6                     	;# 
  3105  0FE7                     	;# 
  3106  0FE8                     	;# 
  3107  0FE9                     	;# 
  3108  0FEA                     	;# 
  3109  0FEB                     	;# 
  3110  0FED                     	;# 
  3111  0FEE                     	;# 
  3112  0FEF                     	;_stage_stash
  3113                           
  3114                           	psect	idataBANK1
  3115  04B3                     __pidataBANK1:	
  3116                           
  3117                           ;initializer for InitWigwagPattern@F447
  3118  04B3  3400               	retlw	0
  3119  04B4  3401               	retlw	1
  3120  04B5  3400               	retlw	0
  3121  04B6  3401               	retlw	1
  3122                           
  3123                           ;initializer for InitWigwagPattern@F444
  3124  04B7  3401               	retlw	1
  3125  04B8  3400               	retlw	0
  3126  04B9  3401               	retlw	1
  3127  04BA  3400               	retlw	0
  3128                           
  3129                           	psect	nvBANK0
  3130  006A                     __pnvBANK0:	
  3131  006A                     _TMR1_InterruptHandler:	
  3132  006A                     	ds	2
  3133  006C                     _timer1ReloadVal:	
  3134  006C                     	ds	2
  3135  006E                     _IOCCF0_InterruptHandler:	
  3136  006E                     	ds	2
  3137  000E                     _PORTCbits	set	14
  3138  001C                     _T1GCONbits	set	28
  3139  001B                     _T1CONbits	set	27
  3140  0019                     _TMR1L	set	25
  3141  001A                     _TMR1H	set	26
  3142  001C                     _T1GCON	set	28
  3143  0011                     _PIR1bits	set	17
  3144  000B                     _INTCONbits	set	11
  3145  0010                     _PIR0bits	set	16
  3146  0091                     _PIE1bits	set	145
  3147  0090                     _PIE0bits	set	144
  3148  008E                     _TRISC	set	142
  3149  008C                     _TRISA	set	140
  3150  0097                     _WDTCON	set	151
  3151  010E                     _LATCbits	set	270
  3152  010E                     _LATC	set	270
  3153  010C                     _LATA	set	268
  3154  018C                     _ANSELA	set	396
  3155  018E                     _ANSELC	set	398
  3156  020E                     _WPUC	set	526
  3157  020C                     _WPUA	set	524
  3158  028E                     _ODCONC	set	654
  3159  028C                     _ODCONA	set	652
  3160  030E                     _SLRCONC	set	782
  3161  030C                     _SLRCONA	set	780
  3162  0397                     _IOCCPbits	set	919
  3163  0398                     _IOCCNbits	set	920
  3164  0399                     _IOCCFbits	set	921
  3165  038E                     _INLVLC	set	910
  3166  038C                     _INLVLA	set	908
  3167  0916                     _PMD5	set	2326
  3168  0915                     _PMD4	set	2325
  3169  0914                     _PMD3	set	2324
  3170  0913                     _PMD2	set	2323
  3171  0912                     _PMD1	set	2322
  3172  0911                     _PMD0	set	2321
  3173  091E                     _OSCTUNE	set	2334
  3174  091F                     _OSCFRQ	set	2335
  3175  091D                     _OSCEN	set	2333
  3176  091B                     _OSCCON3	set	2331
  3177  0919                     _OSCCON1	set	2329
  3178                           
  3179                           ; #config settings
  3180  0000                     
  3181                           	psect	cinit
  3182  002A                     start_initialization:	
  3183  002A                     __initialization:		;BIGRAM
  3184                           
  3185                           ; Initialize objects allocated to BANK1
  3186  002A  30B3               	movlw	low __pidataBANK1
  3187  002B  0084               	movwf	4
  3188  002C  3084               	movlw	(high __pidataBANK1)| (0+128)
  3189  002D  0085               	movwf	5
  3190  002E  0021               	movlb	1	; select bank1
  3191  002F  0012               	moviw fsr0++
  3192  0030  00C4               	movwf	__pdataBANK1& (0+127)
  3193  0031  0012               	moviw fsr0++
  3194  0032  00C5               	movwf	(__pdataBANK1+1)& (0+127)
  3195  0033  0012               	moviw fsr0++
  3196  0034  00C6               	movwf	(__pdataBANK1+2)& (0+127)
  3197  0035  0012               	moviw fsr0++
  3198  0036  00C7               	movwf	(__pdataBANK1+3)& (0+127)
  3199  0037  0012               	moviw fsr0++
  3200  0038  00C8               	movwf	(__pdataBANK1+4)& (0+127)
  3201  0039  0012               	moviw fsr0++
  3202  003A  00C9               	movwf	(__pdataBANK1+5)& (0+127)
  3203  003B  0012               	moviw fsr0++
  3204  003C  00CA               	movwf	(__pdataBANK1+6)& (0+127)
  3205  003D  0012               	moviw fsr0++
  3206  003E  00CB               	movwf	(__pdataBANK1+7)& (0+127)
  3207                           
  3208                           ; Clear objects allocated to BIGRAM
  3209  003F  30F0               	movlw	low (0+8432)
  3210  0040  0084               	movwf	4
  3211  0041  3020               	movlw	high (0+8432)
  3212  0042  0085               	movwf	5
  3213  0043  3000               	movlw	0
  3214  0044  00FE               	movwf	btemp
  3215  0045  3003               	movlw	3
  3216  0046  00FF               	movwf	btemp+1
  3217  0047  3184  2495  3180   	fcall	clear_ram0
  3218                           
  3219                           ; Clear objects allocated to COMMON
  3220  004A  01FA               	clrf	__pbssCOMMON& (0+127)
  3221  004B  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  3222                           
  3223                           ; Clear objects allocated to BANK0
  3224  004C  3055               	movlw	low __pbssBANK0
  3225  004D  0084               	movwf	4
  3226  004E  3000               	movlw	high __pbssBANK0
  3227  004F  0085               	movwf	5
  3228  0050  3015               	movlw	21
  3229  0051  00FE               	movwf	btemp
  3230  0052  3000               	movlw	0
  3231  0053  00FF               	movwf	btemp+1
  3232  0054  3184  2495  3180   	fcall	clear_ram0
  3233                           
  3234                           ; Clear objects allocated to BANK1
  3235  0057  30A0               	movlw	low __pbssBANK1
  3236  0058  0084               	movwf	4
  3237  0059  3000               	movlw	high __pbssBANK1
  3238  005A  0085               	movwf	5
  3239  005B  3024               	movlw	36
  3240  005C  00FE               	movwf	btemp
  3241  005D  3000               	movlw	0
  3242  005E  00FF               	movwf	btemp+1
  3243  005F  3184  2495  3180   	fcall	clear_ram0
  3244  0062                     end_of_initialization:	
  3245                           ;End of C runtime variable initialization code
  3246                           
  3247  0062                     __end_of__initialization:	
  3248  0062  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3249  0063  0020               	movlb	0
  3250  0064  3184  2C21         	ljmp	_main	;jump to C main() function
  3251                           
  3252                           	psect	bssCOMMON
  3253  007A                     __pbssCOMMON:	
  3254  007A                     _last_pc_input_state:	
  3255  007A                     	ds	1
  3256  007B                     _cur_pc_input_state:	
  3257  007B                     	ds	1
  3258                           
  3259                           	psect	bssBANK0
  3260  0055                     __pbssBANK0:	
  3261  0055                     _start_time:	
  3262  0055                     	ds	2
  3263  0057                     _current_stage:	
  3264  0057                     	ds	2
  3265  0059                     _pattern_list_iter:	
  3266  0059                     	ds	2
  3267  005B                     _stage_list_iter:	
  3268  005B                     	ds	2
  3269  005D                     _cur_sec:	
  3270  005D                     	ds	2
  3271  005F                     _cur_hsec:	
  3272  005F                     	ds	2
  3273  0061                     _cur_ms:	
  3274  0061                     	ds	2
  3275  0063                     _temp_ms:	
  3276  0063                     	ds	2
  3277  0065                     _update_stage:	
  3278  0065                     	ds	1
  3279  0066                     _ts_trigger:	
  3280  0066                     	ds	1
  3281  0067                     _Wigwag:	
  3282  0067                     	ds	3
  3283                           
  3284                           	psect	bssBANK1
  3285  00A0                     __pbssBANK1:	
  3286  00A0                     _pattern_selector:	
  3287  00A0                     	ds	14
  3288  00AE                     NewStage@F419:	
  3289  00AE                     	ds	4
  3290  00B2                     _pattern_stash:	
  3291  00B2                     	ds	18
  3292                           
  3293                           	psect	dataBANK1
  3294  00C4                     __pdataBANK1:	
  3295  00C4                     InitWigwagPattern@F447:	
  3296  00C4                     	ds	4
  3297  00C8                     InitWigwagPattern@F444:	
  3298  00C8                     	ds	4
  3299                           
  3300                           	psect	clrtext
  3301  0495                     clear_ram0:	
  3302                           ;	Called with FSR0 containing the base address, and
  3303                           ;	btemp/btemp+1 has the size to clear
  3304                           
  3305  0495  0064               	clrwdt	;clear the watchdog before getting into this loop
  3306  0496                     clrloop0:	
  3307  0496  0180               	clrf	0	;clear RAM location pointed to by FSR
  3308  0497  3101               	addfsr 0,1
  3309  0498  3001               	movlw	1
  3310  0499  02FE               	subwf	btemp,f
  3311  049A  3000               	movlw	0
  3312  049B  3BFF               	subwfb	btemp+1,f
  3313  049C  087F               	movf	btemp+1,w
  3314  049D  047E               	iorwf	btemp,w
  3315  049E  1D03               	skipz
  3316  049F  2C96               	goto	clrloop0	;have we reached the end yet?
  3317  04A0  3400               	retlw	0	;all done for this memory range, return
  3318                           
  3319                           	psect	cstackCOMMON
  3320  0070                     __pcstackCOMMON:	
  3321  0070                     ?_PMD_Initialize:	
  3322  0070                     ?_PIN_MANAGER_Initialize:	
  3323                           ; 1 bytes @ 0x0
  3324                           
  3325  0070                     ?_OSCILLATOR_Initialize:	
  3326                           ; 1 bytes @ 0x0
  3327                           
  3328  0070                     ?_WDT_Initialize:	
  3329                           ; 1 bytes @ 0x0
  3330                           
  3331  0070                     ?_TMR1_Initialize:	
  3332                           ; 1 bytes @ 0x0
  3333                           
  3334  0070                     ?_IOCCF0_DefaultInterruptHandler:	
  3335                           ; 1 bytes @ 0x0
  3336                           
  3337  0070                     ??_IOCCF0_DefaultInterruptHandler:	
  3338                           ; 1 bytes @ 0x0
  3339                           
  3340  0070                     ?_IOCCF0_ISR:	
  3341                           ; 1 bytes @ 0x0
  3342                           
  3343  0070                     ??_IOCCF0_ISR:	
  3344                           ; 1 bytes @ 0x0
  3345                           
  3346  0070                     ?_TMR1_ISR:	
  3347                           ; 1 bytes @ 0x0
  3348                           
  3349  0070                     ?_TMR1_DefaultInterruptHandler:	
  3350                           ; 1 bytes @ 0x0
  3351                           
  3352  0070                     ??_TMR1_DefaultInterruptHandler:	
  3353                           ; 1 bytes @ 0x0
  3354                           
  3355  0070                     ?_SetOutputs:	
  3356                           ; 1 bytes @ 0x0
  3357                           
  3358  0070                     ?_PatternCycleInputChanged:	
  3359                           ; 1 bytes @ 0x0
  3360                           
  3361  0070                     ?_SYSTEM_Initialize:	
  3362                           ; 1 bytes @ 0x0
  3363                           
  3364  0070                     ?_PIN_MANAGER_IOC:	
  3365                           ; 1 bytes @ 0x0
  3366                           
  3367  0070                     ??_PIN_MANAGER_IOC:	
  3368                           ; 1 bytes @ 0x0
  3369                           
  3370  0070                     ?_INTERRUPT_InterruptManager:	
  3371                           ; 1 bytes @ 0x0
  3372                           
  3373  0070                     ?_TMR1_StartTimer:	
  3374                           ; 1 bytes @ 0x0
  3375                           
  3376  0070                     ?_TMR1_WriteTimer:	
  3377                           ; 1 bytes @ 0x0
  3378                           
  3379  0070                     ?_setup:	
  3380                           ; 1 bytes @ 0x0
  3381                           
  3382  0070                     ?_main:	
  3383                           ; 1 bytes @ 0x0
  3384                           
  3385  0070                     TMR1_WriteTimer@timerVal:	
  3386                           ; 1 bytes @ 0x0
  3387                           
  3388                           
  3389                           ; 2 bytes @ 0x0
  3390  0070                     	ds	2
  3391  0072                     ??_PMD_Initialize:	
  3392  0072                     ??_OSCILLATOR_Initialize:	
  3393                           ; 1 bytes @ 0x2
  3394                           
  3395  0072                     ??_WDT_Initialize:	
  3396                           ; 1 bytes @ 0x2
  3397                           
  3398  0072                     ?_IOCCF0_SetInterruptHandler:	
  3399                           ; 1 bytes @ 0x2
  3400                           
  3401  0072                     ??_TMR1_ISR:	
  3402                           ; 1 bytes @ 0x2
  3403                           
  3404  0072                     ?_TMR1_SetInterruptHandler:	
  3405                           ; 1 bytes @ 0x2
  3406                           
  3407  0072                     ??_PatternCycleInputChanged:	
  3408                           ; 1 bytes @ 0x2
  3409                           
  3410  0072                     ??_INTERRUPT_InterruptManager:	
  3411                           ; 1 bytes @ 0x2
  3412                           
  3413  0072                     ??_TMR1_StartTimer:	
  3414                           ; 1 bytes @ 0x2
  3415                           
  3416  0072                     ??_TMR1_WriteTimer:	
  3417                           ; 1 bytes @ 0x2
  3418                           
  3419  0072                     ?_SetLight:	
  3420                           ; 1 bytes @ 0x2
  3421                           
  3422  0072                     ?_AssignLightStates:	
  3423                           ; 1 bytes @ 0x2
  3424                           
  3425  0072                     SetLight@state:	
  3426                           ; 1 bytes @ 0x2
  3427                           
  3428  0072                     IOCCF0_SetInterruptHandler@InterruptHandler:	
  3429                           ; 1 bytes @ 0x2
  3430                           
  3431  0072                     TMR1_SetInterruptHandler@InterruptHandler:	
  3432                           ; 2 bytes @ 0x2
  3433                           
  3434  0072                     AssignLightStates@stage:	
  3435                           ; 2 bytes @ 0x2
  3436                           
  3437                           
  3438                           ; 2 bytes @ 0x2
  3439  0072                     	ds	1
  3440  0073                     ??_SetLight:	
  3441                           
  3442                           ; 1 bytes @ 0x3
  3443  0073                     	ds	1
  3444  0074                     ??_PIN_MANAGER_Initialize:	
  3445  0074                     ??_TMR1_Initialize:	
  3446                           ; 1 bytes @ 0x4
  3447                           
  3448  0074                     ??_IOCCF0_SetInterruptHandler:	
  3449                           ; 1 bytes @ 0x4
  3450                           
  3451  0074                     ??_TMR1_SetInterruptHandler:	
  3452                           ; 1 bytes @ 0x4
  3453                           
  3454  0074                     ??_SYSTEM_Initialize:	
  3455                           ; 1 bytes @ 0x4
  3456                           
  3457  0074                     AssignLightStates@states:	
  3458                           ; 1 bytes @ 0x4
  3459                           
  3460  0074                     PatternCycleInputChanged@delay_count:	
  3461                           ; 1 bytes @ 0x4
  3462                           
  3463                           
  3464                           ; 2 bytes @ 0x4
  3465  0074                     	ds	1
  3466  0075                     ??_AssignLightStates:	
  3467  0075                     SetLight@light:	
  3468                           ; 1 bytes @ 0x5
  3469                           
  3470                           
  3471                           ; 1 bytes @ 0x5
  3472  0075                     	ds	1
  3473  0076                     ??_SetOutputs:	
  3474  0076                     ?_FlashPattern:	
  3475                           ; 1 bytes @ 0x6
  3476                           
  3477  0076                     FlashPattern@pattern:	
  3478                           ; 1 bytes @ 0x6
  3479                           
  3480                           
  3481                           ; 2 bytes @ 0x6
  3482  0076                     	ds	1
  3483  0077                     ?_NewStage:	
  3484  0077                     SetOutputs@state:	
  3485                           ; 2 bytes @ 0x7
  3486                           
  3487                           
  3488                           ; 1 bytes @ 0x7
  3489  0077                     	ds	1
  3490  0078                     FlashPattern@current_time:	
  3491                           
  3492                           ; 2 bytes @ 0x8
  3493  0078                     	ds	1
  3494  0079                     ??_ConstructStage:	
  3495                           
  3496                           ; 1 bytes @ 0x9
  3497  0079                     	ds	1
  3498  007A                     ??_setup:	
  3499                           
  3500                           	psect	cstackBANK0
  3501  0020                     __pcstackBANK0:	
  3502                           ; 1 bytes @ 0xA
  3503                           
  3504  0020                     ??_FlashPattern:	
  3505  0020                     AssignLightStates@i:	
  3506                           ; 1 bytes @ 0x0
  3507                           
  3508                           
  3509                           ; 2 bytes @ 0x0
  3510  0020                     	ds	2
  3511  0022                     ??_NewStage:	
  3512                           
  3513                           ; 1 bytes @ 0x2
  3514  0022                     	ds	4
  3515  0026                     NewStage@init_states:	
  3516                           
  3517                           ; 4 bytes @ 0x6
  3518  0026                     	ds	4
  3519  002A                     NewStage@new_stage:	
  3520                           
  3521                           ; 2 bytes @ 0xA
  3522  002A                     	ds	2
  3523  002C                     ?_CopyStageData:	
  3524  002C                     ?_ConstructStage:	
  3525                           ; 2 bytes @ 0xC
  3526                           
  3527  002C                     ConstructStage@time_ms:	
  3528                           ; 2 bytes @ 0xC
  3529                           
  3530  002C                     CopyStageData@dest:	
  3531                           ; 2 bytes @ 0xC
  3532                           
  3533                           
  3534                           ; 2 bytes @ 0xC
  3535  002C                     	ds	2
  3536  002E                     ConstructStage@next:	
  3537  002E                     CopyStageData@source:	
  3538                           ; 1 bytes @ 0xE
  3539                           
  3540                           
  3541                           ; 2 bytes @ 0xE
  3542  002E                     	ds	1
  3543  002F                     ConstructStage@states:	
  3544                           
  3545                           ; 1 bytes @ 0xF
  3546  002F                     	ds	1
  3547  0030                     ??_CopyStageData:	
  3548  0030                     ConstructStage@new_stage:	
  3549                           ; 1 bytes @ 0x10
  3550                           
  3551                           
  3552                           ; 2 bytes @ 0x10
  3553  0030                     	ds	3
  3554  0033                     CopyStageData@i:	
  3555                           
  3556                           ; 2 bytes @ 0x13
  3557  0033                     	ds	2
  3558  0035                     ?_AppendStage:	
  3559  0035                     AppendStage@head:	
  3560                           ; 1 bytes @ 0x15
  3561                           
  3562                           
  3563                           ; 2 bytes @ 0x15
  3564  0035                     	ds	2
  3565  0037                     AppendStage@new_stage:	
  3566                           
  3567                           ; 2 bytes @ 0x17
  3568  0037                     	ds	2
  3569  0039                     ??_AppendStage:	
  3570                           
  3571                           ; 1 bytes @ 0x19
  3572  0039                     	ds	2
  3573  003B                     AppendStage@last_stage:	
  3574                           
  3575                           ; 2 bytes @ 0x1B
  3576  003B                     	ds	2
  3577  003D                     ?_InitWigwagPattern:	
  3578  003D                     InitWigwagPattern@pattern:	
  3579                           ; 1 bytes @ 0x1D
  3580                           
  3581                           
  3582                           ; 2 bytes @ 0x1D
  3583  003D                     	ds	2
  3584  003F                     ??_InitWigwagPattern:	
  3585                           
  3586                           ; 1 bytes @ 0x1F
  3587  003F                     	ds	1
  3588  0040                     InitWigwagPattern@left_side_states:	
  3589                           
  3590                           ; 4 bytes @ 0x20
  3591  0040                     	ds	4
  3592  0044                     InitWigwagPattern@right_side_states:	
  3593                           
  3594                           ; 4 bytes @ 0x24
  3595  0044                     	ds	4
  3596  0048                     InitWigwagPattern@left_side_on:	
  3597                           
  3598                           ; 2 bytes @ 0x28
  3599  0048                     	ds	2
  3600  004A                     InitWigwagPattern@right_side_on:	
  3601                           
  3602                           ; 2 bytes @ 0x2A
  3603  004A                     	ds	2
  3604  004C                     InitWigwagPattern@i:	
  3605                           
  3606                           ; 2 bytes @ 0x2C
  3607  004C                     	ds	2
  3608  004E                     InitWigwagPattern@i_844:	
  3609                           
  3610                           ; 2 bytes @ 0x2E
  3611  004E                     	ds	2
  3612  0050                     InitWigwagPattern@off:	
  3613                           
  3614                           ; 2 bytes @ 0x30
  3615  0050                     	ds	2
  3616  0052                     InitWigwagPattern@head:	
  3617                           
  3618                           ; 2 bytes @ 0x32
  3619  0052                     	ds	2
  3620  0054                     ??_main:	
  3621                           
  3622                           ; 1 bytes @ 0x34
  3623  0054                     	ds	1
  3624                           
  3625                           	psect	maintext
  3626  0421                     __pmaintext:	
  3627 ;;
  3628 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3629 ;;
  3630 ;; *************** function _main *****************
  3631 ;; Defined at:
  3632 ;;		line 35 in file "main.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : B1F/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3649 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3650 ;;Total ram usage:        1 bytes
  3651 ;; Hardware stack levels required when called:    9
  3652 ;; This function calls:
  3653 ;;		_FlashPattern
  3654 ;;		_PatternCycleInputChanged
  3655 ;;		_setup
  3656 ;; This function is called by:
  3657 ;;		Startup code after reset
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           
  3662                           ;psect for function _main
  3663  0421                     _main:	
  3664  0421                     l2044:	
  3665                           ;incstack = 0
  3666                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3667                           
  3668                           
  3669                           ;main.c: 37:     setup();
  3670  0421  3184  2404  3184   	fcall	_setup
  3671  0424                     l2046:	
  3672                           
  3673                           ;main.c: 40:     {;main.c: 41:         cur_pc_input_state = PORTCbits.RC5;
  3674  0424  3000               	movlw	0
  3675  0425  0020               	movlb	0	; select bank0
  3676  0426  1A8E               	btfsc	14,5	;volatile
  3677  0427  3001               	movlw	1
  3678  0428  00FB               	movwf	_cur_pc_input_state
  3679  0429                     l2048:	
  3680                           
  3681                           ;main.c: 46:         if ( PatternCycleInputChanged() )
  3682  0429  3183  2365  3184   	fcall	_PatternCycleInputChanged
  3683  042C                     l2054:	
  3684                           
  3685                           ;main.c: 66:         last_pc_input_state = cur_pc_input_state;
  3686  042C  087B               	movf	_cur_pc_input_state,w
  3687  042D  0020               	movlb	0	; select bank0
  3688  042E  00D4               	movwf	??_main
  3689  042F  0854               	movf	??_main,w
  3690  0430  00FA               	movwf	_last_pc_input_state
  3691  0431                     l2056:	
  3692                           
  3693                           ;main.c: 68:         FlashPattern( &Wigwag );
  3694  0431  3067               	movlw	low _Wigwag
  3695  0432  00F6               	movwf	FlashPattern@pattern
  3696  0433  3000               	movlw	high _Wigwag
  3697  0434  00F7               	movwf	FlashPattern@pattern+1
  3698  0435  3181  21ED  3184   	fcall	_FlashPattern
  3699  0438  2C24               	goto	l2046
  3700  0439  3180  2828         	ljmp	start
  3701  043B                     __end_of_main:	
  3702                           
  3703                           	psect	text1
  3704  0404                     __ptext1:	
  3705 ;; *************** function _setup *****************
  3706 ;; Defined at:
  3707 ;;		line 13 in file "main.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;		None
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;		None
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  1    wreg      void 
  3714 ;; Registers used:
  3715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3725 ;;Total ram usage:        0 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    8
  3728 ;; This function calls:
  3729 ;;		_InitWigwagPattern
  3730 ;;		_SYSTEM_Initialize
  3731 ;;		_SetOutputs
  3732 ;;		_TMR1_Initialize
  3733 ;;		_TMR1_StartTimer
  3734 ;; This function is called by:
  3735 ;;		_main
  3736 ;; This function uses a non-reentrant model
  3737 ;;
  3738                           
  3739                           
  3740                           ;psect for function _setup
  3741  0404                     _setup:	
  3742  0404                     l2014:	
  3743                           ;incstack = 0
  3744                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3745                           
  3746                           
  3747                           ;main.c: 16:     SYSTEM_Initialize();
  3748  0404  3184  2476  3184   	fcall	_SYSTEM_Initialize
  3749  0407                     l2016:	
  3750                           
  3751                           ;main.c: 18:     (INTCONbits.GIE = 1);
  3752  0407  178B               	bsf	11,7	;volatile
  3753  0408                     l2018:	
  3754                           
  3755                           ;main.c: 21:     (INTCONbits.PEIE = 1);
  3756  0408  170B               	bsf	11,6	;volatile
  3757                           
  3758                           ;main.c: 24:     TMR1_Initialize();
  3759  0409  3184  2451  3184   	fcall	_TMR1_Initialize
  3760  040C                     l2020:	
  3761                           
  3762                           ;main.c: 25:     TMR1_StartTimer();
  3763  040C  3184  24D9  3184   	fcall	_TMR1_StartTimer
  3764  040F                     l2022:	
  3765                           
  3766                           ;main.c: 28:     SetOutputs( 0 );
  3767  040F  3000               	movlw	0
  3768  0410  3183  23E2  3184   	fcall	_SetOutputs
  3769  0413                     l2024:	
  3770                           
  3771                           ;main.c: 31:     InitWigwagPattern( &Wigwag );
  3772  0413  3067               	movlw	low _Wigwag
  3773  0414  0020               	movlb	0	; select bank0
  3774  0415  00BD               	movwf	InitWigwagPattern@pattern
  3775  0416  3000               	movlw	high _Wigwag
  3776  0417  00BE               	movwf	InitWigwagPattern@pattern+1
  3777  0418  3180  2066  3184   	fcall	_InitWigwagPattern
  3778  041B                     l2026:	
  3779                           
  3780                           ;main.c: 32:     current_stage = Wigwag.first_stage;
  3781  041B  0020               	movlb	0	; select bank0
  3782  041C  0869               	movf	_Wigwag+2,w
  3783  041D  00D8               	movwf	_current_stage+1
  3784  041E  0868               	movf	_Wigwag+1,w
  3785  041F  00D7               	movwf	_current_stage
  3786  0420                     l293:	
  3787  0420  0008               	return
  3788  0421                     __end_of_setup:	
  3789                           
  3790                           	psect	text2
  3791  04D9                     __ptext2:	
  3792 ;; *************** function _TMR1_StartTimer *****************
  3793 ;; Defined at:
  3794 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;		None
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;		None
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  1    wreg      void 
  3801 ;; Registers used:
  3802 ;;		None
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3812 ;;Total ram usage:        0 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    4
  3815 ;; This function calls:
  3816 ;;		Nothing
  3817 ;; This function is called by:
  3818 ;;		_setup
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           
  3823                           ;psect for function _TMR1_StartTimer
  3824  04D9                     _TMR1_StartTimer:	
  3825  04D9                     l1688:	
  3826                           ;incstack = 0
  3827                           ; Regs used in _TMR1_StartTimer: []
  3828                           
  3829                           
  3830                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
  3831  04D9  0020               	movlb	0	; select bank0
  3832  04DA  141B               	bsf	27,0	;volatile
  3833  04DB                     l210:	
  3834  04DB  0008               	return
  3835  04DC                     __end_of_TMR1_StartTimer:	
  3836                           
  3837                           	psect	text3
  3838  03E2                     __ptext3:	
  3839 ;; *************** function _SetOutputs *****************
  3840 ;; Defined at:
  3841 ;;		line 38 in file "Lights.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;  state           1    wreg     const _Bool 
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;  state           1    7[COMMON] const _Bool 
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      void 
  3848 ;; Registers used:
  3849 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3856 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3857 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3858 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3859 ;;Total ram usage:        2 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    5
  3862 ;; This function calls:
  3863 ;;		_SetLight
  3864 ;; This function is called by:
  3865 ;;		_setup
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           
  3870                           ;psect for function _SetOutputs
  3871  03E2                     _SetOutputs:	
  3872                           
  3873                           ;incstack = 0
  3874                           ; Regs used in _SetOutputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3875                           ;SetOutputs@state stored from wreg
  3876  03E2  00F7               	movwf	SetOutputs@state
  3877  03E3                     l1970:	
  3878                           
  3879                           ;Lights.c: 38: void SetOutputs( const _Bool state );Lights.c: 39: {;Lights.c: 40:     Se
      +                          tLight( L1, state );
  3880  03E3  0877               	movf	SetOutputs@state,w
  3881  03E4  00F6               	movwf	??_SetOutputs
  3882  03E5  0876               	movf	??_SetOutputs,w
  3883  03E6  00F2               	movwf	SetLight@state
  3884  03E7  3000               	movlw	0
  3885  03E8  3181  217C  3183   	fcall	_SetLight
  3886                           
  3887                           ;Lights.c: 41:     SetLight( L2, state );
  3888  03EB  0877               	movf	SetOutputs@state,w
  3889  03EC  00F6               	movwf	??_SetOutputs
  3890  03ED  0876               	movf	??_SetOutputs,w
  3891  03EE  00F2               	movwf	SetLight@state
  3892  03EF  3001               	movlw	1
  3893  03F0  3181  217C  3183   	fcall	_SetLight
  3894                           
  3895                           ;Lights.c: 42:     SetLight( L3, state );
  3896  03F3  0877               	movf	SetOutputs@state,w
  3897  03F4  00F6               	movwf	??_SetOutputs
  3898  03F5  0876               	movf	??_SetOutputs,w
  3899  03F6  00F2               	movwf	SetLight@state
  3900  03F7  3002               	movlw	2
  3901  03F8  3181  217C  3183   	fcall	_SetLight
  3902                           
  3903                           ;Lights.c: 43:     SetLight( L4, state );
  3904  03FB  0877               	movf	SetOutputs@state,w
  3905  03FC  00F6               	movwf	??_SetOutputs
  3906  03FD  0876               	movf	??_SetOutputs,w
  3907  03FE  00F2               	movwf	SetLight@state
  3908  03FF  3003               	movlw	3
  3909  0400  3181  217C  3183   	fcall	_SetLight
  3910  0403                     l364:	
  3911  0403  0008               	return
  3912  0404                     __end_of_SetOutputs:	
  3913                           
  3914                           	psect	text4
  3915  0476                     __ptext4:	
  3916 ;; *************** function _SYSTEM_Initialize *****************
  3917 ;; Defined at:
  3918 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;		None
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;		None
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  1    wreg      void 
  3925 ;; Registers used:
  3926 ;;		wreg, status,2, status,0, pclath, cstack
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3936 ;;Total ram usage:        0 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:    6
  3939 ;; This function calls:
  3940 ;;		_OSCILLATOR_Initialize
  3941 ;;		_PIN_MANAGER_Initialize
  3942 ;;		_PMD_Initialize
  3943 ;;		_TMR1_Initialize
  3944 ;;		_WDT_Initialize
  3945 ;; This function is called by:
  3946 ;;		_setup
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _SYSTEM_Initialize
  3952  0476                     _SYSTEM_Initialize:	
  3953  0476                     l1672:	
  3954                           ;incstack = 0
  3955                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3956                           
  3957                           
  3958                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
  3959  0476  3184  24BB  3184   	fcall	_PMD_Initialize
  3960  0479                     l1674:	
  3961                           
  3962                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  3963  0479  3183  2392  3184   	fcall	_PIN_MANAGER_Initialize
  3964  047C                     l1676:	
  3965                           
  3966                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  3967  047C  3184  24A1  3184   	fcall	_OSCILLATOR_Initialize
  3968  047F                     l1678:	
  3969                           
  3970                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  3971  047F  3184  24D5  3184   	fcall	_WDT_Initialize
  3972  0482                     l1680:	
  3973                           
  3974                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  3975  0482  3184  2451  3184   	fcall	_TMR1_Initialize
  3976  0485                     l51:	
  3977  0485  0008               	return
  3978  0486                     __end_of_SYSTEM_Initialize:	
  3979                           
  3980                           	psect	text5
  3981  04D5                     __ptext5:	
  3982 ;; *************** function _WDT_Initialize *****************
  3983 ;; Defined at:
  3984 ;;		line 74 in file "mcc_generated_files/mcc.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;		None
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;		None
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      void 
  3991 ;; Registers used:
  3992 ;;		wreg
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4002 ;;Total ram usage:        0 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; Hardware stack levels required when called:    4
  4005 ;; This function calls:
  4006 ;;		Nothing
  4007 ;; This function is called by:
  4008 ;;		_SYSTEM_Initialize
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012                           
  4013                           ;psect for function _WDT_Initialize
  4014  04D5                     _WDT_Initialize:	
  4015  04D5                     l1590:	
  4016                           ;incstack = 0
  4017                           ; Regs used in _WDT_Initialize: [wreg]
  4018                           
  4019                           
  4020                           ;mcc_generated_files/mcc.c: 77:     WDTCON = 0x16;
  4021  04D5  3016               	movlw	22
  4022  04D6  0021               	movlb	1	; select bank1
  4023  04D7  0097               	movwf	23	;volatile
  4024  04D8                     l57:	
  4025  04D8  0008               	return
  4026  04D9                     __end_of_WDT_Initialize:	
  4027                           
  4028                           	psect	text6
  4029  0451                     __ptext6:	
  4030 ;; *************** function _TMR1_Initialize *****************
  4031 ;; Defined at:
  4032 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;		None
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;		None
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  1    wreg      void 
  4039 ;; Registers used:
  4040 ;;		wreg, status,2, status,0, pclath, cstack
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4050 ;;Total ram usage:        0 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; Hardware stack levels required when called:    5
  4053 ;; This function calls:
  4054 ;;		_TMR1_SetInterruptHandler
  4055 ;; This function is called by:
  4056 ;;		_SYSTEM_Initialize
  4057 ;;		_setup
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           
  4062                           ;psect for function _TMR1_Initialize
  4063  0451                     _TMR1_Initialize:	
  4064  0451                     l1592:	
  4065                           ;incstack = 0
  4066                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4067                           
  4068                           
  4069                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  4070  0451  0020               	movlb	0	; select bank0
  4071  0452  019C               	clrf	28	;volatile
  4072  0453                     l1594:	
  4073                           
  4074                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xFF;
  4075  0453  30FF               	movlw	255
  4076  0454  009A               	movwf	26	;volatile
  4077  0455                     l1596:	
  4078                           
  4079                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0x00;
  4080  0455  0199               	clrf	25	;volatile
  4081  0456                     l1598:	
  4082                           
  4083                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  4084  0456  1011               	bcf	17,0	;volatile
  4085                           
  4086                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  4087  0457  081A               	movf	26,w	;volatile
  4088  0458  00ED               	movwf	_timer1ReloadVal+1	;volatile
  4089  0459  0819               	movf	25,w	;volatile
  4090  045A  00EC               	movwf	_timer1ReloadVal	;volatile
  4091  045B                     l1600:	
  4092                           
  4093                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  4094  045B  0021               	movlb	1	; select bank1
  4095  045C  1411               	bsf	17,0	;volatile
  4096  045D                     l1602:	
  4097                           
  4098                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  4099  045D  30CF               	movlw	low _TMR1_DefaultInterruptHandler
  4100  045E  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  4101  045F  3004               	movlw	high _TMR1_DefaultInterruptHandler
  4102  0460  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  4103  0461  3184  24C3  3184   	fcall	_TMR1_SetInterruptHandler
  4104  0464                     l207:	
  4105  0464  0008               	return
  4106  0465                     __end_of_TMR1_Initialize:	
  4107                           
  4108                           	psect	text7
  4109  04C3                     __ptext7:	
  4110 ;; *************** function _TMR1_SetInterruptHandler *****************
  4111 ;; Defined at:
  4112 ;;		line 172 in file "mcc_generated_files/tmr1.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  4115 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;		None
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  1    wreg      void 
  4120 ;; Registers used:
  4121 ;;		wreg
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4127 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4130 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4131 ;;Total ram usage:        2 bytes
  4132 ;; Hardware stack levels used:    1
  4133 ;; Hardware stack levels required when called:    4
  4134 ;; This function calls:
  4135 ;;		Nothing
  4136 ;; This function is called by:
  4137 ;;		_TMR1_Initialize
  4138 ;; This function uses a non-reentrant model
  4139 ;;
  4140                           
  4141                           
  4142                           ;psect for function _TMR1_SetInterruptHandler
  4143  04C3                     _TMR1_SetInterruptHandler:	
  4144  04C3                     l1524:	
  4145                           ;incstack = 0
  4146                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  4147                           
  4148                           
  4149                           ;mcc_generated_files/tmr1.c: 173:     TMR1_InterruptHandler = InterruptHandler;
  4150  04C3  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  4151  04C4  0020               	movlb	0	; select bank0
  4152  04C5  00EB               	movwf	_TMR1_InterruptHandler+1
  4153  04C6  0872               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  4154  04C7  00EA               	movwf	_TMR1_InterruptHandler
  4155  04C8                     l237:	
  4156  04C8  0008               	return
  4157  04C9                     __end_of_TMR1_SetInterruptHandler:	
  4158                           
  4159                           	psect	text8
  4160  04BB                     __ptext8:	
  4161 ;; *************** function _PMD_Initialize *****************
  4162 ;; Defined at:
  4163 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;		None
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;		None
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  1    wreg      void 
  4170 ;; Registers used:
  4171 ;;		status,2
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;Total ram usage:        0 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    4
  4184 ;; This function calls:
  4185 ;;		Nothing
  4186 ;; This function is called by:
  4187 ;;		_SYSTEM_Initialize
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           
  4192                           ;psect for function _PMD_Initialize
  4193  04BB                     _PMD_Initialize:	
  4194  04BB                     l1548:	
  4195                           ;incstack = 0
  4196                           ; Regs used in _PMD_Initialize: [status,2]
  4197                           
  4198                           
  4199                           ;mcc_generated_files/mcc.c: 83:     PMD0 = 0x00;
  4200  04BB  0032               	movlb	18	; select bank18
  4201  04BC  0191               	clrf	17	;volatile
  4202                           
  4203                           ;mcc_generated_files/mcc.c: 85:     PMD1 = 0x00;
  4204  04BD  0192               	clrf	18	;volatile
  4205                           
  4206                           ;mcc_generated_files/mcc.c: 87:     PMD2 = 0x00;
  4207  04BE  0193               	clrf	19	;volatile
  4208                           
  4209                           ;mcc_generated_files/mcc.c: 89:     PMD3 = 0x00;
  4210  04BF  0194               	clrf	20	;volatile
  4211                           
  4212                           ;mcc_generated_files/mcc.c: 91:     PMD4 = 0x00;
  4213  04C0  0195               	clrf	21	;volatile
  4214                           
  4215                           ;mcc_generated_files/mcc.c: 93:     PMD5 = 0x00;
  4216  04C1  0196               	clrf	22	;volatile
  4217  04C2                     l60:	
  4218  04C2  0008               	return
  4219  04C3                     __end_of_PMD_Initialize:	
  4220                           
  4221                           	psect	text9
  4222  0392                     __ptext9:	
  4223 ;; *************** function _PIN_MANAGER_Initialize *****************
  4224 ;; Defined at:
  4225 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;		None
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;		None
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  1    wreg      void 
  4232 ;; Registers used:
  4233 ;;		wreg, status,2, status,0, pclath, cstack
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4243 ;;Total ram usage:        0 bytes
  4244 ;; Hardware stack levels used:    1
  4245 ;; Hardware stack levels required when called:    5
  4246 ;; This function calls:
  4247 ;;		_IOCCF0_SetInterruptHandler
  4248 ;; This function is called by:
  4249 ;;		_SYSTEM_Initialize
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           
  4254                           ;psect for function _PIN_MANAGER_Initialize
  4255  0392                     _PIN_MANAGER_Initialize:	
  4256  0392                     l1550:	
  4257                           ;incstack = 0
  4258                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4259                           
  4260                           
  4261                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
  4262  0392  0022               	movlb	2	; select bank2
  4263  0393  018C               	clrf	12	;volatile
  4264  0394                     l1552:	
  4265                           
  4266                           ;mcc_generated_files/pin_manager.c: 63:     LATC = 0x20;
  4267  0394  3020               	movlw	32
  4268  0395  008E               	movwf	14	;volatile
  4269  0396                     l1554:	
  4270                           
  4271                           ;mcc_generated_files/pin_manager.c: 68:     TRISA = 0x37;
  4272  0396  3037               	movlw	55
  4273  0397  0021               	movlb	1	; select bank1
  4274  0398  008C               	movwf	12	;volatile
  4275  0399                     l1556:	
  4276                           
  4277                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x21;
  4278  0399  3021               	movlw	33
  4279  039A  008E               	movwf	14	;volatile
  4280  039B                     l1558:	
  4281                           
  4282                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  4283  039B  0023               	movlb	3	; select bank3
  4284  039C  018E               	clrf	14	;volatile
  4285                           
  4286                           ;mcc_generated_files/pin_manager.c: 75:     ANSELA = 0x33;
  4287  039D  3033               	movlw	51
  4288  039E  008C               	movwf	12	;volatile
  4289  039F                     l1560:	
  4290                           
  4291                           ;mcc_generated_files/pin_manager.c: 80:     WPUA = 0x00;
  4292  039F  0024               	movlb	4	; select bank4
  4293  03A0  018C               	clrf	12	;volatile
  4294  03A1                     l1562:	
  4295                           
  4296                           ;mcc_generated_files/pin_manager.c: 81:     WPUC = 0x1E;
  4297  03A1  301E               	movlw	30
  4298  03A2  008E               	movwf	14	;volatile
  4299                           
  4300                           ;mcc_generated_files/pin_manager.c: 86:     ODCONA = 0x00;
  4301  03A3  0025               	movlb	5	; select bank5
  4302  03A4  018C               	clrf	12	;volatile
  4303                           
  4304                           ;mcc_generated_files/pin_manager.c: 87:     ODCONC = 0x00;
  4305  03A5  018E               	clrf	14	;volatile
  4306  03A6                     l1564:	
  4307                           
  4308                           ;mcc_generated_files/pin_manager.c: 92:     SLRCONA = 0x37;
  4309  03A6  3037               	movlw	55
  4310  03A7  0026               	movlb	6	; select bank6
  4311  03A8  008C               	movwf	12	;volatile
  4312  03A9                     l1566:	
  4313                           
  4314                           ;mcc_generated_files/pin_manager.c: 93:     SLRCONC = 0x3F;
  4315  03A9  303F               	movlw	63
  4316  03AA  008E               	movwf	14	;volatile
  4317  03AB                     l1568:	
  4318                           
  4319                           ;mcc_generated_files/pin_manager.c: 98:     INLVLA = 0x3F;
  4320  03AB  303F               	movlw	63
  4321  03AC  0027               	movlb	7	; select bank7
  4322  03AD  008C               	movwf	12	;volatile
  4323  03AE                     l1570:	
  4324                           
  4325                           ;mcc_generated_files/pin_manager.c: 99:     INLVLC = 0x3F;
  4326  03AE  303F               	movlw	63
  4327  03AF  008E               	movwf	14	;volatile
  4328  03B0                     l1572:	
  4329                           
  4330                           ;mcc_generated_files/pin_manager.c: 106:     IOCCFbits.IOCCF0 = 0;
  4331  03B0  1019               	bcf	25,0	;volatile
  4332  03B1                     l1574:	
  4333                           
  4334                           ;mcc_generated_files/pin_manager.c: 108:     IOCCNbits.IOCCN0 = 0;
  4335  03B1  1018               	bcf	24,0	;volatile
  4336  03B2                     l1576:	
  4337                           
  4338                           ;mcc_generated_files/pin_manager.c: 110:     IOCCPbits.IOCCP0 = 1;
  4339  03B2  1417               	bsf	23,0	;volatile
  4340  03B3                     l1578:	
  4341                           
  4342                           ;mcc_generated_files/pin_manager.c: 115:     IOCCF0_SetInterruptHandler(IOCCF0_DefaultIn
      +                          terruptHandler);
  4343  03B3  30DC               	movlw	low _IOCCF0_DefaultInterruptHandler
  4344  03B4  00F2               	movwf	IOCCF0_SetInterruptHandler@InterruptHandler
  4345  03B5  3004               	movlw	high _IOCCF0_DefaultInterruptHandler
  4346  03B6  00F3               	movwf	IOCCF0_SetInterruptHandler@InterruptHandler+1
  4347  03B7  3184  24C9  3183   	fcall	_IOCCF0_SetInterruptHandler
  4348  03BA                     l1580:	
  4349                           
  4350                           ;mcc_generated_files/pin_manager.c: 118:     PIE0bits.IOCIE = 1;
  4351  03BA  0021               	movlb	1	; select bank1
  4352  03BB  1610               	bsf	16,4	;volatile
  4353  03BC                     l121:	
  4354  03BC  0008               	return
  4355  03BD                     __end_of_PIN_MANAGER_Initialize:	
  4356                           
  4357                           	psect	text10
  4358  04C9                     __ptext10:	
  4359 ;; *************** function _IOCCF0_SetInterruptHandler *****************
  4360 ;; Defined at:
  4361 ;;		line 149 in file "mcc_generated_files/pin_manager.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  4364 ;;		 -> IOCCF0_DefaultInterruptHandler(1), 
  4365 ;; Auto vars:     Size  Location     Type
  4366 ;;		None
  4367 ;; Return value:  Size  Location     Type
  4368 ;;                  1    wreg      void 
  4369 ;; Registers used:
  4370 ;;		wreg
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4376 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4379 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4380 ;;Total ram usage:        2 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:    4
  4383 ;; This function calls:
  4384 ;;		Nothing
  4385 ;; This function is called by:
  4386 ;;		_PIN_MANAGER_Initialize
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           
  4391                           ;psect for function _IOCCF0_SetInterruptHandler
  4392  04C9                     _IOCCF0_SetInterruptHandler:	
  4393  04C9                     l1522:	
  4394                           ;incstack = 0
  4395                           ; Regs used in _IOCCF0_SetInterruptHandler: [wreg]
  4396                           
  4397                           
  4398                           ;mcc_generated_files/pin_manager.c: 150:     IOCCF0_InterruptHandler = InterruptHandler;
  4399  04C9  0873               	movf	IOCCF0_SetInterruptHandler@InterruptHandler+1,w
  4400  04CA  0020               	movlb	0	; select bank0
  4401  04CB  00EF               	movwf	_IOCCF0_InterruptHandler+1
  4402  04CC  0872               	movf	IOCCF0_SetInterruptHandler@InterruptHandler,w
  4403  04CD  00EE               	movwf	_IOCCF0_InterruptHandler
  4404  04CE                     l132:	
  4405  04CE  0008               	return
  4406  04CF                     __end_of_IOCCF0_SetInterruptHandler:	
  4407                           
  4408                           	psect	text11
  4409  04A1                     __ptext11:	
  4410 ;; *************** function _OSCILLATOR_Initialize *****************
  4411 ;; Defined at:
  4412 ;;		line 60 in file "mcc_generated_files/mcc.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;		None
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;		None
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		wreg, status,2
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4430 ;;Total ram usage:        0 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    4
  4433 ;; This function calls:
  4434 ;;		Nothing
  4435 ;; This function is called by:
  4436 ;;		_SYSTEM_Initialize
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           
  4441                           ;psect for function _OSCILLATOR_Initialize
  4442  04A1                     _OSCILLATOR_Initialize:	
  4443  04A1                     l1582:	
  4444                           ;incstack = 0
  4445                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4446                           
  4447                           
  4448                           ;mcc_generated_files/mcc.c: 63:     OSCCON1 = 0x62;
  4449  04A1  3062               	movlw	98
  4450  04A2  0032               	movlb	18	; select bank18
  4451  04A3  0099               	movwf	25	;volatile
  4452  04A4                     l1584:	
  4453                           
  4454                           ;mcc_generated_files/mcc.c: 65:     OSCCON3 = 0x00;
  4455  04A4  019B               	clrf	27	;volatile
  4456  04A5                     l1586:	
  4457                           
  4458                           ;mcc_generated_files/mcc.c: 67:     OSCEN = 0x00;
  4459  04A5  019D               	clrf	29	;volatile
  4460                           
  4461                           ;mcc_generated_files/mcc.c: 69:     OSCFRQ = 0x03;
  4462  04A6  3003               	movlw	3
  4463  04A7  009F               	movwf	31	;volatile
  4464  04A8                     l1588:	
  4465                           
  4466                           ;mcc_generated_files/mcc.c: 71:     OSCTUNE = 0x00;
  4467  04A8  019E               	clrf	30	;volatile
  4468  04A9                     l54:	
  4469  04A9  0008               	return
  4470  04AA                     __end_of_OSCILLATOR_Initialize:	
  4471                           
  4472                           	psect	text12
  4473  0066                     __ptext12:	
  4474 ;; *************** function _InitWigwagPattern *****************
  4475 ;; Defined at:
  4476 ;;		line 101 in file "Pattern.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;  pattern         2   29[BANK0 ] PTR struct Pattern
  4479 ;;		 -> Wigwag(3), 
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;  i               2   46[BANK0 ] int 
  4482 ;;  i               2   44[BANK0 ] int 
  4483 ;;  right_side_s    4   36[BANK0 ] _Bool [4]
  4484 ;;  left_side_st    4   32[BANK0 ] _Bool [4]
  4485 ;;  head            2   50[BANK0 ] PTR struct Stage
  4486 ;;		 -> stage_stash(768), NULL(0), 
  4487 ;;  off             2   48[BANK0 ] PTR struct Stage
  4488 ;;		 -> stage_stash(768), NULL(0), 
  4489 ;;  right_side_o    2   42[BANK0 ] PTR struct Stage
  4490 ;;		 -> stage_stash(768), NULL(0), 
  4491 ;;  left_side_on    2   40[BANK0 ] PTR struct Stage
  4492 ;;		 -> stage_stash(768), NULL(0), 
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  1    wreg      void 
  4495 ;; Registers used:
  4496 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4502 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4503 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4505 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;Total ram usage:       23 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:    7
  4509 ;; This function calls:
  4510 ;;		_AppendStage
  4511 ;;		_ConstructStage
  4512 ;;		_CopyStageData
  4513 ;;		_NewStage
  4514 ;; This function is called by:
  4515 ;;		_setup
  4516 ;;		_InitPatternSelector
  4517 ;; This function uses a non-reentrant model
  4518 ;;
  4519                           
  4520                           
  4521                           ;psect for function _InitWigwagPattern
  4522  0066                     _InitWigwagPattern:	
  4523  0066                     l1972:	
  4524                           ;incstack = 0
  4525                           ; Regs used in _InitWigwagPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4526                           
  4527                           
  4528                           ;Pattern.c: 101: void InitWigwagPattern( struct Pattern* pattern );Pattern.c: 102: {;Pat
      +                          tern.c: 104:     pattern->name = WIGWAG;
  4529  0066  0020               	movlb	0	; select bank0
  4530  0067  083D               	movf	InitWigwagPattern@pattern,w
  4531  0068  0086               	movwf	6
  4532  0069  083E               	movf	InitWigwagPattern@pattern+1,w
  4533  006A  0087               	movwf	7
  4534  006B  0181               	clrf	1
  4535  006C                     l1974:	
  4536                           
  4537                           ;Pattern.c: 107:     _Bool left_side_states[NUM_LIGHTS] = { 1, 0, 1, 0 };
  4538  006C  0021               	movlb	1	; select bank1
  4539  006D  084B               	movf	(InitWigwagPattern@F444+3)^(0+128),w
  4540  006E  0020               	movlb	0	; select bank0
  4541  006F  00C3               	movwf	InitWigwagPattern@left_side_states+3
  4542  0070  0021               	movlb	1	; select bank1
  4543  0071  084A               	movf	(InitWigwagPattern@F444+2)^(0+128),w
  4544  0072  0020               	movlb	0	; select bank0
  4545  0073  00C2               	movwf	InitWigwagPattern@left_side_states+2
  4546  0074  0021               	movlb	1	; select bank1
  4547  0075  0849               	movf	(InitWigwagPattern@F444+1)^(0+128),w
  4548  0076  0020               	movlb	0	; select bank0
  4549  0077  00C1               	movwf	InitWigwagPattern@left_side_states+1
  4550  0078  0021               	movlb	1	; select bank1
  4551  0079  0848               	movf	InitWigwagPattern@F444^(0+128),w
  4552  007A  0020               	movlb	0	; select bank0
  4553  007B  00C0               	movwf	InitWigwagPattern@left_side_states
  4554  007C                     l1976:	
  4555                           
  4556                           ;Pattern.c: 108:     struct Stage* left_side_on = ConstructStage( left_side_states, 80UL
      +                          , ((void*)0) );
  4557  007C  3050               	movlw	80
  4558  007D  00AC               	movwf	ConstructStage@time_ms
  4559  007E  3000               	movlw	0
  4560  007F  00AD               	movwf	ConstructStage@time_ms+1
  4561  0080  01AE               	clrf	ConstructStage@next
  4562  0081  3040               	movlw	(low (InitWigwagPattern@left_side_states| 0))& (0+255)
  4563  0082  3183  2338  3180   	fcall	_ConstructStage
  4564  0085  0020               	movlb	0	; select bank0
  4565  0086  082D               	movf	?_ConstructStage+1,w
  4566  0087  00C9               	movwf	InitWigwagPattern@left_side_on+1
  4567  0088  082C               	movf	?_ConstructStage,w
  4568  0089  00C8               	movwf	InitWigwagPattern@left_side_on
  4569  008A                     l1978:	
  4570                           
  4571                           ;Pattern.c: 110:     _Bool right_side_states[NUM_LIGHTS] = { 0, 1, 0, 1 };
  4572  008A  0021               	movlb	1	; select bank1
  4573  008B  0847               	movf	(InitWigwagPattern@F447+3)^(0+128),w
  4574  008C  0020               	movlb	0	; select bank0
  4575  008D  00C7               	movwf	InitWigwagPattern@right_side_states+3
  4576  008E  0021               	movlb	1	; select bank1
  4577  008F  0846               	movf	(InitWigwagPattern@F447+2)^(0+128),w
  4578  0090  0020               	movlb	0	; select bank0
  4579  0091  00C6               	movwf	InitWigwagPattern@right_side_states+2
  4580  0092  0021               	movlb	1	; select bank1
  4581  0093  0845               	movf	(InitWigwagPattern@F447+1)^(0+128),w
  4582  0094  0020               	movlb	0	; select bank0
  4583  0095  00C5               	movwf	InitWigwagPattern@right_side_states+1
  4584  0096  0021               	movlb	1	; select bank1
  4585  0097  0844               	movf	InitWigwagPattern@F447^(0+128),w
  4586  0098  0020               	movlb	0	; select bank0
  4587  0099  00C4               	movwf	InitWigwagPattern@right_side_states
  4588  009A                     l1980:	
  4589                           
  4590                           ;Pattern.c: 111:     struct Stage* right_side_on = ConstructStage( right_side_states, 80
      +                          UL, ((void*)0) );
  4591  009A  3050               	movlw	80
  4592  009B  00AC               	movwf	ConstructStage@time_ms
  4593  009C  3000               	movlw	0
  4594  009D  00AD               	movwf	ConstructStage@time_ms+1
  4595  009E  01AE               	clrf	ConstructStage@next
  4596  009F  3044               	movlw	(low (InitWigwagPattern@right_side_states| 0))& (0+255)
  4597  00A0  3183  2338  3180   	fcall	_ConstructStage
  4598  00A3  0020               	movlb	0	; select bank0
  4599  00A4  082D               	movf	?_ConstructStage+1,w
  4600  00A5  00CB               	movwf	InitWigwagPattern@right_side_on+1
  4601  00A6  082C               	movf	?_ConstructStage,w
  4602  00A7  00CA               	movwf	InitWigwagPattern@right_side_on
  4603  00A8                     l1982:	
  4604                           
  4605                           ;Pattern.c: 113:     struct Stage* off = NewStage();
  4606  00A8  3182  22B0  3180   	fcall	_NewStage
  4607  00AB  0878               	movf	?_NewStage+1,w
  4608  00AC  0020               	movlb	0	; select bank0
  4609  00AD  00D1               	movwf	InitWigwagPattern@off+1
  4610  00AE  0877               	movf	?_NewStage,w
  4611  00AF  00D0               	movwf	InitWigwagPattern@off
  4612  00B0                     l1984:	
  4613                           
  4614                           ;Pattern.c: 115:     pattern->first_stage = NewStage();
  4615  00B0  3182  22B0  3180   	fcall	_NewStage
  4616  00B3  0020               	movlb	0	; select bank0
  4617  00B4  083D               	movf	InitWigwagPattern@pattern,w
  4618  00B5  0086               	movwf	6
  4619  00B6  083E               	movf	InitWigwagPattern@pattern+1,w
  4620  00B7  0087               	movwf	7
  4621  00B8  3141               	addfsr 1,1
  4622  00B9  0877               	movf	?_NewStage,w
  4623  00BA  3FC0               	movwi [0]fsr1
  4624  00BB  0878               	movf	?_NewStage+1,w
  4625  00BC  3FC1               	movwi [1]fsr1
  4626  00BD                     l1986:	
  4627                           
  4628                           ;Pattern.c: 116:     struct Stage* head = pattern->first_stage;
  4629  00BD  083D               	movf	InitWigwagPattern@pattern,w
  4630  00BE  0086               	movwf	6
  4631  00BF  083E               	movf	InitWigwagPattern@pattern+1,w
  4632  00C0  0087               	movwf	7
  4633  00C1  3141               	addfsr 1,1
  4634  00C2  3F40               	moviw [0]fsr1
  4635  00C3  00D2               	movwf	InitWigwagPattern@head
  4636  00C4  3F41               	moviw [1]fsr1
  4637  00C5  00D3               	movwf	InitWigwagPattern@head+1
  4638  00C6                     l1988:	
  4639                           
  4640                           ;Pattern.c: 119:     for( int i = 0; i < 3; i++ )
  4641  00C6  01CC               	clrf	InitWigwagPattern@i
  4642  00C7  01CD               	clrf	InitWigwagPattern@i+1
  4643  00C8                     l1994:	
  4644                           
  4645                           ;Pattern.c: 120:     {;Pattern.c: 121:         AppendStage( head, CopyStageData( NewStag
      +                          e(), left_side_on ) );
  4646  00C8  0020               	movlb	0	; select bank0
  4647  00C9  0853               	movf	InitWigwagPattern@head+1,w
  4648  00CA  00B6               	movwf	AppendStage@head+1
  4649  00CB  0852               	movf	InitWigwagPattern@head,w
  4650  00CC  00B5               	movwf	AppendStage@head
  4651  00CD  3182  22B0  3180   	fcall	_NewStage
  4652  00D0  0878               	movf	?_NewStage+1,w
  4653  00D1  0020               	movlb	0	; select bank0
  4654  00D2  00AD               	movwf	CopyStageData@dest+1
  4655  00D3  0877               	movf	?_NewStage,w
  4656  00D4  00AC               	movwf	CopyStageData@dest
  4657  00D5  0849               	movf	InitWigwagPattern@left_side_on+1,w
  4658  00D6  00AF               	movwf	CopyStageData@source+1
  4659  00D7  0848               	movf	InitWigwagPattern@left_side_on,w
  4660  00D8  00AE               	movwf	CopyStageData@source
  4661  00D9  3182  22FF  3180   	fcall	_CopyStageData
  4662  00DC  0020               	movlb	0	; select bank0
  4663  00DD  082D               	movf	?_CopyStageData+1,w
  4664  00DE  00B8               	movwf	AppendStage@new_stage+1
  4665  00DF  082C               	movf	?_CopyStageData,w
  4666  00E0  00B7               	movwf	AppendStage@new_stage
  4667  00E1  3182  2258  3180   	fcall	_AppendStage
  4668                           
  4669                           ;Pattern.c: 122:         AppendStage( head, CopyStageData( NewStage(), off ) );
  4670  00E4  0020               	movlb	0	; select bank0
  4671  00E5  0853               	movf	InitWigwagPattern@head+1,w
  4672  00E6  00B6               	movwf	AppendStage@head+1
  4673  00E7  0852               	movf	InitWigwagPattern@head,w
  4674  00E8  00B5               	movwf	AppendStage@head
  4675  00E9  3182  22B0  3180   	fcall	_NewStage
  4676  00EC  0878               	movf	?_NewStage+1,w
  4677  00ED  0020               	movlb	0	; select bank0
  4678  00EE  00AD               	movwf	CopyStageData@dest+1
  4679  00EF  0877               	movf	?_NewStage,w
  4680  00F0  00AC               	movwf	CopyStageData@dest
  4681  00F1  0851               	movf	InitWigwagPattern@off+1,w
  4682  00F2  00AF               	movwf	CopyStageData@source+1
  4683  00F3  0850               	movf	InitWigwagPattern@off,w
  4684  00F4  00AE               	movwf	CopyStageData@source
  4685  00F5  3182  22FF  3180   	fcall	_CopyStageData
  4686  00F8  0020               	movlb	0	; select bank0
  4687  00F9  082D               	movf	?_CopyStageData+1,w
  4688  00FA  00B8               	movwf	AppendStage@new_stage+1
  4689  00FB  082C               	movf	?_CopyStageData,w
  4690  00FC  00B7               	movwf	AppendStage@new_stage
  4691  00FD  3182  2258  3180   	fcall	_AppendStage
  4692  0100                     l1996:	
  4693                           
  4694                           ;Pattern.c: 123:     }
  4695  0100  3001               	movlw	1
  4696  0101  0020               	movlb	0	; select bank0
  4697  0102  07CC               	addwf	InitWigwagPattern@i,f
  4698  0103  3000               	movlw	0
  4699  0104  3DCD               	addwfc	InitWigwagPattern@i+1,f
  4700  0105                     l1998:	
  4701  0105  084D               	movf	InitWigwagPattern@i+1,w
  4702  0106  3A80               	xorlw	128
  4703  0107  00BF               	movwf	??_InitWigwagPattern
  4704  0108  3080               	movlw	128
  4705  0109  023F               	subwf	??_InitWigwagPattern,w
  4706  010A  1D03               	skipz
  4707  010B  290E               	goto	u885
  4708  010C  3003               	movlw	3
  4709  010D  024C               	subwf	InitWigwagPattern@i,w
  4710  010E                     u885:	
  4711  010E  1C03               	skipc
  4712  010F  2911               	goto	u881
  4713  0110  2912               	goto	u880
  4714  0111                     u881:	
  4715  0111  28C8               	goto	l1994
  4716  0112                     u880:	
  4717  0112                     l2000:	
  4718                           
  4719                           ;Pattern.c: 126:     AppendStage( head, CopyStageData( NewStage(), off ) );
  4720  0112  0020               	movlb	0	; select bank0
  4721  0113  0853               	movf	InitWigwagPattern@head+1,w
  4722  0114  00B6               	movwf	AppendStage@head+1
  4723  0115  0852               	movf	InitWigwagPattern@head,w
  4724  0116  00B5               	movwf	AppendStage@head
  4725  0117  3182  22B0  3180   	fcall	_NewStage
  4726  011A  0878               	movf	?_NewStage+1,w
  4727  011B  0020               	movlb	0	; select bank0
  4728  011C  00AD               	movwf	CopyStageData@dest+1
  4729  011D  0877               	movf	?_NewStage,w
  4730  011E  00AC               	movwf	CopyStageData@dest
  4731  011F  0851               	movf	InitWigwagPattern@off+1,w
  4732  0120  00AF               	movwf	CopyStageData@source+1
  4733  0121  0850               	movf	InitWigwagPattern@off,w
  4734  0122  00AE               	movwf	CopyStageData@source
  4735  0123  3182  22FF  3180   	fcall	_CopyStageData
  4736  0126  0020               	movlb	0	; select bank0
  4737  0127  082D               	movf	?_CopyStageData+1,w
  4738  0128  00B8               	movwf	AppendStage@new_stage+1
  4739  0129  082C               	movf	?_CopyStageData,w
  4740  012A  00B7               	movwf	AppendStage@new_stage
  4741  012B  3182  2258  3180   	fcall	_AppendStage
  4742  012E                     l2002:	
  4743                           
  4744                           ;Pattern.c: 129:     for( int i = 0; i < 3; i++ )
  4745  012E  0020               	movlb	0	; select bank0
  4746  012F  01CE               	clrf	InitWigwagPattern@i_844
  4747  0130  01CF               	clrf	InitWigwagPattern@i_844+1
  4748  0131                     l2008:	
  4749                           
  4750                           ;Pattern.c: 130:     {;Pattern.c: 131:         AppendStage( head, CopyStageData( NewStag
      +                          e(), right_side_on ) );
  4751  0131  0020               	movlb	0	; select bank0
  4752  0132  0853               	movf	InitWigwagPattern@head+1,w
  4753  0133  00B6               	movwf	AppendStage@head+1
  4754  0134  0852               	movf	InitWigwagPattern@head,w
  4755  0135  00B5               	movwf	AppendStage@head
  4756  0136  3182  22B0  3180   	fcall	_NewStage
  4757  0139  0878               	movf	?_NewStage+1,w
  4758  013A  0020               	movlb	0	; select bank0
  4759  013B  00AD               	movwf	CopyStageData@dest+1
  4760  013C  0877               	movf	?_NewStage,w
  4761  013D  00AC               	movwf	CopyStageData@dest
  4762  013E  084B               	movf	InitWigwagPattern@right_side_on+1,w
  4763  013F  00AF               	movwf	CopyStageData@source+1
  4764  0140  084A               	movf	InitWigwagPattern@right_side_on,w
  4765  0141  00AE               	movwf	CopyStageData@source
  4766  0142  3182  22FF  3180   	fcall	_CopyStageData
  4767  0145  0020               	movlb	0	; select bank0
  4768  0146  082D               	movf	?_CopyStageData+1,w
  4769  0147  00B8               	movwf	AppendStage@new_stage+1
  4770  0148  082C               	movf	?_CopyStageData,w
  4771  0149  00B7               	movwf	AppendStage@new_stage
  4772  014A  3182  2258  3180   	fcall	_AppendStage
  4773                           
  4774                           ;Pattern.c: 132:         AppendStage( head, CopyStageData( NewStage(), off ) );
  4775  014D  0020               	movlb	0	; select bank0
  4776  014E  0853               	movf	InitWigwagPattern@head+1,w
  4777  014F  00B6               	movwf	AppendStage@head+1
  4778  0150  0852               	movf	InitWigwagPattern@head,w
  4779  0151  00B5               	movwf	AppendStage@head
  4780  0152  3182  22B0  3180   	fcall	_NewStage
  4781  0155  0878               	movf	?_NewStage+1,w
  4782  0156  0020               	movlb	0	; select bank0
  4783  0157  00AD               	movwf	CopyStageData@dest+1
  4784  0158  0877               	movf	?_NewStage,w
  4785  0159  00AC               	movwf	CopyStageData@dest
  4786  015A  0851               	movf	InitWigwagPattern@off+1,w
  4787  015B  00AF               	movwf	CopyStageData@source+1
  4788  015C  0850               	movf	InitWigwagPattern@off,w
  4789  015D  00AE               	movwf	CopyStageData@source
  4790  015E  3182  22FF  3180   	fcall	_CopyStageData
  4791  0161  0020               	movlb	0	; select bank0
  4792  0162  082D               	movf	?_CopyStageData+1,w
  4793  0163  00B8               	movwf	AppendStage@new_stage+1
  4794  0164  082C               	movf	?_CopyStageData,w
  4795  0165  00B7               	movwf	AppendStage@new_stage
  4796  0166  3182  2258  3180   	fcall	_AppendStage
  4797  0169                     l2010:	
  4798                           
  4799                           ;Pattern.c: 133:     }
  4800  0169  3001               	movlw	1
  4801  016A  0020               	movlb	0	; select bank0
  4802  016B  07CE               	addwf	InitWigwagPattern@i_844,f
  4803  016C  3000               	movlw	0
  4804  016D  3DCF               	addwfc	InitWigwagPattern@i_844+1,f
  4805  016E                     l2012:	
  4806  016E  084F               	movf	InitWigwagPattern@i_844+1,w
  4807  016F  3A80               	xorlw	128
  4808  0170  00BF               	movwf	??_InitWigwagPattern
  4809  0171  3080               	movlw	128
  4810  0172  023F               	subwf	??_InitWigwagPattern,w
  4811  0173  1D03               	skipz
  4812  0174  2977               	goto	u895
  4813  0175  3003               	movlw	3
  4814  0176  024E               	subwf	InitWigwagPattern@i_844,w
  4815  0177                     u895:	
  4816  0177  1C03               	skipc
  4817  0178  297A               	goto	u891
  4818  0179  297B               	goto	u890
  4819  017A                     u891:	
  4820  017A  2931               	goto	l2008
  4821  017B                     u890:	
  4822  017B                     l467:	
  4823  017B  0008               	return
  4824  017C                     __end_of_InitWigwagPattern:	
  4825                           
  4826                           	psect	text13
  4827  02FF                     __ptext13:	
  4828 ;; *************** function _CopyStageData *****************
  4829 ;; Defined at:
  4830 ;;		line 65 in file "Pattern.c"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;  dest            2   12[BANK0 ] PTR struct Stage
  4833 ;;		 -> stage_stash(768), NULL(0), 
  4834 ;;  source          2   14[BANK0 ] PTR struct Stage
  4835 ;;		 -> stage_stash(768), NULL(0), 
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;  i               2   19[BANK0 ] int 
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  2   12[BANK0 ] PTR struct Stage
  4840 ;; Registers used:
  4841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4847 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4851 ;;Total ram usage:        9 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; Hardware stack levels required when called:    4
  4854 ;; This function calls:
  4855 ;;		Nothing
  4856 ;; This function is called by:
  4857 ;;		_InitWigwagPattern
  4858 ;;		_CopyStage
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           
  4863                           ;psect for function _CopyStageData
  4864  02FF                     _CopyStageData:	
  4865  02FF                     l1642:	
  4866                           ;incstack = 0
  4867                           ; Regs used in _CopyStageData: [wreg-fsr1h+status,2+status,0]
  4868                           
  4869                           
  4870                           ;Pattern.c: 65: struct Stage* CopyStageData( struct Stage* dest, struct Stage* source );
      +                          Pattern.c: 66: {;Pattern.c: 67:     for( int i = 0; i < NUM_LIGHTS; i++ )
  4871  02FF  0020               	movlb	0	; select bank0
  4872  0300  01B3               	clrf	CopyStageData@i
  4873  0301  01B4               	clrf	CopyStageData@i+1
  4874  0302                     l1648:	
  4875                           
  4876                           ;Pattern.c: 68:         dest->light_states[i] = source->light_states[i];
  4877  0302  0020               	movlb	0	; select bank0
  4878  0303  0833               	movf	CopyStageData@i,w
  4879  0304  072E               	addwf	CopyStageData@source,w
  4880  0305  0086               	movwf	6
  4881  0306  0834               	movf	CopyStageData@i+1,w
  4882  0307  3D2F               	addwfc	CopyStageData@source+1,w
  4883  0308  0087               	movwf	7
  4884  0309  0801               	movf	1,w
  4885  030A  00B0               	movwf	??_CopyStageData
  4886  030B  0833               	movf	CopyStageData@i,w
  4887  030C  072C               	addwf	CopyStageData@dest,w
  4888  030D  00B1               	movwf	??_CopyStageData+1
  4889  030E  0834               	movf	CopyStageData@i+1,w
  4890  030F  3D2D               	addwfc	CopyStageData@dest+1,w
  4891  0310  00B2               	movwf	??_CopyStageData+2
  4892  0311  0831               	movf	??_CopyStageData+1,w
  4893  0312  0086               	movwf	6
  4894  0313  0832               	movf	??_CopyStageData+2,w
  4895  0314  0087               	movwf	7
  4896  0315  0830               	movf	??_CopyStageData,w
  4897  0316  0081               	movwf	1
  4898  0317                     l1650:	
  4899  0317  3001               	movlw	1
  4900  0318  07B3               	addwf	CopyStageData@i,f
  4901  0319  3000               	movlw	0
  4902  031A  3DB4               	addwfc	CopyStageData@i+1,f
  4903  031B                     l1652:	
  4904  031B  0834               	movf	CopyStageData@i+1,w
  4905  031C  3A80               	xorlw	128
  4906  031D  00B0               	movwf	??_CopyStageData
  4907  031E  3080               	movlw	128
  4908  031F  0230               	subwf	??_CopyStageData,w
  4909  0320  1D03               	skipz
  4910  0321  2B24               	goto	u505
  4911  0322  3004               	movlw	4
  4912  0323  0233               	subwf	CopyStageData@i,w
  4913  0324                     u505:	
  4914  0324  1C03               	skipc
  4915  0325  2B27               	goto	u501
  4916  0326  2B28               	goto	u500
  4917  0327                     u501:	
  4918  0327  2B02               	goto	l1648
  4919  0328                     u500:	
  4920  0328                     l1654:	
  4921                           
  4922                           ;Pattern.c: 69:     dest->time_ms = source->time_ms;
  4923  0328  0020               	movlb	0	; select bank0
  4924  0329  082E               	movf	CopyStageData@source,w
  4925  032A  0086               	movwf	6
  4926  032B  082F               	movf	CopyStageData@source+1,w
  4927  032C  0087               	movwf	7
  4928  032D  3144               	addfsr 1,4
  4929  032E  082C               	movf	CopyStageData@dest,w
  4930  032F  0084               	movwf	4
  4931  0330  082D               	movf	CopyStageData@dest+1,w
  4932  0331  0085               	movwf	5
  4933  0332  3104               	addfsr 0,4
  4934  0333  3F40               	moviw [0]fsr1
  4935  0334  3F80               	movwi [0]fsr0
  4936  0335  3F41               	moviw [1]fsr1
  4937  0336  3F81               	movwi [1]fsr0
  4938  0337                     l1656:	
  4939  0337                     l442:	
  4940                           ;Pattern.c: 70:     return dest;
  4941                           
  4942  0337  0008               	return
  4943  0338                     __end_of_CopyStageData:	
  4944                           
  4945                           	psect	text14
  4946  0338                     __ptext14:	
  4947 ;; *************** function _ConstructStage *****************
  4948 ;; Defined at:
  4949 ;;		line 49 in file "Pattern.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;  states          1    wreg     PTR const _Bool 
  4952 ;;		 -> InitWigwagPattern@right_side_states(4), InitWigwagPattern@left_side_states(4), 
  4953 ;;  time_ms         2   12[BANK0 ] const unsigned short 
  4954 ;;  next            1   14[BANK0 ] PTR struct Stage
  4955 ;;		 -> NULL(0), 
  4956 ;; Auto vars:     Size  Location     Type
  4957 ;;  states          1   15[BANK0 ] PTR const _Bool 
  4958 ;;		 -> InitWigwagPattern@right_side_states(4), InitWigwagPattern@left_side_states(4), 
  4959 ;;  new_stage       2   16[BANK0 ] PTR struct Stage
  4960 ;;		 -> stage_stash(768), NULL(0), 
  4961 ;; Return value:  Size  Location     Type
  4962 ;;                  2   12[BANK0 ] PTR struct Stage
  4963 ;; Registers used:
  4964 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4970 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4971 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4972 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4973 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;Total ram usage:        7 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    6
  4977 ;; This function calls:
  4978 ;;		_AssignLightStates
  4979 ;;		_NewStage
  4980 ;; This function is called by:
  4981 ;;		_InitWigwagPattern
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           
  4986                           ;psect for function _ConstructStage
  4987  0338                     _ConstructStage:	
  4988                           
  4989                           ;incstack = 0
  4990                           ; Regs used in _ConstructStage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4991                           ;ConstructStage@states stored from wreg
  4992  0338  0020               	movlb	0	; select bank0
  4993  0339  00AF               	movwf	ConstructStage@states
  4994  033A                     l1960:	
  4995                           
  4996                           ;Pattern.c: 49: struct Stage* ConstructStage( const _Bool states[NUM_LIGHTS], const uint
      +                           time_ms, struct Stage* next );Pattern.c: 50: {;Pattern.c: 51:     struct Stage* new_sta
      +                          ge = NewStage();
  4997  033A  3182  22B0  3183   	fcall	_NewStage
  4998  033D  0878               	movf	?_NewStage+1,w
  4999  033E  0020               	movlb	0	; select bank0
  5000  033F  00B1               	movwf	ConstructStage@new_stage+1
  5001  0340  0877               	movf	?_NewStage,w
  5002  0341  00B0               	movwf	ConstructStage@new_stage
  5003                           
  5004                           ;Pattern.c: 52:     AssignLightStates( new_stage, states );
  5005  0342  0831               	movf	ConstructStage@new_stage+1,w
  5006  0343  00F3               	movwf	AssignLightStates@stage+1
  5007  0344  0830               	movf	ConstructStage@new_stage,w
  5008  0345  00F2               	movwf	AssignLightStates@stage
  5009  0346  082F               	movf	ConstructStage@states,w
  5010  0347  00F9               	movwf	??_ConstructStage
  5011  0348  0879               	movf	??_ConstructStage,w
  5012  0349  00F4               	movwf	AssignLightStates@states
  5013  034A  3183  23BD  3183   	fcall	_AssignLightStates
  5014  034D                     l1962:	
  5015                           
  5016                           ;Pattern.c: 53:     new_stage->time_ms = time_ms;
  5017  034D  0020               	movlb	0	; select bank0
  5018  034E  0830               	movf	ConstructStage@new_stage,w
  5019  034F  0086               	movwf	6
  5020  0350  0831               	movf	ConstructStage@new_stage+1,w
  5021  0351  0087               	movwf	7
  5022  0352  3144               	addfsr 1,4
  5023  0353  082C               	movf	ConstructStage@time_ms,w
  5024  0354  3FC0               	movwi [0]fsr1
  5025  0355  082D               	movf	ConstructStage@time_ms+1,w
  5026  0356  3FC1               	movwi [1]fsr1
  5027  0357                     l1964:	
  5028                           
  5029                           ;Pattern.c: 54:     new_stage->next = next;
  5030  0357  0830               	movf	ConstructStage@new_stage,w
  5031  0358  0086               	movwf	6
  5032  0359  0831               	movf	ConstructStage@new_stage+1,w
  5033  035A  0087               	movwf	7
  5034  035B  3146               	addfsr 1,6
  5035  035C  082E               	movf	ConstructStage@next,w
  5036  035D  3FC0               	movwi [0]fsr1
  5037  035E  3000               	movlw	0
  5038  035F  3FC1               	movwi [1]fsr1
  5039  0360                     l1966:	
  5040                           
  5041                           ;Pattern.c: 55:     return new_stage;
  5042  0360  0831               	movf	ConstructStage@new_stage+1,w
  5043  0361  00AD               	movwf	?_ConstructStage+1
  5044  0362  0830               	movf	ConstructStage@new_stage,w
  5045  0363  00AC               	movwf	?_ConstructStage
  5046  0364                     l434:	
  5047  0364  0008               	return
  5048  0365                     __end_of_ConstructStage:	
  5049                           
  5050                           	psect	text15
  5051  02B0                     __ptext15:	
  5052 ;; *************** function _NewStage *****************
  5053 ;; Defined at:
  5054 ;;		line 35 in file "Pattern.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;		None
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;  init_states     4    6[BANK0 ] _Bool [4]
  5059 ;;  new_stage       2   10[BANK0 ] PTR struct Stage
  5060 ;;		 -> stage_stash(768), 
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  2    7[COMMON] PTR struct Stage
  5063 ;; Registers used:
  5064 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5071 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5072 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5074 ;;Total ram usage:       10 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:    5
  5077 ;; This function calls:
  5078 ;;		_AssignLightStates
  5079 ;; This function is called by:
  5080 ;;		_ConstructStage
  5081 ;;		_InitWigwagPattern
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           
  5086                           ;psect for function _NewStage
  5087  02B0                     _NewStage:	
  5088  02B0                     l1910:	
  5089                           ;incstack = 0
  5090                           ; Regs used in _NewStage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5091                           
  5092                           
  5093                           ;Pattern.c: 37:     if ( stage_list_iter >= MAX_STAGES )
  5094  02B0  3000               	movlw	0
  5095  02B1  0020               	movlb	0	; select bank0
  5096  02B2  025C               	subwf	_stage_list_iter+1,w
  5097  02B3  3060               	movlw	96
  5098  02B4  1903               	skipnz
  5099  02B5  025B               	subwf	_stage_list_iter,w
  5100  02B6  1C03               	skipc
  5101  02B7  2AB9               	goto	u751
  5102  02B8  2ABA               	goto	u750
  5103  02B9                     u751:	
  5104  02B9  2ABD               	goto	l1916
  5105  02BA                     u750:	
  5106  02BA                     l1912:	
  5107                           
  5108                           ;Pattern.c: 38:         return ((void*)0);
  5109  02BA  01F7               	clrf	?_NewStage
  5110  02BB  01F8               	clrf	?_NewStage+1
  5111  02BC  2AFE               	goto	l429
  5112  02BD                     l1916:	
  5113                           
  5114                           ;Pattern.c: 40:     struct Stage* new_stage = &stage_stash[ stage_list_iter++ ];
  5115  02BD  085C               	movf	_stage_list_iter+1,w
  5116  02BE  00A3               	movwf	??_NewStage+1
  5117  02BF  085B               	movf	_stage_list_iter,w
  5118  02C0  00A2               	movwf	??_NewStage
  5119  02C1  35A2               	lslf	??_NewStage,f
  5120  02C2  0DA3               	rlf	??_NewStage+1,f
  5121  02C3  35A2               	lslf	??_NewStage,f
  5122  02C4  0DA3               	rlf	??_NewStage+1,f
  5123  02C5  35A2               	lslf	??_NewStage,f
  5124  02C6  0DA3               	rlf	??_NewStage+1,f
  5125  02C7  30F0               	movlw	240
  5126  02C8  00A4               	movwf	??_NewStage+2
  5127  02C9  3020               	movlw	32
  5128  02CA  00A5               	movwf	??_NewStage+3
  5129  02CB  0822               	movf	??_NewStage,w
  5130  02CC  0724               	addwf	??_NewStage+2,w
  5131  02CD  00AA               	movwf	NewStage@new_stage
  5132  02CE  0823               	movf	??_NewStage+1,w
  5133  02CF  3D25               	addwfc	??_NewStage+3,w
  5134  02D0  00AB               	movwf	NewStage@new_stage+1
  5135  02D1                     l1918:	
  5136  02D1  3001               	movlw	1
  5137  02D2  07DB               	addwf	_stage_list_iter,f
  5138  02D3  3000               	movlw	0
  5139  02D4  3DDC               	addwfc	_stage_list_iter+1,f
  5140  02D5                     l1920:	
  5141                           
  5142                           ;Pattern.c: 41:     _Bool init_states[NUM_LIGHTS] = { 0, 0, 0, 0 };
  5143  02D5  3000               	movlw	0
  5144  02D6  00A9               	movwf	NewStage@init_states+3
  5145  02D7  3000               	movlw	0
  5146  02D8  00A8               	movwf	NewStage@init_states+2
  5147  02D9  3000               	movlw	0
  5148  02DA  00A7               	movwf	NewStage@init_states+1
  5149  02DB  3000               	movlw	0
  5150  02DC  00A6               	movwf	NewStage@init_states
  5151  02DD                     l1922:	
  5152                           
  5153                           ;Pattern.c: 42:     AssignLightStates( new_stage, init_states );
  5154  02DD  082B               	movf	NewStage@new_stage+1,w
  5155  02DE  00F3               	movwf	AssignLightStates@stage+1
  5156  02DF  082A               	movf	NewStage@new_stage,w
  5157  02E0  00F2               	movwf	AssignLightStates@stage
  5158  02E1  3026               	movlw	(low (NewStage@init_states| 0))& (0+255)
  5159  02E2  00A2               	movwf	??_NewStage
  5160  02E3  0822               	movf	??_NewStage,w
  5161  02E4  00F4               	movwf	AssignLightStates@states
  5162  02E5  3183  23BD  3182   	fcall	_AssignLightStates
  5163  02E8                     l1924:	
  5164                           
  5165                           ;Pattern.c: 43:     new_stage->time_ms = 80UL;
  5166  02E8  0020               	movlb	0	; select bank0
  5167  02E9  082A               	movf	NewStage@new_stage,w
  5168  02EA  0086               	movwf	6
  5169  02EB  082B               	movf	NewStage@new_stage+1,w
  5170  02EC  0087               	movwf	7
  5171  02ED  3144               	addfsr 1,4
  5172  02EE  3050               	movlw	80
  5173  02EF  3FC0               	movwi [0]fsr1
  5174  02F0  3000               	movlw	0
  5175  02F1  3FC1               	movwi [1]fsr1
  5176  02F2                     l1926:	
  5177                           
  5178                           ;Pattern.c: 44:     new_stage->next = ((void*)0);
  5179  02F2  082A               	movf	NewStage@new_stage,w
  5180  02F3  0086               	movwf	6
  5181  02F4  082B               	movf	NewStage@new_stage+1,w
  5182  02F5  0087               	movwf	7
  5183  02F6  3146               	addfsr 1,6
  5184  02F7  3000               	movlw	0
  5185  02F8  3FC0               	movwi [0]fsr1
  5186  02F9  3FC1               	movwi [1]fsr1
  5187  02FA                     l1928:	
  5188                           
  5189                           ;Pattern.c: 46:     return new_stage;
  5190  02FA  082B               	movf	NewStage@new_stage+1,w
  5191  02FB  00F8               	movwf	?_NewStage+1
  5192  02FC  082A               	movf	NewStage@new_stage,w
  5193  02FD  00F7               	movwf	?_NewStage
  5194  02FE                     l429:	
  5195  02FE  0008               	return
  5196  02FF                     __end_of_NewStage:	
  5197                           
  5198                           	psect	text16
  5199  03BD                     __ptext16:	
  5200 ;; *************** function _AssignLightStates *****************
  5201 ;; Defined at:
  5202 ;;		line 27 in file "Pattern.c"
  5203 ;; Parameters:    Size  Location     Type
  5204 ;;  stage           2    2[COMMON] PTR struct Stage
  5205 ;;		 -> stage_stash(768), NULL(0), 
  5206 ;;  states          1    4[COMMON] PTR const _Bool 
  5207 ;;		 -> InitWigwagPattern@right_side_states(4), InitWigwagPattern@left_side_states(4), NewStage@init_states(4), 
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;  i               2    0[BANK0 ] unsigned short 
  5210 ;; Return value:  Size  Location     Type
  5211 ;;                  1    wreg      void 
  5212 ;; Registers used:
  5213 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5219 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5220 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5221 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5222 ;;      Totals:         7       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5223 ;;Total ram usage:        9 bytes
  5224 ;; Hardware stack levels used:    1
  5225 ;; Hardware stack levels required when called:    4
  5226 ;; This function calls:
  5227 ;;		Nothing
  5228 ;; This function is called by:
  5229 ;;		_NewStage
  5230 ;;		_ConstructStage
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234                           
  5235                           ;psect for function _AssignLightStates
  5236  03BD                     _AssignLightStates:	
  5237  03BD                     l1898:	
  5238                           ;incstack = 0
  5239                           ; Regs used in _AssignLightStates: [wreg+fsr1l+fsr1h+status,2+status,0]
  5240                           
  5241                           
  5242                           ;Pattern.c: 27: void AssignLightStates( struct Stage* stage, const _Bool states[ NUM_LIG
      +                          HTS ] );Pattern.c: 28: {;Pattern.c: 29:     for( uint i = 0; i < NUM_LIGHTS; i++ )
  5243  03BD  0020               	movlb	0	; select bank0
  5244  03BE  01A0               	clrf	AssignLightStates@i
  5245  03BF  01A1               	clrf	AssignLightStates@i+1
  5246  03C0                     l1904:	
  5247                           
  5248                           ;Pattern.c: 30:     {;Pattern.c: 31:         stage->light_states[i] = states[i];
  5249  03C0  0820               	movf	AssignLightStates@i,w
  5250  03C1  0774               	addwf	AssignLightStates@states,w
  5251  03C2  00F5               	movwf	??_AssignLightStates
  5252  03C3  0875               	movf	??_AssignLightStates,w
  5253  03C4  0086               	movwf	6
  5254  03C5  0187               	clrf	7
  5255  03C6  0801               	movf	1,w
  5256  03C7  00F6               	movwf	??_AssignLightStates+1
  5257  03C8  0820               	movf	AssignLightStates@i,w
  5258  03C9  0772               	addwf	AssignLightStates@stage,w
  5259  03CA  00F7               	movwf	??_AssignLightStates+2
  5260  03CB  0821               	movf	AssignLightStates@i+1,w
  5261  03CC  3D73               	addwfc	AssignLightStates@stage+1,w
  5262  03CD  00F8               	movwf	??_AssignLightStates+3
  5263  03CE  0877               	movf	??_AssignLightStates+2,w
  5264  03CF  0086               	movwf	6
  5265  03D0  0878               	movf	??_AssignLightStates+3,w
  5266  03D1  0087               	movwf	7
  5267  03D2  0876               	movf	??_AssignLightStates+1,w
  5268  03D3  0081               	movwf	1
  5269  03D4                     l1906:	
  5270                           
  5271                           ;Pattern.c: 32:     }
  5272  03D4  3001               	movlw	1
  5273  03D5  07A0               	addwf	AssignLightStates@i,f
  5274  03D6  3000               	movlw	0
  5275  03D7  3DA1               	addwfc	AssignLightStates@i+1,f
  5276  03D8                     l1908:	
  5277  03D8  3000               	movlw	0
  5278  03D9  0221               	subwf	AssignLightStates@i+1,w
  5279  03DA  3004               	movlw	4
  5280  03DB  1903               	skipnz
  5281  03DC  0220               	subwf	AssignLightStates@i,w
  5282  03DD  1C03               	skipc
  5283  03DE  2BE0               	goto	u741
  5284  03DF  2BE1               	goto	u740
  5285  03E0                     u741:	
  5286  03E0  2BC0               	goto	l1904
  5287  03E1                     u740:	
  5288  03E1                     l425:	
  5289  03E1  0008               	return
  5290  03E2                     __end_of_AssignLightStates:	
  5291                           
  5292                           	psect	text17
  5293  0258                     __ptext17:	
  5294 ;; *************** function _AppendStage *****************
  5295 ;; Defined at:
  5296 ;;		line 73 in file "Pattern.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;  head            2   21[BANK0 ] PTR struct Stage
  5299 ;;		 -> stage_stash(768), NULL(0), 
  5300 ;;  new_stage       2   23[BANK0 ] PTR struct Stage
  5301 ;;		 -> stage_stash(768), NULL(0), 
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;  last_stage      2   27[BANK0 ] PTR struct Stage
  5304 ;;		 -> stage_stash(768), NULL(0), 
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  1    wreg      void 
  5307 ;; Registers used:
  5308 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5314 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5317 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5318 ;;Total ram usage:        8 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:    4
  5321 ;; This function calls:
  5322 ;;		Nothing
  5323 ;; This function is called by:
  5324 ;;		_InitWigwagPattern
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           
  5329                           ;psect for function _AppendStage
  5330  0258                     _AppendStage:	
  5331  0258                     l1660:	
  5332                           ;incstack = 0
  5333                           ; Regs used in _AppendStage: [wreg+fsr1l+fsr1h+status,2+status,0]
  5334                           
  5335                           
  5336                           ;Pattern.c: 73: void AppendStage( struct Stage* head, struct Stage* new_stage );Pattern.
      +                          c: 74: {;Pattern.c: 75:     if ( head->next == ((void*)0) )
  5337  0258  0020               	movlb	0	; select bank0
  5338  0259  0835               	movf	AppendStage@head,w
  5339  025A  0086               	movwf	6
  5340  025B  0836               	movf	AppendStage@head+1,w
  5341  025C  0087               	movwf	7
  5342  025D  3146               	addfsr 1,6
  5343  025E  0016               	moviw fsr1++
  5344  025F  0401               	iorwf	1,w
  5345  0260  1D03               	btfss	3,2
  5346  0261  2A63               	goto	u511
  5347  0262  2A64               	goto	u510
  5348  0263                     u511:	
  5349  0263  2A77               	goto	l1664
  5350  0264                     u510:	
  5351  0264                     l1662:	
  5352                           
  5353                           ;Pattern.c: 76:     {;Pattern.c: 77:         head->next = new_stage;
  5354  0264  0835               	movf	AppendStage@head,w
  5355  0265  0086               	movwf	6
  5356  0266  0836               	movf	AppendStage@head+1,w
  5357  0267  0087               	movwf	7
  5358  0268  3146               	addfsr 1,6
  5359  0269  0837               	movf	AppendStage@new_stage,w
  5360  026A  3FC0               	movwi [0]fsr1
  5361  026B  0838               	movf	AppendStage@new_stage+1,w
  5362  026C  3FC1               	movwi [1]fsr1
  5363                           
  5364                           ;Pattern.c: 78:         new_stage->next = head;
  5365  026D  0837               	movf	AppendStage@new_stage,w
  5366  026E  0086               	movwf	6
  5367  026F  0838               	movf	AppendStage@new_stage+1,w
  5368  0270  0087               	movwf	7
  5369  0271  3146               	addfsr 1,6
  5370  0272  0835               	movf	AppendStage@head,w
  5371  0273  3FC0               	movwi [0]fsr1
  5372  0274  0836               	movf	AppendStage@head+1,w
  5373  0275  3FC1               	movwi [1]fsr1
  5374                           
  5375                           ;Pattern.c: 79:     }
  5376  0276  2AAF               	goto	l450
  5377  0277                     l1664:	
  5378                           
  5379                           ;Pattern.c: 81:     {;Pattern.c: 82:         struct Stage* last_stage = head->next;
  5380  0277  0835               	movf	AppendStage@head,w
  5381  0278  0086               	movwf	6
  5382  0279  0836               	movf	AppendStage@head+1,w
  5383  027A  0087               	movwf	7
  5384  027B  3146               	addfsr 1,6
  5385  027C  3F40               	moviw [0]fsr1
  5386  027D  00BB               	movwf	AppendStage@last_stage
  5387  027E  3F41               	moviw [1]fsr1
  5388  027F  00BC               	movwf	AppendStage@last_stage+1
  5389                           
  5390                           ;Pattern.c: 83:         while( last_stage->next != head )
  5391  0280  2A8A               	goto	l1668
  5392  0281                     l1666:	
  5393                           
  5394                           ;Pattern.c: 84:             last_stage = last_stage->next;
  5395  0281  083B               	movf	AppendStage@last_stage,w
  5396  0282  0086               	movwf	6
  5397  0283  083C               	movf	AppendStage@last_stage+1,w
  5398  0284  0087               	movwf	7
  5399  0285  3146               	addfsr 1,6
  5400  0286  3F40               	moviw [0]fsr1
  5401  0287  00BB               	movwf	AppendStage@last_stage
  5402  0288  3F41               	moviw [1]fsr1
  5403  0289  00BC               	movwf	AppendStage@last_stage+1
  5404  028A                     l1668:	
  5405                           
  5406                           ;Pattern.c: 83:         while( last_stage->next != head )
  5407  028A  083B               	movf	AppendStage@last_stage,w
  5408  028B  0086               	movwf	6
  5409  028C  083C               	movf	AppendStage@last_stage+1,w
  5410  028D  0087               	movwf	7
  5411  028E  3146               	addfsr 1,6
  5412  028F  3F40               	moviw [0]fsr1
  5413  0290  00B9               	movwf	??_AppendStage
  5414  0291  3F41               	moviw [1]fsr1
  5415  0292  00BA               	movwf	??_AppendStage+1
  5416  0293  0836               	movf	AppendStage@head+1,w
  5417  0294  063A               	xorwf	??_AppendStage+1,w
  5418  0295  1D03               	skipz
  5419  0296  2A99               	goto	u525
  5420  0297  0835               	movf	AppendStage@head,w
  5421  0298  0639               	xorwf	??_AppendStage,w
  5422  0299                     u525:	
  5423  0299  1D03               	skipz
  5424  029A  2A9C               	goto	u521
  5425  029B  2A9D               	goto	u520
  5426  029C                     u521:	
  5427  029C  2A81               	goto	l1666
  5428  029D                     u520:	
  5429  029D                     l1670:	
  5430                           
  5431                           ;Pattern.c: 87:         last_stage->next = new_stage;
  5432  029D  083B               	movf	AppendStage@last_stage,w
  5433  029E  0086               	movwf	6
  5434  029F  083C               	movf	AppendStage@last_stage+1,w
  5435  02A0  0087               	movwf	7
  5436  02A1  3146               	addfsr 1,6
  5437  02A2  0837               	movf	AppendStage@new_stage,w
  5438  02A3  3FC0               	movwi [0]fsr1
  5439  02A4  0838               	movf	AppendStage@new_stage+1,w
  5440  02A5  3FC1               	movwi [1]fsr1
  5441                           
  5442                           ;Pattern.c: 88:         new_stage->next = head;
  5443  02A6  0837               	movf	AppendStage@new_stage,w
  5444  02A7  0086               	movwf	6
  5445  02A8  0838               	movf	AppendStage@new_stage+1,w
  5446  02A9  0087               	movwf	7
  5447  02AA  3146               	addfsr 1,6
  5448  02AB  0835               	movf	AppendStage@head,w
  5449  02AC  3FC0               	movwi [0]fsr1
  5450  02AD  0836               	movf	AppendStage@head+1,w
  5451  02AE  3FC1               	movwi [1]fsr1
  5452  02AF                     l450:	
  5453  02AF  0008               	return
  5454  02B0                     __end_of_AppendStage:	
  5455                           
  5456                           	psect	text18
  5457  0365                     __ptext18:	
  5458 ;; *************** function _PatternCycleInputChanged *****************
  5459 ;; Defined at:
  5460 ;;		line 21 in file "TurnSignal.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;		None
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;  delay_count     2    4[COMMON] unsigned short 
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  1    wreg      _Bool 
  5467 ;; Registers used:
  5468 ;;		wreg, status,2, status,0
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5475 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5476 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5477 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5478 ;;Total ram usage:        4 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    4
  5481 ;; This function calls:
  5482 ;;		Nothing
  5483 ;; This function is called by:
  5484 ;;		_main
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           
  5489                           ;psect for function _PatternCycleInputChanged
  5490  0365                     _PatternCycleInputChanged:	
  5491  0365                     l1776:	
  5492                           ;incstack = 0
  5493                           ; Regs used in _PatternCycleInputChanged: [wreg+status,2+status,0]
  5494                           
  5495                           
  5496                           ;TurnSignal.c: 23:     if ( cur_pc_input_state != last_pc_input_state )
  5497  0365  087B               	movf	_cur_pc_input_state,w
  5498  0366  067A               	xorwf	_last_pc_input_state,w
  5499  0367  1903               	skipnz
  5500  0368  2B6A               	goto	u591
  5501  0369  2B6B               	goto	u590
  5502  036A                     u591:	
  5503  036A  2B7E               	goto	l1784
  5504  036B                     u590:	
  5505  036B                     l1778:	
  5506                           
  5507                           ;TurnSignal.c: 24:     {;TurnSignal.c: 25:         uint delay_count = 0;
  5508  036B  01F4               	clrf	PatternCycleInputChanged@delay_count
  5509  036C  01F5               	clrf	PatternCycleInputChanged@delay_count+1
  5510                           
  5511                           ;TurnSignal.c: 27:         while ( delay_count++ < 3 )
  5512  036D  2B80               	goto	l1788
  5513  036E                     l1780:	
  5514                           
  5515                           ;TurnSignal.c: 28:         {;TurnSignal.c: 29:             _delay((unsigned long)((10)*(
      +                          1000000/4000.0)));
  5516  036E  3004               	movlw	4
  5517  036F  00F2               	movwf	??_PatternCycleInputChanged
  5518  0370  303E               	movlw	62
  5519  0371                     u927:	
  5520  0371  0B89               	decfsz	9,f
  5521  0372  2B71               	goto	u927
  5522  0373  0BF2               	decfsz	??_PatternCycleInputChanged,f
  5523  0374  2B71               	goto	u927
  5524  0375                     l1782:	
  5525                           
  5526                           ;TurnSignal.c: 31:             if( PORTCbits.RC5 != cur_pc_input_state )
  5527  0375  0020               	movlb	0	; select bank0
  5528  0376  0E0E               	swapf	14,w	;volatile
  5529  0377  0C89               	rrf	9,f
  5530  0378  3901               	andlw	1
  5531  0379  067B               	xorwf	_cur_pc_input_state,w
  5532  037A  1903               	skipnz
  5533  037B  2B7D               	goto	u601
  5534  037C  2B7E               	goto	u600
  5535  037D                     u601:	
  5536  037D  2B80               	goto	l1788
  5537  037E                     u600:	
  5538  037E                     l1784:	
  5539                           
  5540                           ;TurnSignal.c: 32:             {;TurnSignal.c: 33:                 return 0;
  5541  037E  3000               	movlw	0
  5542  037F  2B91               	goto	l398
  5543  0380                     l1788:	
  5544                           
  5545                           ;TurnSignal.c: 27:         while ( delay_count++ < 3 )
  5546  0380  0875               	movf	PatternCycleInputChanged@delay_count+1,w
  5547  0381  00F3               	movwf	??_PatternCycleInputChanged+1
  5548  0382  0874               	movf	PatternCycleInputChanged@delay_count,w
  5549  0383  00F2               	movwf	??_PatternCycleInputChanged
  5550  0384  0AF4               	incf	PatternCycleInputChanged@delay_count,f
  5551  0385  1903               	skipnz
  5552  0386  0AF5               	incf	PatternCycleInputChanged@delay_count+1,f
  5553  0387  3000               	movlw	0
  5554  0388  0273               	subwf	??_PatternCycleInputChanged+1,w
  5555  0389  3003               	movlw	3
  5556  038A  1903               	skipnz
  5557  038B  0272               	subwf	??_PatternCycleInputChanged,w
  5558  038C  1C03               	skipc
  5559  038D  2B8F               	goto	u611
  5560  038E  2B90               	goto	u610
  5561  038F                     u611:	
  5562  038F  2B6E               	goto	l1780
  5563  0390                     u610:	
  5564  0390                     l1794:	
  5565                           
  5566                           ;TurnSignal.c: 40:     return 1;
  5567  0390  3001               	movlw	1
  5568  0391                     l398:	
  5569  0391  0008               	return
  5570  0392                     __end_of_PatternCycleInputChanged:	
  5571                           
  5572                           	psect	text19
  5573  01ED                     __ptext19:	
  5574 ;; *************** function _FlashPattern *****************
  5575 ;; Defined at:
  5576 ;;		line 11 in file "PatternFlasher.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;  pattern         2    6[COMMON] PTR struct Pattern
  5579 ;;		 -> Wigwag(3), 
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;  current_time    2    8[COMMON] unsigned short 
  5582 ;; Return value:  Size  Location     Type
  5583 ;;                  1    wreg      void 
  5584 ;; Registers used:
  5585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5586 ;; Tracked objects:
  5587 ;;		On entry : 0/0
  5588 ;;		On exit  : 0/0
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5591 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5592 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;Total ram usage:        8 bytes
  5596 ;; Hardware stack levels used:    1
  5597 ;; Hardware stack levels required when called:    5
  5598 ;; This function calls:
  5599 ;;		_SetLight
  5600 ;; This function is called by:
  5601 ;;		_main
  5602 ;; This function uses a non-reentrant model
  5603 ;;
  5604                           
  5605                           
  5606                           ;psect for function _FlashPattern
  5607  01ED                     _FlashPattern:	
  5608  01ED                     l2028:	
  5609                           ;incstack = 0
  5610                           ; Regs used in _FlashPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5611                           
  5612                           
  5613                           ;PatternFlasher.c: 11: void FlashPattern( struct Pattern* pattern );PatternFlasher.c: 12
      +                          : {;PatternFlasher.c: 13:     uint current_time = cur_ms;
  5614  01ED  0020               	movlb	0	; select bank0
  5615  01EE  0862               	movf	_cur_ms+1,w	;volatile
  5616  01EF  00F9               	movwf	FlashPattern@current_time+1
  5617  01F0  0861               	movf	_cur_ms,w	;volatile
  5618  01F1  00F8               	movwf	FlashPattern@current_time
  5619  01F2                     l2030:	
  5620                           
  5621                           ;PatternFlasher.c: 17:     if ( current_time - start_time > current_stage->time_ms )
  5622  01F2  0855               	movf	_start_time,w
  5623  01F3  0278               	subwf	FlashPattern@current_time,w
  5624  01F4  00A0               	movwf	??_FlashPattern
  5625  01F5  0856               	movf	_start_time+1,w
  5626  01F6  3B79               	subwfb	FlashPattern@current_time+1,w
  5627  01F7  00A1               	movwf	??_FlashPattern+1
  5628  01F8  0857               	movf	_current_stage,w
  5629  01F9  0086               	movwf	6
  5630  01FA  0858               	movf	_current_stage+1,w
  5631  01FB  0087               	movwf	7
  5632  01FC  3144               	addfsr 1,4
  5633  01FD  3F40               	moviw [0]fsr1
  5634  01FE  00A2               	movwf	??_FlashPattern+2
  5635  01FF  3F41               	moviw [1]fsr1
  5636  0200  00A3               	movwf	??_FlashPattern+3
  5637  0201  0821               	movf	??_FlashPattern+1,w
  5638  0202  0223               	subwf	??_FlashPattern+3,w
  5639  0203  1D03               	skipz
  5640  0204  2A07               	goto	u905
  5641  0205  0820               	movf	??_FlashPattern,w
  5642  0206  0222               	subwf	??_FlashPattern+2,w
  5643  0207                     u905:	
  5644  0207  1803               	skipnc
  5645  0208  2A0A               	goto	u901
  5646  0209  2A0B               	goto	u900
  5647  020A                     u901:	
  5648  020A  2A1A               	goto	l2038
  5649  020B                     u900:	
  5650  020B                     l2032:	
  5651                           
  5652                           ;PatternFlasher.c: 18:     {;PatternFlasher.c: 19:         current_stage = current_stage
      +                          ->next;
  5653  020B  0857               	movf	_current_stage,w
  5654  020C  0086               	movwf	6
  5655  020D  0858               	movf	_current_stage+1,w
  5656  020E  0087               	movwf	7
  5657  020F  3146               	addfsr 1,6
  5658  0210  3F40               	moviw [0]fsr1
  5659  0211  00D7               	movwf	_current_stage
  5660  0212  3F41               	moviw [1]fsr1
  5661  0213  00D8               	movwf	_current_stage+1
  5662  0214                     l2034:	
  5663                           
  5664                           ;PatternFlasher.c: 20:         start_time = current_time;
  5665  0214  0879               	movf	FlashPattern@current_time+1,w
  5666  0215  00D6               	movwf	_start_time+1
  5667  0216  0878               	movf	FlashPattern@current_time,w
  5668  0217  00D5               	movwf	_start_time
  5669  0218                     l2036:	
  5670                           
  5671                           ;PatternFlasher.c: 21:         update_stage = 1;
  5672  0218  01E5               	clrf	_update_stage
  5673  0219  0AE5               	incf	_update_stage,f
  5674  021A                     l2038:	
  5675                           
  5676                           ;PatternFlasher.c: 25:     if ( update_stage == 1 )
  5677  021A  0365               	decf	_update_stage,w
  5678  021B  1D03               	btfss	3,2
  5679  021C  2A1E               	goto	u911
  5680  021D  2A1F               	goto	u910
  5681  021E                     u911:	
  5682  021E  2A57               	goto	l506
  5683  021F                     u910:	
  5684  021F                     l2040:	
  5685                           
  5686                           ;PatternFlasher.c: 26:     {;PatternFlasher.c: 27:         SetLight( L1, current_stage->
      +                          light_states[L1] );
  5687  021F  0857               	movf	_current_stage,w
  5688  0220  0086               	movwf	6
  5689  0221  0858               	movf	_current_stage+1,w
  5690  0222  0087               	movwf	7
  5691  0223  0801               	movf	1,w
  5692  0224  00A0               	movwf	??_FlashPattern
  5693  0225  0820               	movf	??_FlashPattern,w
  5694  0226  00F2               	movwf	SetLight@state
  5695  0227  3000               	movlw	0
  5696  0228  3181  217C  3181   	fcall	_SetLight
  5697                           
  5698                           ;PatternFlasher.c: 28:         SetLight( L2, current_stage->light_states[L2] );
  5699  022B  0020               	movlb	0	; select bank0
  5700  022C  0857               	movf	_current_stage,w
  5701  022D  0086               	movwf	6
  5702  022E  0858               	movf	_current_stage+1,w
  5703  022F  0087               	movwf	7
  5704  0230  3141               	addfsr 1,1
  5705  0231  0801               	movf	1,w
  5706  0232  00A0               	movwf	??_FlashPattern
  5707  0233  0820               	movf	??_FlashPattern,w
  5708  0234  00F2               	movwf	SetLight@state
  5709  0235  3001               	movlw	1
  5710  0236  3181  217C  3181   	fcall	_SetLight
  5711                           
  5712                           ;PatternFlasher.c: 29:         SetLight( L3, current_stage->light_states[L3] );
  5713  0239  0020               	movlb	0	; select bank0
  5714  023A  0857               	movf	_current_stage,w
  5715  023B  0086               	movwf	6
  5716  023C  0858               	movf	_current_stage+1,w
  5717  023D  0087               	movwf	7
  5718  023E  3142               	addfsr 1,2
  5719  023F  0801               	movf	1,w
  5720  0240  00A0               	movwf	??_FlashPattern
  5721  0241  0820               	movf	??_FlashPattern,w
  5722  0242  00F2               	movwf	SetLight@state
  5723  0243  3002               	movlw	2
  5724  0244  3181  217C  3181   	fcall	_SetLight
  5725                           
  5726                           ;PatternFlasher.c: 30:         SetLight( L4, current_stage->light_states[L4] );
  5727  0247  0020               	movlb	0	; select bank0
  5728  0248  0857               	movf	_current_stage,w
  5729  0249  0086               	movwf	6
  5730  024A  0858               	movf	_current_stage+1,w
  5731  024B  0087               	movwf	7
  5732  024C  3143               	addfsr 1,3
  5733  024D  0801               	movf	1,w
  5734  024E  00A0               	movwf	??_FlashPattern
  5735  024F  0820               	movf	??_FlashPattern,w
  5736  0250  00F2               	movwf	SetLight@state
  5737  0251  3003               	movlw	3
  5738  0252  3181  217C  3181   	fcall	_SetLight
  5739  0255                     l2042:	
  5740                           
  5741                           ;PatternFlasher.c: 31:         update_stage = 0;
  5742  0255  0020               	movlb	0	; select bank0
  5743  0256  01E5               	clrf	_update_stage
  5744  0257                     l506:	
  5745  0257  0008               	return
  5746  0258                     __end_of_FlashPattern:	
  5747                           
  5748                           	psect	text20
  5749  017C                     __ptext20:	
  5750 ;; *************** function _SetLight *****************
  5751 ;; Defined at:
  5752 ;;		line 12 in file "Lights.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;  light           1    wreg     const enum E6336
  5755 ;;  state           1    2[COMMON] const _Bool 
  5756 ;; Auto vars:     Size  Location     Type
  5757 ;;  light           1    5[COMMON] const enum E6336
  5758 ;; Return value:  Size  Location     Type
  5759 ;;                  1    wreg      void 
  5760 ;; Registers used:
  5761 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5762 ;; Tracked objects:
  5763 ;;		On entry : 0/0
  5764 ;;		On exit  : 0/0
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5767 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;Total ram usage:        4 bytes
  5772 ;; Hardware stack levels used:    1
  5773 ;; Hardware stack levels required when called:    4
  5774 ;; This function calls:
  5775 ;;		Nothing
  5776 ;; This function is called by:
  5777 ;;		_SetOutputs
  5778 ;;		_FlashPattern
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           
  5783                           ;psect for function _SetLight
  5784  017C                     _SetLight:	
  5785                           
  5786                           ;incstack = 0
  5787                           ; Regs used in _SetLight: [wreg-fsr0h+status,2+status,0]
  5788                           ;SetLight@light stored from wreg
  5789  017C  00F5               	movwf	SetLight@light
  5790  017D                     l1932:	
  5791                           
  5792                           ;Lights.c: 12: void SetLight( const enum Light light, const _Bool state );Lights.c: 13: 
      +                          {;Lights.c: 15:     switch ( light )
  5793  017D  29D6               	goto	l1954
  5794  017E                     l1934:	
  5795                           
  5796                           ;Lights.c: 18:             if ( PORTCbits.RC1 != state )
  5797  017E  0020               	movlb	0	; select bank0
  5798  017F  0C0E               	rrf	14,w	;volatile
  5799  0180  3901               	andlw	1
  5800  0181  0672               	xorwf	SetLight@state,w
  5801  0182  1903               	skipnz
  5802  0183  2985               	goto	u761
  5803  0184  2986               	goto	u760
  5804  0185                     u761:	
  5805  0185  29EC               	goto	l361
  5806  0186                     u760:	
  5807  0186                     l1936:	
  5808  0186  1003               	clrc
  5809  0187  0022               	movlb	2	; select bank2
  5810  0188  1C8E               	btfss	14,1	;volatile
  5811  0189  1403               	setc
  5812  018A  1803               	btfsc	3,0
  5813  018B  298D               	goto	u771
  5814  018C  2990               	goto	u770
  5815  018D                     u771:	
  5816  018D  0022               	movlb	2	; select bank2
  5817  018E  148E               	bsf	14,1	;volatile
  5818  018F  2992               	goto	u784
  5819  0190                     u770:	
  5820  0190  0022               	movlb	2	; select bank2
  5821  0191  108E               	bcf	14,1	;volatile
  5822  0192                     u784:	
  5823  0192  29EC               	goto	l361
  5824  0193                     l1938:	
  5825                           
  5826                           ;Lights.c: 22:             if ( PORTCbits.RC2 != state )
  5827  0193  0020               	movlb	0	; select bank0
  5828  0194  0C0E               	rrf	14,w	;volatile
  5829  0195  0C89               	rrf	9,f
  5830  0196  3901               	andlw	1
  5831  0197  0672               	xorwf	SetLight@state,w
  5832  0198  1903               	skipnz
  5833  0199  299B               	goto	u791
  5834  019A  299C               	goto	u790
  5835  019B                     u791:	
  5836  019B  29EC               	goto	l361
  5837  019C                     u790:	
  5838  019C                     l1940:	
  5839  019C  1003               	clrc
  5840  019D  0022               	movlb	2	; select bank2
  5841  019E  1D0E               	btfss	14,2	;volatile
  5842  019F  1403               	setc
  5843  01A0  1803               	btfsc	3,0
  5844  01A1  29A3               	goto	u801
  5845  01A2  29A6               	goto	u800
  5846  01A3                     u801:	
  5847  01A3  0022               	movlb	2	; select bank2
  5848  01A4  150E               	bsf	14,2	;volatile
  5849  01A5  29A8               	goto	u814
  5850  01A6                     u800:	
  5851  01A6  0022               	movlb	2	; select bank2
  5852  01A7  110E               	bcf	14,2	;volatile
  5853  01A8                     u814:	
  5854  01A8  29EC               	goto	l361
  5855  01A9                     l1942:	
  5856                           
  5857                           ;Lights.c: 26:             if ( PORTCbits.RC3 != state )
  5858  01A9  0020               	movlb	0	; select bank0
  5859  01AA  0C0E               	rrf	14,w	;volatile
  5860  01AB  00F3               	movwf	??_SetLight
  5861  01AC  0CF3               	rrf	??_SetLight,f
  5862  01AD  0C73               	rrf	??_SetLight,w
  5863  01AE  3901               	andlw	1
  5864  01AF  0672               	xorwf	SetLight@state,w
  5865  01B0  1903               	skipnz
  5866  01B1  29B3               	goto	u821
  5867  01B2  29B4               	goto	u820
  5868  01B3                     u821:	
  5869  01B3  29EC               	goto	l361
  5870  01B4                     u820:	
  5871  01B4                     l1944:	
  5872  01B4  1003               	clrc
  5873  01B5  0022               	movlb	2	; select bank2
  5874  01B6  1D8E               	btfss	14,3	;volatile
  5875  01B7  1403               	setc
  5876  01B8  1803               	btfsc	3,0
  5877  01B9  29BB               	goto	u831
  5878  01BA  29BE               	goto	u830
  5879  01BB                     u831:	
  5880  01BB  0022               	movlb	2	; select bank2
  5881  01BC  158E               	bsf	14,3	;volatile
  5882  01BD  29C0               	goto	u844
  5883  01BE                     u830:	
  5884  01BE  0022               	movlb	2	; select bank2
  5885  01BF  118E               	bcf	14,3	;volatile
  5886  01C0                     u844:	
  5887  01C0  29EC               	goto	l361
  5888  01C1                     l1946:	
  5889                           
  5890                           ;Lights.c: 31:             if ( PORTCbits.RC4 != state )
  5891  01C1  0020               	movlb	0	; select bank0
  5892  01C2  0E0E               	swapf	14,w	;volatile
  5893  01C3  3901               	andlw	1
  5894  01C4  0672               	xorwf	SetLight@state,w
  5895  01C5  1903               	skipnz
  5896  01C6  29C8               	goto	u851
  5897  01C7  29C9               	goto	u850
  5898  01C8                     u851:	
  5899  01C8  29EC               	goto	l361
  5900  01C9                     u850:	
  5901  01C9                     l1948:	
  5902  01C9  1003               	clrc
  5903  01CA  0022               	movlb	2	; select bank2
  5904  01CB  1E0E               	btfss	14,4	;volatile
  5905  01CC  1403               	setc
  5906  01CD  1803               	btfsc	3,0
  5907  01CE  29D0               	goto	u861
  5908  01CF  29D3               	goto	u860
  5909  01D0                     u861:	
  5910  01D0  0022               	movlb	2	; select bank2
  5911  01D1  160E               	bsf	14,4	;volatile
  5912  01D2  29D5               	goto	u874
  5913  01D3                     u860:	
  5914  01D3  0022               	movlb	2	; select bank2
  5915  01D4  120E               	bcf	14,4	;volatile
  5916  01D5                     u874:	
  5917  01D5  29EC               	goto	l361
  5918  01D6                     l1954:	
  5919  01D6  0875               	movf	SetLight@light,w
  5920  01D7  00F3               	movwf	??_SetLight
  5921  01D8  01F4               	clrf	??_SetLight+1
  5922                           
  5923                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5924                           ; Switch size 1, requested type "simple"
  5925                           ; Number of cases is 1, Range of values is 0 to 0
  5926                           ; switch strategies available:
  5927                           ; Name         Instructions Cycles
  5928                           ; simple_byte            4     3 (average)
  5929                           ; direct_byte            8     6 (fixed)
  5930                           ; jumptable            260     6 (fixed)
  5931                           ;	Chosen strategy is simple_byte
  5932  01D9  0874               	movf	??_SetLight+1,w
  5933  01DA  3A00               	xorlw	0	; case 0
  5934  01DB  1903               	skipnz
  5935  01DC  29DE               	goto	l2080
  5936  01DD  29C1               	goto	l1946
  5937  01DE                     l2080:	
  5938                           
  5939                           ; Switch size 1, requested type "simple"
  5940                           ; Number of cases is 4, Range of values is 0 to 3
  5941                           ; switch strategies available:
  5942                           ; Name         Instructions Cycles
  5943                           ; simple_byte           13     7 (average)
  5944                           ; direct_byte           14     6 (fixed)
  5945                           ; jumptable            260     6 (fixed)
  5946                           ;	Chosen strategy is simple_byte
  5947  01DE  0873               	movf	??_SetLight,w
  5948  01DF  3A00               	xorlw	0	; case 0
  5949  01E0  1903               	skipnz
  5950  01E1  297E               	goto	l1934
  5951  01E2  3A01               	xorlw	1	; case 1
  5952  01E3  1903               	skipnz
  5953  01E4  2993               	goto	l1938
  5954  01E5  3A03               	xorlw	3	; case 2
  5955  01E6  1903               	skipnz
  5956  01E7  29A9               	goto	l1942
  5957  01E8  3A01               	xorlw	1	; case 3
  5958  01E9  1903               	skipnz
  5959  01EA  29C1               	goto	l1946
  5960  01EB  29C1               	goto	l1946
  5961  01EC                     l361:	
  5962  01EC  0008               	return
  5963  01ED                     __end_of_SetLight:	
  5964                           
  5965                           	psect	intentry
  5966  0004                     __pintentry:	
  5967 ;; *************** function _INTERRUPT_InterruptManager *****************
  5968 ;; Defined at:
  5969 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;		None
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;		None
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  1    wreg      void 
  5976 ;; Registers used:
  5977 ;;		wreg, status,2, status,0, pclath, cstack
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5987 ;;Total ram usage:        0 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    3
  5990 ;; This function calls:
  5991 ;;		_PIN_MANAGER_IOC
  5992 ;;		_TMR1_ISR
  5993 ;; This function is called by:
  5994 ;;		Interrupt level 1
  5995 ;; This function uses a non-reentrant model
  5996 ;;
  5997                           
  5998  0004                     _INTERRUPT_InterruptManager:	
  5999                           
  6000                           ;incstack = 0
  6001  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  6002                           
  6003                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  6004  0005  3180               	pagesel	$
  6005  0006                     i1l1814:	
  6006                           
  6007                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
  6008  0006  0021               	movlb	1	; select bank1
  6009  0007  1E10               	btfss	16,4	;volatile
  6010  0008  280A               	goto	u64_21
  6011  0009  280B               	goto	u64_20
  6012  000A                     u64_21:	
  6013  000A  2814               	goto	i1l168
  6014  000B                     u64_20:	
  6015  000B                     i1l1816:	
  6016  000B  0020               	movlb	0	; select bank0
  6017  000C  1E10               	btfss	16,4	;volatile
  6018  000D  280F               	goto	u65_21
  6019  000E  2810               	goto	u65_20
  6020  000F                     u65_21:	
  6021  000F  2814               	goto	i1l168
  6022  0010                     u65_20:	
  6023  0010                     i1l1818:	
  6024                           
  6025                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
  6026  0010  3184  24AA  3180   	fcall	_PIN_MANAGER_IOC
  6027                           
  6028                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  6029  0013  2826               	goto	i1l174
  6030  0014                     i1l168:	
  6031                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  6032                           
  6033  0014  1F0B               	btfss	11,6	;volatile
  6034  0015  2817               	goto	u66_21
  6035  0016  2818               	goto	u66_20
  6036  0017                     u66_21:	
  6037  0017  2826               	goto	i1l174
  6038  0018                     u66_20:	
  6039  0018                     i1l1820:	
  6040                           
  6041                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  6042  0018  0021               	movlb	1	; select bank1
  6043  0019  1C11               	btfss	17,0	;volatile
  6044  001A  281C               	goto	u67_21
  6045  001B  281D               	goto	u67_20
  6046  001C                     u67_21:	
  6047  001C  2826               	goto	i1l173
  6048  001D                     u67_20:	
  6049  001D                     i1l1822:	
  6050  001D  0020               	movlb	0	; select bank0
  6051  001E  1C11               	btfss	17,0	;volatile
  6052  001F  2821               	goto	u68_21
  6053  0020  2822               	goto	u68_20
  6054  0021                     u68_21:	
  6055  0021  2826               	goto	i1l173
  6056  0022                     u68_20:	
  6057  0022                     i1l1824:	
  6058                           
  6059                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR1_ISR();
  6060  0022  3184  243B  3180   	fcall	_TMR1_ISR
  6061                           
  6062                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  6063  0025  2826               	goto	i1l174
  6064  0026                     i1l173:	
  6065                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
  6066                           
  6067  0026                     i1l174:	
  6068  0026  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6069  0027  0009               	retfie
  6070  0028                     __end_of_INTERRUPT_InterruptManager:	
  6071                           
  6072                           	psect	text22
  6073  043B                     __ptext22:	
  6074 ;; *************** function _TMR1_ISR *****************
  6075 ;; Defined at:
  6076 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;		None
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;		None
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  1    wreg      void 
  6083 ;; Registers used:
  6084 ;;		wreg, status,2, status,0, pclath, cstack
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6094 ;;Total ram usage:        0 bytes
  6095 ;; Hardware stack levels used:    1
  6096 ;; Hardware stack levels required when called:    1
  6097 ;; This function calls:
  6098 ;;		Absolute function
  6099 ;;		_TMR1_DefaultInterruptHandler
  6100 ;;		_TMR1_WriteTimer
  6101 ;; This function is called by:
  6102 ;;		_INTERRUPT_InterruptManager
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           
  6107                           ;psect for function _TMR1_ISR
  6108  043B                     _TMR1_ISR:	
  6109  043B                     i1l1754:	
  6110                           ;incstack = 0
  6111                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  6112                           
  6113                           
  6114                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
  6115  043B  0020               	movlb	0	; select bank0
  6116  043C  1011               	bcf	17,0	;volatile
  6117  043D                     i1l1756:	
  6118                           
  6119                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
  6120  043D  086D               	movf	_timer1ReloadVal+1,w	;volatile
  6121  043E  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  6122  043F  086C               	movf	_timer1ReloadVal,w	;volatile
  6123  0440  00F0               	movwf	TMR1_WriteTimer@timerVal
  6124  0441  3184  2465  3184   	fcall	_TMR1_WriteTimer
  6125  0444                     i1l1758:	
  6126                           
  6127                           ;mcc_generated_files/tmr1.c: 165:     if(TMR1_InterruptHandler)
  6128  0444  0020               	movlb	0	; select bank0
  6129  0445  086A               	movf	_TMR1_InterruptHandler,w
  6130  0446  046B               	iorwf	_TMR1_InterruptHandler+1,w
  6131  0447  1903               	btfsc	3,2
  6132  0448  2C4A               	goto	u58_21
  6133  0449  2C4B               	goto	u58_20
  6134  044A                     u58_21:	
  6135  044A  2C50               	goto	i1l234
  6136  044B                     u58_20:	
  6137  044B                     i1l1760:	
  6138                           
  6139                           ;mcc_generated_files/tmr1.c: 166:     {;mcc_generated_files/tmr1.c: 167:         TMR1_In
      +                          terruptHandler();
  6140  044B  086B               	movf	_TMR1_InterruptHandler+1,w
  6141  044C  008A               	movwf	10
  6142  044D  086A               	movf	_TMR1_InterruptHandler,w
  6143  044E  000A               	callw
  6144  044F  3184               	pagesel	$
  6145  0450                     i1l234:	
  6146  0450  0008               	return
  6147  0451                     __end_of_TMR1_ISR:	
  6148                           
  6149                           	psect	text23
  6150  0465                     __ptext23:	
  6151 ;; *************** function _TMR1_WriteTimer *****************
  6152 ;; Defined at:
  6153 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  6154 ;; Parameters:    Size  Location     Type
  6155 ;;  timerVal        2    0[COMMON] unsigned short 
  6156 ;; Auto vars:     Size  Location     Type
  6157 ;;		None
  6158 ;; Return value:  Size  Location     Type
  6159 ;;                  1    wreg      void 
  6160 ;; Registers used:
  6161 ;;		wreg, status,2
  6162 ;; Tracked objects:
  6163 ;;		On entry : 0/0
  6164 ;;		On exit  : 0/0
  6165 ;;		Unchanged: 0/0
  6166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6167 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6170 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6171 ;;Total ram usage:        2 bytes
  6172 ;; Hardware stack levels used:    1
  6173 ;; This function calls:
  6174 ;;		Nothing
  6175 ;; This function is called by:
  6176 ;;		_TMR1_ISR
  6177 ;;		_TMR1_Reload
  6178 ;; This function uses a non-reentrant model
  6179 ;;
  6180                           
  6181                           
  6182                           ;psect for function _TMR1_WriteTimer
  6183  0465                     _TMR1_WriteTimer:	
  6184  0465                     i1l1690:	
  6185                           ;incstack = 0
  6186                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
  6187                           
  6188                           
  6189                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.T1SYNC == 1)
  6190  0465  0020               	movlb	0	; select bank0
  6191  0466  1D1B               	btfss	27,2	;volatile
  6192  0467  2C69               	goto	u54_21
  6193  0468  2C6A               	goto	u54_20
  6194  0469                     u54_21:	
  6195  0469  2C71               	goto	i1l1700
  6196  046A                     u54_20:	
  6197  046A                     i1l1692:	
  6198                           
  6199                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  6200  046A  101B               	bcf	27,0	;volatile
  6201  046B                     i1l1694:	
  6202                           
  6203                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
  6204  046B  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  6205  046C  009A               	movwf	26	;volatile
  6206  046D                     i1l1696:	
  6207                           
  6208                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
  6209  046D  0870               	movf	TMR1_WriteTimer@timerVal,w
  6210  046E  0099               	movwf	25	;volatile
  6211  046F                     i1l1698:	
  6212                           
  6213                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  6214  046F  141B               	bsf	27,0	;volatile
  6215                           
  6216                           ;mcc_generated_files/tmr1.c: 133:     }
  6217  0470  2C75               	goto	i1l221
  6218  0471                     i1l1700:	
  6219                           
  6220                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
  6221  0471  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  6222  0472  009A               	movwf	26	;volatile
  6223  0473                     i1l1702:	
  6224                           
  6225                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
  6226  0473  0870               	movf	TMR1_WriteTimer@timerVal,w
  6227  0474  0099               	movwf	25	;volatile
  6228  0475                     i1l221:	
  6229  0475  0008               	return
  6230  0476                     __end_of_TMR1_WriteTimer:	
  6231                           
  6232                           	psect	text24
  6233  04CF                     __ptext24:	
  6234 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  6235 ;; Defined at:
  6236 ;;		line 176 in file "mcc_generated_files/tmr1.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;		None
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;		None
  6241 ;; Return value:  Size  Location     Type
  6242 ;;                  1    wreg      void 
  6243 ;; Registers used:
  6244 ;;		wreg
  6245 ;; Tracked objects:
  6246 ;;		On entry : 0/0
  6247 ;;		On exit  : 0/0
  6248 ;;		Unchanged: 0/0
  6249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;Total ram usage:        0 bytes
  6255 ;; Hardware stack levels used:    1
  6256 ;; This function calls:
  6257 ;;		Nothing
  6258 ;; This function is called by:
  6259 ;;		_TMR1_Initialize
  6260 ;;		_TMR1_ISR
  6261 ;; This function uses a non-reentrant model
  6262 ;;
  6263                           
  6264                           
  6265                           ;psect for function _TMR1_DefaultInterruptHandler
  6266  04CF                     _TMR1_DefaultInterruptHandler:	
  6267  04CF                     i1l1704:	
  6268                           ;incstack = 0
  6269                           ; Regs used in _TMR1_DefaultInterruptHandler: [wreg]
  6270                           
  6271                           
  6272                           ;mcc_generated_files/tmr1.c: 177:     cur_ms++;
  6273  04CF  3001               	movlw	1
  6274  04D0  0020               	movlb	0	; select bank0
  6275  04D1  07E1               	addwf	_cur_ms,f	;volatile
  6276  04D2  3000               	movlw	0
  6277  04D3  3DE2               	addwfc	_cur_ms+1,f	;volatile
  6278  04D4                     i1l240:	
  6279  04D4  0008               	return
  6280  04D5                     __end_of_TMR1_DefaultInterruptHandler:	
  6281                           
  6282                           	psect	text25
  6283  04AA                     __ptext25:	
  6284 ;; *************** function _PIN_MANAGER_IOC *****************
  6285 ;; Defined at:
  6286 ;;		line 122 in file "mcc_generated_files/pin_manager.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;		None
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;		None
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  1    wreg      void 
  6293 ;; Registers used:
  6294 ;;		wreg, status,2, status,0, pclath, cstack
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;Total ram usage:        0 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:    2
  6307 ;; This function calls:
  6308 ;;		_IOCCF0_ISR
  6309 ;; This function is called by:
  6310 ;;		_INTERRUPT_InterruptManager
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           
  6315                           ;psect for function _PIN_MANAGER_IOC
  6316  04AA                     _PIN_MANAGER_IOC:	
  6317  04AA                     i1l1750:	
  6318                           ;incstack = 0
  6319                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  6320                           
  6321                           
  6322                           ;mcc_generated_files/pin_manager.c: 125:     if(IOCCFbits.IOCCF0 == 1)
  6323  04AA  0027               	movlb	7	; select bank7
  6324  04AB  1C19               	btfss	25,0	;volatile
  6325  04AC  2CAE               	goto	u57_21
  6326  04AD  2CAF               	goto	u57_20
  6327  04AE                     u57_21:	
  6328  04AE  2CB2               	goto	i1l125
  6329  04AF                     u57_20:	
  6330  04AF                     i1l1752:	
  6331                           
  6332                           ;mcc_generated_files/pin_manager.c: 126:     {;mcc_generated_files/pin_manager.c: 127:  
      +                                 IOCCF0_ISR();
  6333  04AF  3184  2486  3184   	fcall	_IOCCF0_ISR
  6334  04B2                     i1l125:	
  6335  04B2  0008               	return
  6336  04B3                     __end_of_PIN_MANAGER_IOC:	
  6337                           
  6338                           	psect	text26
  6339  0486                     __ptext26:	
  6340 ;; *************** function _IOCCF0_ISR *****************
  6341 ;; Defined at:
  6342 ;;		line 134 in file "mcc_generated_files/pin_manager.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;		None
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;		None
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  1    wreg      void 
  6349 ;; Registers used:
  6350 ;;		wreg, status,2, status,0, pclath, cstack
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;Total ram usage:        0 bytes
  6361 ;; Hardware stack levels used:    1
  6362 ;; Hardware stack levels required when called:    1
  6363 ;; This function calls:
  6364 ;;		Absolute function
  6365 ;;		_IOCCF0_DefaultInterruptHandler
  6366 ;; This function is called by:
  6367 ;;		_PIN_MANAGER_IOC
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           
  6372                           ;psect for function _IOCCF0_ISR
  6373  0486                     _IOCCF0_ISR:	
  6374  0486                     i1l1682:	
  6375                           ;incstack = 0
  6376                           ; Regs used in _IOCCF0_ISR: [wreg+status,2+status,0+pclath+cstack]
  6377                           
  6378                           
  6379                           ;mcc_generated_files/pin_manager.c: 139:     if(IOCCF0_InterruptHandler)
  6380  0486  0020               	movlb	0	; select bank0
  6381  0487  086E               	movf	_IOCCF0_InterruptHandler,w
  6382  0488  046F               	iorwf	_IOCCF0_InterruptHandler+1,w
  6383  0489  1903               	btfsc	3,2
  6384  048A  2C8C               	goto	u53_21
  6385  048B  2C8D               	goto	u53_20
  6386  048C                     u53_21:	
  6387  048C  2C92               	goto	i1l1686
  6388  048D                     u53_20:	
  6389  048D                     i1l1684:	
  6390                           
  6391                           ;mcc_generated_files/pin_manager.c: 140:     {;mcc_generated_files/pin_manager.c: 141:  
      +                                 IOCCF0_InterruptHandler();
  6392  048D  086F               	movf	_IOCCF0_InterruptHandler+1,w
  6393  048E  008A               	movwf	10
  6394  048F  086E               	movf	_IOCCF0_InterruptHandler,w
  6395  0490  000A               	callw
  6396  0491  3184               	pagesel	$
  6397  0492                     i1l1686:	
  6398                           
  6399                           ;mcc_generated_files/pin_manager.c: 143:     IOCCFbits.IOCCF0 = 0;
  6400  0492  0027               	movlb	7	; select bank7
  6401  0493  1019               	bcf	25,0	;volatile
  6402  0494                     i1l129:	
  6403  0494  0008               	return
  6404  0495                     __end_of_IOCCF0_ISR:	
  6405                           
  6406                           	psect	text27
  6407  04DC                     __ptext27:	
  6408 ;; *************** function _IOCCF0_DefaultInterruptHandler *****************
  6409 ;; Defined at:
  6410 ;;		line 156 in file "mcc_generated_files/pin_manager.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;		None
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;		None
  6415 ;; Return value:  Size  Location     Type
  6416 ;;                  1    wreg      void 
  6417 ;; Registers used:
  6418 ;;		None
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;Total ram usage:        0 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; This function calls:
  6431 ;;		Nothing
  6432 ;; This function is called by:
  6433 ;;		_PIN_MANAGER_Initialize
  6434 ;;		_IOCCF0_ISR
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           
  6439                           ;psect for function _IOCCF0_DefaultInterruptHandler
  6440  04DC                     _IOCCF0_DefaultInterruptHandler:	
  6441  04DC                     i1l135:	
  6442                           ;incstack = 0
  6443                           ; Regs used in _IOCCF0_DefaultInterruptHandler: []
  6444                           
  6445  04DC  0008               	return
  6446  04DD                     __end_of_IOCCF0_DefaultInterruptHandler:	
  6447  007E                     btemp	set	126	;btemp
  6448  007E                     int$flags	set	126
  6449  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         59
    Persistent  38
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     53      80
    BANK1            80      0      44
    BANK2            80      0       0
    BANK3             0      0       0
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0
    BANK7             0      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    GetStage@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    Wigwag.first_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    stage_stash.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    stage_stash.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_stash.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_GetStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_CopyStageData.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_CopyStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_ConstructStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewPattern.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewPattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    FlashPattern@pattern	PTR struct Pattern size(2) Largest target is 3
		 -> Wigwag(BANK0[3]), 

    InitWigwagPattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@pattern.first_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@right_side_on.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@right_side_on	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@left_side_on.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@left_side_on	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@pattern	PTR struct Pattern size(2) Largest target is 3
		 -> Wigwag(BANK0[3]), 

    sp__GetStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__GetStage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    GetStage@get_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@last_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@last_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@last_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStageData.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@source.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@dest.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@source	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@dest	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStage	PTR struct Stage size(1) Largest target is 0

    CopyStage@dest.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStage@source.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStage@dest.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStageData	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__ConstructStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__ConstructStage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@new_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@next	PTR struct Stage size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    ConstructStage@states	PTR const _Bool  size(1) Largest target is 4
		 -> InitWigwagPattern@right_side_states(BANK0[4]), InitWigwagPattern@left_side_states(BANK0[4]), 

    ConstructStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), 

    sp__NewStage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AssignLightStates@stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AssignLightStates@states	PTR const _Bool  size(1) Largest target is 4
		 -> InitWigwagPattern@right_side_states(BANK0[4]), InitWigwagPattern@left_side_states(BANK0[4]), NewStage@init_states(BANK0[4]), 

    AssignLightStates@stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK1[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns	PTR struct Pattern[6] size(1) Largest target is 0

    S454Stage$next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S466PatternSelector$current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S466PatternSelector$patterns	PTR struct Pattern[6] size(2) Largest target is 0

    pattern_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 0

    S463Pattern$first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    Wigwag.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCCF0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF0_DefaultInterruptHandler(), 

    IOCCF0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCCF0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_FlashPattern
    _SetOutputs->_SetLight
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF0_SetInterruptHandler
    _InitWigwagPattern->_ConstructStage
    _ConstructStage->_AssignLightStates
    _NewStage->_AssignLightStates
    _FlashPattern->_SetLight

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _setup->_InitWigwagPattern
    _InitWigwagPattern->_AppendStage
    _CopyStageData->_NewStage
    _ConstructStage->_NewStage
    _NewStage->_AssignLightStates
    _AppendStage->_CopyStageData

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    7909
                                             52 BANK0      1     1      0
                       _FlashPattern
           _PatternCycleInputChanged
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    6856
                  _InitWigwagPattern
                  _SYSTEM_Initialize
                         _SetOutputs
                    _TMR1_Initialize
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetOutputs                                           2     2      0     999
                                              6 COMMON     2     2      0
                           _SetLight
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     196
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      98
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0      98
         _IOCCF0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCCF0_SetInterruptHandler                           2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitWigwagPattern                                   23    21      2    5563
                                             29 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (3) _CopyStageData                                        9     5      4    1112
                                             12 BANK0      9     5      4
                           _NewStage (ARG)
 ---------------------------------------------------------------------------------
 (3) _ConstructStage                                       7     4      3    1920
                                              9 COMMON     1     1      0
                                             12 BANK0      6     3      3
                  _AssignLightStates
                           _NewStage
 ---------------------------------------------------------------------------------
 (3) _NewStage                                            10    10      0     716
                                              2 BANK0     10    10      0
                  _AssignLightStates
 ---------------------------------------------------------------------------------
 (4) _AssignLightStates                                    9     6      3     552
                                              2 COMMON     7     4      3
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _AppendStage                                          8     4      4    1048
                                             21 BANK0      8     4      4
                      _CopyStageData (ARG)
                           _NewStage (ARG)
 ---------------------------------------------------------------------------------
 (1) _PatternCycleInputChanged                             4     4      0      23
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _FlashPattern                                         8     6      2    1030
                                              6 COMMON     4     2      2
                                              0 BANK0      4     4      0
                           _SetLight
 ---------------------------------------------------------------------------------
 (3) _SetLight                                             4     3      1     875
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0     240
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0     240
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (8) _TMR1_WriteTimer                                      2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCCF0_ISR
 ---------------------------------------------------------------------------------
 (8) _IOCCF0_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _IOCCF0_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FlashPattern
     _SetLight
   _PatternCycleInputChanged
   _setup
     _InitWigwagPattern
       _AppendStage
         _CopyStageData (ARG)
           _NewStage (ARG)
             _AssignLightStates
         _NewStage (ARG)
           _AssignLightStates
       _ConstructStage
         _AssignLightStates
         _NewStage
           _AssignLightStates
       _CopyStageData
         _NewStage (ARG)
           _AssignLightStates
       _NewStage
         _AssignLightStates
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCCF0_SetInterruptHandler
       _PMD_Initialize
       _TMR1_Initialize
         _TMR1_SetInterruptHandler
       _WDT_Initialize
     _SetOutputs
       _SetLight
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR1_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCCF0_ISR
       Absolute function(Fake) *
       _IOCCF0_DefaultInterruptHandler *
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     35      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      2C       7       55.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      88      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      88      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu May 07 13:31:47 2020

                              _update_stage 0065                                 __CFG_CP$OFF 0000  
                                        l51 0485                                          l60 04C2  
                                        l54 04A9                                          l57 04D8  
                        ConstructStage@next 002E                                 __CFG_LVP$ON 0000  
                                       l121 03BC                                         l210 04DB  
                                       l132 04CE                                         l207 0464  
                                       l237 04C8                                         l361 01EC  
                                       l425 03E1                                         l506 0257  
                                       l450 02AF                                         l434 0364  
                                       l442 0337                                         l364 0403  
                                       l429 02FE                                         l293 0420  
                                       l467 017B                                         l398 0391  
                                       u500 0328                                         u501 0327  
                                       u510 0264                                         u511 0263  
                                       u600 037E                                         u520 029D  
                                       u601 037D                                         u521 029C  
                                       u505 0324                                         u610 0390  
                              __CFG_CPD$OFF 0000                                         u611 038F  
                                       u525 0299                                         u800 01A6  
                                       u801 01A3                                         u820 01B4  
                                       u900 020B                                         u740 03E1  
                                       u821 01B3                                         u901 020A  
                                       u741 03E0                                         u830 01BE  
                                       u814 01A8                                         u910 021F  
                                       u590 036B                                         u750 02BA  
                                       u831 01BB                                         u911 021E  
                                       u591 036A                                         u751 02B9  
                                       u760 0186                                         u761 0185  
                                       u905 0207                                         u850 01C9  
                                       u770 0190                                         u851 01C8  
                                       u771 018D                                         u860 01D3  
                                       u844 01C0                                         u861 01D0  
                                       u790 019C                                         u791 019B  
                                       u927 0371                                         u784 0192  
                                       u880 0112                                         u881 0111  
                                       u874 01D5                                         u890 017B  
                                       u891 017A                                         u885 010E  
                                       u895 0177                             _timer1ReloadVal 006C  
                   __size_of_PMD_Initialize 0008                                         wreg 0009  
        __end_of_IOCCF0_SetInterruptHandler 04CF                  _IOCCF0_SetInterruptHandler 04C9  
                                      l2000 0112                                        l2010 0169  
                                      l2002 012E                                        l2012 016E  
                                      l2020 040C                                        l2030 01F2  
                                      l2022 040F                                        l2014 0404  
                                      l2040 021F                                        l2032 020B  
                                      l2008 0131                                        l2024 0413  
                                      l2016 0407                                        l2042 0255  
                                      l2034 0214                                        l2026 041B  
                                      l2018 0408                                        l2036 0218  
                                      l2028 01ED                                        l2044 0421  
                                      l2038 021A                                        l2054 042C  
                                      l2046 0424                                        l2080 01DE  
                                      l1600 045B                                        l2056 0431  
                                      l2048 0429                                        l1522 04C9  
                                      l1602 045D                                        l1524 04C3  
                                      l1550 0392                                        l1560 039F  
                                      l1552 0394                                        l1650 0317  
                                      l1642 02FF                                        l1570 03AE  
                                      l1562 03A1                                        l1554 0396  
                                      l1660 0258                                        l1652 031B  
                                      l1580 03BA                                        l1572 03B0  
                                      l1564 03A6                                        l1556 0399  
                                      l1548 04BB                                        l1670 029D  
                                      l1662 0264                                        l1910 02B0  
                                      l1654 0328                                        l1582 04A1  
                                      l1574 03B1                                        l1566 03A9  
                                      l1558 039B                                        l1590 04D5  
                                      l1664 0277                                        l1904 03C0  
                                      l1920 02D5                                        l1912 02BA  
                                      l1656 0337                                        l1648 0302  
                                      l1584 04A4                                        l1576 03B2  
                                      l1568 03AB                                        l1592 0451  
                                      l1680 0482                                        l1672 0476  
                                      l1666 0281                                        l1906 03D4  
                                      l1922 02DD                                        l1586 04A5  
                                      l1578 03B3                                        l1594 0453  
                                      l1674 0479                                        l1940 019C  
                                      l1932 017D                                        l1780 036E  
                                      l1668 028A                                        l1908 03D8  
                                      l1924 02E8                                        l1916 02BD  
                                      l1588 04A8                                        l1596 0455  
                                      l1676 047C                                        l1942 01A9  
                                      l1934 017E                                        l1782 0375  
                                      l1926 02F2                                        l1918 02D1  
                                      l1598 0456                                        l1678 047F  
                                      l1944 01B4                                        l1936 0186  
                                      l1784 037E                                        l1776 0365  
                                      l1928 02FA                                        l1960 033A  
                                      l1688 04D9                                        l1946 01C1  
                                      l1938 0193                                        l1954 01D6  
                                      l1794 0390                                        l1778 036B  
                                      l1962 034D                                        l1970 03E3  
                                      l1948 01C9                                        l1788 0380  
                                      l1964 0357                                        l1980 009A  
                                      l1972 0066                                        l1966 0360  
                                      l1982 00A8                                        l1974 006C  
                                      l1984 00B0                                        l1976 007C  
                                      l1898 03BD                                        l1994 00C8  
                                      l1986 00BD                                        l1978 008A  
                                      l1996 0100                                        l1988 00C6  
                                      l1998 0105                             ?_ConstructStage 002C  
                                      _LATA 010C                                        _LATC 010E  
                                      _PMD0 0911                                        _PMD1 0912  
                                      _PMD2 0913                                        _PMD3 0914  
                                      _PMD4 0915                                        _PMD5 0916  
                                      _WPUA 020C                                        _WPUC 020E  
                              __CFG_WRT$OFF 0000                               SetLight@light 0075  
                             __CFG_FCMEN$ON 0000                        ConstructStage@states 002F  
                             SetLight@state 0072                                        _main 0421  
                       __end_of_AppendStage 02B0                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                             __CFG_BOREN$ON 0000                               __CFG_BORV$LOW 0000  
                                      start 0028                  ??_TMR1_SetInterruptHandler 0074  
                             __CFG_CSWEN$ON 0000                               __CFG_MCLRE$ON 0000  
                            CopyStageData@i 0033                             ??_CopyStageData 0030  
            __size_of_OSCILLATOR_Initialize 0009               __end_of_OSCILLATOR_Initialize 04AA  
                       __size_of_IOCCF0_ISR 000F                                       ?_main 0070  
                             __CFG_WDTE$OFF 0000                             _TMR1_StartTimer 04D9  
                            __CFG_DEBUG$OFF 0000                                       i1l125 04B2  
                                     i1l221 0475                                       i1l135 04DC  
                                     i1l240 04D4                                       i1l129 0494  
                                     i1l234 0450                                       i1l173 0026  
                                     i1l174 0026                                       i1l168 0014  
                                     _OSCEN 091D                                       _TMR1H 001A  
                                     _TMR1L 0019                                       u53_20 048D  
                                     u53_21 048C                                       u54_20 046A  
                                     u54_21 0469                                       u64_20 000B  
                                     u64_21 000A                                       u57_20 04AF  
                                     u65_20 0010                                       u57_21 04AE  
                                     u65_21 000F                                       _TRISA 008C  
                                     _TRISC 008E                                       u58_20 044B  
                                     u66_20 0018                                       u58_21 044A  
                                     u66_21 0017                                       u67_20 001D  
                                     u67_21 001C                                       u68_20 0022  
                                     u68_21 0021                       ConstructStage@time_ms 002C  
                          __end_of_TMR1_ISR 0451                     __end_of_PIN_MANAGER_IOC 04B3  
                            _WDT_Initialize 04D5                                       _setup 0404  
                   __end_of_TMR1_Initialize 0465                                       pclath 000A  
                      __end_of_FlashPattern 0258                                       status 0003  
                                     wtemp0 007E                    FlashPattern@current_time 0078  
                  _PatternCycleInputChanged 0365                             _TMR1_WriteTimer 0465  
                         _pattern_list_iter 0059                             __initialization 002A  
                       NewStage@init_states 0026                                __end_of_main 043B  
               ?_INTERRUPT_InterruptManager 0070                            __end_of_NewStage 02FF  
                                    ??_main 0054                            __end_of_SetLight 01ED  
                    __end_of_WDT_Initialize 04D9                          _cur_pc_input_state 007B  
                               _AppendStage 0258                                      ?_setup 0070  
                                    _ANSELA 018C                                      _ANSELC 018E  
                        __CFG_RSTOSC$HFINT1 0000                                      _T1GCON 001C  
                   TMR1_WriteTimer@timerVal 0070                                      _ODCONA 028C  
                                    _ODCONC 028E                                      i1l1700 0471  
                                    i1l1702 0473                                      i1l1704 04CF  
                                    i1l1820 0018                                      i1l1750 04AA  
                                    i1l1822 001D                                      i1l1814 0006  
                                    i1l1752 04AF                                      i1l1760 044B  
                                    i1l1824 0022                                      i1l1816 000B  
                                    i1l1682 0486                                      i1l1690 0465  
                                    i1l1754 043B                                      i1l1818 0010  
                                    i1l1684 048D                                      i1l1692 046A  
                                    i1l1756 043D                                      i1l1686 0492  
                                    i1l1694 046B                                      i1l1758 0444  
                                    i1l1696 046D                                      i1l1698 046F  
                                    _INLVLA 038C                                      _INLVLC 038E  
                                    _OSCFRQ 091F                                      _WDTCON 0097  
                                _SetOutputs 03E2                              __CFG_PWRTE$OFF 0000  
      __end_of_TMR1_DefaultInterruptHandler 04D5       __size_of_TMR1_DefaultInterruptHandler 0006  
              _TMR1_DefaultInterruptHandler 04CF                             SetOutputs@state 0077  
                                    _Wigwag 0067                     __end_of_TMR1_StartTimer 04DC  
                            __CFG_STVREN$ON 0000           InitWigwagPattern@left_side_states 0040  
                                    _cur_ms 0061                         CopyStageData@source 002E  
                            _PMD_Initialize 04BB                             ?_WDT_Initialize 0070  
  TMR1_SetInterruptHandler@InterruptHandler 0072  IOCCF0_SetInterruptHandler@InterruptHandler 0072  
                          ?_PIN_MANAGER_IOC 0070                     __end_of_TMR1_WriteTimer 0476  
                              ??_IOCCF0_ISR 0070                            ?_TMR1_Initialize 0070  
                    AssignLightStates@stage 0072                           _SYSTEM_Initialize 0476  
                   __end_of__initialization 0062                          ?_SYSTEM_Initialize 0070  
                            __pcstackCOMMON 0070          InitWigwagPattern@right_side_states 0044  
                              __pidataBANK1 04B3                         ??_SYSTEM_Initialize 0074  
                                 ?_TMR1_ISR 0070               ?_TMR1_DefaultInterruptHandler 0070  
                             __end_of_setup 0421                      __end_of_PMD_Initialize 04C3  
                        __end_of_IOCCF0_ISR 0495                           NewStage@new_stage 002A  
                          ??_ConstructStage 0079                 ?_IOCCF0_SetInterruptHandler 0072  
                     __size_of_FlashPattern 006B                   __end_of_SYSTEM_Initialize 0486  
                                   ??_setup 007A                                NewStage@F419 00AE  
                                __pbssBANK0 0055                                  __pbssBANK1 00A0  
                             _current_stage 0057                                   ?_NewStage 0077  
                               ?_SetOutputs 0070                                   ?_SetLight 0072  
                        AssignLightStates@i 0020                        AppendStage@new_stage 0037  
                                __pmaintext 0421                            ?_TMR1_StartTimer 0070  
                                ??_TMR1_ISR 0072                             __CFG_PPS1WAY$ON 0000  
                                __pintentry 0004            ??_IOCCF0_DefaultInterruptHandler 0070  
           ?_IOCCF0_DefaultInterruptHandler 0070                             ?_PMD_Initialize 0070  
                        InitWigwagPattern@i 004C                                _FlashPattern 01ED  
                                   _OSCCON1 0919                                     _OSCCON3 091B  
                                   _OSCTUNE 091E                  ??_PatternCycleInputChanged 0072  
                                   _SLRCONA 030C                                     _SLRCONC 030E  
                          ?_TMR1_WriteTimer 0070                     ConstructStage@new_stage 0030  
                                ??_NewStage 0022                                  ??_SetLight 0073  
       PatternCycleInputChanged@delay_count 0074                       __end_of_CopyStageData 0338  
                      InitWigwagPattern@off 0050                                     __ptext1 0404  
                                   __ptext2 04D9                                     __ptext3 03E2  
                                   __ptext4 0476                                     __ptext5 04D5  
                                   __ptext6 0451                                     __ptext7 04C3  
                                   __ptext8 04BB                                     __ptext9 0392  
            ??_TMR1_DefaultInterruptHandler 0070                                   _T1CONbits 001B  
                                   _cur_sec 005D                       _OSCILLATOR_Initialize 04A1  
                       __size_of_SetOutputs 0022           __size_of_TMR1_SetInterruptHandler 0006  
                  ??_PIN_MANAGER_Initialize 0074                   ?_TMR1_SetInterruptHandler 0072  
                                 _IOCCFbits 0399                                     _temp_ms 0063  
                                 _IOCCNbits 0398                                   _IOCCPbits 0397  
                              ?_AppendStage 0035                  __size_of_SYSTEM_Initialize 0010  
                                   clrloop0 0496                        end_of_initialization 0062  
                       _last_pc_input_state 007A                            ??_WDT_Initialize 0072  
                                 _PORTCbits 000E                     AssignLightStates@states 0074  
                          __CFG_FEXTOSC$OFF 0000                                  _start_time 0055  
                                _ts_trigger 0066                           __size_of_TMR1_ISR 0016  
                         CopyStageData@dest 002C                      ?_OSCILLATOR_Initialize 0070  
                       start_initialization 002A                            _pattern_selector 00A0  
           __size_of_PIN_MANAGER_Initialize 002B                             AppendStage@head 0035  
                             _pattern_stash 00B2                                ??_SetOutputs 0076  
                  __size_of_PIN_MANAGER_IOC 0009                    InitWigwagPattern@pattern 003D  
                         __size_of_NewStage 004F                            __CFG_LPBOREN$OFF 0000  
                  __size_of_TMR1_Initialize 0014                           __size_of_SetLight 0071  
                          ??_PMD_Initialize 0072                                 __pdataBANK1 00C4  
                               __pbssBIGRAM 20F0                                 __pbssCOMMON 007A  
                     AppendStage@last_stage 003B                                   ___latbits 0002  
                        __end_of_SetOutputs 0404                               __pcstackBANK0 0020  
                    InitWigwagPattern@i_844 004E      __end_of_IOCCF0_DefaultInterruptHandler 04DD  
   __size_of_IOCCF0_DefaultInterruptHandler 0001              _IOCCF0_DefaultInterruptHandler 04DC  
                      __size_of_AppendStage 0058                                   __pnvBANK0 006A  
                    _PIN_MANAGER_Initialize 0392            __end_of_TMR1_SetInterruptHandler 04C9  
                         _AssignLightStates 03BD                           _InitWigwagPattern 0066  
                        ?_AssignLightStates 0072                ??_INTERRUPT_InterruptManager 0072  
                        ?_InitWigwagPattern 003D                    __size_of_TMR1_StartTimer 0003  
                       ??_AssignLightStates 0075                         ??_InitWigwagPattern 003F  
                            __size_of_setup 001D                     __size_of_ConstructStage 002D  
                                  _LATCbits 010E                                   clear_ram0 0495  
                                  _PIE0bits 0090                                    _PIE1bits 0091  
                  __size_of_TMR1_WriteTimer 0011                   __end_of_AssignLightStates 03E2  
       __size_of_INTERRUPT_InterruptManager 0024                                    _PIR0bits 0010  
                                  _PIR1bits 0011           __size_of_PatternCycleInputChanged 002D  
                 ?_PatternCycleInputChanged 0070                   __end_of_InitWigwagPattern 017C  
                                  _TMR1_ISR 043B                           ??_PIN_MANAGER_IOC 0070  
                         ??_TMR1_Initialize 0074                      __size_of_CopyStageData 0039  
                                  _NewStage 02B0                                    _SetLight 017C  
                           _stage_list_iter 005B                     ??_OSCILLATOR_Initialize 0072  
                     InitWigwagPattern@F444 00C8                       InitWigwagPattern@F447 00C4  
                  _TMR1_SetInterruptHandler 04C3                       InitWigwagPattern@head 0052  
                     _TMR1_InterruptHandler 006A                     _IOCCF0_InterruptHandler 006E  
                                  __ptext10 04C9                                    __ptext11 04A1  
                                  __ptext20 017C                                    __ptext12 0066  
                                  __ptext13 02FF                                  _T1GCONbits 001C  
                                  __ptext22 043B                                    __ptext14 0338  
                                  __ptext23 0465                                    __ptext15 02B0  
                                  __ptext24 04CF                                    __ptext16 03BD  
                                  __ptext25 04AA                                    __ptext17 0258  
                                  __ptext26 0486                                    __ptext18 0365  
                                  __ptext27 04DC                                    __ptext19 01ED  
              ??_IOCCF0_SetInterruptHandler 0074              InitWigwagPattern@right_side_on 004A  
                         ??_TMR1_StartTimer 0072                                  _IOCCF0_ISR 0486  
                                  _cur_hsec 005F                               __size_of_main 001A  
                __size_of_AssignLightStates 0025               InitWigwagPattern@left_side_on 0048  
                __size_of_InitWigwagPattern 0116                                    int$flags 007E  
        __end_of_INTERRUPT_InterruptManager 0028                  _INTERRUPT_InterruptManager 0004  
                         ??_TMR1_WriteTimer 0072                               _CopyStageData 02FF  
                       FlashPattern@pattern 0076                               ?_FlashPattern 0076  
       __size_of_IOCCF0_SetInterruptHandler 0006                                  _INTCONbits 000B  
                   __size_of_WDT_Initialize 0004                                    intlevel1 0000  
                            _ConstructStage 0338                     ?_PIN_MANAGER_Initialize 0070  
                         __CFG_CLKOUTEN$OFF 0000                              ?_CopyStageData 002C  
                            ??_FlashPattern 0020                               ??_AppendStage 0039  
          __end_of_PatternCycleInputChanged 0392                      __end_of_ConstructStage 0365  
                               ?_IOCCF0_ISR 0070              __end_of_PIN_MANAGER_Initialize 03BD  
                           _PIN_MANAGER_IOC 04AA                                 _stage_stash 20F0  
                           _TMR1_Initialize 0451  
