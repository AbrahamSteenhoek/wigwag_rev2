

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri May 08 21:29:47 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F18325
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,delta=2
    62                           	dabs	1,0x620,48
    63                           	dabs	1,0x5A0,80
    64                           	dabs	1,0x520,80
    65                           	dabs	1,0x4A0,80
    66                           	dabs	1,0x420,80
    67                           	dabs	1,0x3A0,80
    68                           	dabs	1,0x320,80
    69                           	dabs	1,0x2A0,80
    70                           	dabs	1,0x220,80
    71                           	dabs	1,0x1A0,80
    72                           	dabs	1,0x20F0,0,_stage_stash
    73                           	dabs	1,0x7E,2
    74  0000                     
    75                           ; Version 2.10
    76                           ; Generated 31/07/2019 GMT
    77                           ; 
    78                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC16F18325 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109  0000                     	;# 
   110  0001                     	;# 
   111  0002                     	;# 
   112  0003                     	;# 
   113  0004                     	;# 
   114  0005                     	;# 
   115  0006                     	;# 
   116  0007                     	;# 
   117  0008                     	;# 
   118  0009                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000E                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0014                     	;# 
   128  0015                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  001D                     	;# 
   140  001E                     	;# 
   141  001F                     	;# 
   142  008C                     	;# 
   143  008E                     	;# 
   144  0090                     	;# 
   145  0091                     	;# 
   146  0092                     	;# 
   147  0093                     	;# 
   148  0094                     	;# 
   149  0097                     	;# 
   150  009B                     	;# 
   151  009B                     	;# 
   152  009C                     	;# 
   153  009D                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  010E                     	;# 
   158  0111                     	;# 
   159  0112                     	;# 
   160  0113                     	;# 
   161  0114                     	;# 
   162  0115                     	;# 
   163  0116                     	;# 
   164  0117                     	;# 
   165  0118                     	;# 
   166  0119                     	;# 
   167  018C                     	;# 
   168  018E                     	;# 
   169  0197                     	;# 
   170  0199                     	;# 
   171  0199                     	;# 
   172  0199                     	;# 
   173  019A                     	;# 
   174  019A                     	;# 
   175  019A                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019C                     	;# 
   182  019C                     	;# 
   183  019C                     	;# 
   184  019D                     	;# 
   185  019D                     	;# 
   186  019D                     	;# 
   187  019E                     	;# 
   188  019E                     	;# 
   189  019E                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  019F                     	;# 
   193  019F                     	;# 
   194  019F                     	;# 
   195  020C                     	;# 
   196  020E                     	;# 
   197  0211                     	;# 
   198  0211                     	;# 
   199  0212                     	;# 
   200  0212                     	;# 
   201  0213                     	;# 
   202  0213                     	;# 
   203  0214                     	;# 
   204  0214                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0215                     	;# 
   208  0215                     	;# 
   209  0216                     	;# 
   210  0216                     	;# 
   211  0217                     	;# 
   212  0217                     	;# 
   213  0219                     	;# 
   214  021A                     	;# 
   215  021B                     	;# 
   216  021C                     	;# 
   217  021D                     	;# 
   218  021D                     	;# 
   219  021E                     	;# 
   220  021F                     	;# 
   221  028C                     	;# 
   222  028E                     	;# 
   223  0291                     	;# 
   224  0291                     	;# 
   225  0292                     	;# 
   226  0293                     	;# 
   227  0294                     	;# 
   228  0295                     	;# 
   229  0295                     	;# 
   230  0296                     	;# 
   231  0297                     	;# 
   232  0298                     	;# 
   233  029F                     	;# 
   234  030C                     	;# 
   235  030E                     	;# 
   236  0311                     	;# 
   237  0311                     	;# 
   238  0312                     	;# 
   239  0313                     	;# 
   240  0314                     	;# 
   241  0315                     	;# 
   242  0315                     	;# 
   243  0316                     	;# 
   244  0317                     	;# 
   245  0318                     	;# 
   246  038C                     	;# 
   247  038E                     	;# 
   248  0391                     	;# 
   249  0392                     	;# 
   250  0393                     	;# 
   251  0397                     	;# 
   252  0398                     	;# 
   253  0399                     	;# 
   254  039A                     	;# 
   255  039C                     	;# 
   256  039D                     	;# 
   257  039E                     	;# 
   258  039F                     	;# 
   259  0411                     	;# 
   260  0411                     	;# 
   261  0412                     	;# 
   262  0413                     	;# 
   263  0414                     	;# 
   264  0415                     	;# 
   265  0416                     	;# 
   266  0417                     	;# 
   267  0418                     	;# 
   268  0418                     	;# 
   269  0419                     	;# 
   270  041A                     	;# 
   271  041B                     	;# 
   272  041C                     	;# 
   273  041D                     	;# 
   274  041E                     	;# 
   275  041F                     	;# 
   276  0498                     	;# 
   277  0498                     	;# 
   278  0499                     	;# 
   279  049A                     	;# 
   280  049B                     	;# 
   281  049B                     	;# 
   282  049C                     	;# 
   283  049D                     	;# 
   284  049E                     	;# 
   285  049F                     	;# 
   286  0617                     	;# 
   287  0618                     	;# 
   288  0619                     	;# 
   289  0619                     	;# 
   290  061A                     	;# 
   291  061B                     	;# 
   292  061C                     	;# 
   293  061C                     	;# 
   294  061F                     	;# 
   295  0691                     	;# 
   296  0692                     	;# 
   297  0693                     	;# 
   298  0694                     	;# 
   299  0695                     	;# 
   300  0696                     	;# 
   301  0697                     	;# 
   302  0698                     	;# 
   303  0699                     	;# 
   304  0711                     	;# 
   305  0712                     	;# 
   306  0713                     	;# 
   307  0714                     	;# 
   308  0715                     	;# 
   309  0716                     	;# 
   310  0717                     	;# 
   311  0718                     	;# 
   312  0719                     	;# 
   313  0891                     	;# 
   314  0891                     	;# 
   315  0891                     	;# 
   316  0891                     	;# 
   317  0891                     	;# 
   318  0891                     	;# 
   319  0892                     	;# 
   320  0892                     	;# 
   321  0892                     	;# 
   322  0893                     	;# 
   323  0893                     	;# 
   324  0893                     	;# 
   325  0893                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0894                     	;# 
   329  0894                     	;# 
   330  0894                     	;# 
   331  0895                     	;# 
   332  0895                     	;# 
   333  0895                     	;# 
   334  0896                     	;# 
   335  0896                     	;# 
   336  0896                     	;# 
   337  089B                     	;# 
   338  0911                     	;# 
   339  0912                     	;# 
   340  0913                     	;# 
   341  0914                     	;# 
   342  0915                     	;# 
   343  0916                     	;# 
   344  0918                     	;# 
   345  0919                     	;# 
   346  091A                     	;# 
   347  091B                     	;# 
   348  091C                     	;# 
   349  091D                     	;# 
   350  091E                     	;# 
   351  091F                     	;# 
   352  0E0F                     	;# 
   353  0E10                     	;# 
   354  0E11                     	;# 
   355  0E12                     	;# 
   356  0E13                     	;# 
   357  0E14                     	;# 
   358  0E15                     	;# 
   359  0E16                     	;# 
   360  0E17                     	;# 
   361  0E18                     	;# 
   362  0E19                     	;# 
   363  0E1A                     	;# 
   364  0E1B                     	;# 
   365  0E1C                     	;# 
   366  0E1D                     	;# 
   367  0E1E                     	;# 
   368  0E1F                     	;# 
   369  0E20                     	;# 
   370  0E21                     	;# 
   371  0E22                     	;# 
   372  0E24                     	;# 
   373  0E25                     	;# 
   374  0E28                     	;# 
   375  0E29                     	;# 
   376  0E2A                     	;# 
   377  0E2B                     	;# 
   378  0E2C                     	;# 
   379  0E2D                     	;# 
   380  0E2E                     	;# 
   381  0E2F                     	;# 
   382  0E90                     	;# 
   383  0E91                     	;# 
   384  0E92                     	;# 
   385  0E94                     	;# 
   386  0E95                     	;# 
   387  0EA0                     	;# 
   388  0EA1                     	;# 
   389  0EA2                     	;# 
   390  0EA3                     	;# 
   391  0EA4                     	;# 
   392  0EA5                     	;# 
   393  0F0F                     	;# 
   394  0F10                     	;# 
   395  0F11                     	;# 
   396  0F12                     	;# 
   397  0F13                     	;# 
   398  0F14                     	;# 
   399  0F15                     	;# 
   400  0F16                     	;# 
   401  0F17                     	;# 
   402  0F18                     	;# 
   403  0F19                     	;# 
   404  0F1A                     	;# 
   405  0F1B                     	;# 
   406  0F1C                     	;# 
   407  0F1D                     	;# 
   408  0F1E                     	;# 
   409  0F1F                     	;# 
   410  0F20                     	;# 
   411  0F21                     	;# 
   412  0F22                     	;# 
   413  0F23                     	;# 
   414  0F24                     	;# 
   415  0F25                     	;# 
   416  0F26                     	;# 
   417  0F27                     	;# 
   418  0F28                     	;# 
   419  0F29                     	;# 
   420  0F2A                     	;# 
   421  0F2B                     	;# 
   422  0F2C                     	;# 
   423  0F2D                     	;# 
   424  0F2E                     	;# 
   425  0F2F                     	;# 
   426  0F30                     	;# 
   427  0F31                     	;# 
   428  0F32                     	;# 
   429  0F33                     	;# 
   430  0F34                     	;# 
   431  0F35                     	;# 
   432  0F36                     	;# 
   433  0F37                     	;# 
   434  0FE4                     	;# 
   435  0FE5                     	;# 
   436  0FE6                     	;# 
   437  0FE7                     	;# 
   438  0FE8                     	;# 
   439  0FE9                     	;# 
   440  0FEA                     	;# 
   441  0FEB                     	;# 
   442  0FED                     	;# 
   443  0FEE                     	;# 
   444  0FEF                     	;# 
   445  0000                     	;# 
   446  0001                     	;# 
   447  0002                     	;# 
   448  0003                     	;# 
   449  0004                     	;# 
   450  0005                     	;# 
   451  0006                     	;# 
   452  0007                     	;# 
   453  0008                     	;# 
   454  0009                     	;# 
   455  000A                     	;# 
   456  000B                     	;# 
   457  000C                     	;# 
   458  000E                     	;# 
   459  0010                     	;# 
   460  0011                     	;# 
   461  0012                     	;# 
   462  0013                     	;# 
   463  0014                     	;# 
   464  0015                     	;# 
   465  0015                     	;# 
   466  0016                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  0019                     	;# 
   472  001A                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001D                     	;# 
   476  001E                     	;# 
   477  001F                     	;# 
   478  008C                     	;# 
   479  008E                     	;# 
   480  0090                     	;# 
   481  0091                     	;# 
   482  0092                     	;# 
   483  0093                     	;# 
   484  0094                     	;# 
   485  0097                     	;# 
   486  009B                     	;# 
   487  009B                     	;# 
   488  009C                     	;# 
   489  009D                     	;# 
   490  009E                     	;# 
   491  009F                     	;# 
   492  010C                     	;# 
   493  010E                     	;# 
   494  0111                     	;# 
   495  0112                     	;# 
   496  0113                     	;# 
   497  0114                     	;# 
   498  0115                     	;# 
   499  0116                     	;# 
   500  0117                     	;# 
   501  0118                     	;# 
   502  0119                     	;# 
   503  018C                     	;# 
   504  018E                     	;# 
   505  0197                     	;# 
   506  0199                     	;# 
   507  0199                     	;# 
   508  0199                     	;# 
   509  019A                     	;# 
   510  019A                     	;# 
   511  019A                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019C                     	;# 
   518  019C                     	;# 
   519  019C                     	;# 
   520  019D                     	;# 
   521  019D                     	;# 
   522  019D                     	;# 
   523  019E                     	;# 
   524  019E                     	;# 
   525  019E                     	;# 
   526  019F                     	;# 
   527  019F                     	;# 
   528  019F                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  020C                     	;# 
   532  020E                     	;# 
   533  0211                     	;# 
   534  0211                     	;# 
   535  0212                     	;# 
   536  0212                     	;# 
   537  0213                     	;# 
   538  0213                     	;# 
   539  0214                     	;# 
   540  0214                     	;# 
   541  0215                     	;# 
   542  0215                     	;# 
   543  0215                     	;# 
   544  0215                     	;# 
   545  0216                     	;# 
   546  0216                     	;# 
   547  0217                     	;# 
   548  0217                     	;# 
   549  0219                     	;# 
   550  021A                     	;# 
   551  021B                     	;# 
   552  021C                     	;# 
   553  021D                     	;# 
   554  021D                     	;# 
   555  021E                     	;# 
   556  021F                     	;# 
   557  028C                     	;# 
   558  028E                     	;# 
   559  0291                     	;# 
   560  0291                     	;# 
   561  0292                     	;# 
   562  0293                     	;# 
   563  0294                     	;# 
   564  0295                     	;# 
   565  0295                     	;# 
   566  0296                     	;# 
   567  0297                     	;# 
   568  0298                     	;# 
   569  029F                     	;# 
   570  030C                     	;# 
   571  030E                     	;# 
   572  0311                     	;# 
   573  0311                     	;# 
   574  0312                     	;# 
   575  0313                     	;# 
   576  0314                     	;# 
   577  0315                     	;# 
   578  0315                     	;# 
   579  0316                     	;# 
   580  0317                     	;# 
   581  0318                     	;# 
   582  038C                     	;# 
   583  038E                     	;# 
   584  0391                     	;# 
   585  0392                     	;# 
   586  0393                     	;# 
   587  0397                     	;# 
   588  0398                     	;# 
   589  0399                     	;# 
   590  039A                     	;# 
   591  039C                     	;# 
   592  039D                     	;# 
   593  039E                     	;# 
   594  039F                     	;# 
   595  0411                     	;# 
   596  0411                     	;# 
   597  0412                     	;# 
   598  0413                     	;# 
   599  0414                     	;# 
   600  0415                     	;# 
   601  0416                     	;# 
   602  0417                     	;# 
   603  0418                     	;# 
   604  0418                     	;# 
   605  0419                     	;# 
   606  041A                     	;# 
   607  041B                     	;# 
   608  041C                     	;# 
   609  041D                     	;# 
   610  041E                     	;# 
   611  041F                     	;# 
   612  0498                     	;# 
   613  0498                     	;# 
   614  0499                     	;# 
   615  049A                     	;# 
   616  049B                     	;# 
   617  049B                     	;# 
   618  049C                     	;# 
   619  049D                     	;# 
   620  049E                     	;# 
   621  049F                     	;# 
   622  0617                     	;# 
   623  0618                     	;# 
   624  0619                     	;# 
   625  0619                     	;# 
   626  061A                     	;# 
   627  061B                     	;# 
   628  061C                     	;# 
   629  061C                     	;# 
   630  061F                     	;# 
   631  0691                     	;# 
   632  0692                     	;# 
   633  0693                     	;# 
   634  0694                     	;# 
   635  0695                     	;# 
   636  0696                     	;# 
   637  0697                     	;# 
   638  0698                     	;# 
   639  0699                     	;# 
   640  0711                     	;# 
   641  0712                     	;# 
   642  0713                     	;# 
   643  0714                     	;# 
   644  0715                     	;# 
   645  0716                     	;# 
   646  0717                     	;# 
   647  0718                     	;# 
   648  0719                     	;# 
   649  0891                     	;# 
   650  0891                     	;# 
   651  0891                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0891                     	;# 
   655  0892                     	;# 
   656  0892                     	;# 
   657  0892                     	;# 
   658  0893                     	;# 
   659  0893                     	;# 
   660  0893                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0893                     	;# 
   664  0894                     	;# 
   665  0894                     	;# 
   666  0894                     	;# 
   667  0895                     	;# 
   668  0895                     	;# 
   669  0895                     	;# 
   670  0896                     	;# 
   671  0896                     	;# 
   672  0896                     	;# 
   673  089B                     	;# 
   674  0911                     	;# 
   675  0912                     	;# 
   676  0913                     	;# 
   677  0914                     	;# 
   678  0915                     	;# 
   679  0916                     	;# 
   680  0918                     	;# 
   681  0919                     	;# 
   682  091A                     	;# 
   683  091B                     	;# 
   684  091C                     	;# 
   685  091D                     	;# 
   686  091E                     	;# 
   687  091F                     	;# 
   688  0E0F                     	;# 
   689  0E10                     	;# 
   690  0E11                     	;# 
   691  0E12                     	;# 
   692  0E13                     	;# 
   693  0E14                     	;# 
   694  0E15                     	;# 
   695  0E16                     	;# 
   696  0E17                     	;# 
   697  0E18                     	;# 
   698  0E19                     	;# 
   699  0E1A                     	;# 
   700  0E1B                     	;# 
   701  0E1C                     	;# 
   702  0E1D                     	;# 
   703  0E1E                     	;# 
   704  0E1F                     	;# 
   705  0E20                     	;# 
   706  0E21                     	;# 
   707  0E22                     	;# 
   708  0E24                     	;# 
   709  0E25                     	;# 
   710  0E28                     	;# 
   711  0E29                     	;# 
   712  0E2A                     	;# 
   713  0E2B                     	;# 
   714  0E2C                     	;# 
   715  0E2D                     	;# 
   716  0E2E                     	;# 
   717  0E2F                     	;# 
   718  0E90                     	;# 
   719  0E91                     	;# 
   720  0E92                     	;# 
   721  0E94                     	;# 
   722  0E95                     	;# 
   723  0EA0                     	;# 
   724  0EA1                     	;# 
   725  0EA2                     	;# 
   726  0EA3                     	;# 
   727  0EA4                     	;# 
   728  0EA5                     	;# 
   729  0F0F                     	;# 
   730  0F10                     	;# 
   731  0F11                     	;# 
   732  0F12                     	;# 
   733  0F13                     	;# 
   734  0F14                     	;# 
   735  0F15                     	;# 
   736  0F16                     	;# 
   737  0F17                     	;# 
   738  0F18                     	;# 
   739  0F19                     	;# 
   740  0F1A                     	;# 
   741  0F1B                     	;# 
   742  0F1C                     	;# 
   743  0F1D                     	;# 
   744  0F1E                     	;# 
   745  0F1F                     	;# 
   746  0F20                     	;# 
   747  0F21                     	;# 
   748  0F22                     	;# 
   749  0F23                     	;# 
   750  0F24                     	;# 
   751  0F25                     	;# 
   752  0F26                     	;# 
   753  0F27                     	;# 
   754  0F28                     	;# 
   755  0F29                     	;# 
   756  0F2A                     	;# 
   757  0F2B                     	;# 
   758  0F2C                     	;# 
   759  0F2D                     	;# 
   760  0F2E                     	;# 
   761  0F2F                     	;# 
   762  0F30                     	;# 
   763  0F31                     	;# 
   764  0F32                     	;# 
   765  0F33                     	;# 
   766  0F34                     	;# 
   767  0F35                     	;# 
   768  0F36                     	;# 
   769  0F37                     	;# 
   770  0FE4                     	;# 
   771  0FE5                     	;# 
   772  0FE6                     	;# 
   773  0FE7                     	;# 
   774  0FE8                     	;# 
   775  0FE9                     	;# 
   776  0FEA                     	;# 
   777  0FEB                     	;# 
   778  0FED                     	;# 
   779  0FEE                     	;# 
   780  0FEF                     	;# 
   781  0000                     	;# 
   782  0001                     	;# 
   783  0002                     	;# 
   784  0003                     	;# 
   785  0004                     	;# 
   786  0005                     	;# 
   787  0006                     	;# 
   788  0007                     	;# 
   789  0008                     	;# 
   790  0009                     	;# 
   791  000A                     	;# 
   792  000B                     	;# 
   793  000C                     	;# 
   794  000E                     	;# 
   795  0010                     	;# 
   796  0011                     	;# 
   797  0012                     	;# 
   798  0013                     	;# 
   799  0014                     	;# 
   800  0015                     	;# 
   801  0015                     	;# 
   802  0016                     	;# 
   803  0016                     	;# 
   804  0017                     	;# 
   805  0018                     	;# 
   806  0019                     	;# 
   807  0019                     	;# 
   808  001A                     	;# 
   809  001B                     	;# 
   810  001C                     	;# 
   811  001D                     	;# 
   812  001E                     	;# 
   813  001F                     	;# 
   814  008C                     	;# 
   815  008E                     	;# 
   816  0090                     	;# 
   817  0091                     	;# 
   818  0092                     	;# 
   819  0093                     	;# 
   820  0094                     	;# 
   821  0097                     	;# 
   822  009B                     	;# 
   823  009B                     	;# 
   824  009C                     	;# 
   825  009D                     	;# 
   826  009E                     	;# 
   827  009F                     	;# 
   828  010C                     	;# 
   829  010E                     	;# 
   830  0111                     	;# 
   831  0112                     	;# 
   832  0113                     	;# 
   833  0114                     	;# 
   834  0115                     	;# 
   835  0116                     	;# 
   836  0117                     	;# 
   837  0118                     	;# 
   838  0119                     	;# 
   839  018C                     	;# 
   840  018E                     	;# 
   841  0197                     	;# 
   842  0199                     	;# 
   843  0199                     	;# 
   844  0199                     	;# 
   845  019A                     	;# 
   846  019A                     	;# 
   847  019A                     	;# 
   848  019B                     	;# 
   849  019B                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019C                     	;# 
   854  019C                     	;# 
   855  019C                     	;# 
   856  019D                     	;# 
   857  019D                     	;# 
   858  019D                     	;# 
   859  019E                     	;# 
   860  019E                     	;# 
   861  019E                     	;# 
   862  019F                     	;# 
   863  019F                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  020C                     	;# 
   868  020E                     	;# 
   869  0211                     	;# 
   870  0211                     	;# 
   871  0212                     	;# 
   872  0212                     	;# 
   873  0213                     	;# 
   874  0213                     	;# 
   875  0214                     	;# 
   876  0214                     	;# 
   877  0215                     	;# 
   878  0215                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0216                     	;# 
   882  0216                     	;# 
   883  0217                     	;# 
   884  0217                     	;# 
   885  0219                     	;# 
   886  021A                     	;# 
   887  021B                     	;# 
   888  021C                     	;# 
   889  021D                     	;# 
   890  021D                     	;# 
   891  021E                     	;# 
   892  021F                     	;# 
   893  028C                     	;# 
   894  028E                     	;# 
   895  0291                     	;# 
   896  0291                     	;# 
   897  0292                     	;# 
   898  0293                     	;# 
   899  0294                     	;# 
   900  0295                     	;# 
   901  0295                     	;# 
   902  0296                     	;# 
   903  0297                     	;# 
   904  0298                     	;# 
   905  029F                     	;# 
   906  030C                     	;# 
   907  030E                     	;# 
   908  0311                     	;# 
   909  0311                     	;# 
   910  0312                     	;# 
   911  0313                     	;# 
   912  0314                     	;# 
   913  0315                     	;# 
   914  0315                     	;# 
   915  0316                     	;# 
   916  0317                     	;# 
   917  0318                     	;# 
   918  038C                     	;# 
   919  038E                     	;# 
   920  0391                     	;# 
   921  0392                     	;# 
   922  0393                     	;# 
   923  0397                     	;# 
   924  0398                     	;# 
   925  0399                     	;# 
   926  039A                     	;# 
   927  039C                     	;# 
   928  039D                     	;# 
   929  039E                     	;# 
   930  039F                     	;# 
   931  0411                     	;# 
   932  0411                     	;# 
   933  0412                     	;# 
   934  0413                     	;# 
   935  0414                     	;# 
   936  0415                     	;# 
   937  0416                     	;# 
   938  0417                     	;# 
   939  0418                     	;# 
   940  0418                     	;# 
   941  0419                     	;# 
   942  041A                     	;# 
   943  041B                     	;# 
   944  041C                     	;# 
   945  041D                     	;# 
   946  041E                     	;# 
   947  041F                     	;# 
   948  0498                     	;# 
   949  0498                     	;# 
   950  0499                     	;# 
   951  049A                     	;# 
   952  049B                     	;# 
   953  049B                     	;# 
   954  049C                     	;# 
   955  049D                     	;# 
   956  049E                     	;# 
   957  049F                     	;# 
   958  0617                     	;# 
   959  0618                     	;# 
   960  0619                     	;# 
   961  0619                     	;# 
   962  061A                     	;# 
   963  061B                     	;# 
   964  061C                     	;# 
   965  061C                     	;# 
   966  061F                     	;# 
   967  0691                     	;# 
   968  0692                     	;# 
   969  0693                     	;# 
   970  0694                     	;# 
   971  0695                     	;# 
   972  0696                     	;# 
   973  0697                     	;# 
   974  0698                     	;# 
   975  0699                     	;# 
   976  0711                     	;# 
   977  0712                     	;# 
   978  0713                     	;# 
   979  0714                     	;# 
   980  0715                     	;# 
   981  0716                     	;# 
   982  0717                     	;# 
   983  0718                     	;# 
   984  0719                     	;# 
   985  0891                     	;# 
   986  0891                     	;# 
   987  0891                     	;# 
   988  0891                     	;# 
   989  0891                     	;# 
   990  0891                     	;# 
   991  0892                     	;# 
   992  0892                     	;# 
   993  0892                     	;# 
   994  0893                     	;# 
   995  0893                     	;# 
   996  0893                     	;# 
   997  0893                     	;# 
   998  0893                     	;# 
   999  0893                     	;# 
  1000  0894                     	;# 
  1001  0894                     	;# 
  1002  0894                     	;# 
  1003  0895                     	;# 
  1004  0895                     	;# 
  1005  0895                     	;# 
  1006  0896                     	;# 
  1007  0896                     	;# 
  1008  0896                     	;# 
  1009  089B                     	;# 
  1010  0911                     	;# 
  1011  0912                     	;# 
  1012  0913                     	;# 
  1013  0914                     	;# 
  1014  0915                     	;# 
  1015  0916                     	;# 
  1016  0918                     	;# 
  1017  0919                     	;# 
  1018  091A                     	;# 
  1019  091B                     	;# 
  1020  091C                     	;# 
  1021  091D                     	;# 
  1022  091E                     	;# 
  1023  091F                     	;# 
  1024  0E0F                     	;# 
  1025  0E10                     	;# 
  1026  0E11                     	;# 
  1027  0E12                     	;# 
  1028  0E13                     	;# 
  1029  0E14                     	;# 
  1030  0E15                     	;# 
  1031  0E16                     	;# 
  1032  0E17                     	;# 
  1033  0E18                     	;# 
  1034  0E19                     	;# 
  1035  0E1A                     	;# 
  1036  0E1B                     	;# 
  1037  0E1C                     	;# 
  1038  0E1D                     	;# 
  1039  0E1E                     	;# 
  1040  0E1F                     	;# 
  1041  0E20                     	;# 
  1042  0E21                     	;# 
  1043  0E22                     	;# 
  1044  0E24                     	;# 
  1045  0E25                     	;# 
  1046  0E28                     	;# 
  1047  0E29                     	;# 
  1048  0E2A                     	;# 
  1049  0E2B                     	;# 
  1050  0E2C                     	;# 
  1051  0E2D                     	;# 
  1052  0E2E                     	;# 
  1053  0E2F                     	;# 
  1054  0E90                     	;# 
  1055  0E91                     	;# 
  1056  0E92                     	;# 
  1057  0E94                     	;# 
  1058  0E95                     	;# 
  1059  0EA0                     	;# 
  1060  0EA1                     	;# 
  1061  0EA2                     	;# 
  1062  0EA3                     	;# 
  1063  0EA4                     	;# 
  1064  0EA5                     	;# 
  1065  0F0F                     	;# 
  1066  0F10                     	;# 
  1067  0F11                     	;# 
  1068  0F12                     	;# 
  1069  0F13                     	;# 
  1070  0F14                     	;# 
  1071  0F15                     	;# 
  1072  0F16                     	;# 
  1073  0F17                     	;# 
  1074  0F18                     	;# 
  1075  0F19                     	;# 
  1076  0F1A                     	;# 
  1077  0F1B                     	;# 
  1078  0F1C                     	;# 
  1079  0F1D                     	;# 
  1080  0F1E                     	;# 
  1081  0F1F                     	;# 
  1082  0F20                     	;# 
  1083  0F21                     	;# 
  1084  0F22                     	;# 
  1085  0F23                     	;# 
  1086  0F24                     	;# 
  1087  0F25                     	;# 
  1088  0F26                     	;# 
  1089  0F27                     	;# 
  1090  0F28                     	;# 
  1091  0F29                     	;# 
  1092  0F2A                     	;# 
  1093  0F2B                     	;# 
  1094  0F2C                     	;# 
  1095  0F2D                     	;# 
  1096  0F2E                     	;# 
  1097  0F2F                     	;# 
  1098  0F30                     	;# 
  1099  0F31                     	;# 
  1100  0F32                     	;# 
  1101  0F33                     	;# 
  1102  0F34                     	;# 
  1103  0F35                     	;# 
  1104  0F36                     	;# 
  1105  0F37                     	;# 
  1106  0FE4                     	;# 
  1107  0FE5                     	;# 
  1108  0FE6                     	;# 
  1109  0FE7                     	;# 
  1110  0FE8                     	;# 
  1111  0FE9                     	;# 
  1112  0FEA                     	;# 
  1113  0FEB                     	;# 
  1114  0FED                     	;# 
  1115  0FEE                     	;# 
  1116  0FEF                     	;# 
  1117  0000                     	;# 
  1118  0001                     	;# 
  1119  0002                     	;# 
  1120  0003                     	;# 
  1121  0004                     	;# 
  1122  0005                     	;# 
  1123  0006                     	;# 
  1124  0007                     	;# 
  1125  0008                     	;# 
  1126  0009                     	;# 
  1127  000A                     	;# 
  1128  000B                     	;# 
  1129  000C                     	;# 
  1130  000E                     	;# 
  1131  0010                     	;# 
  1132  0011                     	;# 
  1133  0012                     	;# 
  1134  0013                     	;# 
  1135  0014                     	;# 
  1136  0015                     	;# 
  1137  0015                     	;# 
  1138  0016                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  0019                     	;# 
  1144  001A                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  001D                     	;# 
  1148  001E                     	;# 
  1149  001F                     	;# 
  1150  008C                     	;# 
  1151  008E                     	;# 
  1152  0090                     	;# 
  1153  0091                     	;# 
  1154  0092                     	;# 
  1155  0093                     	;# 
  1156  0094                     	;# 
  1157  0097                     	;# 
  1158  009B                     	;# 
  1159  009B                     	;# 
  1160  009C                     	;# 
  1161  009D                     	;# 
  1162  009E                     	;# 
  1163  009F                     	;# 
  1164  010C                     	;# 
  1165  010E                     	;# 
  1166  0111                     	;# 
  1167  0112                     	;# 
  1168  0113                     	;# 
  1169  0114                     	;# 
  1170  0115                     	;# 
  1171  0116                     	;# 
  1172  0117                     	;# 
  1173  0118                     	;# 
  1174  0119                     	;# 
  1175  018C                     	;# 
  1176  018E                     	;# 
  1177  0197                     	;# 
  1178  0199                     	;# 
  1179  0199                     	;# 
  1180  0199                     	;# 
  1181  019A                     	;# 
  1182  019A                     	;# 
  1183  019A                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019C                     	;# 
  1190  019C                     	;# 
  1191  019C                     	;# 
  1192  019D                     	;# 
  1193  019D                     	;# 
  1194  019D                     	;# 
  1195  019E                     	;# 
  1196  019E                     	;# 
  1197  019E                     	;# 
  1198  019F                     	;# 
  1199  019F                     	;# 
  1200  019F                     	;# 
  1201  019F                     	;# 
  1202  019F                     	;# 
  1203  020C                     	;# 
  1204  020E                     	;# 
  1205  0211                     	;# 
  1206  0211                     	;# 
  1207  0212                     	;# 
  1208  0212                     	;# 
  1209  0213                     	;# 
  1210  0213                     	;# 
  1211  0214                     	;# 
  1212  0214                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0216                     	;# 
  1218  0216                     	;# 
  1219  0217                     	;# 
  1220  0217                     	;# 
  1221  0219                     	;# 
  1222  021A                     	;# 
  1223  021B                     	;# 
  1224  021C                     	;# 
  1225  021D                     	;# 
  1226  021D                     	;# 
  1227  021E                     	;# 
  1228  021F                     	;# 
  1229  028C                     	;# 
  1230  028E                     	;# 
  1231  0291                     	;# 
  1232  0291                     	;# 
  1233  0292                     	;# 
  1234  0293                     	;# 
  1235  0294                     	;# 
  1236  0295                     	;# 
  1237  0295                     	;# 
  1238  0296                     	;# 
  1239  0297                     	;# 
  1240  0298                     	;# 
  1241  029F                     	;# 
  1242  030C                     	;# 
  1243  030E                     	;# 
  1244  0311                     	;# 
  1245  0311                     	;# 
  1246  0312                     	;# 
  1247  0313                     	;# 
  1248  0314                     	;# 
  1249  0315                     	;# 
  1250  0315                     	;# 
  1251  0316                     	;# 
  1252  0317                     	;# 
  1253  0318                     	;# 
  1254  038C                     	;# 
  1255  038E                     	;# 
  1256  0391                     	;# 
  1257  0392                     	;# 
  1258  0393                     	;# 
  1259  0397                     	;# 
  1260  0398                     	;# 
  1261  0399                     	;# 
  1262  039A                     	;# 
  1263  039C                     	;# 
  1264  039D                     	;# 
  1265  039E                     	;# 
  1266  039F                     	;# 
  1267  0411                     	;# 
  1268  0411                     	;# 
  1269  0412                     	;# 
  1270  0413                     	;# 
  1271  0414                     	;# 
  1272  0415                     	;# 
  1273  0416                     	;# 
  1274  0417                     	;# 
  1275  0418                     	;# 
  1276  0418                     	;# 
  1277  0419                     	;# 
  1278  041A                     	;# 
  1279  041B                     	;# 
  1280  041C                     	;# 
  1281  041D                     	;# 
  1282  041E                     	;# 
  1283  041F                     	;# 
  1284  0498                     	;# 
  1285  0498                     	;# 
  1286  0499                     	;# 
  1287  049A                     	;# 
  1288  049B                     	;# 
  1289  049B                     	;# 
  1290  049C                     	;# 
  1291  049D                     	;# 
  1292  049E                     	;# 
  1293  049F                     	;# 
  1294  0617                     	;# 
  1295  0618                     	;# 
  1296  0619                     	;# 
  1297  0619                     	;# 
  1298  061A                     	;# 
  1299  061B                     	;# 
  1300  061C                     	;# 
  1301  061C                     	;# 
  1302  061F                     	;# 
  1303  0691                     	;# 
  1304  0692                     	;# 
  1305  0693                     	;# 
  1306  0694                     	;# 
  1307  0695                     	;# 
  1308  0696                     	;# 
  1309  0697                     	;# 
  1310  0698                     	;# 
  1311  0699                     	;# 
  1312  0711                     	;# 
  1313  0712                     	;# 
  1314  0713                     	;# 
  1315  0714                     	;# 
  1316  0715                     	;# 
  1317  0716                     	;# 
  1318  0717                     	;# 
  1319  0718                     	;# 
  1320  0719                     	;# 
  1321  0891                     	;# 
  1322  0891                     	;# 
  1323  0891                     	;# 
  1324  0891                     	;# 
  1325  0891                     	;# 
  1326  0891                     	;# 
  1327  0892                     	;# 
  1328  0892                     	;# 
  1329  0892                     	;# 
  1330  0893                     	;# 
  1331  0893                     	;# 
  1332  0893                     	;# 
  1333  0893                     	;# 
  1334  0893                     	;# 
  1335  0893                     	;# 
  1336  0894                     	;# 
  1337  0894                     	;# 
  1338  0894                     	;# 
  1339  0895                     	;# 
  1340  0895                     	;# 
  1341  0895                     	;# 
  1342  0896                     	;# 
  1343  0896                     	;# 
  1344  0896                     	;# 
  1345  089B                     	;# 
  1346  0911                     	;# 
  1347  0912                     	;# 
  1348  0913                     	;# 
  1349  0914                     	;# 
  1350  0915                     	;# 
  1351  0916                     	;# 
  1352  0918                     	;# 
  1353  0919                     	;# 
  1354  091A                     	;# 
  1355  091B                     	;# 
  1356  091C                     	;# 
  1357  091D                     	;# 
  1358  091E                     	;# 
  1359  091F                     	;# 
  1360  0E0F                     	;# 
  1361  0E10                     	;# 
  1362  0E11                     	;# 
  1363  0E12                     	;# 
  1364  0E13                     	;# 
  1365  0E14                     	;# 
  1366  0E15                     	;# 
  1367  0E16                     	;# 
  1368  0E17                     	;# 
  1369  0E18                     	;# 
  1370  0E19                     	;# 
  1371  0E1A                     	;# 
  1372  0E1B                     	;# 
  1373  0E1C                     	;# 
  1374  0E1D                     	;# 
  1375  0E1E                     	;# 
  1376  0E1F                     	;# 
  1377  0E20                     	;# 
  1378  0E21                     	;# 
  1379  0E22                     	;# 
  1380  0E24                     	;# 
  1381  0E25                     	;# 
  1382  0E28                     	;# 
  1383  0E29                     	;# 
  1384  0E2A                     	;# 
  1385  0E2B                     	;# 
  1386  0E2C                     	;# 
  1387  0E2D                     	;# 
  1388  0E2E                     	;# 
  1389  0E2F                     	;# 
  1390  0E90                     	;# 
  1391  0E91                     	;# 
  1392  0E92                     	;# 
  1393  0E94                     	;# 
  1394  0E95                     	;# 
  1395  0EA0                     	;# 
  1396  0EA1                     	;# 
  1397  0EA2                     	;# 
  1398  0EA3                     	;# 
  1399  0EA4                     	;# 
  1400  0EA5                     	;# 
  1401  0F0F                     	;# 
  1402  0F10                     	;# 
  1403  0F11                     	;# 
  1404  0F12                     	;# 
  1405  0F13                     	;# 
  1406  0F14                     	;# 
  1407  0F15                     	;# 
  1408  0F16                     	;# 
  1409  0F17                     	;# 
  1410  0F18                     	;# 
  1411  0F19                     	;# 
  1412  0F1A                     	;# 
  1413  0F1B                     	;# 
  1414  0F1C                     	;# 
  1415  0F1D                     	;# 
  1416  0F1E                     	;# 
  1417  0F1F                     	;# 
  1418  0F20                     	;# 
  1419  0F21                     	;# 
  1420  0F22                     	;# 
  1421  0F23                     	;# 
  1422  0F24                     	;# 
  1423  0F25                     	;# 
  1424  0F26                     	;# 
  1425  0F27                     	;# 
  1426  0F28                     	;# 
  1427  0F29                     	;# 
  1428  0F2A                     	;# 
  1429  0F2B                     	;# 
  1430  0F2C                     	;# 
  1431  0F2D                     	;# 
  1432  0F2E                     	;# 
  1433  0F2F                     	;# 
  1434  0F30                     	;# 
  1435  0F31                     	;# 
  1436  0F32                     	;# 
  1437  0F33                     	;# 
  1438  0F34                     	;# 
  1439  0F35                     	;# 
  1440  0F36                     	;# 
  1441  0F37                     	;# 
  1442  0FE4                     	;# 
  1443  0FE5                     	;# 
  1444  0FE6                     	;# 
  1445  0FE7                     	;# 
  1446  0FE8                     	;# 
  1447  0FE9                     	;# 
  1448  0FEA                     	;# 
  1449  0FEB                     	;# 
  1450  0FED                     	;# 
  1451  0FEE                     	;# 
  1452  0FEF                     	;# 
  1453  0000                     	;# 
  1454  0001                     	;# 
  1455  0002                     	;# 
  1456  0003                     	;# 
  1457  0004                     	;# 
  1458  0005                     	;# 
  1459  0006                     	;# 
  1460  0007                     	;# 
  1461  0008                     	;# 
  1462  0009                     	;# 
  1463  000A                     	;# 
  1464  000B                     	;# 
  1465  000C                     	;# 
  1466  000E                     	;# 
  1467  0010                     	;# 
  1468  0011                     	;# 
  1469  0012                     	;# 
  1470  0013                     	;# 
  1471  0014                     	;# 
  1472  0015                     	;# 
  1473  0015                     	;# 
  1474  0016                     	;# 
  1475  0016                     	;# 
  1476  0017                     	;# 
  1477  0018                     	;# 
  1478  0019                     	;# 
  1479  0019                     	;# 
  1480  001A                     	;# 
  1481  001B                     	;# 
  1482  001C                     	;# 
  1483  001D                     	;# 
  1484  001E                     	;# 
  1485  001F                     	;# 
  1486  008C                     	;# 
  1487  008E                     	;# 
  1488  0090                     	;# 
  1489  0091                     	;# 
  1490  0092                     	;# 
  1491  0093                     	;# 
  1492  0094                     	;# 
  1493  0097                     	;# 
  1494  009B                     	;# 
  1495  009B                     	;# 
  1496  009C                     	;# 
  1497  009D                     	;# 
  1498  009E                     	;# 
  1499  009F                     	;# 
  1500  010C                     	;# 
  1501  010E                     	;# 
  1502  0111                     	;# 
  1503  0112                     	;# 
  1504  0113                     	;# 
  1505  0114                     	;# 
  1506  0115                     	;# 
  1507  0116                     	;# 
  1508  0117                     	;# 
  1509  0118                     	;# 
  1510  0119                     	;# 
  1511  018C                     	;# 
  1512  018E                     	;# 
  1513  0197                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  0199                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019A                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019B                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019C                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019D                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019E                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  019F                     	;# 
  1538  019F                     	;# 
  1539  020C                     	;# 
  1540  020E                     	;# 
  1541  0211                     	;# 
  1542  0211                     	;# 
  1543  0212                     	;# 
  1544  0212                     	;# 
  1545  0213                     	;# 
  1546  0213                     	;# 
  1547  0214                     	;# 
  1548  0214                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0216                     	;# 
  1554  0216                     	;# 
  1555  0217                     	;# 
  1556  0217                     	;# 
  1557  0219                     	;# 
  1558  021A                     	;# 
  1559  021B                     	;# 
  1560  021C                     	;# 
  1561  021D                     	;# 
  1562  021D                     	;# 
  1563  021E                     	;# 
  1564  021F                     	;# 
  1565  028C                     	;# 
  1566  028E                     	;# 
  1567  0291                     	;# 
  1568  0291                     	;# 
  1569  0292                     	;# 
  1570  0293                     	;# 
  1571  0294                     	;# 
  1572  0295                     	;# 
  1573  0295                     	;# 
  1574  0296                     	;# 
  1575  0297                     	;# 
  1576  0298                     	;# 
  1577  029F                     	;# 
  1578  030C                     	;# 
  1579  030E                     	;# 
  1580  0311                     	;# 
  1581  0311                     	;# 
  1582  0312                     	;# 
  1583  0313                     	;# 
  1584  0314                     	;# 
  1585  0315                     	;# 
  1586  0315                     	;# 
  1587  0316                     	;# 
  1588  0317                     	;# 
  1589  0318                     	;# 
  1590  038C                     	;# 
  1591  038E                     	;# 
  1592  0391                     	;# 
  1593  0392                     	;# 
  1594  0393                     	;# 
  1595  0397                     	;# 
  1596  0398                     	;# 
  1597  0399                     	;# 
  1598  039A                     	;# 
  1599  039C                     	;# 
  1600  039D                     	;# 
  1601  039E                     	;# 
  1602  039F                     	;# 
  1603  0411                     	;# 
  1604  0411                     	;# 
  1605  0412                     	;# 
  1606  0413                     	;# 
  1607  0414                     	;# 
  1608  0415                     	;# 
  1609  0416                     	;# 
  1610  0417                     	;# 
  1611  0418                     	;# 
  1612  0418                     	;# 
  1613  0419                     	;# 
  1614  041A                     	;# 
  1615  041B                     	;# 
  1616  041C                     	;# 
  1617  041D                     	;# 
  1618  041E                     	;# 
  1619  041F                     	;# 
  1620  0498                     	;# 
  1621  0498                     	;# 
  1622  0499                     	;# 
  1623  049A                     	;# 
  1624  049B                     	;# 
  1625  049B                     	;# 
  1626  049C                     	;# 
  1627  049D                     	;# 
  1628  049E                     	;# 
  1629  049F                     	;# 
  1630  0617                     	;# 
  1631  0618                     	;# 
  1632  0619                     	;# 
  1633  0619                     	;# 
  1634  061A                     	;# 
  1635  061B                     	;# 
  1636  061C                     	;# 
  1637  061C                     	;# 
  1638  061F                     	;# 
  1639  0691                     	;# 
  1640  0692                     	;# 
  1641  0693                     	;# 
  1642  0694                     	;# 
  1643  0695                     	;# 
  1644  0696                     	;# 
  1645  0697                     	;# 
  1646  0698                     	;# 
  1647  0699                     	;# 
  1648  0711                     	;# 
  1649  0712                     	;# 
  1650  0713                     	;# 
  1651  0714                     	;# 
  1652  0715                     	;# 
  1653  0716                     	;# 
  1654  0717                     	;# 
  1655  0718                     	;# 
  1656  0719                     	;# 
  1657  0891                     	;# 
  1658  0891                     	;# 
  1659  0891                     	;# 
  1660  0891                     	;# 
  1661  0891                     	;# 
  1662  0891                     	;# 
  1663  0892                     	;# 
  1664  0892                     	;# 
  1665  0892                     	;# 
  1666  0893                     	;# 
  1667  0893                     	;# 
  1668  0893                     	;# 
  1669  0893                     	;# 
  1670  0893                     	;# 
  1671  0893                     	;# 
  1672  0894                     	;# 
  1673  0894                     	;# 
  1674  0894                     	;# 
  1675  0895                     	;# 
  1676  0895                     	;# 
  1677  0895                     	;# 
  1678  0896                     	;# 
  1679  0896                     	;# 
  1680  0896                     	;# 
  1681  089B                     	;# 
  1682  0911                     	;# 
  1683  0912                     	;# 
  1684  0913                     	;# 
  1685  0914                     	;# 
  1686  0915                     	;# 
  1687  0916                     	;# 
  1688  0918                     	;# 
  1689  0919                     	;# 
  1690  091A                     	;# 
  1691  091B                     	;# 
  1692  091C                     	;# 
  1693  091D                     	;# 
  1694  091E                     	;# 
  1695  091F                     	;# 
  1696  0E0F                     	;# 
  1697  0E10                     	;# 
  1698  0E11                     	;# 
  1699  0E12                     	;# 
  1700  0E13                     	;# 
  1701  0E14                     	;# 
  1702  0E15                     	;# 
  1703  0E16                     	;# 
  1704  0E17                     	;# 
  1705  0E18                     	;# 
  1706  0E19                     	;# 
  1707  0E1A                     	;# 
  1708  0E1B                     	;# 
  1709  0E1C                     	;# 
  1710  0E1D                     	;# 
  1711  0E1E                     	;# 
  1712  0E1F                     	;# 
  1713  0E20                     	;# 
  1714  0E21                     	;# 
  1715  0E22                     	;# 
  1716  0E24                     	;# 
  1717  0E25                     	;# 
  1718  0E28                     	;# 
  1719  0E29                     	;# 
  1720  0E2A                     	;# 
  1721  0E2B                     	;# 
  1722  0E2C                     	;# 
  1723  0E2D                     	;# 
  1724  0E2E                     	;# 
  1725  0E2F                     	;# 
  1726  0E90                     	;# 
  1727  0E91                     	;# 
  1728  0E92                     	;# 
  1729  0E94                     	;# 
  1730  0E95                     	;# 
  1731  0EA0                     	;# 
  1732  0EA1                     	;# 
  1733  0EA2                     	;# 
  1734  0EA3                     	;# 
  1735  0EA4                     	;# 
  1736  0EA5                     	;# 
  1737  0F0F                     	;# 
  1738  0F10                     	;# 
  1739  0F11                     	;# 
  1740  0F12                     	;# 
  1741  0F13                     	;# 
  1742  0F14                     	;# 
  1743  0F15                     	;# 
  1744  0F16                     	;# 
  1745  0F17                     	;# 
  1746  0F18                     	;# 
  1747  0F19                     	;# 
  1748  0F1A                     	;# 
  1749  0F1B                     	;# 
  1750  0F1C                     	;# 
  1751  0F1D                     	;# 
  1752  0F1E                     	;# 
  1753  0F1F                     	;# 
  1754  0F20                     	;# 
  1755  0F21                     	;# 
  1756  0F22                     	;# 
  1757  0F23                     	;# 
  1758  0F24                     	;# 
  1759  0F25                     	;# 
  1760  0F26                     	;# 
  1761  0F27                     	;# 
  1762  0F28                     	;# 
  1763  0F29                     	;# 
  1764  0F2A                     	;# 
  1765  0F2B                     	;# 
  1766  0F2C                     	;# 
  1767  0F2D                     	;# 
  1768  0F2E                     	;# 
  1769  0F2F                     	;# 
  1770  0F30                     	;# 
  1771  0F31                     	;# 
  1772  0F32                     	;# 
  1773  0F33                     	;# 
  1774  0F34                     	;# 
  1775  0F35                     	;# 
  1776  0F36                     	;# 
  1777  0F37                     	;# 
  1778  0FE4                     	;# 
  1779  0FE5                     	;# 
  1780  0FE6                     	;# 
  1781  0FE7                     	;# 
  1782  0FE8                     	;# 
  1783  0FE9                     	;# 
  1784  0FEA                     	;# 
  1785  0FEB                     	;# 
  1786  0FED                     	;# 
  1787  0FEE                     	;# 
  1788  0FEF                     	;# 
  1789  0000                     	;# 
  1790  0001                     	;# 
  1791  0002                     	;# 
  1792  0003                     	;# 
  1793  0004                     	;# 
  1794  0005                     	;# 
  1795  0006                     	;# 
  1796  0007                     	;# 
  1797  0008                     	;# 
  1798  0009                     	;# 
  1799  000A                     	;# 
  1800  000B                     	;# 
  1801  000C                     	;# 
  1802  000E                     	;# 
  1803  0010                     	;# 
  1804  0011                     	;# 
  1805  0012                     	;# 
  1806  0013                     	;# 
  1807  0014                     	;# 
  1808  0015                     	;# 
  1809  0015                     	;# 
  1810  0016                     	;# 
  1811  0016                     	;# 
  1812  0017                     	;# 
  1813  0018                     	;# 
  1814  0019                     	;# 
  1815  0019                     	;# 
  1816  001A                     	;# 
  1817  001B                     	;# 
  1818  001C                     	;# 
  1819  001D                     	;# 
  1820  001E                     	;# 
  1821  001F                     	;# 
  1822  008C                     	;# 
  1823  008E                     	;# 
  1824  0090                     	;# 
  1825  0091                     	;# 
  1826  0092                     	;# 
  1827  0093                     	;# 
  1828  0094                     	;# 
  1829  0097                     	;# 
  1830  009B                     	;# 
  1831  009B                     	;# 
  1832  009C                     	;# 
  1833  009D                     	;# 
  1834  009E                     	;# 
  1835  009F                     	;# 
  1836  010C                     	;# 
  1837  010E                     	;# 
  1838  0111                     	;# 
  1839  0112                     	;# 
  1840  0113                     	;# 
  1841  0114                     	;# 
  1842  0115                     	;# 
  1843  0116                     	;# 
  1844  0117                     	;# 
  1845  0118                     	;# 
  1846  0119                     	;# 
  1847  018C                     	;# 
  1848  018E                     	;# 
  1849  0197                     	;# 
  1850  0199                     	;# 
  1851  0199                     	;# 
  1852  0199                     	;# 
  1853  019A                     	;# 
  1854  019A                     	;# 
  1855  019A                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019B                     	;# 
  1859  019B                     	;# 
  1860  019B                     	;# 
  1861  019C                     	;# 
  1862  019C                     	;# 
  1863  019C                     	;# 
  1864  019D                     	;# 
  1865  019D                     	;# 
  1866  019D                     	;# 
  1867  019E                     	;# 
  1868  019E                     	;# 
  1869  019E                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  019F                     	;# 
  1873  019F                     	;# 
  1874  019F                     	;# 
  1875  020C                     	;# 
  1876  020E                     	;# 
  1877  0211                     	;# 
  1878  0211                     	;# 
  1879  0212                     	;# 
  1880  0212                     	;# 
  1881  0213                     	;# 
  1882  0213                     	;# 
  1883  0214                     	;# 
  1884  0214                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0215                     	;# 
  1888  0215                     	;# 
  1889  0216                     	;# 
  1890  0216                     	;# 
  1891  0217                     	;# 
  1892  0217                     	;# 
  1893  0219                     	;# 
  1894  021A                     	;# 
  1895  021B                     	;# 
  1896  021C                     	;# 
  1897  021D                     	;# 
  1898  021D                     	;# 
  1899  021E                     	;# 
  1900  021F                     	;# 
  1901  028C                     	;# 
  1902  028E                     	;# 
  1903  0291                     	;# 
  1904  0291                     	;# 
  1905  0292                     	;# 
  1906  0293                     	;# 
  1907  0294                     	;# 
  1908  0295                     	;# 
  1909  0295                     	;# 
  1910  0296                     	;# 
  1911  0297                     	;# 
  1912  0298                     	;# 
  1913  029F                     	;# 
  1914  030C                     	;# 
  1915  030E                     	;# 
  1916  0311                     	;# 
  1917  0311                     	;# 
  1918  0312                     	;# 
  1919  0313                     	;# 
  1920  0314                     	;# 
  1921  0315                     	;# 
  1922  0315                     	;# 
  1923  0316                     	;# 
  1924  0317                     	;# 
  1925  0318                     	;# 
  1926  038C                     	;# 
  1927  038E                     	;# 
  1928  0391                     	;# 
  1929  0392                     	;# 
  1930  0393                     	;# 
  1931  0397                     	;# 
  1932  0398                     	;# 
  1933  0399                     	;# 
  1934  039A                     	;# 
  1935  039C                     	;# 
  1936  039D                     	;# 
  1937  039E                     	;# 
  1938  039F                     	;# 
  1939  0411                     	;# 
  1940  0411                     	;# 
  1941  0412                     	;# 
  1942  0413                     	;# 
  1943  0414                     	;# 
  1944  0415                     	;# 
  1945  0416                     	;# 
  1946  0417                     	;# 
  1947  0418                     	;# 
  1948  0418                     	;# 
  1949  0419                     	;# 
  1950  041A                     	;# 
  1951  041B                     	;# 
  1952  041C                     	;# 
  1953  041D                     	;# 
  1954  041E                     	;# 
  1955  041F                     	;# 
  1956  0498                     	;# 
  1957  0498                     	;# 
  1958  0499                     	;# 
  1959  049A                     	;# 
  1960  049B                     	;# 
  1961  049B                     	;# 
  1962  049C                     	;# 
  1963  049D                     	;# 
  1964  049E                     	;# 
  1965  049F                     	;# 
  1966  0617                     	;# 
  1967  0618                     	;# 
  1968  0619                     	;# 
  1969  0619                     	;# 
  1970  061A                     	;# 
  1971  061B                     	;# 
  1972  061C                     	;# 
  1973  061C                     	;# 
  1974  061F                     	;# 
  1975  0691                     	;# 
  1976  0692                     	;# 
  1977  0693                     	;# 
  1978  0694                     	;# 
  1979  0695                     	;# 
  1980  0696                     	;# 
  1981  0697                     	;# 
  1982  0698                     	;# 
  1983  0699                     	;# 
  1984  0711                     	;# 
  1985  0712                     	;# 
  1986  0713                     	;# 
  1987  0714                     	;# 
  1988  0715                     	;# 
  1989  0716                     	;# 
  1990  0717                     	;# 
  1991  0718                     	;# 
  1992  0719                     	;# 
  1993  0891                     	;# 
  1994  0891                     	;# 
  1995  0891                     	;# 
  1996  0891                     	;# 
  1997  0891                     	;# 
  1998  0891                     	;# 
  1999  0892                     	;# 
  2000  0892                     	;# 
  2001  0892                     	;# 
  2002  0893                     	;# 
  2003  0893                     	;# 
  2004  0893                     	;# 
  2005  0893                     	;# 
  2006  0893                     	;# 
  2007  0893                     	;# 
  2008  0894                     	;# 
  2009  0894                     	;# 
  2010  0894                     	;# 
  2011  0895                     	;# 
  2012  0895                     	;# 
  2013  0895                     	;# 
  2014  0896                     	;# 
  2015  0896                     	;# 
  2016  0896                     	;# 
  2017  089B                     	;# 
  2018  0911                     	;# 
  2019  0912                     	;# 
  2020  0913                     	;# 
  2021  0914                     	;# 
  2022  0915                     	;# 
  2023  0916                     	;# 
  2024  0918                     	;# 
  2025  0919                     	;# 
  2026  091A                     	;# 
  2027  091B                     	;# 
  2028  091C                     	;# 
  2029  091D                     	;# 
  2030  091E                     	;# 
  2031  091F                     	;# 
  2032  0E0F                     	;# 
  2033  0E10                     	;# 
  2034  0E11                     	;# 
  2035  0E12                     	;# 
  2036  0E13                     	;# 
  2037  0E14                     	;# 
  2038  0E15                     	;# 
  2039  0E16                     	;# 
  2040  0E17                     	;# 
  2041  0E18                     	;# 
  2042  0E19                     	;# 
  2043  0E1A                     	;# 
  2044  0E1B                     	;# 
  2045  0E1C                     	;# 
  2046  0E1D                     	;# 
  2047  0E1E                     	;# 
  2048  0E1F                     	;# 
  2049  0E20                     	;# 
  2050  0E21                     	;# 
  2051  0E22                     	;# 
  2052  0E24                     	;# 
  2053  0E25                     	;# 
  2054  0E28                     	;# 
  2055  0E29                     	;# 
  2056  0E2A                     	;# 
  2057  0E2B                     	;# 
  2058  0E2C                     	;# 
  2059  0E2D                     	;# 
  2060  0E2E                     	;# 
  2061  0E2F                     	;# 
  2062  0E90                     	;# 
  2063  0E91                     	;# 
  2064  0E92                     	;# 
  2065  0E94                     	;# 
  2066  0E95                     	;# 
  2067  0EA0                     	;# 
  2068  0EA1                     	;# 
  2069  0EA2                     	;# 
  2070  0EA3                     	;# 
  2071  0EA4                     	;# 
  2072  0EA5                     	;# 
  2073  0F0F                     	;# 
  2074  0F10                     	;# 
  2075  0F11                     	;# 
  2076  0F12                     	;# 
  2077  0F13                     	;# 
  2078  0F14                     	;# 
  2079  0F15                     	;# 
  2080  0F16                     	;# 
  2081  0F17                     	;# 
  2082  0F18                     	;# 
  2083  0F19                     	;# 
  2084  0F1A                     	;# 
  2085  0F1B                     	;# 
  2086  0F1C                     	;# 
  2087  0F1D                     	;# 
  2088  0F1E                     	;# 
  2089  0F1F                     	;# 
  2090  0F20                     	;# 
  2091  0F21                     	;# 
  2092  0F22                     	;# 
  2093  0F23                     	;# 
  2094  0F24                     	;# 
  2095  0F25                     	;# 
  2096  0F26                     	;# 
  2097  0F27                     	;# 
  2098  0F28                     	;# 
  2099  0F29                     	;# 
  2100  0F2A                     	;# 
  2101  0F2B                     	;# 
  2102  0F2C                     	;# 
  2103  0F2D                     	;# 
  2104  0F2E                     	;# 
  2105  0F2F                     	;# 
  2106  0F30                     	;# 
  2107  0F31                     	;# 
  2108  0F32                     	;# 
  2109  0F33                     	;# 
  2110  0F34                     	;# 
  2111  0F35                     	;# 
  2112  0F36                     	;# 
  2113  0F37                     	;# 
  2114  0FE4                     	;# 
  2115  0FE5                     	;# 
  2116  0FE6                     	;# 
  2117  0FE7                     	;# 
  2118  0FE8                     	;# 
  2119  0FE9                     	;# 
  2120  0FEA                     	;# 
  2121  0FEB                     	;# 
  2122  0FED                     	;# 
  2123  0FEE                     	;# 
  2124  0FEF                     	;# 
  2125  0000                     	;# 
  2126  0001                     	;# 
  2127  0002                     	;# 
  2128  0003                     	;# 
  2129  0004                     	;# 
  2130  0005                     	;# 
  2131  0006                     	;# 
  2132  0007                     	;# 
  2133  0008                     	;# 
  2134  0009                     	;# 
  2135  000A                     	;# 
  2136  000B                     	;# 
  2137  000C                     	;# 
  2138  000E                     	;# 
  2139  0010                     	;# 
  2140  0011                     	;# 
  2141  0012                     	;# 
  2142  0013                     	;# 
  2143  0014                     	;# 
  2144  0015                     	;# 
  2145  0015                     	;# 
  2146  0016                     	;# 
  2147  0016                     	;# 
  2148  0017                     	;# 
  2149  0018                     	;# 
  2150  0019                     	;# 
  2151  0019                     	;# 
  2152  001A                     	;# 
  2153  001B                     	;# 
  2154  001C                     	;# 
  2155  001D                     	;# 
  2156  001E                     	;# 
  2157  001F                     	;# 
  2158  008C                     	;# 
  2159  008E                     	;# 
  2160  0090                     	;# 
  2161  0091                     	;# 
  2162  0092                     	;# 
  2163  0093                     	;# 
  2164  0094                     	;# 
  2165  0097                     	;# 
  2166  009B                     	;# 
  2167  009B                     	;# 
  2168  009C                     	;# 
  2169  009D                     	;# 
  2170  009E                     	;# 
  2171  009F                     	;# 
  2172  010C                     	;# 
  2173  010E                     	;# 
  2174  0111                     	;# 
  2175  0112                     	;# 
  2176  0113                     	;# 
  2177  0114                     	;# 
  2178  0115                     	;# 
  2179  0116                     	;# 
  2180  0117                     	;# 
  2181  0118                     	;# 
  2182  0119                     	;# 
  2183  018C                     	;# 
  2184  018E                     	;# 
  2185  0197                     	;# 
  2186  0199                     	;# 
  2187  0199                     	;# 
  2188  0199                     	;# 
  2189  019A                     	;# 
  2190  019A                     	;# 
  2191  019A                     	;# 
  2192  019B                     	;# 
  2193  019B                     	;# 
  2194  019B                     	;# 
  2195  019B                     	;# 
  2196  019B                     	;# 
  2197  019C                     	;# 
  2198  019C                     	;# 
  2199  019C                     	;# 
  2200  019D                     	;# 
  2201  019D                     	;# 
  2202  019D                     	;# 
  2203  019E                     	;# 
  2204  019E                     	;# 
  2205  019E                     	;# 
  2206  019F                     	;# 
  2207  019F                     	;# 
  2208  019F                     	;# 
  2209  019F                     	;# 
  2210  019F                     	;# 
  2211  020C                     	;# 
  2212  020E                     	;# 
  2213  0211                     	;# 
  2214  0211                     	;# 
  2215  0212                     	;# 
  2216  0212                     	;# 
  2217  0213                     	;# 
  2218  0213                     	;# 
  2219  0214                     	;# 
  2220  0214                     	;# 
  2221  0215                     	;# 
  2222  0215                     	;# 
  2223  0215                     	;# 
  2224  0215                     	;# 
  2225  0216                     	;# 
  2226  0216                     	;# 
  2227  0217                     	;# 
  2228  0217                     	;# 
  2229  0219                     	;# 
  2230  021A                     	;# 
  2231  021B                     	;# 
  2232  021C                     	;# 
  2233  021D                     	;# 
  2234  021D                     	;# 
  2235  021E                     	;# 
  2236  021F                     	;# 
  2237  028C                     	;# 
  2238  028E                     	;# 
  2239  0291                     	;# 
  2240  0291                     	;# 
  2241  0292                     	;# 
  2242  0293                     	;# 
  2243  0294                     	;# 
  2244  0295                     	;# 
  2245  0295                     	;# 
  2246  0296                     	;# 
  2247  0297                     	;# 
  2248  0298                     	;# 
  2249  029F                     	;# 
  2250  030C                     	;# 
  2251  030E                     	;# 
  2252  0311                     	;# 
  2253  0311                     	;# 
  2254  0312                     	;# 
  2255  0313                     	;# 
  2256  0314                     	;# 
  2257  0315                     	;# 
  2258  0315                     	;# 
  2259  0316                     	;# 
  2260  0317                     	;# 
  2261  0318                     	;# 
  2262  038C                     	;# 
  2263  038E                     	;# 
  2264  0391                     	;# 
  2265  0392                     	;# 
  2266  0393                     	;# 
  2267  0397                     	;# 
  2268  0398                     	;# 
  2269  0399                     	;# 
  2270  039A                     	;# 
  2271  039C                     	;# 
  2272  039D                     	;# 
  2273  039E                     	;# 
  2274  039F                     	;# 
  2275  0411                     	;# 
  2276  0411                     	;# 
  2277  0412                     	;# 
  2278  0413                     	;# 
  2279  0414                     	;# 
  2280  0415                     	;# 
  2281  0416                     	;# 
  2282  0417                     	;# 
  2283  0418                     	;# 
  2284  0418                     	;# 
  2285  0419                     	;# 
  2286  041A                     	;# 
  2287  041B                     	;# 
  2288  041C                     	;# 
  2289  041D                     	;# 
  2290  041E                     	;# 
  2291  041F                     	;# 
  2292  0498                     	;# 
  2293  0498                     	;# 
  2294  0499                     	;# 
  2295  049A                     	;# 
  2296  049B                     	;# 
  2297  049B                     	;# 
  2298  049C                     	;# 
  2299  049D                     	;# 
  2300  049E                     	;# 
  2301  049F                     	;# 
  2302  0617                     	;# 
  2303  0618                     	;# 
  2304  0619                     	;# 
  2305  0619                     	;# 
  2306  061A                     	;# 
  2307  061B                     	;# 
  2308  061C                     	;# 
  2309  061C                     	;# 
  2310  061F                     	;# 
  2311  0691                     	;# 
  2312  0692                     	;# 
  2313  0693                     	;# 
  2314  0694                     	;# 
  2315  0695                     	;# 
  2316  0696                     	;# 
  2317  0697                     	;# 
  2318  0698                     	;# 
  2319  0699                     	;# 
  2320  0711                     	;# 
  2321  0712                     	;# 
  2322  0713                     	;# 
  2323  0714                     	;# 
  2324  0715                     	;# 
  2325  0716                     	;# 
  2326  0717                     	;# 
  2327  0718                     	;# 
  2328  0719                     	;# 
  2329  0891                     	;# 
  2330  0891                     	;# 
  2331  0891                     	;# 
  2332  0891                     	;# 
  2333  0891                     	;# 
  2334  0891                     	;# 
  2335  0892                     	;# 
  2336  0892                     	;# 
  2337  0892                     	;# 
  2338  0893                     	;# 
  2339  0893                     	;# 
  2340  0893                     	;# 
  2341  0893                     	;# 
  2342  0893                     	;# 
  2343  0893                     	;# 
  2344  0894                     	;# 
  2345  0894                     	;# 
  2346  0894                     	;# 
  2347  0895                     	;# 
  2348  0895                     	;# 
  2349  0895                     	;# 
  2350  0896                     	;# 
  2351  0896                     	;# 
  2352  0896                     	;# 
  2353  089B                     	;# 
  2354  0911                     	;# 
  2355  0912                     	;# 
  2356  0913                     	;# 
  2357  0914                     	;# 
  2358  0915                     	;# 
  2359  0916                     	;# 
  2360  0918                     	;# 
  2361  0919                     	;# 
  2362  091A                     	;# 
  2363  091B                     	;# 
  2364  091C                     	;# 
  2365  091D                     	;# 
  2366  091E                     	;# 
  2367  091F                     	;# 
  2368  0E0F                     	;# 
  2369  0E10                     	;# 
  2370  0E11                     	;# 
  2371  0E12                     	;# 
  2372  0E13                     	;# 
  2373  0E14                     	;# 
  2374  0E15                     	;# 
  2375  0E16                     	;# 
  2376  0E17                     	;# 
  2377  0E18                     	;# 
  2378  0E19                     	;# 
  2379  0E1A                     	;# 
  2380  0E1B                     	;# 
  2381  0E1C                     	;# 
  2382  0E1D                     	;# 
  2383  0E1E                     	;# 
  2384  0E1F                     	;# 
  2385  0E20                     	;# 
  2386  0E21                     	;# 
  2387  0E22                     	;# 
  2388  0E24                     	;# 
  2389  0E25                     	;# 
  2390  0E28                     	;# 
  2391  0E29                     	;# 
  2392  0E2A                     	;# 
  2393  0E2B                     	;# 
  2394  0E2C                     	;# 
  2395  0E2D                     	;# 
  2396  0E2E                     	;# 
  2397  0E2F                     	;# 
  2398  0E90                     	;# 
  2399  0E91                     	;# 
  2400  0E92                     	;# 
  2401  0E94                     	;# 
  2402  0E95                     	;# 
  2403  0EA0                     	;# 
  2404  0EA1                     	;# 
  2405  0EA2                     	;# 
  2406  0EA3                     	;# 
  2407  0EA4                     	;# 
  2408  0EA5                     	;# 
  2409  0F0F                     	;# 
  2410  0F10                     	;# 
  2411  0F11                     	;# 
  2412  0F12                     	;# 
  2413  0F13                     	;# 
  2414  0F14                     	;# 
  2415  0F15                     	;# 
  2416  0F16                     	;# 
  2417  0F17                     	;# 
  2418  0F18                     	;# 
  2419  0F19                     	;# 
  2420  0F1A                     	;# 
  2421  0F1B                     	;# 
  2422  0F1C                     	;# 
  2423  0F1D                     	;# 
  2424  0F1E                     	;# 
  2425  0F1F                     	;# 
  2426  0F20                     	;# 
  2427  0F21                     	;# 
  2428  0F22                     	;# 
  2429  0F23                     	;# 
  2430  0F24                     	;# 
  2431  0F25                     	;# 
  2432  0F26                     	;# 
  2433  0F27                     	;# 
  2434  0F28                     	;# 
  2435  0F29                     	;# 
  2436  0F2A                     	;# 
  2437  0F2B                     	;# 
  2438  0F2C                     	;# 
  2439  0F2D                     	;# 
  2440  0F2E                     	;# 
  2441  0F2F                     	;# 
  2442  0F30                     	;# 
  2443  0F31                     	;# 
  2444  0F32                     	;# 
  2445  0F33                     	;# 
  2446  0F34                     	;# 
  2447  0F35                     	;# 
  2448  0F36                     	;# 
  2449  0F37                     	;# 
  2450  0FE4                     	;# 
  2451  0FE5                     	;# 
  2452  0FE6                     	;# 
  2453  0FE7                     	;# 
  2454  0FE8                     	;# 
  2455  0FE9                     	;# 
  2456  0FEA                     	;# 
  2457  0FEB                     	;# 
  2458  0FED                     	;# 
  2459  0FEE                     	;# 
  2460  0FEF                     	;# 
  2461  0000                     	;# 
  2462  0001                     	;# 
  2463  0002                     	;# 
  2464  0003                     	;# 
  2465  0004                     	;# 
  2466  0005                     	;# 
  2467  0006                     	;# 
  2468  0007                     	;# 
  2469  0008                     	;# 
  2470  0009                     	;# 
  2471  000A                     	;# 
  2472  000B                     	;# 
  2473  000C                     	;# 
  2474  000E                     	;# 
  2475  0010                     	;# 
  2476  0011                     	;# 
  2477  0012                     	;# 
  2478  0013                     	;# 
  2479  0014                     	;# 
  2480  0015                     	;# 
  2481  0015                     	;# 
  2482  0016                     	;# 
  2483  0016                     	;# 
  2484  0017                     	;# 
  2485  0018                     	;# 
  2486  0019                     	;# 
  2487  0019                     	;# 
  2488  001A                     	;# 
  2489  001B                     	;# 
  2490  001C                     	;# 
  2491  001D                     	;# 
  2492  001E                     	;# 
  2493  001F                     	;# 
  2494  008C                     	;# 
  2495  008E                     	;# 
  2496  0090                     	;# 
  2497  0091                     	;# 
  2498  0092                     	;# 
  2499  0093                     	;# 
  2500  0094                     	;# 
  2501  0097                     	;# 
  2502  009B                     	;# 
  2503  009B                     	;# 
  2504  009C                     	;# 
  2505  009D                     	;# 
  2506  009E                     	;# 
  2507  009F                     	;# 
  2508  010C                     	;# 
  2509  010E                     	;# 
  2510  0111                     	;# 
  2511  0112                     	;# 
  2512  0113                     	;# 
  2513  0114                     	;# 
  2514  0115                     	;# 
  2515  0116                     	;# 
  2516  0117                     	;# 
  2517  0118                     	;# 
  2518  0119                     	;# 
  2519  018C                     	;# 
  2520  018E                     	;# 
  2521  0197                     	;# 
  2522  0199                     	;# 
  2523  0199                     	;# 
  2524  0199                     	;# 
  2525  019A                     	;# 
  2526  019A                     	;# 
  2527  019A                     	;# 
  2528  019B                     	;# 
  2529  019B                     	;# 
  2530  019B                     	;# 
  2531  019B                     	;# 
  2532  019B                     	;# 
  2533  019C                     	;# 
  2534  019C                     	;# 
  2535  019C                     	;# 
  2536  019D                     	;# 
  2537  019D                     	;# 
  2538  019D                     	;# 
  2539  019E                     	;# 
  2540  019E                     	;# 
  2541  019E                     	;# 
  2542  019F                     	;# 
  2543  019F                     	;# 
  2544  019F                     	;# 
  2545  019F                     	;# 
  2546  019F                     	;# 
  2547  020C                     	;# 
  2548  020E                     	;# 
  2549  0211                     	;# 
  2550  0211                     	;# 
  2551  0212                     	;# 
  2552  0212                     	;# 
  2553  0213                     	;# 
  2554  0213                     	;# 
  2555  0214                     	;# 
  2556  0214                     	;# 
  2557  0215                     	;# 
  2558  0215                     	;# 
  2559  0215                     	;# 
  2560  0215                     	;# 
  2561  0216                     	;# 
  2562  0216                     	;# 
  2563  0217                     	;# 
  2564  0217                     	;# 
  2565  0219                     	;# 
  2566  021A                     	;# 
  2567  021B                     	;# 
  2568  021C                     	;# 
  2569  021D                     	;# 
  2570  021D                     	;# 
  2571  021E                     	;# 
  2572  021F                     	;# 
  2573  028C                     	;# 
  2574  028E                     	;# 
  2575  0291                     	;# 
  2576  0291                     	;# 
  2577  0292                     	;# 
  2578  0293                     	;# 
  2579  0294                     	;# 
  2580  0295                     	;# 
  2581  0295                     	;# 
  2582  0296                     	;# 
  2583  0297                     	;# 
  2584  0298                     	;# 
  2585  029F                     	;# 
  2586  030C                     	;# 
  2587  030E                     	;# 
  2588  0311                     	;# 
  2589  0311                     	;# 
  2590  0312                     	;# 
  2591  0313                     	;# 
  2592  0314                     	;# 
  2593  0315                     	;# 
  2594  0315                     	;# 
  2595  0316                     	;# 
  2596  0317                     	;# 
  2597  0318                     	;# 
  2598  038C                     	;# 
  2599  038E                     	;# 
  2600  0391                     	;# 
  2601  0392                     	;# 
  2602  0393                     	;# 
  2603  0397                     	;# 
  2604  0398                     	;# 
  2605  0399                     	;# 
  2606  039A                     	;# 
  2607  039C                     	;# 
  2608  039D                     	;# 
  2609  039E                     	;# 
  2610  039F                     	;# 
  2611  0411                     	;# 
  2612  0411                     	;# 
  2613  0412                     	;# 
  2614  0413                     	;# 
  2615  0414                     	;# 
  2616  0415                     	;# 
  2617  0416                     	;# 
  2618  0417                     	;# 
  2619  0418                     	;# 
  2620  0418                     	;# 
  2621  0419                     	;# 
  2622  041A                     	;# 
  2623  041B                     	;# 
  2624  041C                     	;# 
  2625  041D                     	;# 
  2626  041E                     	;# 
  2627  041F                     	;# 
  2628  0498                     	;# 
  2629  0498                     	;# 
  2630  0499                     	;# 
  2631  049A                     	;# 
  2632  049B                     	;# 
  2633  049B                     	;# 
  2634  049C                     	;# 
  2635  049D                     	;# 
  2636  049E                     	;# 
  2637  049F                     	;# 
  2638  0617                     	;# 
  2639  0618                     	;# 
  2640  0619                     	;# 
  2641  0619                     	;# 
  2642  061A                     	;# 
  2643  061B                     	;# 
  2644  061C                     	;# 
  2645  061C                     	;# 
  2646  061F                     	;# 
  2647  0691                     	;# 
  2648  0692                     	;# 
  2649  0693                     	;# 
  2650  0694                     	;# 
  2651  0695                     	;# 
  2652  0696                     	;# 
  2653  0697                     	;# 
  2654  0698                     	;# 
  2655  0699                     	;# 
  2656  0711                     	;# 
  2657  0712                     	;# 
  2658  0713                     	;# 
  2659  0714                     	;# 
  2660  0715                     	;# 
  2661  0716                     	;# 
  2662  0717                     	;# 
  2663  0718                     	;# 
  2664  0719                     	;# 
  2665  0891                     	;# 
  2666  0891                     	;# 
  2667  0891                     	;# 
  2668  0891                     	;# 
  2669  0891                     	;# 
  2670  0891                     	;# 
  2671  0892                     	;# 
  2672  0892                     	;# 
  2673  0892                     	;# 
  2674  0893                     	;# 
  2675  0893                     	;# 
  2676  0893                     	;# 
  2677  0893                     	;# 
  2678  0893                     	;# 
  2679  0893                     	;# 
  2680  0894                     	;# 
  2681  0894                     	;# 
  2682  0894                     	;# 
  2683  0895                     	;# 
  2684  0895                     	;# 
  2685  0895                     	;# 
  2686  0896                     	;# 
  2687  0896                     	;# 
  2688  0896                     	;# 
  2689  089B                     	;# 
  2690  0911                     	;# 
  2691  0912                     	;# 
  2692  0913                     	;# 
  2693  0914                     	;# 
  2694  0915                     	;# 
  2695  0916                     	;# 
  2696  0918                     	;# 
  2697  0919                     	;# 
  2698  091A                     	;# 
  2699  091B                     	;# 
  2700  091C                     	;# 
  2701  091D                     	;# 
  2702  091E                     	;# 
  2703  091F                     	;# 
  2704  0E0F                     	;# 
  2705  0E10                     	;# 
  2706  0E11                     	;# 
  2707  0E12                     	;# 
  2708  0E13                     	;# 
  2709  0E14                     	;# 
  2710  0E15                     	;# 
  2711  0E16                     	;# 
  2712  0E17                     	;# 
  2713  0E18                     	;# 
  2714  0E19                     	;# 
  2715  0E1A                     	;# 
  2716  0E1B                     	;# 
  2717  0E1C                     	;# 
  2718  0E1D                     	;# 
  2719  0E1E                     	;# 
  2720  0E1F                     	;# 
  2721  0E20                     	;# 
  2722  0E21                     	;# 
  2723  0E22                     	;# 
  2724  0E24                     	;# 
  2725  0E25                     	;# 
  2726  0E28                     	;# 
  2727  0E29                     	;# 
  2728  0E2A                     	;# 
  2729  0E2B                     	;# 
  2730  0E2C                     	;# 
  2731  0E2D                     	;# 
  2732  0E2E                     	;# 
  2733  0E2F                     	;# 
  2734  0E90                     	;# 
  2735  0E91                     	;# 
  2736  0E92                     	;# 
  2737  0E94                     	;# 
  2738  0E95                     	;# 
  2739  0EA0                     	;# 
  2740  0EA1                     	;# 
  2741  0EA2                     	;# 
  2742  0EA3                     	;# 
  2743  0EA4                     	;# 
  2744  0EA5                     	;# 
  2745  0F0F                     	;# 
  2746  0F10                     	;# 
  2747  0F11                     	;# 
  2748  0F12                     	;# 
  2749  0F13                     	;# 
  2750  0F14                     	;# 
  2751  0F15                     	;# 
  2752  0F16                     	;# 
  2753  0F17                     	;# 
  2754  0F18                     	;# 
  2755  0F19                     	;# 
  2756  0F1A                     	;# 
  2757  0F1B                     	;# 
  2758  0F1C                     	;# 
  2759  0F1D                     	;# 
  2760  0F1E                     	;# 
  2761  0F1F                     	;# 
  2762  0F20                     	;# 
  2763  0F21                     	;# 
  2764  0F22                     	;# 
  2765  0F23                     	;# 
  2766  0F24                     	;# 
  2767  0F25                     	;# 
  2768  0F26                     	;# 
  2769  0F27                     	;# 
  2770  0F28                     	;# 
  2771  0F29                     	;# 
  2772  0F2A                     	;# 
  2773  0F2B                     	;# 
  2774  0F2C                     	;# 
  2775  0F2D                     	;# 
  2776  0F2E                     	;# 
  2777  0F2F                     	;# 
  2778  0F30                     	;# 
  2779  0F31                     	;# 
  2780  0F32                     	;# 
  2781  0F33                     	;# 
  2782  0F34                     	;# 
  2783  0F35                     	;# 
  2784  0F36                     	;# 
  2785  0F37                     	;# 
  2786  0FE4                     	;# 
  2787  0FE5                     	;# 
  2788  0FE6                     	;# 
  2789  0FE7                     	;# 
  2790  0FE8                     	;# 
  2791  0FE9                     	;# 
  2792  0FEA                     	;# 
  2793  0FEB                     	;# 
  2794  0FED                     	;# 
  2795  0FEE                     	;# 
  2796  0FEF                     	;# 
  2797  0000                     	;# 
  2798  0001                     	;# 
  2799  0002                     	;# 
  2800  0003                     	;# 
  2801  0004                     	;# 
  2802  0005                     	;# 
  2803  0006                     	;# 
  2804  0007                     	;# 
  2805  0008                     	;# 
  2806  0009                     	;# 
  2807  000A                     	;# 
  2808  000B                     	;# 
  2809  000C                     	;# 
  2810  000E                     	;# 
  2811  0010                     	;# 
  2812  0011                     	;# 
  2813  0012                     	;# 
  2814  0013                     	;# 
  2815  0014                     	;# 
  2816  0015                     	;# 
  2817  0015                     	;# 
  2818  0016                     	;# 
  2819  0016                     	;# 
  2820  0017                     	;# 
  2821  0018                     	;# 
  2822  0019                     	;# 
  2823  0019                     	;# 
  2824  001A                     	;# 
  2825  001B                     	;# 
  2826  001C                     	;# 
  2827  001D                     	;# 
  2828  001E                     	;# 
  2829  001F                     	;# 
  2830  008C                     	;# 
  2831  008E                     	;# 
  2832  0090                     	;# 
  2833  0091                     	;# 
  2834  0092                     	;# 
  2835  0093                     	;# 
  2836  0094                     	;# 
  2837  0097                     	;# 
  2838  009B                     	;# 
  2839  009B                     	;# 
  2840  009C                     	;# 
  2841  009D                     	;# 
  2842  009E                     	;# 
  2843  009F                     	;# 
  2844  010C                     	;# 
  2845  010E                     	;# 
  2846  0111                     	;# 
  2847  0112                     	;# 
  2848  0113                     	;# 
  2849  0114                     	;# 
  2850  0115                     	;# 
  2851  0116                     	;# 
  2852  0117                     	;# 
  2853  0118                     	;# 
  2854  0119                     	;# 
  2855  018C                     	;# 
  2856  018E                     	;# 
  2857  0197                     	;# 
  2858  0199                     	;# 
  2859  0199                     	;# 
  2860  0199                     	;# 
  2861  019A                     	;# 
  2862  019A                     	;# 
  2863  019A                     	;# 
  2864  019B                     	;# 
  2865  019B                     	;# 
  2866  019B                     	;# 
  2867  019B                     	;# 
  2868  019B                     	;# 
  2869  019C                     	;# 
  2870  019C                     	;# 
  2871  019C                     	;# 
  2872  019D                     	;# 
  2873  019D                     	;# 
  2874  019D                     	;# 
  2875  019E                     	;# 
  2876  019E                     	;# 
  2877  019E                     	;# 
  2878  019F                     	;# 
  2879  019F                     	;# 
  2880  019F                     	;# 
  2881  019F                     	;# 
  2882  019F                     	;# 
  2883  020C                     	;# 
  2884  020E                     	;# 
  2885  0211                     	;# 
  2886  0211                     	;# 
  2887  0212                     	;# 
  2888  0212                     	;# 
  2889  0213                     	;# 
  2890  0213                     	;# 
  2891  0214                     	;# 
  2892  0214                     	;# 
  2893  0215                     	;# 
  2894  0215                     	;# 
  2895  0215                     	;# 
  2896  0215                     	;# 
  2897  0216                     	;# 
  2898  0216                     	;# 
  2899  0217                     	;# 
  2900  0217                     	;# 
  2901  0219                     	;# 
  2902  021A                     	;# 
  2903  021B                     	;# 
  2904  021C                     	;# 
  2905  021D                     	;# 
  2906  021D                     	;# 
  2907  021E                     	;# 
  2908  021F                     	;# 
  2909  028C                     	;# 
  2910  028E                     	;# 
  2911  0291                     	;# 
  2912  0291                     	;# 
  2913  0292                     	;# 
  2914  0293                     	;# 
  2915  0294                     	;# 
  2916  0295                     	;# 
  2917  0295                     	;# 
  2918  0296                     	;# 
  2919  0297                     	;# 
  2920  0298                     	;# 
  2921  029F                     	;# 
  2922  030C                     	;# 
  2923  030E                     	;# 
  2924  0311                     	;# 
  2925  0311                     	;# 
  2926  0312                     	;# 
  2927  0313                     	;# 
  2928  0314                     	;# 
  2929  0315                     	;# 
  2930  0315                     	;# 
  2931  0316                     	;# 
  2932  0317                     	;# 
  2933  0318                     	;# 
  2934  038C                     	;# 
  2935  038E                     	;# 
  2936  0391                     	;# 
  2937  0392                     	;# 
  2938  0393                     	;# 
  2939  0397                     	;# 
  2940  0398                     	;# 
  2941  0399                     	;# 
  2942  039A                     	;# 
  2943  039C                     	;# 
  2944  039D                     	;# 
  2945  039E                     	;# 
  2946  039F                     	;# 
  2947  0411                     	;# 
  2948  0411                     	;# 
  2949  0412                     	;# 
  2950  0413                     	;# 
  2951  0414                     	;# 
  2952  0415                     	;# 
  2953  0416                     	;# 
  2954  0417                     	;# 
  2955  0418                     	;# 
  2956  0418                     	;# 
  2957  0419                     	;# 
  2958  041A                     	;# 
  2959  041B                     	;# 
  2960  041C                     	;# 
  2961  041D                     	;# 
  2962  041E                     	;# 
  2963  041F                     	;# 
  2964  0498                     	;# 
  2965  0498                     	;# 
  2966  0499                     	;# 
  2967  049A                     	;# 
  2968  049B                     	;# 
  2969  049B                     	;# 
  2970  049C                     	;# 
  2971  049D                     	;# 
  2972  049E                     	;# 
  2973  049F                     	;# 
  2974  0617                     	;# 
  2975  0618                     	;# 
  2976  0619                     	;# 
  2977  0619                     	;# 
  2978  061A                     	;# 
  2979  061B                     	;# 
  2980  061C                     	;# 
  2981  061C                     	;# 
  2982  061F                     	;# 
  2983  0691                     	;# 
  2984  0692                     	;# 
  2985  0693                     	;# 
  2986  0694                     	;# 
  2987  0695                     	;# 
  2988  0696                     	;# 
  2989  0697                     	;# 
  2990  0698                     	;# 
  2991  0699                     	;# 
  2992  0711                     	;# 
  2993  0712                     	;# 
  2994  0713                     	;# 
  2995  0714                     	;# 
  2996  0715                     	;# 
  2997  0716                     	;# 
  2998  0717                     	;# 
  2999  0718                     	;# 
  3000  0719                     	;# 
  3001  0891                     	;# 
  3002  0891                     	;# 
  3003  0891                     	;# 
  3004  0891                     	;# 
  3005  0891                     	;# 
  3006  0891                     	;# 
  3007  0892                     	;# 
  3008  0892                     	;# 
  3009  0892                     	;# 
  3010  0893                     	;# 
  3011  0893                     	;# 
  3012  0893                     	;# 
  3013  0893                     	;# 
  3014  0893                     	;# 
  3015  0893                     	;# 
  3016  0894                     	;# 
  3017  0894                     	;# 
  3018  0894                     	;# 
  3019  0895                     	;# 
  3020  0895                     	;# 
  3021  0895                     	;# 
  3022  0896                     	;# 
  3023  0896                     	;# 
  3024  0896                     	;# 
  3025  089B                     	;# 
  3026  0911                     	;# 
  3027  0912                     	;# 
  3028  0913                     	;# 
  3029  0914                     	;# 
  3030  0915                     	;# 
  3031  0916                     	;# 
  3032  0918                     	;# 
  3033  0919                     	;# 
  3034  091A                     	;# 
  3035  091B                     	;# 
  3036  091C                     	;# 
  3037  091D                     	;# 
  3038  091E                     	;# 
  3039  091F                     	;# 
  3040  0E0F                     	;# 
  3041  0E10                     	;# 
  3042  0E11                     	;# 
  3043  0E12                     	;# 
  3044  0E13                     	;# 
  3045  0E14                     	;# 
  3046  0E15                     	;# 
  3047  0E16                     	;# 
  3048  0E17                     	;# 
  3049  0E18                     	;# 
  3050  0E19                     	;# 
  3051  0E1A                     	;# 
  3052  0E1B                     	;# 
  3053  0E1C                     	;# 
  3054  0E1D                     	;# 
  3055  0E1E                     	;# 
  3056  0E1F                     	;# 
  3057  0E20                     	;# 
  3058  0E21                     	;# 
  3059  0E22                     	;# 
  3060  0E24                     	;# 
  3061  0E25                     	;# 
  3062  0E28                     	;# 
  3063  0E29                     	;# 
  3064  0E2A                     	;# 
  3065  0E2B                     	;# 
  3066  0E2C                     	;# 
  3067  0E2D                     	;# 
  3068  0E2E                     	;# 
  3069  0E2F                     	;# 
  3070  0E90                     	;# 
  3071  0E91                     	;# 
  3072  0E92                     	;# 
  3073  0E94                     	;# 
  3074  0E95                     	;# 
  3075  0EA0                     	;# 
  3076  0EA1                     	;# 
  3077  0EA2                     	;# 
  3078  0EA3                     	;# 
  3079  0EA4                     	;# 
  3080  0EA5                     	;# 
  3081  0F0F                     	;# 
  3082  0F10                     	;# 
  3083  0F11                     	;# 
  3084  0F12                     	;# 
  3085  0F13                     	;# 
  3086  0F14                     	;# 
  3087  0F15                     	;# 
  3088  0F16                     	;# 
  3089  0F17                     	;# 
  3090  0F18                     	;# 
  3091  0F19                     	;# 
  3092  0F1A                     	;# 
  3093  0F1B                     	;# 
  3094  0F1C                     	;# 
  3095  0F1D                     	;# 
  3096  0F1E                     	;# 
  3097  0F1F                     	;# 
  3098  0F20                     	;# 
  3099  0F21                     	;# 
  3100  0F22                     	;# 
  3101  0F23                     	;# 
  3102  0F24                     	;# 
  3103  0F25                     	;# 
  3104  0F26                     	;# 
  3105  0F27                     	;# 
  3106  0F28                     	;# 
  3107  0F29                     	;# 
  3108  0F2A                     	;# 
  3109  0F2B                     	;# 
  3110  0F2C                     	;# 
  3111  0F2D                     	;# 
  3112  0F2E                     	;# 
  3113  0F2F                     	;# 
  3114  0F30                     	;# 
  3115  0F31                     	;# 
  3116  0F32                     	;# 
  3117  0F33                     	;# 
  3118  0F34                     	;# 
  3119  0F35                     	;# 
  3120  0F36                     	;# 
  3121  0F37                     	;# 
  3122  0FE4                     	;# 
  3123  0FE5                     	;# 
  3124  0FE6                     	;# 
  3125  0FE7                     	;# 
  3126  0FE8                     	;# 
  3127  0FE9                     	;# 
  3128  0FEA                     	;# 
  3129  0FEB                     	;# 
  3130  0FED                     	;# 
  3131  0FEE                     	;# 
  3132  0FEF                     	;# 
  3133  0000                     	;# 
  3134  0001                     	;# 
  3135  0002                     	;# 
  3136  0003                     	;# 
  3137  0004                     	;# 
  3138  0005                     	;# 
  3139  0006                     	;# 
  3140  0007                     	;# 
  3141  0008                     	;# 
  3142  0009                     	;# 
  3143  000A                     	;# 
  3144  000B                     	;# 
  3145  000C                     	;# 
  3146  000E                     	;# 
  3147  0010                     	;# 
  3148  0011                     	;# 
  3149  0012                     	;# 
  3150  0013                     	;# 
  3151  0014                     	;# 
  3152  0015                     	;# 
  3153  0015                     	;# 
  3154  0016                     	;# 
  3155  0016                     	;# 
  3156  0017                     	;# 
  3157  0018                     	;# 
  3158  0019                     	;# 
  3159  0019                     	;# 
  3160  001A                     	;# 
  3161  001B                     	;# 
  3162  001C                     	;# 
  3163  001D                     	;# 
  3164  001E                     	;# 
  3165  001F                     	;# 
  3166  008C                     	;# 
  3167  008E                     	;# 
  3168  0090                     	;# 
  3169  0091                     	;# 
  3170  0092                     	;# 
  3171  0093                     	;# 
  3172  0094                     	;# 
  3173  0097                     	;# 
  3174  009B                     	;# 
  3175  009B                     	;# 
  3176  009C                     	;# 
  3177  009D                     	;# 
  3178  009E                     	;# 
  3179  009F                     	;# 
  3180  010C                     	;# 
  3181  010E                     	;# 
  3182  0111                     	;# 
  3183  0112                     	;# 
  3184  0113                     	;# 
  3185  0114                     	;# 
  3186  0115                     	;# 
  3187  0116                     	;# 
  3188  0117                     	;# 
  3189  0118                     	;# 
  3190  0119                     	;# 
  3191  018C                     	;# 
  3192  018E                     	;# 
  3193  0197                     	;# 
  3194  0199                     	;# 
  3195  0199                     	;# 
  3196  0199                     	;# 
  3197  019A                     	;# 
  3198  019A                     	;# 
  3199  019A                     	;# 
  3200  019B                     	;# 
  3201  019B                     	;# 
  3202  019B                     	;# 
  3203  019B                     	;# 
  3204  019B                     	;# 
  3205  019C                     	;# 
  3206  019C                     	;# 
  3207  019C                     	;# 
  3208  019D                     	;# 
  3209  019D                     	;# 
  3210  019D                     	;# 
  3211  019E                     	;# 
  3212  019E                     	;# 
  3213  019E                     	;# 
  3214  019F                     	;# 
  3215  019F                     	;# 
  3216  019F                     	;# 
  3217  019F                     	;# 
  3218  019F                     	;# 
  3219  020C                     	;# 
  3220  020E                     	;# 
  3221  0211                     	;# 
  3222  0211                     	;# 
  3223  0212                     	;# 
  3224  0212                     	;# 
  3225  0213                     	;# 
  3226  0213                     	;# 
  3227  0214                     	;# 
  3228  0214                     	;# 
  3229  0215                     	;# 
  3230  0215                     	;# 
  3231  0215                     	;# 
  3232  0215                     	;# 
  3233  0216                     	;# 
  3234  0216                     	;# 
  3235  0217                     	;# 
  3236  0217                     	;# 
  3237  0219                     	;# 
  3238  021A                     	;# 
  3239  021B                     	;# 
  3240  021C                     	;# 
  3241  021D                     	;# 
  3242  021D                     	;# 
  3243  021E                     	;# 
  3244  021F                     	;# 
  3245  028C                     	;# 
  3246  028E                     	;# 
  3247  0291                     	;# 
  3248  0291                     	;# 
  3249  0292                     	;# 
  3250  0293                     	;# 
  3251  0294                     	;# 
  3252  0295                     	;# 
  3253  0295                     	;# 
  3254  0296                     	;# 
  3255  0297                     	;# 
  3256  0298                     	;# 
  3257  029F                     	;# 
  3258  030C                     	;# 
  3259  030E                     	;# 
  3260  0311                     	;# 
  3261  0311                     	;# 
  3262  0312                     	;# 
  3263  0313                     	;# 
  3264  0314                     	;# 
  3265  0315                     	;# 
  3266  0315                     	;# 
  3267  0316                     	;# 
  3268  0317                     	;# 
  3269  0318                     	;# 
  3270  038C                     	;# 
  3271  038E                     	;# 
  3272  0391                     	;# 
  3273  0392                     	;# 
  3274  0393                     	;# 
  3275  0397                     	;# 
  3276  0398                     	;# 
  3277  0399                     	;# 
  3278  039A                     	;# 
  3279  039C                     	;# 
  3280  039D                     	;# 
  3281  039E                     	;# 
  3282  039F                     	;# 
  3283  0411                     	;# 
  3284  0411                     	;# 
  3285  0412                     	;# 
  3286  0413                     	;# 
  3287  0414                     	;# 
  3288  0415                     	;# 
  3289  0416                     	;# 
  3290  0417                     	;# 
  3291  0418                     	;# 
  3292  0418                     	;# 
  3293  0419                     	;# 
  3294  041A                     	;# 
  3295  041B                     	;# 
  3296  041C                     	;# 
  3297  041D                     	;# 
  3298  041E                     	;# 
  3299  041F                     	;# 
  3300  0498                     	;# 
  3301  0498                     	;# 
  3302  0499                     	;# 
  3303  049A                     	;# 
  3304  049B                     	;# 
  3305  049B                     	;# 
  3306  049C                     	;# 
  3307  049D                     	;# 
  3308  049E                     	;# 
  3309  049F                     	;# 
  3310  0617                     	;# 
  3311  0618                     	;# 
  3312  0619                     	;# 
  3313  0619                     	;# 
  3314  061A                     	;# 
  3315  061B                     	;# 
  3316  061C                     	;# 
  3317  061C                     	;# 
  3318  061F                     	;# 
  3319  0691                     	;# 
  3320  0692                     	;# 
  3321  0693                     	;# 
  3322  0694                     	;# 
  3323  0695                     	;# 
  3324  0696                     	;# 
  3325  0697                     	;# 
  3326  0698                     	;# 
  3327  0699                     	;# 
  3328  0711                     	;# 
  3329  0712                     	;# 
  3330  0713                     	;# 
  3331  0714                     	;# 
  3332  0715                     	;# 
  3333  0716                     	;# 
  3334  0717                     	;# 
  3335  0718                     	;# 
  3336  0719                     	;# 
  3337  0891                     	;# 
  3338  0891                     	;# 
  3339  0891                     	;# 
  3340  0891                     	;# 
  3341  0891                     	;# 
  3342  0891                     	;# 
  3343  0892                     	;# 
  3344  0892                     	;# 
  3345  0892                     	;# 
  3346  0893                     	;# 
  3347  0893                     	;# 
  3348  0893                     	;# 
  3349  0893                     	;# 
  3350  0893                     	;# 
  3351  0893                     	;# 
  3352  0894                     	;# 
  3353  0894                     	;# 
  3354  0894                     	;# 
  3355  0895                     	;# 
  3356  0895                     	;# 
  3357  0895                     	;# 
  3358  0896                     	;# 
  3359  0896                     	;# 
  3360  0896                     	;# 
  3361  089B                     	;# 
  3362  0911                     	;# 
  3363  0912                     	;# 
  3364  0913                     	;# 
  3365  0914                     	;# 
  3366  0915                     	;# 
  3367  0916                     	;# 
  3368  0918                     	;# 
  3369  0919                     	;# 
  3370  091A                     	;# 
  3371  091B                     	;# 
  3372  091C                     	;# 
  3373  091D                     	;# 
  3374  091E                     	;# 
  3375  091F                     	;# 
  3376  0E0F                     	;# 
  3377  0E10                     	;# 
  3378  0E11                     	;# 
  3379  0E12                     	;# 
  3380  0E13                     	;# 
  3381  0E14                     	;# 
  3382  0E15                     	;# 
  3383  0E16                     	;# 
  3384  0E17                     	;# 
  3385  0E18                     	;# 
  3386  0E19                     	;# 
  3387  0E1A                     	;# 
  3388  0E1B                     	;# 
  3389  0E1C                     	;# 
  3390  0E1D                     	;# 
  3391  0E1E                     	;# 
  3392  0E1F                     	;# 
  3393  0E20                     	;# 
  3394  0E21                     	;# 
  3395  0E22                     	;# 
  3396  0E24                     	;# 
  3397  0E25                     	;# 
  3398  0E28                     	;# 
  3399  0E29                     	;# 
  3400  0E2A                     	;# 
  3401  0E2B                     	;# 
  3402  0E2C                     	;# 
  3403  0E2D                     	;# 
  3404  0E2E                     	;# 
  3405  0E2F                     	;# 
  3406  0E90                     	;# 
  3407  0E91                     	;# 
  3408  0E92                     	;# 
  3409  0E94                     	;# 
  3410  0E95                     	;# 
  3411  0EA0                     	;# 
  3412  0EA1                     	;# 
  3413  0EA2                     	;# 
  3414  0EA3                     	;# 
  3415  0EA4                     	;# 
  3416  0EA5                     	;# 
  3417  0F0F                     	;# 
  3418  0F10                     	;# 
  3419  0F11                     	;# 
  3420  0F12                     	;# 
  3421  0F13                     	;# 
  3422  0F14                     	;# 
  3423  0F15                     	;# 
  3424  0F16                     	;# 
  3425  0F17                     	;# 
  3426  0F18                     	;# 
  3427  0F19                     	;# 
  3428  0F1A                     	;# 
  3429  0F1B                     	;# 
  3430  0F1C                     	;# 
  3431  0F1D                     	;# 
  3432  0F1E                     	;# 
  3433  0F1F                     	;# 
  3434  0F20                     	;# 
  3435  0F21                     	;# 
  3436  0F22                     	;# 
  3437  0F23                     	;# 
  3438  0F24                     	;# 
  3439  0F25                     	;# 
  3440  0F26                     	;# 
  3441  0F27                     	;# 
  3442  0F28                     	;# 
  3443  0F29                     	;# 
  3444  0F2A                     	;# 
  3445  0F2B                     	;# 
  3446  0F2C                     	;# 
  3447  0F2D                     	;# 
  3448  0F2E                     	;# 
  3449  0F2F                     	;# 
  3450  0F30                     	;# 
  3451  0F31                     	;# 
  3452  0F32                     	;# 
  3453  0F33                     	;# 
  3454  0F34                     	;# 
  3455  0F35                     	;# 
  3456  0F36                     	;# 
  3457  0F37                     	;# 
  3458  0FE4                     	;# 
  3459  0FE5                     	;# 
  3460  0FE6                     	;# 
  3461  0FE7                     	;# 
  3462  0FE8                     	;# 
  3463  0FE9                     	;# 
  3464  0FEA                     	;# 
  3465  0FEB                     	;# 
  3466  0FED                     	;# 
  3467  0FEE                     	;# 
  3468  0FEF                     	;# 
  3469  0000                     	;# 
  3470  0001                     	;# 
  3471  0002                     	;# 
  3472  0003                     	;# 
  3473  0004                     	;# 
  3474  0005                     	;# 
  3475  0006                     	;# 
  3476  0007                     	;# 
  3477  0008                     	;# 
  3478  0009                     	;# 
  3479  000A                     	;# 
  3480  000B                     	;# 
  3481  000C                     	;# 
  3482  000E                     	;# 
  3483  0010                     	;# 
  3484  0011                     	;# 
  3485  0012                     	;# 
  3486  0013                     	;# 
  3487  0014                     	;# 
  3488  0015                     	;# 
  3489  0015                     	;# 
  3490  0016                     	;# 
  3491  0016                     	;# 
  3492  0017                     	;# 
  3493  0018                     	;# 
  3494  0019                     	;# 
  3495  0019                     	;# 
  3496  001A                     	;# 
  3497  001B                     	;# 
  3498  001C                     	;# 
  3499  001D                     	;# 
  3500  001E                     	;# 
  3501  001F                     	;# 
  3502  008C                     	;# 
  3503  008E                     	;# 
  3504  0090                     	;# 
  3505  0091                     	;# 
  3506  0092                     	;# 
  3507  0093                     	;# 
  3508  0094                     	;# 
  3509  0097                     	;# 
  3510  009B                     	;# 
  3511  009B                     	;# 
  3512  009C                     	;# 
  3513  009D                     	;# 
  3514  009E                     	;# 
  3515  009F                     	;# 
  3516  010C                     	;# 
  3517  010E                     	;# 
  3518  0111                     	;# 
  3519  0112                     	;# 
  3520  0113                     	;# 
  3521  0114                     	;# 
  3522  0115                     	;# 
  3523  0116                     	;# 
  3524  0117                     	;# 
  3525  0118                     	;# 
  3526  0119                     	;# 
  3527  018C                     	;# 
  3528  018E                     	;# 
  3529  0197                     	;# 
  3530  0199                     	;# 
  3531  0199                     	;# 
  3532  0199                     	;# 
  3533  019A                     	;# 
  3534  019A                     	;# 
  3535  019A                     	;# 
  3536  019B                     	;# 
  3537  019B                     	;# 
  3538  019B                     	;# 
  3539  019B                     	;# 
  3540  019B                     	;# 
  3541  019C                     	;# 
  3542  019C                     	;# 
  3543  019C                     	;# 
  3544  019D                     	;# 
  3545  019D                     	;# 
  3546  019D                     	;# 
  3547  019E                     	;# 
  3548  019E                     	;# 
  3549  019E                     	;# 
  3550  019F                     	;# 
  3551  019F                     	;# 
  3552  019F                     	;# 
  3553  019F                     	;# 
  3554  019F                     	;# 
  3555  020C                     	;# 
  3556  020E                     	;# 
  3557  0211                     	;# 
  3558  0211                     	;# 
  3559  0212                     	;# 
  3560  0212                     	;# 
  3561  0213                     	;# 
  3562  0213                     	;# 
  3563  0214                     	;# 
  3564  0214                     	;# 
  3565  0215                     	;# 
  3566  0215                     	;# 
  3567  0215                     	;# 
  3568  0215                     	;# 
  3569  0216                     	;# 
  3570  0216                     	;# 
  3571  0217                     	;# 
  3572  0217                     	;# 
  3573  0219                     	;# 
  3574  021A                     	;# 
  3575  021B                     	;# 
  3576  021C                     	;# 
  3577  021D                     	;# 
  3578  021D                     	;# 
  3579  021E                     	;# 
  3580  021F                     	;# 
  3581  028C                     	;# 
  3582  028E                     	;# 
  3583  0291                     	;# 
  3584  0291                     	;# 
  3585  0292                     	;# 
  3586  0293                     	;# 
  3587  0294                     	;# 
  3588  0295                     	;# 
  3589  0295                     	;# 
  3590  0296                     	;# 
  3591  0297                     	;# 
  3592  0298                     	;# 
  3593  029F                     	;# 
  3594  030C                     	;# 
  3595  030E                     	;# 
  3596  0311                     	;# 
  3597  0311                     	;# 
  3598  0312                     	;# 
  3599  0313                     	;# 
  3600  0314                     	;# 
  3601  0315                     	;# 
  3602  0315                     	;# 
  3603  0316                     	;# 
  3604  0317                     	;# 
  3605  0318                     	;# 
  3606  038C                     	;# 
  3607  038E                     	;# 
  3608  0391                     	;# 
  3609  0392                     	;# 
  3610  0393                     	;# 
  3611  0397                     	;# 
  3612  0398                     	;# 
  3613  0399                     	;# 
  3614  039A                     	;# 
  3615  039C                     	;# 
  3616  039D                     	;# 
  3617  039E                     	;# 
  3618  039F                     	;# 
  3619  0411                     	;# 
  3620  0411                     	;# 
  3621  0412                     	;# 
  3622  0413                     	;# 
  3623  0414                     	;# 
  3624  0415                     	;# 
  3625  0416                     	;# 
  3626  0417                     	;# 
  3627  0418                     	;# 
  3628  0418                     	;# 
  3629  0419                     	;# 
  3630  041A                     	;# 
  3631  041B                     	;# 
  3632  041C                     	;# 
  3633  041D                     	;# 
  3634  041E                     	;# 
  3635  041F                     	;# 
  3636  0498                     	;# 
  3637  0498                     	;# 
  3638  0499                     	;# 
  3639  049A                     	;# 
  3640  049B                     	;# 
  3641  049B                     	;# 
  3642  049C                     	;# 
  3643  049D                     	;# 
  3644  049E                     	;# 
  3645  049F                     	;# 
  3646  0617                     	;# 
  3647  0618                     	;# 
  3648  0619                     	;# 
  3649  0619                     	;# 
  3650  061A                     	;# 
  3651  061B                     	;# 
  3652  061C                     	;# 
  3653  061C                     	;# 
  3654  061F                     	;# 
  3655  0691                     	;# 
  3656  0692                     	;# 
  3657  0693                     	;# 
  3658  0694                     	;# 
  3659  0695                     	;# 
  3660  0696                     	;# 
  3661  0697                     	;# 
  3662  0698                     	;# 
  3663  0699                     	;# 
  3664  0711                     	;# 
  3665  0712                     	;# 
  3666  0713                     	;# 
  3667  0714                     	;# 
  3668  0715                     	;# 
  3669  0716                     	;# 
  3670  0717                     	;# 
  3671  0718                     	;# 
  3672  0719                     	;# 
  3673  0891                     	;# 
  3674  0891                     	;# 
  3675  0891                     	;# 
  3676  0891                     	;# 
  3677  0891                     	;# 
  3678  0891                     	;# 
  3679  0892                     	;# 
  3680  0892                     	;# 
  3681  0892                     	;# 
  3682  0893                     	;# 
  3683  0893                     	;# 
  3684  0893                     	;# 
  3685  0893                     	;# 
  3686  0893                     	;# 
  3687  0893                     	;# 
  3688  0894                     	;# 
  3689  0894                     	;# 
  3690  0894                     	;# 
  3691  0895                     	;# 
  3692  0895                     	;# 
  3693  0895                     	;# 
  3694  0896                     	;# 
  3695  0896                     	;# 
  3696  0896                     	;# 
  3697  089B                     	;# 
  3698  0911                     	;# 
  3699  0912                     	;# 
  3700  0913                     	;# 
  3701  0914                     	;# 
  3702  0915                     	;# 
  3703  0916                     	;# 
  3704  0918                     	;# 
  3705  0919                     	;# 
  3706  091A                     	;# 
  3707  091B                     	;# 
  3708  091C                     	;# 
  3709  091D                     	;# 
  3710  091E                     	;# 
  3711  091F                     	;# 
  3712  0E0F                     	;# 
  3713  0E10                     	;# 
  3714  0E11                     	;# 
  3715  0E12                     	;# 
  3716  0E13                     	;# 
  3717  0E14                     	;# 
  3718  0E15                     	;# 
  3719  0E16                     	;# 
  3720  0E17                     	;# 
  3721  0E18                     	;# 
  3722  0E19                     	;# 
  3723  0E1A                     	;# 
  3724  0E1B                     	;# 
  3725  0E1C                     	;# 
  3726  0E1D                     	;# 
  3727  0E1E                     	;# 
  3728  0E1F                     	;# 
  3729  0E20                     	;# 
  3730  0E21                     	;# 
  3731  0E22                     	;# 
  3732  0E24                     	;# 
  3733  0E25                     	;# 
  3734  0E28                     	;# 
  3735  0E29                     	;# 
  3736  0E2A                     	;# 
  3737  0E2B                     	;# 
  3738  0E2C                     	;# 
  3739  0E2D                     	;# 
  3740  0E2E                     	;# 
  3741  0E2F                     	;# 
  3742  0E90                     	;# 
  3743  0E91                     	;# 
  3744  0E92                     	;# 
  3745  0E94                     	;# 
  3746  0E95                     	;# 
  3747  0EA0                     	;# 
  3748  0EA1                     	;# 
  3749  0EA2                     	;# 
  3750  0EA3                     	;# 
  3751  0EA4                     	;# 
  3752  0EA5                     	;# 
  3753  0F0F                     	;# 
  3754  0F10                     	;# 
  3755  0F11                     	;# 
  3756  0F12                     	;# 
  3757  0F13                     	;# 
  3758  0F14                     	;# 
  3759  0F15                     	;# 
  3760  0F16                     	;# 
  3761  0F17                     	;# 
  3762  0F18                     	;# 
  3763  0F19                     	;# 
  3764  0F1A                     	;# 
  3765  0F1B                     	;# 
  3766  0F1C                     	;# 
  3767  0F1D                     	;# 
  3768  0F1E                     	;# 
  3769  0F1F                     	;# 
  3770  0F20                     	;# 
  3771  0F21                     	;# 
  3772  0F22                     	;# 
  3773  0F23                     	;# 
  3774  0F24                     	;# 
  3775  0F25                     	;# 
  3776  0F26                     	;# 
  3777  0F27                     	;# 
  3778  0F28                     	;# 
  3779  0F29                     	;# 
  3780  0F2A                     	;# 
  3781  0F2B                     	;# 
  3782  0F2C                     	;# 
  3783  0F2D                     	;# 
  3784  0F2E                     	;# 
  3785  0F2F                     	;# 
  3786  0F30                     	;# 
  3787  0F31                     	;# 
  3788  0F32                     	;# 
  3789  0F33                     	;# 
  3790  0F34                     	;# 
  3791  0F35                     	;# 
  3792  0F36                     	;# 
  3793  0F37                     	;# 
  3794  0FE4                     	;# 
  3795  0FE5                     	;# 
  3796  0FE6                     	;# 
  3797  0FE7                     	;# 
  3798  0FE8                     	;# 
  3799  0FE9                     	;# 
  3800  0FEA                     	;# 
  3801  0FEB                     	;# 
  3802  0FED                     	;# 
  3803  0FEE                     	;# 
  3804  0FEF                     	;# 
  3805  0000                     	;# 
  3806  0001                     	;# 
  3807  0002                     	;# 
  3808  0003                     	;# 
  3809  0004                     	;# 
  3810  0005                     	;# 
  3811  0006                     	;# 
  3812  0007                     	;# 
  3813  0008                     	;# 
  3814  0009                     	;# 
  3815  000A                     	;# 
  3816  000B                     	;# 
  3817  000C                     	;# 
  3818  000E                     	;# 
  3819  0010                     	;# 
  3820  0011                     	;# 
  3821  0012                     	;# 
  3822  0013                     	;# 
  3823  0014                     	;# 
  3824  0015                     	;# 
  3825  0015                     	;# 
  3826  0016                     	;# 
  3827  0016                     	;# 
  3828  0017                     	;# 
  3829  0018                     	;# 
  3830  0019                     	;# 
  3831  0019                     	;# 
  3832  001A                     	;# 
  3833  001B                     	;# 
  3834  001C                     	;# 
  3835  001D                     	;# 
  3836  001E                     	;# 
  3837  001F                     	;# 
  3838  008C                     	;# 
  3839  008E                     	;# 
  3840  0090                     	;# 
  3841  0091                     	;# 
  3842  0092                     	;# 
  3843  0093                     	;# 
  3844  0094                     	;# 
  3845  0097                     	;# 
  3846  009B                     	;# 
  3847  009B                     	;# 
  3848  009C                     	;# 
  3849  009D                     	;# 
  3850  009E                     	;# 
  3851  009F                     	;# 
  3852  010C                     	;# 
  3853  010E                     	;# 
  3854  0111                     	;# 
  3855  0112                     	;# 
  3856  0113                     	;# 
  3857  0114                     	;# 
  3858  0115                     	;# 
  3859  0116                     	;# 
  3860  0117                     	;# 
  3861  0118                     	;# 
  3862  0119                     	;# 
  3863  018C                     	;# 
  3864  018E                     	;# 
  3865  0197                     	;# 
  3866  0199                     	;# 
  3867  0199                     	;# 
  3868  0199                     	;# 
  3869  019A                     	;# 
  3870  019A                     	;# 
  3871  019A                     	;# 
  3872  019B                     	;# 
  3873  019B                     	;# 
  3874  019B                     	;# 
  3875  019B                     	;# 
  3876  019B                     	;# 
  3877  019C                     	;# 
  3878  019C                     	;# 
  3879  019C                     	;# 
  3880  019D                     	;# 
  3881  019D                     	;# 
  3882  019D                     	;# 
  3883  019E                     	;# 
  3884  019E                     	;# 
  3885  019E                     	;# 
  3886  019F                     	;# 
  3887  019F                     	;# 
  3888  019F                     	;# 
  3889  019F                     	;# 
  3890  019F                     	;# 
  3891  020C                     	;# 
  3892  020E                     	;# 
  3893  0211                     	;# 
  3894  0211                     	;# 
  3895  0212                     	;# 
  3896  0212                     	;# 
  3897  0213                     	;# 
  3898  0213                     	;# 
  3899  0214                     	;# 
  3900  0214                     	;# 
  3901  0215                     	;# 
  3902  0215                     	;# 
  3903  0215                     	;# 
  3904  0215                     	;# 
  3905  0216                     	;# 
  3906  0216                     	;# 
  3907  0217                     	;# 
  3908  0217                     	;# 
  3909  0219                     	;# 
  3910  021A                     	;# 
  3911  021B                     	;# 
  3912  021C                     	;# 
  3913  021D                     	;# 
  3914  021D                     	;# 
  3915  021E                     	;# 
  3916  021F                     	;# 
  3917  028C                     	;# 
  3918  028E                     	;# 
  3919  0291                     	;# 
  3920  0291                     	;# 
  3921  0292                     	;# 
  3922  0293                     	;# 
  3923  0294                     	;# 
  3924  0295                     	;# 
  3925  0295                     	;# 
  3926  0296                     	;# 
  3927  0297                     	;# 
  3928  0298                     	;# 
  3929  029F                     	;# 
  3930  030C                     	;# 
  3931  030E                     	;# 
  3932  0311                     	;# 
  3933  0311                     	;# 
  3934  0312                     	;# 
  3935  0313                     	;# 
  3936  0314                     	;# 
  3937  0315                     	;# 
  3938  0315                     	;# 
  3939  0316                     	;# 
  3940  0317                     	;# 
  3941  0318                     	;# 
  3942  038C                     	;# 
  3943  038E                     	;# 
  3944  0391                     	;# 
  3945  0392                     	;# 
  3946  0393                     	;# 
  3947  0397                     	;# 
  3948  0398                     	;# 
  3949  0399                     	;# 
  3950  039A                     	;# 
  3951  039C                     	;# 
  3952  039D                     	;# 
  3953  039E                     	;# 
  3954  039F                     	;# 
  3955  0411                     	;# 
  3956  0411                     	;# 
  3957  0412                     	;# 
  3958  0413                     	;# 
  3959  0414                     	;# 
  3960  0415                     	;# 
  3961  0416                     	;# 
  3962  0417                     	;# 
  3963  0418                     	;# 
  3964  0418                     	;# 
  3965  0419                     	;# 
  3966  041A                     	;# 
  3967  041B                     	;# 
  3968  041C                     	;# 
  3969  041D                     	;# 
  3970  041E                     	;# 
  3971  041F                     	;# 
  3972  0498                     	;# 
  3973  0498                     	;# 
  3974  0499                     	;# 
  3975  049A                     	;# 
  3976  049B                     	;# 
  3977  049B                     	;# 
  3978  049C                     	;# 
  3979  049D                     	;# 
  3980  049E                     	;# 
  3981  049F                     	;# 
  3982  0617                     	;# 
  3983  0618                     	;# 
  3984  0619                     	;# 
  3985  0619                     	;# 
  3986  061A                     	;# 
  3987  061B                     	;# 
  3988  061C                     	;# 
  3989  061C                     	;# 
  3990  061F                     	;# 
  3991  0691                     	;# 
  3992  0692                     	;# 
  3993  0693                     	;# 
  3994  0694                     	;# 
  3995  0695                     	;# 
  3996  0696                     	;# 
  3997  0697                     	;# 
  3998  0698                     	;# 
  3999  0699                     	;# 
  4000  0711                     	;# 
  4001  0712                     	;# 
  4002  0713                     	;# 
  4003  0714                     	;# 
  4004  0715                     	;# 
  4005  0716                     	;# 
  4006  0717                     	;# 
  4007  0718                     	;# 
  4008  0719                     	;# 
  4009  0891                     	;# 
  4010  0891                     	;# 
  4011  0891                     	;# 
  4012  0891                     	;# 
  4013  0891                     	;# 
  4014  0891                     	;# 
  4015  0892                     	;# 
  4016  0892                     	;# 
  4017  0892                     	;# 
  4018  0893                     	;# 
  4019  0893                     	;# 
  4020  0893                     	;# 
  4021  0893                     	;# 
  4022  0893                     	;# 
  4023  0893                     	;# 
  4024  0894                     	;# 
  4025  0894                     	;# 
  4026  0894                     	;# 
  4027  0895                     	;# 
  4028  0895                     	;# 
  4029  0895                     	;# 
  4030  0896                     	;# 
  4031  0896                     	;# 
  4032  0896                     	;# 
  4033  089B                     	;# 
  4034  0911                     	;# 
  4035  0912                     	;# 
  4036  0913                     	;# 
  4037  0914                     	;# 
  4038  0915                     	;# 
  4039  0916                     	;# 
  4040  0918                     	;# 
  4041  0919                     	;# 
  4042  091A                     	;# 
  4043  091B                     	;# 
  4044  091C                     	;# 
  4045  091D                     	;# 
  4046  091E                     	;# 
  4047  091F                     	;# 
  4048  0E0F                     	;# 
  4049  0E10                     	;# 
  4050  0E11                     	;# 
  4051  0E12                     	;# 
  4052  0E13                     	;# 
  4053  0E14                     	;# 
  4054  0E15                     	;# 
  4055  0E16                     	;# 
  4056  0E17                     	;# 
  4057  0E18                     	;# 
  4058  0E19                     	;# 
  4059  0E1A                     	;# 
  4060  0E1B                     	;# 
  4061  0E1C                     	;# 
  4062  0E1D                     	;# 
  4063  0E1E                     	;# 
  4064  0E1F                     	;# 
  4065  0E20                     	;# 
  4066  0E21                     	;# 
  4067  0E22                     	;# 
  4068  0E24                     	;# 
  4069  0E25                     	;# 
  4070  0E28                     	;# 
  4071  0E29                     	;# 
  4072  0E2A                     	;# 
  4073  0E2B                     	;# 
  4074  0E2C                     	;# 
  4075  0E2D                     	;# 
  4076  0E2E                     	;# 
  4077  0E2F                     	;# 
  4078  0E90                     	;# 
  4079  0E91                     	;# 
  4080  0E92                     	;# 
  4081  0E94                     	;# 
  4082  0E95                     	;# 
  4083  0EA0                     	;# 
  4084  0EA1                     	;# 
  4085  0EA2                     	;# 
  4086  0EA3                     	;# 
  4087  0EA4                     	;# 
  4088  0EA5                     	;# 
  4089  0F0F                     	;# 
  4090  0F10                     	;# 
  4091  0F11                     	;# 
  4092  0F12                     	;# 
  4093  0F13                     	;# 
  4094  0F14                     	;# 
  4095  0F15                     	;# 
  4096  0F16                     	;# 
  4097  0F17                     	;# 
  4098  0F18                     	;# 
  4099  0F19                     	;# 
  4100  0F1A                     	;# 
  4101  0F1B                     	;# 
  4102  0F1C                     	;# 
  4103  0F1D                     	;# 
  4104  0F1E                     	;# 
  4105  0F1F                     	;# 
  4106  0F20                     	;# 
  4107  0F21                     	;# 
  4108  0F22                     	;# 
  4109  0F23                     	;# 
  4110  0F24                     	;# 
  4111  0F25                     	;# 
  4112  0F26                     	;# 
  4113  0F27                     	;# 
  4114  0F28                     	;# 
  4115  0F29                     	;# 
  4116  0F2A                     	;# 
  4117  0F2B                     	;# 
  4118  0F2C                     	;# 
  4119  0F2D                     	;# 
  4120  0F2E                     	;# 
  4121  0F2F                     	;# 
  4122  0F30                     	;# 
  4123  0F31                     	;# 
  4124  0F32                     	;# 
  4125  0F33                     	;# 
  4126  0F34                     	;# 
  4127  0F35                     	;# 
  4128  0F36                     	;# 
  4129  0F37                     	;# 
  4130  0FE4                     	;# 
  4131  0FE5                     	;# 
  4132  0FE6                     	;# 
  4133  0FE7                     	;# 
  4134  0FE8                     	;# 
  4135  0FE9                     	;# 
  4136  0FEA                     	;# 
  4137  0FEB                     	;# 
  4138  0FED                     	;# 
  4139  0FEE                     	;# 
  4140  0FEF                     	;# 
  4141  0000                     	;# 
  4142  0001                     	;# 
  4143  0002                     	;# 
  4144  0003                     	;# 
  4145  0004                     	;# 
  4146  0005                     	;# 
  4147  0006                     	;# 
  4148  0007                     	;# 
  4149  0008                     	;# 
  4150  0009                     	;# 
  4151  000A                     	;# 
  4152  000B                     	;# 
  4153  000C                     	;# 
  4154  000E                     	;# 
  4155  0010                     	;# 
  4156  0011                     	;# 
  4157  0012                     	;# 
  4158  0013                     	;# 
  4159  0014                     	;# 
  4160  0015                     	;# 
  4161  0015                     	;# 
  4162  0016                     	;# 
  4163  0016                     	;# 
  4164  0017                     	;# 
  4165  0018                     	;# 
  4166  0019                     	;# 
  4167  0019                     	;# 
  4168  001A                     	;# 
  4169  001B                     	;# 
  4170  001C                     	;# 
  4171  001D                     	;# 
  4172  001E                     	;# 
  4173  001F                     	;# 
  4174  008C                     	;# 
  4175  008E                     	;# 
  4176  0090                     	;# 
  4177  0091                     	;# 
  4178  0092                     	;# 
  4179  0093                     	;# 
  4180  0094                     	;# 
  4181  0097                     	;# 
  4182  009B                     	;# 
  4183  009B                     	;# 
  4184  009C                     	;# 
  4185  009D                     	;# 
  4186  009E                     	;# 
  4187  009F                     	;# 
  4188  010C                     	;# 
  4189  010E                     	;# 
  4190  0111                     	;# 
  4191  0112                     	;# 
  4192  0113                     	;# 
  4193  0114                     	;# 
  4194  0115                     	;# 
  4195  0116                     	;# 
  4196  0117                     	;# 
  4197  0118                     	;# 
  4198  0119                     	;# 
  4199  018C                     	;# 
  4200  018E                     	;# 
  4201  0197                     	;# 
  4202  0199                     	;# 
  4203  0199                     	;# 
  4204  0199                     	;# 
  4205  019A                     	;# 
  4206  019A                     	;# 
  4207  019A                     	;# 
  4208  019B                     	;# 
  4209  019B                     	;# 
  4210  019B                     	;# 
  4211  019B                     	;# 
  4212  019B                     	;# 
  4213  019C                     	;# 
  4214  019C                     	;# 
  4215  019C                     	;# 
  4216  019D                     	;# 
  4217  019D                     	;# 
  4218  019D                     	;# 
  4219  019E                     	;# 
  4220  019E                     	;# 
  4221  019E                     	;# 
  4222  019F                     	;# 
  4223  019F                     	;# 
  4224  019F                     	;# 
  4225  019F                     	;# 
  4226  019F                     	;# 
  4227  020C                     	;# 
  4228  020E                     	;# 
  4229  0211                     	;# 
  4230  0211                     	;# 
  4231  0212                     	;# 
  4232  0212                     	;# 
  4233  0213                     	;# 
  4234  0213                     	;# 
  4235  0214                     	;# 
  4236  0214                     	;# 
  4237  0215                     	;# 
  4238  0215                     	;# 
  4239  0215                     	;# 
  4240  0215                     	;# 
  4241  0216                     	;# 
  4242  0216                     	;# 
  4243  0217                     	;# 
  4244  0217                     	;# 
  4245  0219                     	;# 
  4246  021A                     	;# 
  4247  021B                     	;# 
  4248  021C                     	;# 
  4249  021D                     	;# 
  4250  021D                     	;# 
  4251  021E                     	;# 
  4252  021F                     	;# 
  4253  028C                     	;# 
  4254  028E                     	;# 
  4255  0291                     	;# 
  4256  0291                     	;# 
  4257  0292                     	;# 
  4258  0293                     	;# 
  4259  0294                     	;# 
  4260  0295                     	;# 
  4261  0295                     	;# 
  4262  0296                     	;# 
  4263  0297                     	;# 
  4264  0298                     	;# 
  4265  029F                     	;# 
  4266  030C                     	;# 
  4267  030E                     	;# 
  4268  0311                     	;# 
  4269  0311                     	;# 
  4270  0312                     	;# 
  4271  0313                     	;# 
  4272  0314                     	;# 
  4273  0315                     	;# 
  4274  0315                     	;# 
  4275  0316                     	;# 
  4276  0317                     	;# 
  4277  0318                     	;# 
  4278  038C                     	;# 
  4279  038E                     	;# 
  4280  0391                     	;# 
  4281  0392                     	;# 
  4282  0393                     	;# 
  4283  0397                     	;# 
  4284  0398                     	;# 
  4285  0399                     	;# 
  4286  039A                     	;# 
  4287  039C                     	;# 
  4288  039D                     	;# 
  4289  039E                     	;# 
  4290  039F                     	;# 
  4291  0411                     	;# 
  4292  0411                     	;# 
  4293  0412                     	;# 
  4294  0413                     	;# 
  4295  0414                     	;# 
  4296  0415                     	;# 
  4297  0416                     	;# 
  4298  0417                     	;# 
  4299  0418                     	;# 
  4300  0418                     	;# 
  4301  0419                     	;# 
  4302  041A                     	;# 
  4303  041B                     	;# 
  4304  041C                     	;# 
  4305  041D                     	;# 
  4306  041E                     	;# 
  4307  041F                     	;# 
  4308  0498                     	;# 
  4309  0498                     	;# 
  4310  0499                     	;# 
  4311  049A                     	;# 
  4312  049B                     	;# 
  4313  049B                     	;# 
  4314  049C                     	;# 
  4315  049D                     	;# 
  4316  049E                     	;# 
  4317  049F                     	;# 
  4318  0617                     	;# 
  4319  0618                     	;# 
  4320  0619                     	;# 
  4321  0619                     	;# 
  4322  061A                     	;# 
  4323  061B                     	;# 
  4324  061C                     	;# 
  4325  061C                     	;# 
  4326  061F                     	;# 
  4327  0691                     	;# 
  4328  0692                     	;# 
  4329  0693                     	;# 
  4330  0694                     	;# 
  4331  0695                     	;# 
  4332  0696                     	;# 
  4333  0697                     	;# 
  4334  0698                     	;# 
  4335  0699                     	;# 
  4336  0711                     	;# 
  4337  0712                     	;# 
  4338  0713                     	;# 
  4339  0714                     	;# 
  4340  0715                     	;# 
  4341  0716                     	;# 
  4342  0717                     	;# 
  4343  0718                     	;# 
  4344  0719                     	;# 
  4345  0891                     	;# 
  4346  0891                     	;# 
  4347  0891                     	;# 
  4348  0891                     	;# 
  4349  0891                     	;# 
  4350  0891                     	;# 
  4351  0892                     	;# 
  4352  0892                     	;# 
  4353  0892                     	;# 
  4354  0893                     	;# 
  4355  0893                     	;# 
  4356  0893                     	;# 
  4357  0893                     	;# 
  4358  0893                     	;# 
  4359  0893                     	;# 
  4360  0894                     	;# 
  4361  0894                     	;# 
  4362  0894                     	;# 
  4363  0895                     	;# 
  4364  0895                     	;# 
  4365  0895                     	;# 
  4366  0896                     	;# 
  4367  0896                     	;# 
  4368  0896                     	;# 
  4369  089B                     	;# 
  4370  0911                     	;# 
  4371  0912                     	;# 
  4372  0913                     	;# 
  4373  0914                     	;# 
  4374  0915                     	;# 
  4375  0916                     	;# 
  4376  0918                     	;# 
  4377  0919                     	;# 
  4378  091A                     	;# 
  4379  091B                     	;# 
  4380  091C                     	;# 
  4381  091D                     	;# 
  4382  091E                     	;# 
  4383  091F                     	;# 
  4384  0E0F                     	;# 
  4385  0E10                     	;# 
  4386  0E11                     	;# 
  4387  0E12                     	;# 
  4388  0E13                     	;# 
  4389  0E14                     	;# 
  4390  0E15                     	;# 
  4391  0E16                     	;# 
  4392  0E17                     	;# 
  4393  0E18                     	;# 
  4394  0E19                     	;# 
  4395  0E1A                     	;# 
  4396  0E1B                     	;# 
  4397  0E1C                     	;# 
  4398  0E1D                     	;# 
  4399  0E1E                     	;# 
  4400  0E1F                     	;# 
  4401  0E20                     	;# 
  4402  0E21                     	;# 
  4403  0E22                     	;# 
  4404  0E24                     	;# 
  4405  0E25                     	;# 
  4406  0E28                     	;# 
  4407  0E29                     	;# 
  4408  0E2A                     	;# 
  4409  0E2B                     	;# 
  4410  0E2C                     	;# 
  4411  0E2D                     	;# 
  4412  0E2E                     	;# 
  4413  0E2F                     	;# 
  4414  0E90                     	;# 
  4415  0E91                     	;# 
  4416  0E92                     	;# 
  4417  0E94                     	;# 
  4418  0E95                     	;# 
  4419  0EA0                     	;# 
  4420  0EA1                     	;# 
  4421  0EA2                     	;# 
  4422  0EA3                     	;# 
  4423  0EA4                     	;# 
  4424  0EA5                     	;# 
  4425  0F0F                     	;# 
  4426  0F10                     	;# 
  4427  0F11                     	;# 
  4428  0F12                     	;# 
  4429  0F13                     	;# 
  4430  0F14                     	;# 
  4431  0F15                     	;# 
  4432  0F16                     	;# 
  4433  0F17                     	;# 
  4434  0F18                     	;# 
  4435  0F19                     	;# 
  4436  0F1A                     	;# 
  4437  0F1B                     	;# 
  4438  0F1C                     	;# 
  4439  0F1D                     	;# 
  4440  0F1E                     	;# 
  4441  0F1F                     	;# 
  4442  0F20                     	;# 
  4443  0F21                     	;# 
  4444  0F22                     	;# 
  4445  0F23                     	;# 
  4446  0F24                     	;# 
  4447  0F25                     	;# 
  4448  0F26                     	;# 
  4449  0F27                     	;# 
  4450  0F28                     	;# 
  4451  0F29                     	;# 
  4452  0F2A                     	;# 
  4453  0F2B                     	;# 
  4454  0F2C                     	;# 
  4455  0F2D                     	;# 
  4456  0F2E                     	;# 
  4457  0F2F                     	;# 
  4458  0F30                     	;# 
  4459  0F31                     	;# 
  4460  0F32                     	;# 
  4461  0F33                     	;# 
  4462  0F34                     	;# 
  4463  0F35                     	;# 
  4464  0F36                     	;# 
  4465  0F37                     	;# 
  4466  0FE4                     	;# 
  4467  0FE5                     	;# 
  4468  0FE6                     	;# 
  4469  0FE7                     	;# 
  4470  0FE8                     	;# 
  4471  0FE9                     	;# 
  4472  0FEA                     	;# 
  4473  0FEB                     	;# 
  4474  0FED                     	;# 
  4475  0FEE                     	;# 
  4476  0FEF                     	;_stage_stash
  4477                           
  4478                           	psect	idataBANK1
  4479  0DB5                     __pidataBANK1:	
  4480                           
  4481                           ;initializer for InitLowerPattern@F477
  4482  0DB5  3400               	retlw	0
  4483  0DB6  3400               	retlw	0
  4484  0DB7  3400               	retlw	0
  4485  0DB8  3401               	retlw	1
  4486                           
  4487                           ;initializer for InitLowerPattern@F474
  4488  0DB9  3400               	retlw	0
  4489  0DBA  3400               	retlw	0
  4490  0DBB  3401               	retlw	1
  4491  0DBC  3400               	retlw	0
  4492                           
  4493                           ;initializer for InitUpperLowerPattern@F465
  4494  0DBD  3400               	retlw	0
  4495  0DBE  3400               	retlw	0
  4496  0DBF  3401               	retlw	1
  4497  0DC0  3401               	retlw	1
  4498                           
  4499                           ;initializer for InitUpperLowerPattern@F462
  4500  0DC1  3401               	retlw	1
  4501  0DC2  3401               	retlw	1
  4502  0DC3  3400               	retlw	0
  4503  0DC4  3400               	retlw	0
  4504                           
  4505                           ;initializer for InitXStrobePattern@F453
  4506  0DC5  3400               	retlw	0
  4507  0DC6  3401               	retlw	1
  4508  0DC7  3401               	retlw	1
  4509  0DC8  3400               	retlw	0
  4510                           
  4511                           ;initializer for InitXStrobePattern@F450
  4512  0DC9  3401               	retlw	1
  4513  0DCA  3400               	retlw	0
  4514  0DCB  3400               	retlw	0
  4515  0DCC  3401               	retlw	1
  4516                           
  4517                           ;initializer for InitWigwagPattern@F441
  4518  0DCD  3400               	retlw	0
  4519  0DCE  3401               	retlw	1
  4520  0DCF  3400               	retlw	0
  4521  0DD0  3401               	retlw	1
  4522                           
  4523                           ;initializer for InitWigwagPattern@F438
  4524  0DD1  3401               	retlw	1
  4525  0DD2  3400               	retlw	0
  4526  0DD3  3401               	retlw	1
  4527  0DD4  3400               	retlw	0
  4528                           
  4529                           	psect	nvCOMMON
  4530  007C                     __pnvCOMMON:	
  4531  007C                     _timer1ReloadVal:	
  4532  007C                     	ds	2
  4533                           
  4534                           	psect	nvBANK1
  4535  00DB                     __pnvBANK1:	
  4536  00DB                     _TMR1_InterruptHandler:	
  4537  00DB                     	ds	2
  4538  00DD                     _IOCCF0_InterruptHandler:	
  4539  00DD                     	ds	2
  4540  0003                     _STATUSbits	set	3
  4541  000E                     _PORTCbits	set	14
  4542  001C                     _T1GCONbits	set	28
  4543  001B                     _T1CONbits	set	27
  4544  0019                     _TMR1L	set	25
  4545  001A                     _TMR1H	set	26
  4546  001C                     _T1GCON	set	28
  4547  0011                     _PIR1bits	set	17
  4548  000B                     _INTCONbits	set	11
  4549  0010                     _PIR0bits	set	16
  4550  0091                     _PIE1bits	set	145
  4551  0090                     _PIE0bits	set	144
  4552  008E                     _TRISC	set	142
  4553  008C                     _TRISA	set	140
  4554  0097                     _WDTCON	set	151
  4555  010E                     _LATCbits	set	270
  4556  010E                     _LATC	set	270
  4557  010C                     _LATA	set	268
  4558  018C                     _ANSELA	set	396
  4559  018E                     _ANSELC	set	398
  4560  020E                     _WPUC	set	526
  4561  020C                     _WPUA	set	524
  4562  028E                     _ODCONC	set	654
  4563  028C                     _ODCONA	set	652
  4564  030E                     _SLRCONC	set	782
  4565  030C                     _SLRCONA	set	780
  4566  0397                     _IOCCPbits	set	919
  4567  0398                     _IOCCNbits	set	920
  4568  0399                     _IOCCFbits	set	921
  4569  038E                     _INLVLC	set	910
  4570  038C                     _INLVLA	set	908
  4571  0896                     _NVMCON2	set	2198
  4572  0894                     _NVMDATH	set	2196
  4573  0893                     _NVMDATL	set	2195
  4574  0892                     _NVMADRH	set	2194
  4575  0891                     _NVMADRL	set	2193
  4576  0895                     _NVMCON1bits	set	2197
  4577  0916                     _PMD5	set	2326
  4578  0915                     _PMD4	set	2325
  4579  0914                     _PMD3	set	2324
  4580  0913                     _PMD2	set	2323
  4581  0912                     _PMD1	set	2322
  4582  0911                     _PMD0	set	2321
  4583  091E                     _OSCTUNE	set	2334
  4584  091F                     _OSCFRQ	set	2335
  4585  091D                     _OSCEN	set	2333
  4586  091B                     _OSCCON3	set	2331
  4587  0919                     _OSCCON1	set	2329
  4588                           
  4589                           ; #config settings
  4590  0000                     
  4591                           	psect	cinit
  4592  002A                     start_initialization:	
  4593  002A                     __initialization:		;BIGRAM
  4594                           
  4595                           ; Initialize objects allocated to BANK1
  4596  002A  30B5               	movlw	low __pidataBANK1
  4597  002B  0084               	movwf	4
  4598  002C  308D               	movlw	(high __pidataBANK1)| (0+128)
  4599  002D  0085               	movwf	5
  4600  002E  30A0               	movlw	low __pdataBANK1
  4601  002F  0086               	movwf	6
  4602  0030  3000               	movlw	high __pdataBANK1
  4603  0031  0087               	movwf	7
  4604  0032  3000               	movlw	0
  4605  0033  00FF               	movwf	btemp+1
  4606  0034  3020               	movlw	32
  4607  0035  318C  24EC  3180   	fcall	init_ram
  4608                           
  4609                           ; Clear objects allocated to BIGRAM
  4610  0038  30F0               	movlw	low (0+8432)
  4611  0039  0084               	movwf	4
  4612  003A  3020               	movlw	high (0+8432)
  4613  003B  0085               	movwf	5
  4614  003C  3000               	movlw	0
  4615  003D  00FE               	movwf	btemp
  4616  003E  3003               	movlw	3
  4617  003F  00FF               	movwf	btemp+1
  4618  0040  318C  24E0  3180   	fcall	clear_ram0
  4619                           
  4620                           ; Clear objects allocated to COMMON
  4621  0043  01F7               	clrf	__pbssCOMMON& (0+127)
  4622  0044  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  4623  0045  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  4624  0046  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  4625  0047  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
  4626                           
  4627                           ; Clear objects allocated to BANK0
  4628  0048  3064               	movlw	low __pbssBANK0
  4629  0049  0084               	movwf	4
  4630  004A  3000               	movlw	high __pbssBANK0
  4631  004B  0085               	movwf	5
  4632  004C  300B               	movlw	11
  4633  004D  00FE               	movwf	btemp
  4634  004E  3000               	movlw	0
  4635  004F  00FF               	movwf	btemp+1
  4636  0050  318C  24E0  3180   	fcall	clear_ram0
  4637                           
  4638                           ; Clear objects allocated to BANK1
  4639  0053  30C0               	movlw	low __pbssBANK1
  4640  0054  0084               	movwf	4
  4641  0055  3000               	movlw	high __pbssBANK1
  4642  0056  0085               	movwf	5
  4643  0057  301B               	movlw	27
  4644  0058  00FE               	movwf	btemp
  4645  0059  3000               	movlw	0
  4646  005A  00FF               	movwf	btemp+1
  4647  005B  318C  24E0  3180   	fcall	clear_ram0
  4648                           
  4649                           ; Clear objects allocated to BANK2
  4650  005E  3020               	movlw	low __pbssBANK2
  4651  005F  0084               	movwf	4
  4652  0060  3001               	movlw	high __pbssBANK2
  4653  0061  0085               	movwf	5
  4654  0062  3012               	movlw	18
  4655  0063  00FE               	movwf	btemp
  4656  0064  3000               	movlw	0
  4657  0065  00FF               	movwf	btemp+1
  4658  0066  318C  24E0  3180   	fcall	clear_ram0
  4659  0069                     end_of_initialization:	
  4660                           ;End of C runtime variable initialization code
  4661                           
  4662  0069                     __end_of__initialization:	
  4663  0069  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4664  006A  0020               	movlb	0
  4665  006B  318E  2E8F         	ljmp	_main	;jump to C main() function
  4666                           
  4667                           	psect	bssCOMMON
  4668  0077                     __pbssCOMMON:	
  4669  0077                     _start_time:	
  4670  0077                     	ds	2
  4671  0079                     _temp_ms:	
  4672  0079                     	ds	2
  4673  007B                     _ts_trigger:	
  4674  007B                     	ds	1
  4675                           
  4676                           	psect	bssBANK0
  4677  0064                     __pbssBANK0:	
  4678  0064                     _cur_ms:	
  4679  0064                     	ds	4
  4680  0068                     _pattern_list_iter:	
  4681  0068                     	ds	2
  4682  006A                     _stage_list_iter:	
  4683  006A                     	ds	2
  4684  006C                     _update_stage:	
  4685  006C                     	ds	1
  4686  006D                     _last_pc_input_state:	
  4687  006D                     	ds	1
  4688  006E                     _cur_pc_input_state:	
  4689  006E                     	ds	1
  4690                           
  4691                           	psect	bssBANK1
  4692  00C0                     __pbssBANK1:	
  4693  00C0                     NewStage@F419:	
  4694  00C0                     	ds	4
  4695  00C4                     _ts_trigger_time:	
  4696  00C4                     	ds	4
  4697  00C8                     _pattern_selector:	
  4698  00C8                     	ds	19
  4699                           
  4700                           	psect	dataBANK1
  4701  00A0                     __pdataBANK1:	
  4702  00A0                     InitLowerPattern@F477:	
  4703  00A0                     	ds	4
  4704  00A4                     InitLowerPattern@F474:	
  4705  00A4                     	ds	4
  4706  00A8                     InitUpperLowerPattern@F465:	
  4707  00A8                     	ds	4
  4708  00AC                     InitUpperLowerPattern@F462:	
  4709  00AC                     	ds	4
  4710  00B0                     InitXStrobePattern@F453:	
  4711  00B0                     	ds	4
  4712  00B4                     InitXStrobePattern@F450:	
  4713  00B4                     	ds	4
  4714  00B8                     InitWigwagPattern@F441:	
  4715  00B8                     	ds	4
  4716  00BC                     InitWigwagPattern@F438:	
  4717  00BC                     	ds	4
  4718                           
  4719                           	psect	bssBANK2
  4720  0120                     __pbssBANK2:	
  4721  0120                     _pattern_stash:	
  4722  0120                     	ds	18
  4723                           
  4724                           	psect	inittext
  4725  0CEC                     init_ram:	
  4726  0CEC  00FE               	movwf	btemp
  4727  0CED                     initloop:	
  4728  0CED  0012               	moviw fsr0++
  4729  0CEE  001E               	movwi fsr1++
  4730  0CEF  3001               	movlw	1
  4731  0CF0  02FE               	subwf	btemp,f
  4732  0CF1  3000               	movlw	0
  4733  0CF2  3BFF               	subwfb	btemp+1,f
  4734  0CF3  087F               	movf	btemp+1,w
  4735  0CF4  047E               	iorwf	btemp,w
  4736  0CF5  1D03               	skipz
  4737  0CF6  2CED               	goto	initloop
  4738  0CF7  3400               	retlw	0
  4739                           
  4740                           	psect	clrtext
  4741  0CE0                     clear_ram0:	
  4742                           ;	Called with FSR0 containing the base address, and
  4743                           ;	btemp/btemp+1 has the size to clear
  4744                           
  4745  0CE0  0064               	clrwdt	;clear the watchdog before getting into this loop
  4746  0CE1                     clrloop0:	
  4747  0CE1  0180               	clrf	0	;clear RAM location pointed to by FSR
  4748  0CE2  3101               	addfsr 0,1
  4749  0CE3  3001               	movlw	1
  4750  0CE4  02FE               	subwf	btemp,f
  4751  0CE5  3000               	movlw	0
  4752  0CE6  3BFF               	subwfb	btemp+1,f
  4753  0CE7  087F               	movf	btemp+1,w
  4754  0CE8  047E               	iorwf	btemp,w
  4755  0CE9  1D03               	skipz
  4756  0CEA  2CE1               	goto	clrloop0	;have we reached the end yet?
  4757  0CEB  3400               	retlw	0	;all done for this memory range, return
  4758                           
  4759                           	psect	cstackCOMMON
  4760  0070                     __pcstackCOMMON:	
  4761  0070                     ?_PMD_Initialize:	
  4762  0070                     ?_PIN_MANAGER_Initialize:	
  4763                           ; 1 bytes @ 0x0
  4764                           
  4765  0070                     ?_OSCILLATOR_Initialize:	
  4766                           ; 1 bytes @ 0x0
  4767                           
  4768  0070                     ?_WDT_Initialize:	
  4769                           ; 1 bytes @ 0x0
  4770                           
  4771  0070                     ?_TMR1_Initialize:	
  4772                           ; 1 bytes @ 0x0
  4773                           
  4774  0070                     ?_TripTurnSignal:	
  4775                           ; 1 bytes @ 0x0
  4776                           
  4777  0070                     ?_IOCCF0_ISR:	
  4778                           ; 1 bytes @ 0x0
  4779                           
  4780  0070                     ?_TMR1_ISR:	
  4781                           ; 1 bytes @ 0x0
  4782                           
  4783  0070                     ?_TMR1_DefaultInterruptHandler:	
  4784                           ; 1 bytes @ 0x0
  4785                           
  4786  0070                     ??_TMR1_DefaultInterruptHandler:	
  4787                           ; 1 bytes @ 0x0
  4788                           
  4789  0070                     ?_SetOutputs:	
  4790                           ; 1 bytes @ 0x0
  4791                           
  4792  0070                     ?_TurnSignalDone:	
  4793                           ; 1 bytes @ 0x0
  4794                           
  4795  0070                     ?_PatternCycleInputChanged:	
  4796                           ; 1 bytes @ 0x0
  4797                           
  4798  0070                     ?_FlashPattern:	
  4799                           ; 1 bytes @ 0x0
  4800                           
  4801  0070                     ?_EEPROM_GetSavedPattern:	
  4802                           ; 1 bytes @ 0x0
  4803                           
  4804  0070                     ?_EEPROM_SavePattern:	
  4805                           ; 1 bytes @ 0x0
  4806                           
  4807  0070                     ?_eeprom_read:	
  4808                           ; 1 bytes @ 0x0
  4809                           
  4810  0070                     ?_SYSTEM_Initialize:	
  4811                           ; 1 bytes @ 0x0
  4812                           
  4813  0070                     ?_PIN_MANAGER_IOC:	
  4814                           ; 1 bytes @ 0x0
  4815                           
  4816  0070                     ?_INTERRUPT_InterruptManager:	
  4817                           ; 1 bytes @ 0x0
  4818                           
  4819  0070                     ?_TMR1_StartTimer:	
  4820                           ; 1 bytes @ 0x0
  4821                           
  4822  0070                     ?_TMR1_WriteTimer:	
  4823                           ; 1 bytes @ 0x0
  4824                           
  4825  0070                     ?_setup:	
  4826                           ; 1 bytes @ 0x0
  4827                           
  4828  0070                     ?_main:	
  4829                           ; 1 bytes @ 0x0
  4830                           
  4831  0070                     ?i1_SetLight:	
  4832                           ; 1 bytes @ 0x0
  4833                           
  4834  0070                     ?i1_SetOutputs:	
  4835                           ; 1 bytes @ 0x0
  4836                           
  4837  0070                     ?i1_ms:	
  4838                           ; 1 bytes @ 0x0
  4839                           
  4840  0070                     i1SetLight@_state:	
  4841                           ; 4 bytes @ 0x0
  4842                           
  4843  0070                     TMR1_WriteTimer@timerVal:	
  4844                           ; 1 bytes @ 0x0
  4845                           
  4846                           
  4847                           ; 2 bytes @ 0x0
  4848  0070                     	ds	1
  4849  0071                     ??i1_SetLight:	
  4850                           
  4851                           ; 1 bytes @ 0x1
  4852  0071                     	ds	1
  4853  0072                     ??_TMR1_ISR:	
  4854  0072                     ??_TMR1_WriteTimer:	
  4855                           ; 1 bytes @ 0x2
  4856                           
  4857                           
  4858                           ; 1 bytes @ 0x2
  4859  0072                     	ds	1
  4860  0073                     i1SetLight@light:	
  4861                           
  4862                           ; 1 bytes @ 0x3
  4863  0073                     	ds	1
  4864  0074                     ??i1_ms:	
  4865  0074                     i1SetLight@state:	
  4866                           ; 1 bytes @ 0x4
  4867                           
  4868                           
  4869                           ; 1 bytes @ 0x4
  4870  0074                     	ds	1
  4871  0075                     ??i1_SetOutputs:	
  4872                           
  4873                           ; 1 bytes @ 0x5
  4874  0075                     	ds	1
  4875  0076                     i1SetOutputs@state:	
  4876                           
  4877                           ; 1 bytes @ 0x6
  4878  0076                     	ds	1
  4879  0077                     ??_TripTurnSignal:	
  4880  0077                     ??_IOCCF0_ISR:	
  4881                           ; 1 bytes @ 0x7
  4882                           
  4883  0077                     ??_PIN_MANAGER_IOC:	
  4884                           ; 1 bytes @ 0x7
  4885                           
  4886  0077                     ??_INTERRUPT_InterruptManager:	
  4887                           ; 1 bytes @ 0x7
  4888                           
  4889                           
  4890                           	psect	cstackBANK0
  4891  0020                     __pcstackBANK0:	
  4892                           ; 1 bytes @ 0x7
  4893                           
  4894  0020                     ??_PMD_Initialize:	
  4895  0020                     ??_OSCILLATOR_Initialize:	
  4896                           ; 1 bytes @ 0x0
  4897                           
  4898  0020                     ??_WDT_Initialize:	
  4899                           ; 1 bytes @ 0x0
  4900                           
  4901  0020                     ?_IOCCF0_SetInterruptHandler:	
  4902                           ; 1 bytes @ 0x0
  4903                           
  4904  0020                     ?_TMR1_SetInterruptHandler:	
  4905                           ; 1 bytes @ 0x0
  4906                           
  4907  0020                     ??_PatternCycleInputChanged:	
  4908                           ; 1 bytes @ 0x0
  4909                           
  4910  0020                     ?_eeprom_write:	
  4911                           ; 1 bytes @ 0x0
  4912                           
  4913  0020                     ??_eeprom_read:	
  4914                           ; 1 bytes @ 0x0
  4915                           
  4916  0020                     ??_TMR1_StartTimer:	
  4917                           ; 1 bytes @ 0x0
  4918                           
  4919  0020                     ?_SetLight:	
  4920                           ; 1 bytes @ 0x0
  4921                           
  4922  0020                     ?_AssignLightStates:	
  4923                           ; 1 bytes @ 0x0
  4924                           
  4925  0020                     ?_NewStage:	
  4926                           ; 1 bytes @ 0x0
  4927                           
  4928  0020                     ?___wmul:	
  4929                           ; 2 bytes @ 0x0
  4930                           
  4931  0020                     ?_ms:	
  4932                           ; 2 bytes @ 0x0
  4933                           
  4934  0020                     SetLight@_state:	
  4935                           ; 4 bytes @ 0x0
  4936                           
  4937  0020                     eeprom_read@addr:	
  4938                           ; 1 bytes @ 0x0
  4939                           
  4940  0020                     eeprom_write@value:	
  4941                           ; 1 bytes @ 0x0
  4942                           
  4943  0020                     IOCCF0_SetInterruptHandler@InterruptHandler:	
  4944                           ; 1 bytes @ 0x0
  4945                           
  4946  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  4947                           ; 2 bytes @ 0x0
  4948                           
  4949  0020                     AssignLightStates@stage:	
  4950                           ; 2 bytes @ 0x0
  4951                           
  4952  0020                     ___wmul@multiplier:	
  4953                           ; 2 bytes @ 0x0
  4954                           
  4955                           
  4956                           ; 2 bytes @ 0x0
  4957  0020                     	ds	1
  4958  0021                     ??_EEPROM_GetSavedPattern:	
  4959  0021                     ??_eeprom_write:	
  4960                           ; 1 bytes @ 0x1
  4961                           
  4962  0021                     ??_SetLight:	
  4963                           ; 1 bytes @ 0x1
  4964                           
  4965  0021                     eeprom_write@addr:	
  4966                           ; 1 bytes @ 0x1
  4967                           
  4968                           
  4969                           ; 1 bytes @ 0x1
  4970  0021                     	ds	1
  4971  0022                     ??_PIN_MANAGER_Initialize:	
  4972  0022                     ??_TMR1_Initialize:	
  4973                           ; 1 bytes @ 0x2
  4974                           
  4975  0022                     ??_IOCCF0_SetInterruptHandler:	
  4976                           ; 1 bytes @ 0x2
  4977                           
  4978  0022                     ??_TMR1_SetInterruptHandler:	
  4979                           ; 1 bytes @ 0x2
  4980                           
  4981  0022                     ??_EEPROM_SavePattern:	
  4982                           ; 1 bytes @ 0x2
  4983                           
  4984  0022                     ??_SYSTEM_Initialize:	
  4985                           ; 1 bytes @ 0x2
  4986                           
  4987  0022                     AssignLightStates@states:	
  4988                           ; 1 bytes @ 0x2
  4989                           
  4990  0022                     EEPROM_GetSavedPattern@saved_pattern:	
  4991                           ; 1 bytes @ 0x2
  4992                           
  4993  0022                     PatternCycleInputChanged@delay_count:	
  4994                           ; 1 bytes @ 0x2
  4995                           
  4996  0022                     ___wmul@multiplicand:	
  4997                           ; 2 bytes @ 0x2
  4998                           
  4999                           
  5000                           ; 2 bytes @ 0x2
  5001  0022                     	ds	1
  5002  0023                     ??_AssignLightStates:	
  5003  0023                     SetLight@light:	
  5004                           ; 1 bytes @ 0x3
  5005                           
  5006  0023                     EEPROM_SavePattern@pattern_name:	
  5007                           ; 1 bytes @ 0x3
  5008                           
  5009                           
  5010                           ; 1 bytes @ 0x3
  5011  0023                     	ds	1
  5012  0024                     ??_ms:	
  5013  0024                     ??___wmul:	
  5014                           ; 1 bytes @ 0x4
  5015                           
  5016  0024                     ?_NextPattern:	
  5017                           ; 1 bytes @ 0x4
  5018                           
  5019  0024                     ?_abs:	
  5020                           ; 2 bytes @ 0x4
  5021                           
  5022  0024                     SetLight@state:	
  5023                           ; 2 bytes @ 0x4
  5024                           
  5025  0024                     NextPattern@p_selector:	
  5026                           ; 1 bytes @ 0x4
  5027                           
  5028  0024                     ___wmul@product:	
  5029                           ; 2 bytes @ 0x4
  5030                           
  5031  0024                     abs@a:	
  5032                           ; 2 bytes @ 0x4
  5033                           
  5034                           
  5035                           ; 2 bytes @ 0x4
  5036  0024                     	ds	1
  5037  0025                     ??_SetOutputs:	
  5038  0025                     ??_FlashPattern:	
  5039                           ; 1 bytes @ 0x5
  5040                           
  5041                           
  5042                           ; 1 bytes @ 0x5
  5043  0025                     	ds	1
  5044  0026                     ??_NextPattern:	
  5045  0026                     ??_abs:	
  5046                           ; 1 bytes @ 0x6
  5047                           
  5048  0026                     SetOutputs@state:	
  5049                           ; 1 bytes @ 0x6
  5050                           
  5051                           
  5052                           ; 1 bytes @ 0x6
  5053  0026                     	ds	1
  5054  0027                     AssignLightStates@i:	
  5055                           
  5056                           ; 2 bytes @ 0x7
  5057  0027                     	ds	1
  5058  0028                     ??_TurnSignalDone:	
  5059  0028                     ?_NewPattern:	
  5060                           ; 1 bytes @ 0x8
  5061                           
  5062                           
  5063                           ; 2 bytes @ 0x8
  5064  0028                     	ds	1
  5065  0029                     ??_NewStage:	
  5066                           
  5067                           ; 1 bytes @ 0x9
  5068  0029                     	ds	4
  5069  002D                     NewStage@init_states:	
  5070                           
  5071                           ; 4 bytes @ 0xD
  5072  002D                     	ds	2
  5073  002F                     FlashPattern@current_time:	
  5074                           
  5075                           ; 2 bytes @ 0xF
  5076  002F                     	ds	2
  5077  0031                     NewStage@new_stage:	
  5078                           
  5079                           ; 2 bytes @ 0x11
  5080  0031                     	ds	2
  5081  0033                     ??_NewPattern:	
  5082  0033                     ?_ConstructStage:	
  5083                           ; 1 bytes @ 0x13
  5084                           
  5085  0033                     ?_CopyStageData:	
  5086                           ; 2 bytes @ 0x13
  5087                           
  5088  0033                     ConstructStage@time_ms:	
  5089                           ; 2 bytes @ 0x13
  5090                           
  5091  0033                     CopyStageData@dest:	
  5092                           ; 2 bytes @ 0x13
  5093                           
  5094                           
  5095                           ; 2 bytes @ 0x13
  5096  0033                     	ds	2
  5097  0035                     ConstructStage@next:	
  5098  0035                     NewPattern@new_pattern:	
  5099                           ; 1 bytes @ 0x15
  5100                           
  5101  0035                     CopyStageData@source:	
  5102                           ; 2 bytes @ 0x15
  5103                           
  5104                           
  5105                           ; 2 bytes @ 0x15
  5106  0035                     	ds	1
  5107  0036                     ??_ConstructStage:	
  5108                           
  5109                           ; 1 bytes @ 0x16
  5110  0036                     	ds	1
  5111  0037                     ??_CopyStageData:	
  5112  0037                     ConstructStage@new_stage:	
  5113                           ; 1 bytes @ 0x17
  5114                           
  5115                           
  5116                           ; 2 bytes @ 0x17
  5117  0037                     	ds	2
  5118  0039                     ConstructStage@states:	
  5119                           
  5120                           ; 1 bytes @ 0x19
  5121  0039                     	ds	1
  5122  003A                     CopyStageData@i:	
  5123                           
  5124                           ; 2 bytes @ 0x1A
  5125  003A                     	ds	2
  5126  003C                     ?_AppendStage:	
  5127  003C                     AppendStage@head:	
  5128                           ; 1 bytes @ 0x1C
  5129                           
  5130                           
  5131                           ; 2 bytes @ 0x1C
  5132  003C                     	ds	2
  5133  003E                     AppendStage@new_stage:	
  5134                           
  5135                           ; 2 bytes @ 0x1E
  5136  003E                     	ds	2
  5137  0040                     ??_AppendStage:	
  5138                           
  5139                           ; 1 bytes @ 0x20
  5140  0040                     	ds	2
  5141  0042                     AppendStage@last_stage:	
  5142                           
  5143                           ; 2 bytes @ 0x22
  5144  0042                     	ds	2
  5145  0044                     ?_InitWigwagPattern:	
  5146  0044                     ?_InitXStrobePattern:	
  5147                           ; 1 bytes @ 0x24
  5148                           
  5149  0044                     ?_InitUpperLowerPattern:	
  5150                           ; 1 bytes @ 0x24
  5151                           
  5152  0044                     ?_InitLowerPattern:	
  5153                           ; 1 bytes @ 0x24
  5154                           
  5155  0044                     InitWigwagPattern@pattern:	
  5156                           ; 1 bytes @ 0x24
  5157                           
  5158  0044                     InitXStrobePattern@pattern:	
  5159                           ; 2 bytes @ 0x24
  5160                           
  5161  0044                     InitUpperLowerPattern@pattern:	
  5162                           ; 2 bytes @ 0x24
  5163                           
  5164  0044                     InitLowerPattern@pattern:	
  5165                           ; 2 bytes @ 0x24
  5166                           
  5167                           
  5168                           ; 2 bytes @ 0x24
  5169  0044                     	ds	2
  5170  0046                     ??_InitWigwagPattern:	
  5171  0046                     ??_InitXStrobePattern:	
  5172                           ; 1 bytes @ 0x26
  5173                           
  5174  0046                     ??_InitUpperLowerPattern:	
  5175                           ; 1 bytes @ 0x26
  5176                           
  5177  0046                     ??_InitLowerPattern:	
  5178                           ; 1 bytes @ 0x26
  5179                           
  5180                           
  5181                           ; 1 bytes @ 0x26
  5182  0046                     	ds	1
  5183  0047                     InitWigwagPattern@left_side_states:	
  5184  0047                     InitXStrobePattern@diag_1_4_states:	
  5185                           ; 4 bytes @ 0x27
  5186                           
  5187  0047                     InitUpperLowerPattern@upper_states:	
  5188                           ; 4 bytes @ 0x27
  5189                           
  5190  0047                     InitLowerPattern@lower_left_states:	
  5191                           ; 4 bytes @ 0x27
  5192                           
  5193                           
  5194                           ; 4 bytes @ 0x27
  5195  0047                     	ds	4
  5196  004B                     InitWigwagPattern@right_side_states:	
  5197  004B                     InitXStrobePattern@diag_2_3_states:	
  5198                           ; 4 bytes @ 0x2B
  5199                           
  5200  004B                     InitUpperLowerPattern@lower_states:	
  5201                           ; 4 bytes @ 0x2B
  5202                           
  5203  004B                     InitLowerPattern@lower_right_states:	
  5204                           ; 4 bytes @ 0x2B
  5205                           
  5206                           
  5207                           ; 4 bytes @ 0x2B
  5208  004B                     	ds	4
  5209  004F                     InitWigwagPattern@left_side_on:	
  5210  004F                     InitXStrobePattern@diag_1_4:	
  5211                           ; 2 bytes @ 0x2F
  5212                           
  5213  004F                     InitUpperLowerPattern@upper:	
  5214                           ; 2 bytes @ 0x2F
  5215                           
  5216  004F                     InitLowerPattern@lower_left:	
  5217                           ; 2 bytes @ 0x2F
  5218                           
  5219                           
  5220                           ; 2 bytes @ 0x2F
  5221  004F                     	ds	2
  5222  0051                     InitWigwagPattern@right_side_on:	
  5223  0051                     InitXStrobePattern@diag_2_3:	
  5224                           ; 2 bytes @ 0x31
  5225                           
  5226  0051                     InitUpperLowerPattern@lower:	
  5227                           ; 2 bytes @ 0x31
  5228                           
  5229  0051                     InitLowerPattern@lower_right:	
  5230                           ; 2 bytes @ 0x31
  5231                           
  5232                           
  5233                           ; 2 bytes @ 0x31
  5234  0051                     	ds	2
  5235  0053                     InitWigwagPattern@i:	
  5236  0053                     InitXStrobePattern@i:	
  5237                           ; 2 bytes @ 0x33
  5238                           
  5239  0053                     InitUpperLowerPattern@i:	
  5240                           ; 2 bytes @ 0x33
  5241                           
  5242  0053                     InitLowerPattern@i:	
  5243                           ; 2 bytes @ 0x33
  5244                           
  5245                           
  5246                           ; 2 bytes @ 0x33
  5247  0053                     	ds	2
  5248  0055                     InitWigwagPattern@i_864:	
  5249  0055                     InitXStrobePattern@i_890:	
  5250                           ; 2 bytes @ 0x35
  5251                           
  5252  0055                     InitUpperLowerPattern@i_916:	
  5253                           ; 2 bytes @ 0x35
  5254                           
  5255  0055                     InitLowerPattern@i_942:	
  5256                           ; 2 bytes @ 0x35
  5257                           
  5258                           
  5259                           ; 2 bytes @ 0x35
  5260  0055                     	ds	2
  5261  0057                     InitWigwagPattern@off:	
  5262  0057                     InitXStrobePattern@off:	
  5263                           ; 2 bytes @ 0x37
  5264                           
  5265  0057                     InitUpperLowerPattern@off:	
  5266                           ; 2 bytes @ 0x37
  5267                           
  5268  0057                     InitLowerPattern@off:	
  5269                           ; 2 bytes @ 0x37
  5270                           
  5271                           
  5272                           ; 2 bytes @ 0x37
  5273  0057                     	ds	2
  5274  0059                     InitWigwagPattern@head:	
  5275  0059                     InitXStrobePattern@head:	
  5276                           ; 2 bytes @ 0x39
  5277                           
  5278  0059                     InitUpperLowerPattern@head:	
  5279                           ; 2 bytes @ 0x39
  5280                           
  5281  0059                     InitLowerPattern@head:	
  5282                           ; 2 bytes @ 0x39
  5283                           
  5284                           
  5285                           ; 2 bytes @ 0x39
  5286  0059                     	ds	2
  5287  005B                     ?_InitPatternSelector:	
  5288  005B                     InitPatternSelector@p_selector:	
  5289                           ; 1 bytes @ 0x3B
  5290                           
  5291                           
  5292                           ; 2 bytes @ 0x3B
  5293  005B                     	ds	2
  5294  005D                     ??_InitPatternSelector:	
  5295                           
  5296                           ; 1 bytes @ 0x3D
  5297  005D                     	ds	4
  5298  0061                     InitPatternSelector@i:	
  5299                           
  5300                           ; 2 bytes @ 0x41
  5301  0061                     	ds	2
  5302  0063                     ??_setup:	
  5303  0063                     ??_main:	
  5304                           ; 1 bytes @ 0x43
  5305                           
  5306                           
  5307                           ; 1 bytes @ 0x43
  5308  0063                     	ds	1
  5309                           
  5310                           	psect	maintext
  5311  0E8F                     __pmaintext:	
  5312 ;;
  5313 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  5314 ;;
  5315 ;; *************** function _main *****************
  5316 ;; Defined at:
  5317 ;;		line 32 in file "main.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;		None
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;		None
  5322 ;; Return value:  Size  Location     Type
  5323 ;;                  1    wreg      void 
  5324 ;; Registers used:
  5325 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5326 ;; Tracked objects:
  5327 ;;		On entry : B1F/0
  5328 ;;		On exit  : 0/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5333 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5334 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5335 ;;Total ram usage:        1 bytes
  5336 ;; Hardware stack levels required when called:   12
  5337 ;; This function calls:
  5338 ;;		_FlashPattern
  5339 ;;		_NextPattern
  5340 ;;		_PatternCycleInputChanged
  5341 ;;		_TurnSignalDone
  5342 ;;		_setup
  5343 ;; This function is called by:
  5344 ;;		Startup code after reset
  5345 ;; This function uses a non-reentrant model
  5346 ;;
  5347                           
  5348                           
  5349                           ;psect for function _main
  5350  0E8F                     _main:	
  5351  0E8F                     l2873:	
  5352                           ;incstack = 0
  5353                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5354                           
  5355                           
  5356                           ;main.c: 34:     setup();
  5357  0E8F  318D  2561  318E   	fcall	_setup
  5358  0E92                     l2875:	
  5359                           
  5360                           ;main.c: 37:     {;main.c: 38:         if( !TurnSignalDone() )
  5361  0E92  318F  27C1  318E   	fcall	_TurnSignalDone
  5362  0E95  3A00               	xorlw	0
  5363  0E96  1D03               	skipz
  5364  0E97  2E99               	goto	u1671
  5365  0E98  2E9A               	goto	u1670
  5366  0E99                     u1671:	
  5367  0E99  2E9B               	goto	l2879
  5368  0E9A                     u1670:	
  5369  0E9A  2E92               	goto	l2875
  5370  0E9B                     l2879:	
  5371                           
  5372                           ;main.c: 52:         if ( PatternCycleInputChanged() )
  5373  0E9B  318F  2716  318E   	fcall	_PatternCycleInputChanged
  5374  0E9E  3A00               	xorlw	0
  5375  0E9F  1903               	skipnz
  5376  0EA0  2EA2               	goto	u1681
  5377  0EA1  2EA3               	goto	u1680
  5378  0EA2                     u1681:	
  5379  0EA2  2EB0               	goto	l2885
  5380  0EA3                     u1680:	
  5381  0EA3                     l2881:	
  5382                           
  5383                           ;main.c: 53:         {;main.c: 55:             if ( cur_pc_input_state == 0 )
  5384  0EA3  0020               	movlb	0	; select bank0
  5385  0EA4  086E               	movf	_cur_pc_input_state,w
  5386  0EA5  1D03               	btfss	3,2
  5387  0EA6  2EA8               	goto	u1691
  5388  0EA7  2EA9               	goto	u1690
  5389  0EA8                     u1691:	
  5390  0EA8  2EB0               	goto	l2885
  5391  0EA9                     u1690:	
  5392  0EA9                     l2883:	
  5393                           
  5394                           ;main.c: 56:             {;main.c: 57:                 NextPattern( &pattern_selector );
  5395  0EA9  30C8               	movlw	low _pattern_selector
  5396  0EAA  00A4               	movwf	NextPattern@p_selector
  5397  0EAB  3000               	movlw	high _pattern_selector
  5398  0EAC  00A5               	movwf	NextPattern@p_selector+1
  5399  0EAD  3185  25CD  318E   	fcall	_NextPattern
  5400  0EB0                     l2885:	
  5401                           ;main.c: 58:             }
  5402                           
  5403                           
  5404                           ;main.c: 65:         last_pc_input_state = cur_pc_input_state;
  5405  0EB0  0020               	movlb	0	; select bank0
  5406  0EB1  086E               	movf	_cur_pc_input_state,w
  5407  0EB2  00E3               	movwf	??_main
  5408  0EB3  0863               	movf	??_main,w
  5409  0EB4  00ED               	movwf	_last_pc_input_state
  5410  0EB5                     l2887:	
  5411                           
  5412                           ;main.c: 67:         FlashPattern();
  5413  0EB5  3185  2532  318E   	fcall	_FlashPattern
  5414  0EB8  2E92               	goto	l2875
  5415  0EB9  3180  2828         	ljmp	start
  5416  0EBB                     __end_of_main:	
  5417                           
  5418                           	psect	text1
  5419  0D61                     __ptext1:	
  5420 ;; *************** function _setup *****************
  5421 ;; Defined at:
  5422 ;;		line 12 in file "main.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;		None
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;		None
  5427 ;; Return value:  Size  Location     Type
  5428 ;;                  1    wreg      void 
  5429 ;; Registers used:
  5430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;Total ram usage:        0 bytes
  5441 ;; Hardware stack levels used:    1
  5442 ;; Hardware stack levels required when called:   11
  5443 ;; This function calls:
  5444 ;;		_InitPatternSelector
  5445 ;;		_SYSTEM_Initialize
  5446 ;;		_SetOutputs
  5447 ;;		_TMR1_Initialize
  5448 ;;		_TMR1_StartTimer
  5449 ;; This function is called by:
  5450 ;;		_main
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           
  5455                           ;psect for function _setup
  5456  0D61                     _setup:	
  5457  0D61                     l2803:	
  5458                           ;incstack = 0
  5459                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5460                           
  5461                           
  5462                           ;main.c: 15:     SYSTEM_Initialize();
  5463  0D61  318D  2507  318D   	fcall	_SYSTEM_Initialize
  5464  0D64                     l2805:	
  5465                           
  5466                           ;main.c: 17:     (INTCONbits.GIE = 1);
  5467  0D64  178B               	bsf	11,7	;volatile
  5468  0D65                     l2807:	
  5469                           
  5470                           ;main.c: 20:     (INTCONbits.PEIE = 1);
  5471  0D65  170B               	bsf	11,6	;volatile
  5472                           
  5473                           ;main.c: 23:     TMR1_Initialize();
  5474  0D66  318D  254C  318D   	fcall	_TMR1_Initialize
  5475  0D69                     l2809:	
  5476                           
  5477                           ;main.c: 24:     TMR1_StartTimer();
  5478  0D69  318C  2484  318D   	fcall	_TMR1_StartTimer
  5479  0D6C                     l2811:	
  5480                           
  5481                           ;main.c: 27:     SetOutputs( 0 );
  5482  0D6C  3000               	movlw	0
  5483  0D6D  318E  263D  318D   	fcall	_SetOutputs
  5484  0D70                     l2813:	
  5485                           
  5486                           ;main.c: 29:     InitPatternSelector( &pattern_selector );
  5487  0D70  30C8               	movlw	low _pattern_selector
  5488  0D71  0020               	movlb	0	; select bank0
  5489  0D72  00DB               	movwf	InitPatternSelector@p_selector
  5490  0D73  3000               	movlw	high _pattern_selector
  5491  0D74  00DC               	movwf	InitPatternSelector@p_selector+1
  5492  0D75  3184  2494  318D   	fcall	_InitPatternSelector
  5493  0D78                     l271:	
  5494  0D78  0008               	return
  5495  0D79                     __end_of_setup:	
  5496                           
  5497                           	psect	text2
  5498  0C84                     __ptext2:	
  5499 ;; *************** function _TMR1_StartTimer *****************
  5500 ;; Defined at:
  5501 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  5502 ;; Parameters:    Size  Location     Type
  5503 ;;		None
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;		None
  5506 ;; Return value:  Size  Location     Type
  5507 ;;                  1    wreg      void 
  5508 ;; Registers used:
  5509 ;;		None
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;Total ram usage:        0 bytes
  5520 ;; Hardware stack levels used:    1
  5521 ;; Hardware stack levels required when called:    6
  5522 ;; This function calls:
  5523 ;;		Nothing
  5524 ;; This function is called by:
  5525 ;;		_setup
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529                           
  5530                           ;psect for function _TMR1_StartTimer
  5531  0C84                     _TMR1_StartTimer:	
  5532  0C84                     l2769:	
  5533                           ;incstack = 0
  5534                           ; Regs used in _TMR1_StartTimer: []
  5535                           
  5536                           
  5537                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
  5538  0C84  0020               	movlb	0	; select bank0
  5539  0C85  141B               	bsf	27,0	;volatile
  5540  0C86                     l194:	
  5541  0C86  0008               	return
  5542  0C87                     __end_of_TMR1_StartTimer:	
  5543                           
  5544                           	psect	text3
  5545  0D07                     __ptext3:	
  5546 ;; *************** function _SYSTEM_Initialize *****************
  5547 ;; Defined at:
  5548 ;;		line 50 in file "mcc_generated_files/mcc.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;		None
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;		None
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  1    wreg      void 
  5555 ;; Registers used:
  5556 ;;		wreg, status,2, status,0, pclath, cstack
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5566 ;;Total ram usage:        0 bytes
  5567 ;; Hardware stack levels used:    1
  5568 ;; Hardware stack levels required when called:    8
  5569 ;; This function calls:
  5570 ;;		_OSCILLATOR_Initialize
  5571 ;;		_PIN_MANAGER_Initialize
  5572 ;;		_PMD_Initialize
  5573 ;;		_TMR1_Initialize
  5574 ;;		_WDT_Initialize
  5575 ;; This function is called by:
  5576 ;;		_setup
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           
  5581                           ;psect for function _SYSTEM_Initialize
  5582  0D07                     _SYSTEM_Initialize:	
  5583  0D07                     l2759:	
  5584                           ;incstack = 0
  5585                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5586                           
  5587                           
  5588                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
  5589  0D07  318C  248B  318D   	fcall	_PMD_Initialize
  5590  0D0A                     l2761:	
  5591                           
  5592                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  5593  0D0A  318E  2663  318D   	fcall	_PIN_MANAGER_Initialize
  5594  0D0D                     l2763:	
  5595                           
  5596                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  5597  0D0D  318C  249C  318D   	fcall	_OSCILLATOR_Initialize
  5598  0D10                     l2765:	
  5599                           
  5600                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  5601  0D10  318C  2487  318D   	fcall	_WDT_Initialize
  5602  0D13                     l2767:	
  5603                           
  5604                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  5605  0D13  318D  254C  318D   	fcall	_TMR1_Initialize
  5606  0D16                     l47:	
  5607  0D16  0008               	return
  5608  0D17                     __end_of_SYSTEM_Initialize:	
  5609                           
  5610                           	psect	text4
  5611  0C87                     __ptext4:	
  5612 ;; *************** function _WDT_Initialize *****************
  5613 ;; Defined at:
  5614 ;;		line 74 in file "mcc_generated_files/mcc.c"
  5615 ;; Parameters:    Size  Location     Type
  5616 ;;		None
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;		None
  5619 ;; Return value:  Size  Location     Type
  5620 ;;                  1    wreg      void 
  5621 ;; Registers used:
  5622 ;;		wreg
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;Total ram usage:        0 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; Hardware stack levels required when called:    6
  5635 ;; This function calls:
  5636 ;;		Nothing
  5637 ;; This function is called by:
  5638 ;;		_SYSTEM_Initialize
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           
  5643                           ;psect for function _WDT_Initialize
  5644  0C87                     _WDT_Initialize:	
  5645  0C87                     l2693:	
  5646                           ;incstack = 0
  5647                           ; Regs used in _WDT_Initialize: [wreg]
  5648                           
  5649                           
  5650                           ;mcc_generated_files/mcc.c: 77:     WDTCON = 0x16;
  5651  0C87  3016               	movlw	22
  5652  0C88  0021               	movlb	1	; select bank1
  5653  0C89  0097               	movwf	23	;volatile
  5654  0C8A                     l53:	
  5655  0C8A  0008               	return
  5656  0C8B                     __end_of_WDT_Initialize:	
  5657                           
  5658                           	psect	text5
  5659  0D4C                     __ptext5:	
  5660 ;; *************** function _TMR1_Initialize *****************
  5661 ;; Defined at:
  5662 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;		None
  5665 ;; Auto vars:     Size  Location     Type
  5666 ;;		None
  5667 ;; Return value:  Size  Location     Type
  5668 ;;                  1    wreg      void 
  5669 ;; Registers used:
  5670 ;;		wreg, status,2, status,0, pclath, cstack
  5671 ;; Tracked objects:
  5672 ;;		On entry : 0/0
  5673 ;;		On exit  : 0/0
  5674 ;;		Unchanged: 0/0
  5675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5680 ;;Total ram usage:        0 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; Hardware stack levels required when called:    7
  5683 ;; This function calls:
  5684 ;;		_TMR1_SetInterruptHandler
  5685 ;; This function is called by:
  5686 ;;		_SYSTEM_Initialize
  5687 ;;		_setup
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691                           
  5692                           ;psect for function _TMR1_Initialize
  5693  0D4C                     _TMR1_Initialize:	
  5694  0D4C                     l2695:	
  5695                           ;incstack = 0
  5696                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5697                           
  5698                           
  5699                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  5700  0D4C  0020               	movlb	0	; select bank0
  5701  0D4D  019C               	clrf	28	;volatile
  5702  0D4E                     l2697:	
  5703                           
  5704                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xFF;
  5705  0D4E  30FF               	movlw	255
  5706  0D4F  009A               	movwf	26	;volatile
  5707  0D50                     l2699:	
  5708                           
  5709                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0x00;
  5710  0D50  0199               	clrf	25	;volatile
  5711  0D51                     l2701:	
  5712                           
  5713                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  5714  0D51  1011               	bcf	17,0	;volatile
  5715                           
  5716                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  5717  0D52  081A               	movf	26,w	;volatile
  5718  0D53  00FD               	movwf	_timer1ReloadVal+1	;volatile
  5719  0D54  0819               	movf	25,w	;volatile
  5720  0D55  00FC               	movwf	_timer1ReloadVal	;volatile
  5721  0D56                     l2703:	
  5722                           
  5723                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  5724  0D56  0021               	movlb	1	; select bank1
  5725  0D57  1411               	bsf	17,0	;volatile
  5726  0D58                     l2705:	
  5727                           
  5728                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  5729  0D58  30C1               	movlw	low _TMR1_DefaultInterruptHandler
  5730  0D59  0020               	movlb	0	; select bank0
  5731  0D5A  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  5732  0D5B  300C               	movlw	high _TMR1_DefaultInterruptHandler
  5733  0D5C  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  5734  0D5D  318C  24AE  318D   	fcall	_TMR1_SetInterruptHandler
  5735  0D60                     l191:	
  5736  0D60  0008               	return
  5737  0D61                     __end_of_TMR1_Initialize:	
  5738                           
  5739                           	psect	text6
  5740  0CAE                     __ptext6:	
  5741 ;; *************** function _TMR1_SetInterruptHandler *****************
  5742 ;; Defined at:
  5743 ;;		line 172 in file "mcc_generated_files/tmr1.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5746 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;		None
  5749 ;; Return value:  Size  Location     Type
  5750 ;;                  1    wreg      void 
  5751 ;; Registers used:
  5752 ;;		wreg
  5753 ;; Tracked objects:
  5754 ;;		On entry : 0/0
  5755 ;;		On exit  : 0/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5758 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;Total ram usage:        2 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    6
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		_TMR1_Initialize
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           
  5773                           ;psect for function _TMR1_SetInterruptHandler
  5774  0CAE                     _TMR1_SetInterruptHandler:	
  5775  0CAE                     l2631:	
  5776                           ;incstack = 0
  5777                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  5778                           
  5779                           
  5780                           ;mcc_generated_files/tmr1.c: 173:     TMR1_InterruptHandler = InterruptHandler;
  5781  0CAE  0020               	movlb	0	; select bank0
  5782  0CAF  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  5783  0CB0  0021               	movlb	1	; select bank1
  5784  0CB1  00DC               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  5785  0CB2  0020               	movlb	0	; select bank0
  5786  0CB3  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  5787  0CB4  0021               	movlb	1	; select bank1
  5788  0CB5  00DB               	movwf	_TMR1_InterruptHandler^(0+128)
  5789  0CB6                     l221:	
  5790  0CB6  0008               	return
  5791  0CB7                     __end_of_TMR1_SetInterruptHandler:	
  5792                           
  5793                           	psect	text7
  5794  0C8B                     __ptext7:	
  5795 ;; *************** function _PMD_Initialize *****************
  5796 ;; Defined at:
  5797 ;;		line 80 in file "mcc_generated_files/mcc.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;		None
  5800 ;; Auto vars:     Size  Location     Type
  5801 ;;		None
  5802 ;; Return value:  Size  Location     Type
  5803 ;;                  1    wreg      void 
  5804 ;; Registers used:
  5805 ;;		status,2
  5806 ;; Tracked objects:
  5807 ;;		On entry : 0/0
  5808 ;;		On exit  : 0/0
  5809 ;;		Unchanged: 0/0
  5810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5815 ;;Total ram usage:        0 bytes
  5816 ;; Hardware stack levels used:    1
  5817 ;; Hardware stack levels required when called:    6
  5818 ;; This function calls:
  5819 ;;		Nothing
  5820 ;; This function is called by:
  5821 ;;		_SYSTEM_Initialize
  5822 ;; This function uses a non-reentrant model
  5823 ;;
  5824                           
  5825                           
  5826                           ;psect for function _PMD_Initialize
  5827  0C8B                     _PMD_Initialize:	
  5828  0C8B                     l2651:	
  5829                           ;incstack = 0
  5830                           ; Regs used in _PMD_Initialize: [status,2]
  5831                           
  5832                           
  5833                           ;mcc_generated_files/mcc.c: 83:     PMD0 = 0x00;
  5834  0C8B  0032               	movlb	18	; select bank18
  5835  0C8C  0191               	clrf	17	;volatile
  5836                           
  5837                           ;mcc_generated_files/mcc.c: 85:     PMD1 = 0x00;
  5838  0C8D  0192               	clrf	18	;volatile
  5839                           
  5840                           ;mcc_generated_files/mcc.c: 87:     PMD2 = 0x00;
  5841  0C8E  0193               	clrf	19	;volatile
  5842                           
  5843                           ;mcc_generated_files/mcc.c: 89:     PMD3 = 0x00;
  5844  0C8F  0194               	clrf	20	;volatile
  5845                           
  5846                           ;mcc_generated_files/mcc.c: 91:     PMD4 = 0x00;
  5847  0C90  0195               	clrf	21	;volatile
  5848                           
  5849                           ;mcc_generated_files/mcc.c: 93:     PMD5 = 0x00;
  5850  0C91  0196               	clrf	22	;volatile
  5851  0C92                     l56:	
  5852  0C92  0008               	return
  5853  0C93                     __end_of_PMD_Initialize:	
  5854                           
  5855                           	psect	text8
  5856  0E63                     __ptext8:	
  5857 ;; *************** function _PIN_MANAGER_Initialize *****************
  5858 ;; Defined at:
  5859 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;		None
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;		None
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  1    wreg      void 
  5866 ;; Registers used:
  5867 ;;		wreg, status,2, status,0, pclath, cstack
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5877 ;;Total ram usage:        0 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    7
  5880 ;; This function calls:
  5881 ;;		_IOCCF0_SetInterruptHandler
  5882 ;; This function is called by:
  5883 ;;		_SYSTEM_Initialize
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           
  5888                           ;psect for function _PIN_MANAGER_Initialize
  5889  0E63                     _PIN_MANAGER_Initialize:	
  5890  0E63                     l2653:	
  5891                           ;incstack = 0
  5892                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5893                           
  5894                           
  5895                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
  5896  0E63  0022               	movlb	2	; select bank2
  5897  0E64  018C               	clrf	12	;volatile
  5898  0E65                     l2655:	
  5899                           
  5900                           ;mcc_generated_files/pin_manager.c: 63:     LATC = 0x20;
  5901  0E65  3020               	movlw	32
  5902  0E66  008E               	movwf	14	;volatile
  5903  0E67                     l2657:	
  5904                           
  5905                           ;mcc_generated_files/pin_manager.c: 68:     TRISA = 0x37;
  5906  0E67  3037               	movlw	55
  5907  0E68  0021               	movlb	1	; select bank1
  5908  0E69  008C               	movwf	12	;volatile
  5909  0E6A                     l2659:	
  5910                           
  5911                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x21;
  5912  0E6A  3021               	movlw	33
  5913  0E6B  008E               	movwf	14	;volatile
  5914  0E6C                     l2661:	
  5915                           
  5916                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  5917  0E6C  0023               	movlb	3	; select bank3
  5918  0E6D  018E               	clrf	14	;volatile
  5919                           
  5920                           ;mcc_generated_files/pin_manager.c: 75:     ANSELA = 0x33;
  5921  0E6E  3033               	movlw	51
  5922  0E6F  008C               	movwf	12	;volatile
  5923  0E70                     l2663:	
  5924                           
  5925                           ;mcc_generated_files/pin_manager.c: 80:     WPUA = 0x00;
  5926  0E70  0024               	movlb	4	; select bank4
  5927  0E71  018C               	clrf	12	;volatile
  5928  0E72                     l2665:	
  5929                           
  5930                           ;mcc_generated_files/pin_manager.c: 81:     WPUC = 0x1E;
  5931  0E72  301E               	movlw	30
  5932  0E73  008E               	movwf	14	;volatile
  5933                           
  5934                           ;mcc_generated_files/pin_manager.c: 86:     ODCONA = 0x00;
  5935  0E74  0025               	movlb	5	; select bank5
  5936  0E75  018C               	clrf	12	;volatile
  5937                           
  5938                           ;mcc_generated_files/pin_manager.c: 87:     ODCONC = 0x00;
  5939  0E76  018E               	clrf	14	;volatile
  5940  0E77                     l2667:	
  5941                           
  5942                           ;mcc_generated_files/pin_manager.c: 92:     SLRCONA = 0x37;
  5943  0E77  3037               	movlw	55
  5944  0E78  0026               	movlb	6	; select bank6
  5945  0E79  008C               	movwf	12	;volatile
  5946  0E7A                     l2669:	
  5947                           
  5948                           ;mcc_generated_files/pin_manager.c: 93:     SLRCONC = 0x3F;
  5949  0E7A  303F               	movlw	63
  5950  0E7B  008E               	movwf	14	;volatile
  5951  0E7C                     l2671:	
  5952                           
  5953                           ;mcc_generated_files/pin_manager.c: 98:     INLVLA = 0x3F;
  5954  0E7C  303F               	movlw	63
  5955  0E7D  0027               	movlb	7	; select bank7
  5956  0E7E  008C               	movwf	12	;volatile
  5957  0E7F                     l2673:	
  5958                           
  5959                           ;mcc_generated_files/pin_manager.c: 99:     INLVLC = 0x3F;
  5960  0E7F  303F               	movlw	63
  5961  0E80  008E               	movwf	14	;volatile
  5962  0E81                     l2675:	
  5963                           
  5964                           ;mcc_generated_files/pin_manager.c: 106:     IOCCFbits.IOCCF0 = 0;
  5965  0E81  1019               	bcf	25,0	;volatile
  5966  0E82                     l2677:	
  5967                           
  5968                           ;mcc_generated_files/pin_manager.c: 108:     IOCCNbits.IOCCN0 = 0;
  5969  0E82  1018               	bcf	24,0	;volatile
  5970  0E83                     l2679:	
  5971                           
  5972                           ;mcc_generated_files/pin_manager.c: 110:     IOCCPbits.IOCCP0 = 1;
  5973  0E83  1417               	bsf	23,0	;volatile
  5974  0E84                     l2681:	
  5975                           
  5976                           ;mcc_generated_files/pin_manager.c: 114:     IOCCF0_SetInterruptHandler( TripTurnSignal 
      +                          );
  5977  0E84  3017               	movlw	low _TripTurnSignal
  5978  0E85  0020               	movlb	0	; select bank0
  5979  0E86  00A0               	movwf	IOCCF0_SetInterruptHandler@InterruptHandler
  5980  0E87  300D               	movlw	high _TripTurnSignal
  5981  0E88  00A1               	movwf	IOCCF0_SetInterruptHandler@InterruptHandler+1
  5982  0E89  318C  24A5  318E   	fcall	_IOCCF0_SetInterruptHandler
  5983  0E8C                     l2683:	
  5984                           
  5985                           ;mcc_generated_files/pin_manager.c: 116:     PIE0bits.IOCIE = 1;
  5986  0E8C  0021               	movlb	1	; select bank1
  5987  0E8D  1610               	bsf	16,4	;volatile
  5988  0E8E                     l113:	
  5989  0E8E  0008               	return
  5990  0E8F                     __end_of_PIN_MANAGER_Initialize:	
  5991                           
  5992                           	psect	text9
  5993  0CA5                     __ptext9:	
  5994 ;; *************** function _IOCCF0_SetInterruptHandler *****************
  5995 ;; Defined at:
  5996 ;;		line 147 in file "mcc_generated_files/pin_manager.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5999 ;;		 -> TripTurnSignal(1), 
  6000 ;; Auto vars:     Size  Location     Type
  6001 ;;		None
  6002 ;; Return value:  Size  Location     Type
  6003 ;;                  1    wreg      void 
  6004 ;; Registers used:
  6005 ;;		wreg
  6006 ;; Tracked objects:
  6007 ;;		On entry : 0/0
  6008 ;;		On exit  : 0/0
  6009 ;;		Unchanged: 0/0
  6010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6011 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6014 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6015 ;;Total ram usage:        2 bytes
  6016 ;; Hardware stack levels used:    1
  6017 ;; Hardware stack levels required when called:    6
  6018 ;; This function calls:
  6019 ;;		Nothing
  6020 ;; This function is called by:
  6021 ;;		_PIN_MANAGER_Initialize
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           
  6026                           ;psect for function _IOCCF0_SetInterruptHandler
  6027  0CA5                     _IOCCF0_SetInterruptHandler:	
  6028  0CA5                     l2629:	
  6029                           ;incstack = 0
  6030                           ; Regs used in _IOCCF0_SetInterruptHandler: [wreg]
  6031                           
  6032                           
  6033                           ;mcc_generated_files/pin_manager.c: 148:     IOCCF0_InterruptHandler = InterruptHandler;
  6034  0CA5  0020               	movlb	0	; select bank0
  6035  0CA6  0821               	movf	IOCCF0_SetInterruptHandler@InterruptHandler+1,w
  6036  0CA7  0021               	movlb	1	; select bank1
  6037  0CA8  00DE               	movwf	(_IOCCF0_InterruptHandler+1)^(0+128)
  6038  0CA9  0020               	movlb	0	; select bank0
  6039  0CAA  0820               	movf	IOCCF0_SetInterruptHandler@InterruptHandler,w
  6040  0CAB  0021               	movlb	1	; select bank1
  6041  0CAC  00DD               	movwf	_IOCCF0_InterruptHandler^(0+128)
  6042  0CAD                     l124:	
  6043  0CAD  0008               	return
  6044  0CAE                     __end_of_IOCCF0_SetInterruptHandler:	
  6045                           
  6046                           	psect	text10
  6047  0C9C                     __ptext10:	
  6048 ;; *************** function _OSCILLATOR_Initialize *****************
  6049 ;; Defined at:
  6050 ;;		line 60 in file "mcc_generated_files/mcc.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;		None
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;		None
  6055 ;; Return value:  Size  Location     Type
  6056 ;;                  1    wreg      void 
  6057 ;; Registers used:
  6058 ;;		wreg, status,2
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;Total ram usage:        0 bytes
  6069 ;; Hardware stack levels used:    1
  6070 ;; Hardware stack levels required when called:    6
  6071 ;; This function calls:
  6072 ;;		Nothing
  6073 ;; This function is called by:
  6074 ;;		_SYSTEM_Initialize
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           
  6079                           ;psect for function _OSCILLATOR_Initialize
  6080  0C9C                     _OSCILLATOR_Initialize:	
  6081  0C9C                     l2685:	
  6082                           ;incstack = 0
  6083                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6084                           
  6085                           
  6086                           ;mcc_generated_files/mcc.c: 63:     OSCCON1 = 0x62;
  6087  0C9C  3062               	movlw	98
  6088  0C9D  0032               	movlb	18	; select bank18
  6089  0C9E  0099               	movwf	25	;volatile
  6090  0C9F                     l2687:	
  6091                           
  6092                           ;mcc_generated_files/mcc.c: 65:     OSCCON3 = 0x00;
  6093  0C9F  019B               	clrf	27	;volatile
  6094  0CA0                     l2689:	
  6095                           
  6096                           ;mcc_generated_files/mcc.c: 67:     OSCEN = 0x00;
  6097  0CA0  019D               	clrf	29	;volatile
  6098                           
  6099                           ;mcc_generated_files/mcc.c: 69:     OSCFRQ = 0x03;
  6100  0CA1  3003               	movlw	3
  6101  0CA2  009F               	movwf	31	;volatile
  6102  0CA3                     l2691:	
  6103                           
  6104                           ;mcc_generated_files/mcc.c: 71:     OSCTUNE = 0x00;
  6105  0CA3  019E               	clrf	30	;volatile
  6106  0CA4                     l50:	
  6107  0CA4  0008               	return
  6108  0CA5                     __end_of_OSCILLATOR_Initialize:	
  6109                           
  6110                           	psect	text11
  6111  0494                     __ptext11:	
  6112 ;; *************** function _InitPatternSelector *****************
  6113 ;; Defined at:
  6114 ;;		line 3 in file "PatternSelector.c"
  6115 ;; Parameters:    Size  Location     Type
  6116 ;;  p_selector      2   59[BANK0 ] PTR volatile struct Patt
  6117 ;;		 -> pattern_selector(19), 
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;  i               2   65[BANK0 ] int 
  6120 ;; Return value:  Size  Location     Type
  6121 ;;                  1    wreg      void 
  6122 ;; Registers used:
  6123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 0/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6129 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;Total ram usage:        8 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; Hardware stack levels required when called:   10
  6136 ;; This function calls:
  6137 ;;		_EEPROM_GetSavedPattern
  6138 ;;		_InitLowerPattern
  6139 ;;		_InitUpperLowerPattern
  6140 ;;		_InitWigwagPattern
  6141 ;;		_InitXStrobePattern
  6142 ;;		_NewPattern
  6143 ;; This function is called by:
  6144 ;;		_setup
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148                           
  6149                           ;psect for function _InitPatternSelector
  6150  0494                     _InitPatternSelector:	
  6151  0494                     l2771:	
  6152                           ;incstack = 0
  6153                           ; Regs used in _InitPatternSelector: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6154                           
  6155                           
  6156                           ;PatternSelector.c: 3: void InitPatternSelector( struct PatternSelector* p_selector );Pa
      +                          tternSelector.c: 4: {;PatternSelector.c: 6:     for ( int i = 0; i < MAX_PATTERNS; i++ )
  6157  0494  0020               	movlb	0	; select bank0
  6158  0495  01E1               	clrf	InitPatternSelector@i
  6159  0496  01E2               	clrf	InitPatternSelector@i+1
  6160  0497                     l2777:	
  6161                           
  6162                           ;PatternSelector.c: 7:     {;PatternSelector.c: 8:         p_selector->patterns[i] = New
      +                          Pattern();
  6163  0497  318F  2783  3184   	fcall	_NewPattern
  6164  049A  0020               	movlb	0	; select bank0
  6165  049B  0862               	movf	InitPatternSelector@i+1,w
  6166  049C  00DE               	movwf	??_InitPatternSelector+1
  6167  049D  0861               	movf	InitPatternSelector@i,w
  6168  049E  00DD               	movwf	??_InitPatternSelector
  6169  049F  35DD               	lslf	??_InitPatternSelector,f
  6170  04A0  0DDE               	rlf	??_InitPatternSelector+1,f
  6171  04A1  085D               	movf	??_InitPatternSelector,w
  6172  04A2  075B               	addwf	InitPatternSelector@p_selector,w
  6173  04A3  0086               	movwf	6
  6174  04A4  085E               	movf	??_InitPatternSelector+1,w
  6175  04A5  3D5C               	addwfc	InitPatternSelector@p_selector+1,w
  6176  04A6  0087               	movwf	7
  6177  04A7  0828               	movf	?_NewPattern,w
  6178  04A8  3FC0               	movwi [0]fsr1
  6179  04A9  0829               	movf	?_NewPattern+1,w
  6180  04AA  3FC1               	movwi [1]fsr1
  6181  04AB                     l2779:	
  6182                           
  6183                           ;PatternSelector.c: 9:     }
  6184  04AB  3001               	movlw	1
  6185  04AC  07E1               	addwf	InitPatternSelector@i,f
  6186  04AD  3000               	movlw	0
  6187  04AE  3DE2               	addwfc	InitPatternSelector@i+1,f
  6188  04AF                     l2781:	
  6189  04AF  0862               	movf	InitPatternSelector@i+1,w
  6190  04B0  3A80               	xorlw	128
  6191  04B1  00DD               	movwf	??_InitPatternSelector
  6192  04B2  3080               	movlw	128
  6193  04B3  025D               	subwf	??_InitPatternSelector,w
  6194  04B4  1D03               	skipz
  6195  04B5  2CB8               	goto	u1615
  6196  04B6  3006               	movlw	6
  6197  04B7  0261               	subwf	InitPatternSelector@i,w
  6198  04B8                     u1615:	
  6199  04B8  1C03               	skipc
  6200  04B9  2CBB               	goto	u1611
  6201  04BA  2CBC               	goto	u1610
  6202  04BB                     u1611:	
  6203  04BB  2C97               	goto	l2777
  6204  04BC                     u1610:	
  6205  04BC                     l2783:	
  6206                           
  6207                           ;PatternSelector.c: 10:     p_selector->active = EEPROM_GetSavedPattern();
  6208  04BC  318D  25D5  3184   	fcall	_EEPROM_GetSavedPattern
  6209  04BF  0020               	movlb	0	; select bank0
  6210  04C0  00DD               	movwf	??_InitPatternSelector
  6211  04C1  085B               	movf	InitPatternSelector@p_selector,w
  6212  04C2  3E0C               	addlw	12
  6213  04C3  00DE               	movwf	??_InitPatternSelector+1
  6214  04C4  3000               	movlw	0
  6215  04C5  3D5C               	addwfc	InitPatternSelector@p_selector+1,w
  6216  04C6  00DF               	movwf	??_InitPatternSelector+2
  6217  04C7  085E               	movf	??_InitPatternSelector+1,w
  6218  04C8  0086               	movwf	6
  6219  04C9  085F               	movf	??_InitPatternSelector+2,w
  6220  04CA  0087               	movwf	7
  6221  04CB  085D               	movf	??_InitPatternSelector,w
  6222  04CC  0081               	movwf	1
  6223  04CD                     l2785:	
  6224                           
  6225                           ;PatternSelector.c: 12:     InitWigwagPattern( p_selector->patterns[WIGWAG] );
  6226  04CD  085B               	movf	InitPatternSelector@p_selector,w
  6227  04CE  0086               	movwf	6
  6228  04CF  085C               	movf	InitPatternSelector@p_selector+1,w
  6229  04D0  0087               	movwf	7
  6230  04D1  3F40               	moviw [0]fsr1
  6231  04D2  00C4               	movwf	InitWigwagPattern@pattern
  6232  04D3  3F41               	moviw [1]fsr1
  6233  04D4  00C5               	movwf	InitWigwagPattern@pattern+1
  6234  04D5  3183  238B  3184   	fcall	_InitWigwagPattern
  6235  04D8                     l2787:	
  6236                           
  6237                           ;PatternSelector.c: 13:     InitXStrobePattern( p_selector->patterns[XSTROBE] );
  6238  04D8  0020               	movlb	0	; select bank0
  6239  04D9  085B               	movf	InitPatternSelector@p_selector,w
  6240  04DA  0086               	movwf	6
  6241  04DB  085C               	movf	InitPatternSelector@p_selector+1,w
  6242  04DC  0087               	movwf	7
  6243  04DD  3142               	addfsr 1,2
  6244  04DE  3F40               	moviw [0]fsr1
  6245  04DF  00C4               	movwf	InitXStrobePattern@pattern
  6246  04E0  3F41               	moviw [1]fsr1
  6247  04E1  00C5               	movwf	InitXStrobePattern@pattern+1
  6248  04E2  3180  206D  3184   	fcall	_InitXStrobePattern
  6249  04E5                     l2789:	
  6250                           
  6251                           ;PatternSelector.c: 14:     InitUpperLowerPattern( p_selector->patterns[UPPER_LOWER] );
  6252  04E5  0020               	movlb	0	; select bank0
  6253  04E6  085B               	movf	InitPatternSelector@p_selector,w
  6254  04E7  0086               	movwf	6
  6255  04E8  085C               	movf	InitPatternSelector@p_selector+1,w
  6256  04E9  0087               	movwf	7
  6257  04EA  3144               	addfsr 1,4
  6258  04EB  3F40               	moviw [0]fsr1
  6259  04EC  00C4               	movwf	InitUpperLowerPattern@pattern
  6260  04ED  3F41               	moviw [1]fsr1
  6261  04EE  00C5               	movwf	InitUpperLowerPattern@pattern+1
  6262  04EF  3181  2177  3184   	fcall	_InitUpperLowerPattern
  6263  04F2                     l2791:	
  6264                           
  6265                           ;PatternSelector.c: 15:     InitLowerPattern( p_selector->patterns[LOWER] );
  6266  04F2  0020               	movlb	0	; select bank0
  6267  04F3  085B               	movf	InitPatternSelector@p_selector,w
  6268  04F4  0086               	movwf	6
  6269  04F5  085C               	movf	InitPatternSelector@p_selector+1,w
  6270  04F6  0087               	movwf	7
  6271  04F7  3146               	addfsr 1,6
  6272  04F8  3F40               	moviw [0]fsr1
  6273  04F9  00C4               	movwf	InitLowerPattern@pattern
  6274  04FA  3F41               	moviw [1]fsr1
  6275  04FB  00C5               	movwf	InitLowerPattern@pattern+1
  6276  04FC  3182  2281  3184   	fcall	_InitLowerPattern
  6277  04FF                     l2793:	
  6278                           
  6279                           ;PatternSelector.c: 16:     p_selector->current_stage = p_selector->patterns[ p_selector
      +                          ->active ]->first_stage;
  6280  04FF  0020               	movlb	0	; select bank0
  6281  0500  085B               	movf	InitPatternSelector@p_selector,w
  6282  0501  0086               	movwf	6
  6283  0502  085C               	movf	InitPatternSelector@p_selector+1,w
  6284  0503  0087               	movwf	7
  6285  0504  314C               	addfsr 1,12
  6286  0505  0801               	movf	1,w
  6287  0506  00DD               	movwf	??_InitPatternSelector
  6288  0507  01DE               	clrf	??_InitPatternSelector+1
  6289  0508  35DD               	lslf	??_InitPatternSelector,f
  6290  0509  0DDE               	rlf	??_InitPatternSelector+1,f
  6291  050A  085D               	movf	??_InitPatternSelector,w
  6292  050B  075B               	addwf	InitPatternSelector@p_selector,w
  6293  050C  0086               	movwf	6
  6294  050D  085E               	movf	??_InitPatternSelector+1,w
  6295  050E  3D5C               	addwfc	InitPatternSelector@p_selector+1,w
  6296  050F  0087               	movwf	7
  6297  0510  3F40               	moviw [0]fsr1
  6298  0511  00DF               	movwf	??_InitPatternSelector+2
  6299  0512  3F41               	moviw [1]fsr1
  6300  0513  00E0               	movwf	??_InitPatternSelector+3
  6301  0514  085F               	movf	??_InitPatternSelector+2,w
  6302  0515  0086               	movwf	6
  6303  0516  0860               	movf	??_InitPatternSelector+3,w
  6304  0517  0087               	movwf	7
  6305  0518  3141               	addfsr 1,1
  6306  0519  085B               	movf	InitPatternSelector@p_selector,w
  6307  051A  0084               	movwf	4
  6308  051B  085C               	movf	InitPatternSelector@p_selector+1,w
  6309  051C  0085               	movwf	5
  6310  051D  310D               	addfsr 0,13
  6311  051E  3F40               	moviw [0]fsr1
  6312  051F  3F80               	movwi [0]fsr0
  6313  0520  3F41               	moviw [1]fsr1
  6314  0521  3F81               	movwi [1]fsr0
  6315  0522                     l2795:	
  6316                           
  6317                           ;PatternSelector.c: 18:     p_selector->start_time = 0;
  6318  0522  085B               	movf	InitPatternSelector@p_selector,w
  6319  0523  3E0F               	addlw	15
  6320  0524  00DD               	movwf	??_InitPatternSelector
  6321  0525  3000               	movlw	0
  6322  0526  3D5C               	addwfc	InitPatternSelector@p_selector+1,w
  6323  0527  00DE               	movwf	??_InitPatternSelector+1
  6324  0528  085D               	movf	??_InitPatternSelector,w
  6325  0529  0086               	movwf	6
  6326  052A  085E               	movf	??_InitPatternSelector+1,w
  6327  052B  0087               	movwf	7
  6328  052C  3000               	movlw	0
  6329  052D  3FC0               	movwi [0]fsr1
  6330  052E  3FC1               	movwi [1]fsr1
  6331  052F  3FC2               	movwi [2]fsr1
  6332  0530  3FC3               	movwi [3]fsr1
  6333  0531                     l312:	
  6334  0531  0008               	return
  6335  0532                     __end_of_InitPatternSelector:	
  6336                           
  6337                           	psect	text12
  6338  0F83                     __ptext12:	
  6339 ;; *************** function _NewPattern *****************
  6340 ;; Defined at:
  6341 ;;		line 36 in file "Pattern.c"
  6342 ;; Parameters:    Size  Location     Type
  6343 ;;		None
  6344 ;; Auto vars:     Size  Location     Type
  6345 ;;  new_pattern     2   21[BANK0 ] PTR struct Pattern
  6346 ;;		 -> pattern_stash(18), 
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  2    8[BANK0 ] PTR struct Pattern
  6349 ;; Registers used:
  6350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6357 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6358 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;Total ram usage:        4 bytes
  6361 ;; Hardware stack levels used:    1
  6362 ;; Hardware stack levels required when called:    8
  6363 ;; This function calls:
  6364 ;;		_NewStage
  6365 ;;		___wmul
  6366 ;; This function is called by:
  6367 ;;		_InitPatternSelector
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           
  6372                           ;psect for function _NewPattern
  6373  0F83                     _NewPattern:	
  6374  0F83                     l2707:	
  6375                           ;incstack = 0
  6376                           ; Regs used in _NewPattern: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6377                           
  6378                           
  6379                           ;Pattern.c: 38:     if ( pattern_list_iter >= MAX_PATTERNS )
  6380  0F83  3000               	movlw	0
  6381  0F84  0020               	movlb	0	; select bank0
  6382  0F85  0269               	subwf	_pattern_list_iter+1,w
  6383  0F86  3006               	movlw	6
  6384  0F87  1903               	skipnz
  6385  0F88  0268               	subwf	_pattern_list_iter,w
  6386  0F89  1C03               	skipc
  6387  0F8A  2F8C               	goto	u1521
  6388  0F8B  2F8D               	goto	u1520
  6389  0F8C                     u1521:	
  6390  0F8C  2F90               	goto	l2713
  6391  0F8D                     u1520:	
  6392  0F8D                     l2709:	
  6393                           
  6394                           ;Pattern.c: 39:     {;Pattern.c: 40:         return ((void*)0);
  6395  0F8D  01A8               	clrf	?_NewPattern
  6396  0F8E  01A9               	clrf	?_NewPattern+1
  6397  0F8F  2FC0               	goto	l435
  6398  0F90                     l2713:	
  6399                           
  6400                           ;Pattern.c: 42:     struct Pattern* new_pattern = &pattern_stash[ pattern_list_iter++ ];
  6401  0F90  0869               	movf	_pattern_list_iter+1,w
  6402  0F91  00A1               	movwf	___wmul@multiplier+1
  6403  0F92  0868               	movf	_pattern_list_iter,w
  6404  0F93  00A0               	movwf	___wmul@multiplier
  6405  0F94  3003               	movlw	3
  6406  0F95  00A2               	movwf	___wmul@multiplicand
  6407  0F96  3000               	movlw	0
  6408  0F97  00A3               	movwf	___wmul@multiplicand+1
  6409  0F98  318D  2595  318F   	fcall	___wmul
  6410  0F9B  3020               	movlw	low _pattern_stash
  6411  0F9C  0020               	movlb	0	; select bank0
  6412  0F9D  00B3               	movwf	??_NewPattern
  6413  0F9E  3001               	movlw	high _pattern_stash
  6414  0F9F  00B4               	movwf	??_NewPattern+1
  6415  0FA0  0820               	movf	?___wmul,w
  6416  0FA1  0733               	addwf	??_NewPattern,w
  6417  0FA2  00B5               	movwf	NewPattern@new_pattern
  6418  0FA3  0821               	movf	?___wmul+1,w
  6419  0FA4  3D34               	addwfc	??_NewPattern+1,w
  6420  0FA5  00B6               	movwf	NewPattern@new_pattern+1
  6421  0FA6                     l2715:	
  6422  0FA6  3001               	movlw	1
  6423  0FA7  07E8               	addwf	_pattern_list_iter,f
  6424  0FA8  3000               	movlw	0
  6425  0FA9  3DE9               	addwfc	_pattern_list_iter+1,f
  6426  0FAA                     l2717:	
  6427                           
  6428                           ;Pattern.c: 43:     new_pattern->name = WIGWAG;
  6429  0FAA  0835               	movf	NewPattern@new_pattern,w
  6430  0FAB  0086               	movwf	6
  6431  0FAC  0836               	movf	NewPattern@new_pattern+1,w
  6432  0FAD  0087               	movwf	7
  6433  0FAE  0181               	clrf	1
  6434  0FAF                     l2719:	
  6435                           
  6436                           ;Pattern.c: 44:     new_pattern->first_stage = NewStage();
  6437  0FAF  3187  279B  318F   	fcall	_NewStage
  6438  0FB2  0020               	movlb	0	; select bank0
  6439  0FB3  0835               	movf	NewPattern@new_pattern,w
  6440  0FB4  0086               	movwf	6
  6441  0FB5  0836               	movf	NewPattern@new_pattern+1,w
  6442  0FB6  0087               	movwf	7
  6443  0FB7  3141               	addfsr 1,1
  6444  0FB8  0820               	movf	?_NewStage,w
  6445  0FB9  3FC0               	movwi [0]fsr1
  6446  0FBA  0821               	movf	?_NewStage+1,w
  6447  0FBB  3FC1               	movwi [1]fsr1
  6448  0FBC                     l2721:	
  6449                           
  6450                           ;Pattern.c: 46:     return new_pattern;
  6451  0FBC  0836               	movf	NewPattern@new_pattern+1,w
  6452  0FBD  00A9               	movwf	?_NewPattern+1
  6453  0FBE  0835               	movf	NewPattern@new_pattern,w
  6454  0FBF  00A8               	movwf	?_NewPattern
  6455  0FC0                     l435:	
  6456  0FC0  0008               	return
  6457  0FC1                     __end_of_NewPattern:	
  6458                           
  6459                           	psect	text13
  6460  0D95                     __ptext13:	
  6461 ;; *************** function ___wmul *****************
  6462 ;; Defined at:
  6463 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6466 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;  product         2    4[BANK0 ] unsigned int 
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  2    0[BANK0 ] unsigned int 
  6471 ;; Registers used:
  6472 ;;		wreg, status,2, status,0
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6478 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;Total ram usage:        6 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; Hardware stack levels required when called:    6
  6485 ;; This function calls:
  6486 ;;		Nothing
  6487 ;; This function is called by:
  6488 ;;		_NewPattern
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           
  6493                           ;psect for function ___wmul
  6494  0D95                     ___wmul:	
  6495  0D95                     l2637:	
  6496                           ;incstack = 0
  6497                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6498                           
  6499  0D95  0020               	movlb	0	; select bank0
  6500  0D96  01A4               	clrf	___wmul@product
  6501  0D97  01A5               	clrf	___wmul@product+1
  6502  0D98                     l2639:	
  6503  0D98  1C20               	btfss	___wmul@multiplier,0
  6504  0D99  2D9B               	goto	u1481
  6505  0D9A  2D9C               	goto	u1480
  6506  0D9B                     u1481:	
  6507  0D9B  2DA0               	goto	l752
  6508  0D9C                     u1480:	
  6509  0D9C                     l2641:	
  6510  0D9C  0822               	movf	___wmul@multiplicand,w
  6511  0D9D  07A4               	addwf	___wmul@product,f
  6512  0D9E  0823               	movf	___wmul@multiplicand+1,w
  6513  0D9F  3DA5               	addwfc	___wmul@product+1,f
  6514  0DA0                     l752:	
  6515  0DA0  3001               	movlw	1
  6516  0DA1                     u1495:	
  6517  0DA1  35A2               	lslf	___wmul@multiplicand,f
  6518  0DA2  0DA3               	rlf	___wmul@multiplicand+1,f
  6519  0DA3  0B89               	decfsz	9,f
  6520  0DA4  2DA1               	goto	u1495
  6521  0DA5                     l2643:	
  6522  0DA5  3001               	movlw	1
  6523  0DA6                     u1505:	
  6524  0DA6  36A1               	lsrf	___wmul@multiplier+1,f
  6525  0DA7  0CA0               	rrf	___wmul@multiplier,f
  6526  0DA8  0B89               	decfsz	9,f
  6527  0DA9  2DA6               	goto	u1505
  6528  0DAA                     l2645:	
  6529  0DAA  0820               	movf	___wmul@multiplier,w
  6530  0DAB  0421               	iorwf	___wmul@multiplier+1,w
  6531  0DAC  1D03               	btfss	3,2
  6532  0DAD  2DAF               	goto	u1511
  6533  0DAE  2DB0               	goto	u1510
  6534  0DAF                     u1511:	
  6535  0DAF  2D98               	goto	l2639
  6536  0DB0                     u1510:	
  6537  0DB0                     l2647:	
  6538  0DB0  0825               	movf	___wmul@product+1,w
  6539  0DB1  00A1               	movwf	?___wmul+1
  6540  0DB2  0824               	movf	___wmul@product,w
  6541  0DB3  00A0               	movwf	?___wmul
  6542  0DB4                     l754:	
  6543  0DB4  0008               	return
  6544  0DB5                     __end_of___wmul:	
  6545                           
  6546                           	psect	text14
  6547  006D                     __ptext14:	
  6548 ;; *************** function _InitXStrobePattern *****************
  6549 ;; Defined at:
  6550 ;;		line 118 in file "Pattern.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;  pattern         2   36[BANK0 ] PTR struct Pattern
  6553 ;;		 -> pattern_stash(18), NULL(0), 
  6554 ;; Auto vars:     Size  Location     Type
  6555 ;;  i               2   53[BANK0 ] int 
  6556 ;;  i               2   51[BANK0 ] int 
  6557 ;;  diag_2_3_sta    4   43[BANK0 ] _Bool [4]
  6558 ;;  diag_1_4_sta    4   39[BANK0 ] _Bool [4]
  6559 ;;  head            2   57[BANK0 ] PTR struct Stage
  6560 ;;		 -> stage_stash(768), NULL(0), 
  6561 ;;  off             2   55[BANK0 ] PTR struct Stage
  6562 ;;		 -> stage_stash(768), NULL(0), 
  6563 ;;  diag_2_3        2   49[BANK0 ] PTR struct Stage
  6564 ;;		 -> stage_stash(768), NULL(0), 
  6565 ;;  diag_1_4        2   47[BANK0 ] PTR struct Stage
  6566 ;;		 -> stage_stash(768), NULL(0), 
  6567 ;; Return value:  Size  Location     Type
  6568 ;;                  1    wreg      void 
  6569 ;; Registers used:
  6570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6571 ;; Tracked objects:
  6572 ;;		On entry : 0/0
  6573 ;;		On exit  : 0/0
  6574 ;;		Unchanged: 0/0
  6575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6576 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6577 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6579 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;Total ram usage:       23 bytes
  6581 ;; Hardware stack levels used:    1
  6582 ;; Hardware stack levels required when called:    9
  6583 ;; This function calls:
  6584 ;;		_AppendStage
  6585 ;;		_ConstructStage
  6586 ;;		_CopyStageData
  6587 ;;		_NewStage
  6588 ;; This function is called by:
  6589 ;;		_InitPatternSelector
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           
  6594                           ;psect for function _InitXStrobePattern
  6595  006D                     _InitXStrobePattern:	
  6596  006D                     l2191:	
  6597                           ;incstack = 0
  6598                           ; Regs used in _InitXStrobePattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6599                           
  6600                           
  6601                           ;Pattern.c: 118: void InitXStrobePattern( struct Pattern* pattern );Pattern.c: 119: {;Pa
      +                          ttern.c: 120:     pattern->name = XSTROBE;
  6602  006D  0020               	movlb	0	; select bank0
  6603  006E  0844               	movf	InitXStrobePattern@pattern,w
  6604  006F  0086               	movwf	6
  6605  0070  0845               	movf	InitXStrobePattern@pattern+1,w
  6606  0071  0087               	movwf	7
  6607  0072  3001               	movlw	1
  6608  0073  0081               	movwf	1
  6609  0074                     l2193:	
  6610                           
  6611                           ;Pattern.c: 123:     _Bool diag_1_4_states[NUM_LIGHTS] = { 1, 0, 0, 1 };
  6612  0074  0021               	movlb	1	; select bank1
  6613  0075  0837               	movf	(InitXStrobePattern@F450+3)^(0+128),w
  6614  0076  0020               	movlb	0	; select bank0
  6615  0077  00CA               	movwf	InitXStrobePattern@diag_1_4_states+3
  6616  0078  0021               	movlb	1	; select bank1
  6617  0079  0836               	movf	(InitXStrobePattern@F450+2)^(0+128),w
  6618  007A  0020               	movlb	0	; select bank0
  6619  007B  00C9               	movwf	InitXStrobePattern@diag_1_4_states+2
  6620  007C  0021               	movlb	1	; select bank1
  6621  007D  0835               	movf	(InitXStrobePattern@F450+1)^(0+128),w
  6622  007E  0020               	movlb	0	; select bank0
  6623  007F  00C8               	movwf	InitXStrobePattern@diag_1_4_states+1
  6624  0080  0021               	movlb	1	; select bank1
  6625  0081  0834               	movf	InitXStrobePattern@F450^(0+128),w
  6626  0082  0020               	movlb	0	; select bank0
  6627  0083  00C7               	movwf	InitXStrobePattern@diag_1_4_states
  6628  0084                     l2195:	
  6629                           
  6630                           ;Pattern.c: 124:     struct Stage* diag_1_4 = ConstructStage( diag_1_4_states, 60UL, ((v
      +                          oid*)0) );
  6631  0084  303C               	movlw	60
  6632  0085  00B3               	movwf	ConstructStage@time_ms
  6633  0086  3000               	movlw	0
  6634  0087  00B4               	movwf	ConstructStage@time_ms+1
  6635  0088  01B5               	clrf	ConstructStage@next
  6636  0089  3047               	movlw	(low (InitXStrobePattern@diag_1_4_states| 0))& (0+255)
  6637  008A  318E  26BB  3180   	fcall	_ConstructStage
  6638  008D  0020               	movlb	0	; select bank0
  6639  008E  0834               	movf	?_ConstructStage+1,w
  6640  008F  00D0               	movwf	InitXStrobePattern@diag_1_4+1
  6641  0090  0833               	movf	?_ConstructStage,w
  6642  0091  00CF               	movwf	InitXStrobePattern@diag_1_4
  6643  0092                     l2197:	
  6644                           
  6645                           ;Pattern.c: 126:     _Bool diag_2_3_states[NUM_LIGHTS] = { 0, 1, 1, 0 };
  6646  0092  0021               	movlb	1	; select bank1
  6647  0093  0833               	movf	(InitXStrobePattern@F453+3)^(0+128),w
  6648  0094  0020               	movlb	0	; select bank0
  6649  0095  00CE               	movwf	InitXStrobePattern@diag_2_3_states+3
  6650  0096  0021               	movlb	1	; select bank1
  6651  0097  0832               	movf	(InitXStrobePattern@F453+2)^(0+128),w
  6652  0098  0020               	movlb	0	; select bank0
  6653  0099  00CD               	movwf	InitXStrobePattern@diag_2_3_states+2
  6654  009A  0021               	movlb	1	; select bank1
  6655  009B  0831               	movf	(InitXStrobePattern@F453+1)^(0+128),w
  6656  009C  0020               	movlb	0	; select bank0
  6657  009D  00CC               	movwf	InitXStrobePattern@diag_2_3_states+1
  6658  009E  0021               	movlb	1	; select bank1
  6659  009F  0830               	movf	InitXStrobePattern@F453^(0+128),w
  6660  00A0  0020               	movlb	0	; select bank0
  6661  00A1  00CB               	movwf	InitXStrobePattern@diag_2_3_states
  6662  00A2                     l2199:	
  6663                           
  6664                           ;Pattern.c: 127:     struct Stage* diag_2_3 = ConstructStage( diag_2_3_states, 60UL, ((v
      +                          oid*)0) );
  6665  00A2  303C               	movlw	60
  6666  00A3  00B3               	movwf	ConstructStage@time_ms
  6667  00A4  3000               	movlw	0
  6668  00A5  00B4               	movwf	ConstructStage@time_ms+1
  6669  00A6  01B5               	clrf	ConstructStage@next
  6670  00A7  304B               	movlw	(low (InitXStrobePattern@diag_2_3_states| 0))& (0+255)
  6671  00A8  318E  26BB  3180   	fcall	_ConstructStage
  6672  00AB  0020               	movlb	0	; select bank0
  6673  00AC  0834               	movf	?_ConstructStage+1,w
  6674  00AD  00D2               	movwf	InitXStrobePattern@diag_2_3+1
  6675  00AE  0833               	movf	?_ConstructStage,w
  6676  00AF  00D1               	movwf	InitXStrobePattern@diag_2_3
  6677  00B0                     l2201:	
  6678                           
  6679                           ;Pattern.c: 129:     struct Stage* off = NewStage();
  6680  00B0  3187  279B  3180   	fcall	_NewStage
  6681  00B3  0020               	movlb	0	; select bank0
  6682  00B4  0821               	movf	?_NewStage+1,w
  6683  00B5  00D8               	movwf	InitXStrobePattern@off+1
  6684  00B6  0820               	movf	?_NewStage,w
  6685  00B7  00D7               	movwf	InitXStrobePattern@off
  6686  00B8                     l2203:	
  6687                           
  6688                           ;Pattern.c: 131:     struct Stage* head = pattern->first_stage;
  6689  00B8  0844               	movf	InitXStrobePattern@pattern,w
  6690  00B9  0086               	movwf	6
  6691  00BA  0845               	movf	InitXStrobePattern@pattern+1,w
  6692  00BB  0087               	movwf	7
  6693  00BC  3141               	addfsr 1,1
  6694  00BD  3F40               	moviw [0]fsr1
  6695  00BE  00D9               	movwf	InitXStrobePattern@head
  6696  00BF  3F41               	moviw [1]fsr1
  6697  00C0  00DA               	movwf	InitXStrobePattern@head+1
  6698  00C1                     l2205:	
  6699                           
  6700                           ;Pattern.c: 134:     for( int i = 0; i < 3; i++ )
  6701  00C1  01D3               	clrf	InitXStrobePattern@i
  6702  00C2  01D4               	clrf	InitXStrobePattern@i+1
  6703  00C3                     l2211:	
  6704                           
  6705                           ;Pattern.c: 135:     {;Pattern.c: 136:         AppendStage( head, CopyStageData( NewStag
      +                          e(), diag_1_4 ) );
  6706  00C3  0020               	movlb	0	; select bank0
  6707  00C4  085A               	movf	InitXStrobePattern@head+1,w
  6708  00C5  00BD               	movwf	AppendStage@head+1
  6709  00C6  0859               	movf	InitXStrobePattern@head,w
  6710  00C7  00BC               	movwf	AppendStage@head
  6711  00C8  3187  279B  3180   	fcall	_NewStage
  6712  00CB  0020               	movlb	0	; select bank0
  6713  00CC  0821               	movf	?_NewStage+1,w
  6714  00CD  00B4               	movwf	CopyStageData@dest+1
  6715  00CE  0820               	movf	?_NewStage,w
  6716  00CF  00B3               	movwf	CopyStageData@dest
  6717  00D0  0850               	movf	InitXStrobePattern@diag_1_4+1,w
  6718  00D1  00B6               	movwf	CopyStageData@source+1
  6719  00D2  084F               	movf	InitXStrobePattern@diag_1_4,w
  6720  00D3  00B5               	movwf	CopyStageData@source
  6721  00D4  318F  274A  3180   	fcall	_CopyStageData
  6722  00D7  0020               	movlb	0	; select bank0
  6723  00D8  0834               	movf	?_CopyStageData+1,w
  6724  00D9  00BF               	movwf	AppendStage@new_stage+1
  6725  00DA  0833               	movf	?_CopyStageData,w
  6726  00DB  00BE               	movwf	AppendStage@new_stage
  6727  00DC  3187  2743  3180   	fcall	_AppendStage
  6728                           
  6729                           ;Pattern.c: 137:         AppendStage( head, CopyStageData( NewStage(), off ) );
  6730  00DF  0020               	movlb	0	; select bank0
  6731  00E0  085A               	movf	InitXStrobePattern@head+1,w
  6732  00E1  00BD               	movwf	AppendStage@head+1
  6733  00E2  0859               	movf	InitXStrobePattern@head,w
  6734  00E3  00BC               	movwf	AppendStage@head
  6735  00E4  3187  279B  3180   	fcall	_NewStage
  6736  00E7  0020               	movlb	0	; select bank0
  6737  00E8  0821               	movf	?_NewStage+1,w
  6738  00E9  00B4               	movwf	CopyStageData@dest+1
  6739  00EA  0820               	movf	?_NewStage,w
  6740  00EB  00B3               	movwf	CopyStageData@dest
  6741  00EC  0858               	movf	InitXStrobePattern@off+1,w
  6742  00ED  00B6               	movwf	CopyStageData@source+1
  6743  00EE  0857               	movf	InitXStrobePattern@off,w
  6744  00EF  00B5               	movwf	CopyStageData@source
  6745  00F0  318F  274A  3180   	fcall	_CopyStageData
  6746  00F3  0020               	movlb	0	; select bank0
  6747  00F4  0834               	movf	?_CopyStageData+1,w
  6748  00F5  00BF               	movwf	AppendStage@new_stage+1
  6749  00F6  0833               	movf	?_CopyStageData,w
  6750  00F7  00BE               	movwf	AppendStage@new_stage
  6751  00F8  3187  2743  3180   	fcall	_AppendStage
  6752  00FB                     l2213:	
  6753                           
  6754                           ;Pattern.c: 138:     }
  6755  00FB  3001               	movlw	1
  6756  00FC  0020               	movlb	0	; select bank0
  6757  00FD  07D3               	addwf	InitXStrobePattern@i,f
  6758  00FE  3000               	movlw	0
  6759  00FF  3DD4               	addwfc	InitXStrobePattern@i+1,f
  6760  0100                     l2215:	
  6761  0100  0854               	movf	InitXStrobePattern@i+1,w
  6762  0101  3A80               	xorlw	128
  6763  0102  00C6               	movwf	??_InitXStrobePattern
  6764  0103  3080               	movlw	128
  6765  0104  0246               	subwf	??_InitXStrobePattern,w
  6766  0105  1D03               	skipz
  6767  0106  2909               	goto	u1035
  6768  0107  3003               	movlw	3
  6769  0108  0253               	subwf	InitXStrobePattern@i,w
  6770  0109                     u1035:	
  6771  0109  1C03               	skipc
  6772  010A  290C               	goto	u1031
  6773  010B  290D               	goto	u1030
  6774  010C                     u1031:	
  6775  010C  28C3               	goto	l2211
  6776  010D                     u1030:	
  6777  010D                     l2217:	
  6778                           
  6779                           ;Pattern.c: 141:     AppendStage( head, CopyStageData( NewStage(), off ) );
  6780  010D  0020               	movlb	0	; select bank0
  6781  010E  085A               	movf	InitXStrobePattern@head+1,w
  6782  010F  00BD               	movwf	AppendStage@head+1
  6783  0110  0859               	movf	InitXStrobePattern@head,w
  6784  0111  00BC               	movwf	AppendStage@head
  6785  0112  3187  279B  3180   	fcall	_NewStage
  6786  0115  0020               	movlb	0	; select bank0
  6787  0116  0821               	movf	?_NewStage+1,w
  6788  0117  00B4               	movwf	CopyStageData@dest+1
  6789  0118  0820               	movf	?_NewStage,w
  6790  0119  00B3               	movwf	CopyStageData@dest
  6791  011A  0858               	movf	InitXStrobePattern@off+1,w
  6792  011B  00B6               	movwf	CopyStageData@source+1
  6793  011C  0857               	movf	InitXStrobePattern@off,w
  6794  011D  00B5               	movwf	CopyStageData@source
  6795  011E  318F  274A  3180   	fcall	_CopyStageData
  6796  0121  0020               	movlb	0	; select bank0
  6797  0122  0834               	movf	?_CopyStageData+1,w
  6798  0123  00BF               	movwf	AppendStage@new_stage+1
  6799  0124  0833               	movf	?_CopyStageData,w
  6800  0125  00BE               	movwf	AppendStage@new_stage
  6801  0126  3187  2743  3180   	fcall	_AppendStage
  6802  0129                     l2219:	
  6803                           
  6804                           ;Pattern.c: 144:     for( int i = 0; i < 3; i++ )
  6805  0129  0020               	movlb	0	; select bank0
  6806  012A  01D5               	clrf	InitXStrobePattern@i_890
  6807  012B  01D6               	clrf	InitXStrobePattern@i_890+1
  6808  012C                     l2225:	
  6809                           
  6810                           ;Pattern.c: 145:     {;Pattern.c: 146:         AppendStage( head, CopyStageData( NewStag
      +                          e(), diag_2_3 ) );
  6811  012C  0020               	movlb	0	; select bank0
  6812  012D  085A               	movf	InitXStrobePattern@head+1,w
  6813  012E  00BD               	movwf	AppendStage@head+1
  6814  012F  0859               	movf	InitXStrobePattern@head,w
  6815  0130  00BC               	movwf	AppendStage@head
  6816  0131  3187  279B  3180   	fcall	_NewStage
  6817  0134  0020               	movlb	0	; select bank0
  6818  0135  0821               	movf	?_NewStage+1,w
  6819  0136  00B4               	movwf	CopyStageData@dest+1
  6820  0137  0820               	movf	?_NewStage,w
  6821  0138  00B3               	movwf	CopyStageData@dest
  6822  0139  0852               	movf	InitXStrobePattern@diag_2_3+1,w
  6823  013A  00B6               	movwf	CopyStageData@source+1
  6824  013B  0851               	movf	InitXStrobePattern@diag_2_3,w
  6825  013C  00B5               	movwf	CopyStageData@source
  6826  013D  318F  274A  3180   	fcall	_CopyStageData
  6827  0140  0020               	movlb	0	; select bank0
  6828  0141  0834               	movf	?_CopyStageData+1,w
  6829  0142  00BF               	movwf	AppendStage@new_stage+1
  6830  0143  0833               	movf	?_CopyStageData,w
  6831  0144  00BE               	movwf	AppendStage@new_stage
  6832  0145  3187  2743  3180   	fcall	_AppendStage
  6833                           
  6834                           ;Pattern.c: 147:         AppendStage( head, CopyStageData( NewStage(), off ) );
  6835  0148  0020               	movlb	0	; select bank0
  6836  0149  085A               	movf	InitXStrobePattern@head+1,w
  6837  014A  00BD               	movwf	AppendStage@head+1
  6838  014B  0859               	movf	InitXStrobePattern@head,w
  6839  014C  00BC               	movwf	AppendStage@head
  6840  014D  3187  279B  3180   	fcall	_NewStage
  6841  0150  0020               	movlb	0	; select bank0
  6842  0151  0821               	movf	?_NewStage+1,w
  6843  0152  00B4               	movwf	CopyStageData@dest+1
  6844  0153  0820               	movf	?_NewStage,w
  6845  0154  00B3               	movwf	CopyStageData@dest
  6846  0155  0858               	movf	InitXStrobePattern@off+1,w
  6847  0156  00B6               	movwf	CopyStageData@source+1
  6848  0157  0857               	movf	InitXStrobePattern@off,w
  6849  0158  00B5               	movwf	CopyStageData@source
  6850  0159  318F  274A  3180   	fcall	_CopyStageData
  6851  015C  0020               	movlb	0	; select bank0
  6852  015D  0834               	movf	?_CopyStageData+1,w
  6853  015E  00BF               	movwf	AppendStage@new_stage+1
  6854  015F  0833               	movf	?_CopyStageData,w
  6855  0160  00BE               	movwf	AppendStage@new_stage
  6856  0161  3187  2743  3180   	fcall	_AppendStage
  6857  0164                     l2227:	
  6858                           
  6859                           ;Pattern.c: 148:     }
  6860  0164  3001               	movlw	1
  6861  0165  0020               	movlb	0	; select bank0
  6862  0166  07D5               	addwf	InitXStrobePattern@i_890,f
  6863  0167  3000               	movlw	0
  6864  0168  3DD6               	addwfc	InitXStrobePattern@i_890+1,f
  6865  0169                     l2229:	
  6866  0169  0856               	movf	InitXStrobePattern@i_890+1,w
  6867  016A  3A80               	xorlw	128
  6868  016B  00C6               	movwf	??_InitXStrobePattern
  6869  016C  3080               	movlw	128
  6870  016D  0246               	subwf	??_InitXStrobePattern,w
  6871  016E  1D03               	skipz
  6872  016F  2972               	goto	u1045
  6873  0170  3003               	movlw	3
  6874  0171  0255               	subwf	InitXStrobePattern@i_890,w
  6875  0172                     u1045:	
  6876  0172  1C03               	skipc
  6877  0173  2975               	goto	u1041
  6878  0174  2976               	goto	u1040
  6879  0175                     u1041:	
  6880  0175  292C               	goto	l2225
  6881  0176                     u1040:	
  6882  0176                     l473:	
  6883  0176  0008               	return
  6884  0177                     __end_of_InitXStrobePattern:	
  6885                           
  6886                           	psect	text15
  6887  038B                     __ptext15:	
  6888 ;; *************** function _InitWigwagPattern *****************
  6889 ;; Defined at:
  6890 ;;		line 85 in file "Pattern.c"
  6891 ;; Parameters:    Size  Location     Type
  6892 ;;  pattern         2   36[BANK0 ] PTR struct Pattern
  6893 ;;		 -> pattern_stash(18), NULL(0), 
  6894 ;; Auto vars:     Size  Location     Type
  6895 ;;  i               2   53[BANK0 ] int 
  6896 ;;  i               2   51[BANK0 ] int 
  6897 ;;  right_side_s    4   43[BANK0 ] _Bool [4]
  6898 ;;  left_side_st    4   39[BANK0 ] _Bool [4]
  6899 ;;  head            2   57[BANK0 ] PTR struct Stage
  6900 ;;		 -> stage_stash(768), NULL(0), 
  6901 ;;  off             2   55[BANK0 ] PTR struct Stage
  6902 ;;		 -> stage_stash(768), NULL(0), 
  6903 ;;  right_side_o    2   49[BANK0 ] PTR struct Stage
  6904 ;;		 -> stage_stash(768), NULL(0), 
  6905 ;;  left_side_on    2   47[BANK0 ] PTR struct Stage
  6906 ;;		 -> stage_stash(768), NULL(0), 
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  1    wreg      void 
  6909 ;; Registers used:
  6910 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6916 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6917 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6918 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6919 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6920 ;;Total ram usage:       23 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    9
  6923 ;; This function calls:
  6924 ;;		_AppendStage
  6925 ;;		_ConstructStage
  6926 ;;		_CopyStageData
  6927 ;;		_NewStage
  6928 ;; This function is called by:
  6929 ;;		_InitPatternSelector
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933                           
  6934                           ;psect for function _InitWigwagPattern
  6935  038B                     _InitWigwagPattern:	
  6936  038B                     l2151:	
  6937                           ;incstack = 0
  6938                           ; Regs used in _InitWigwagPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6939                           
  6940                           
  6941                           ;Pattern.c: 85: void InitWigwagPattern( struct Pattern* pattern );Pattern.c: 86: {;Patte
      +                          rn.c: 87:     pattern->name = WIGWAG;
  6942  038B  0020               	movlb	0	; select bank0
  6943  038C  0844               	movf	InitWigwagPattern@pattern,w
  6944  038D  0086               	movwf	6
  6945  038E  0845               	movf	InitWigwagPattern@pattern+1,w
  6946  038F  0087               	movwf	7
  6947  0390  0181               	clrf	1
  6948  0391                     l2153:	
  6949                           
  6950                           ;Pattern.c: 90:     _Bool left_side_states[NUM_LIGHTS] = { 1, 0, 1, 0 };
  6951  0391  0021               	movlb	1	; select bank1
  6952  0392  083F               	movf	(InitWigwagPattern@F438+3)^(0+128),w
  6953  0393  0020               	movlb	0	; select bank0
  6954  0394  00CA               	movwf	InitWigwagPattern@left_side_states+3
  6955  0395  0021               	movlb	1	; select bank1
  6956  0396  083E               	movf	(InitWigwagPattern@F438+2)^(0+128),w
  6957  0397  0020               	movlb	0	; select bank0
  6958  0398  00C9               	movwf	InitWigwagPattern@left_side_states+2
  6959  0399  0021               	movlb	1	; select bank1
  6960  039A  083D               	movf	(InitWigwagPattern@F438+1)^(0+128),w
  6961  039B  0020               	movlb	0	; select bank0
  6962  039C  00C8               	movwf	InitWigwagPattern@left_side_states+1
  6963  039D  0021               	movlb	1	; select bank1
  6964  039E  083C               	movf	InitWigwagPattern@F438^(0+128),w
  6965  039F  0020               	movlb	0	; select bank0
  6966  03A0  00C7               	movwf	InitWigwagPattern@left_side_states
  6967  03A1                     l2155:	
  6968                           
  6969                           ;Pattern.c: 91:     struct Stage* left_side_on = ConstructStage( left_side_states, 60UL,
      +                           ((void*)0) );
  6970  03A1  303C               	movlw	60
  6971  03A2  00B3               	movwf	ConstructStage@time_ms
  6972  03A3  3000               	movlw	0
  6973  03A4  00B4               	movwf	ConstructStage@time_ms+1
  6974  03A5  01B5               	clrf	ConstructStage@next
  6975  03A6  3047               	movlw	(low (InitWigwagPattern@left_side_states| 0))& (0+255)
  6976  03A7  318E  26BB  3183   	fcall	_ConstructStage
  6977  03AA  0020               	movlb	0	; select bank0
  6978  03AB  0834               	movf	?_ConstructStage+1,w
  6979  03AC  00D0               	movwf	InitWigwagPattern@left_side_on+1
  6980  03AD  0833               	movf	?_ConstructStage,w
  6981  03AE  00CF               	movwf	InitWigwagPattern@left_side_on
  6982  03AF                     l2157:	
  6983                           
  6984                           ;Pattern.c: 93:     _Bool right_side_states[NUM_LIGHTS] = { 0, 1, 0, 1 };
  6985  03AF  0021               	movlb	1	; select bank1
  6986  03B0  083B               	movf	(InitWigwagPattern@F441+3)^(0+128),w
  6987  03B1  0020               	movlb	0	; select bank0
  6988  03B2  00CE               	movwf	InitWigwagPattern@right_side_states+3
  6989  03B3  0021               	movlb	1	; select bank1
  6990  03B4  083A               	movf	(InitWigwagPattern@F441+2)^(0+128),w
  6991  03B5  0020               	movlb	0	; select bank0
  6992  03B6  00CD               	movwf	InitWigwagPattern@right_side_states+2
  6993  03B7  0021               	movlb	1	; select bank1
  6994  03B8  0839               	movf	(InitWigwagPattern@F441+1)^(0+128),w
  6995  03B9  0020               	movlb	0	; select bank0
  6996  03BA  00CC               	movwf	InitWigwagPattern@right_side_states+1
  6997  03BB  0021               	movlb	1	; select bank1
  6998  03BC  0838               	movf	InitWigwagPattern@F441^(0+128),w
  6999  03BD  0020               	movlb	0	; select bank0
  7000  03BE  00CB               	movwf	InitWigwagPattern@right_side_states
  7001  03BF                     l2159:	
  7002                           
  7003                           ;Pattern.c: 94:     struct Stage* right_side_on = ConstructStage( right_side_states, 60U
      +                          L, ((void*)0) );
  7004  03BF  303C               	movlw	60
  7005  03C0  00B3               	movwf	ConstructStage@time_ms
  7006  03C1  3000               	movlw	0
  7007  03C2  00B4               	movwf	ConstructStage@time_ms+1
  7008  03C3  01B5               	clrf	ConstructStage@next
  7009  03C4  304B               	movlw	(low (InitWigwagPattern@right_side_states| 0))& (0+255)
  7010  03C5  318E  26BB  3183   	fcall	_ConstructStage
  7011  03C8  0020               	movlb	0	; select bank0
  7012  03C9  0834               	movf	?_ConstructStage+1,w
  7013  03CA  00D2               	movwf	InitWigwagPattern@right_side_on+1
  7014  03CB  0833               	movf	?_ConstructStage,w
  7015  03CC  00D1               	movwf	InitWigwagPattern@right_side_on
  7016  03CD                     l2161:	
  7017                           
  7018                           ;Pattern.c: 96:     struct Stage* off = NewStage();
  7019  03CD  3187  279B  3183   	fcall	_NewStage
  7020  03D0  0020               	movlb	0	; select bank0
  7021  03D1  0821               	movf	?_NewStage+1,w
  7022  03D2  00D8               	movwf	InitWigwagPattern@off+1
  7023  03D3  0820               	movf	?_NewStage,w
  7024  03D4  00D7               	movwf	InitWigwagPattern@off
  7025  03D5                     l2163:	
  7026                           
  7027                           ;Pattern.c: 98:     struct Stage* head = pattern->first_stage;
  7028  03D5  0844               	movf	InitWigwagPattern@pattern,w
  7029  03D6  0086               	movwf	6
  7030  03D7  0845               	movf	InitWigwagPattern@pattern+1,w
  7031  03D8  0087               	movwf	7
  7032  03D9  3141               	addfsr 1,1
  7033  03DA  3F40               	moviw [0]fsr1
  7034  03DB  00D9               	movwf	InitWigwagPattern@head
  7035  03DC  3F41               	moviw [1]fsr1
  7036  03DD  00DA               	movwf	InitWigwagPattern@head+1
  7037  03DE                     l2165:	
  7038                           
  7039                           ;Pattern.c: 101:     for( int i = 0; i < 3; i++ )
  7040  03DE  01D3               	clrf	InitWigwagPattern@i
  7041  03DF  01D4               	clrf	InitWigwagPattern@i+1
  7042  03E0                     l2171:	
  7043                           
  7044                           ;Pattern.c: 102:     {;Pattern.c: 103:         AppendStage( head, CopyStageData( NewStag
      +                          e(), left_side_on ) );
  7045  03E0  0020               	movlb	0	; select bank0
  7046  03E1  085A               	movf	InitWigwagPattern@head+1,w
  7047  03E2  00BD               	movwf	AppendStage@head+1
  7048  03E3  0859               	movf	InitWigwagPattern@head,w
  7049  03E4  00BC               	movwf	AppendStage@head
  7050  03E5  3187  279B  3183   	fcall	_NewStage
  7051  03E8  0020               	movlb	0	; select bank0
  7052  03E9  0821               	movf	?_NewStage+1,w
  7053  03EA  00B4               	movwf	CopyStageData@dest+1
  7054  03EB  0820               	movf	?_NewStage,w
  7055  03EC  00B3               	movwf	CopyStageData@dest
  7056  03ED  0850               	movf	InitWigwagPattern@left_side_on+1,w
  7057  03EE  00B6               	movwf	CopyStageData@source+1
  7058  03EF  084F               	movf	InitWigwagPattern@left_side_on,w
  7059  03F0  00B5               	movwf	CopyStageData@source
  7060  03F1  318F  274A  3183   	fcall	_CopyStageData
  7061  03F4  0020               	movlb	0	; select bank0
  7062  03F5  0834               	movf	?_CopyStageData+1,w
  7063  03F6  00BF               	movwf	AppendStage@new_stage+1
  7064  03F7  0833               	movf	?_CopyStageData,w
  7065  03F8  00BE               	movwf	AppendStage@new_stage
  7066  03F9  3187  2743  3183   	fcall	_AppendStage
  7067                           
  7068                           ;Pattern.c: 104:         AppendStage( head, CopyStageData( NewStage(), off ) );
  7069  03FC  0020               	movlb	0	; select bank0
  7070  03FD  085A               	movf	InitWigwagPattern@head+1,w
  7071  03FE  00BD               	movwf	AppendStage@head+1
  7072  03FF  0859               	movf	InitWigwagPattern@head,w
  7073  0400  00BC               	movwf	AppendStage@head
  7074  0401  3187  279B  3183   	fcall	_NewStage
  7075  0404  0020               	movlb	0	; select bank0
  7076  0405  0821               	movf	?_NewStage+1,w
  7077  0406  00B4               	movwf	CopyStageData@dest+1
  7078  0407  0820               	movf	?_NewStage,w
  7079  0408  00B3               	movwf	CopyStageData@dest
  7080  0409  0858               	movf	InitWigwagPattern@off+1,w
  7081  040A  00B6               	movwf	CopyStageData@source+1
  7082  040B  0857               	movf	InitWigwagPattern@off,w
  7083  040C  00B5               	movwf	CopyStageData@source
  7084  040D  318F  274A  3183   	fcall	_CopyStageData
  7085  0410  0020               	movlb	0	; select bank0
  7086  0411  0834               	movf	?_CopyStageData+1,w
  7087  0412  00BF               	movwf	AppendStage@new_stage+1
  7088  0413  0833               	movf	?_CopyStageData,w
  7089  0414  00BE               	movwf	AppendStage@new_stage
  7090  0415  3187  2743  3183   	fcall	_AppendStage
  7091  0418                     l2173:	
  7092                           
  7093                           ;Pattern.c: 105:     }
  7094  0418  3001               	movlw	1
  7095  0419  0020               	movlb	0	; select bank0
  7096  041A  07D3               	addwf	InitWigwagPattern@i,f
  7097  041B  3000               	movlw	0
  7098  041C  3DD4               	addwfc	InitWigwagPattern@i+1,f
  7099  041D                     l2175:	
  7100  041D  0854               	movf	InitWigwagPattern@i+1,w
  7101  041E  3A80               	xorlw	128
  7102  041F  00C6               	movwf	??_InitWigwagPattern
  7103  0420  3080               	movlw	128
  7104  0421  0246               	subwf	??_InitWigwagPattern,w
  7105  0422  1D03               	skipz
  7106  0423  2C26               	goto	u1015
  7107  0424  3003               	movlw	3
  7108  0425  0253               	subwf	InitWigwagPattern@i,w
  7109  0426                     u1015:	
  7110  0426  1C03               	skipc
  7111  0427  2C29               	goto	u1011
  7112  0428  2C2A               	goto	u1010
  7113  0429                     u1011:	
  7114  0429  2BE0               	goto	l2171
  7115  042A                     u1010:	
  7116  042A                     l2177:	
  7117                           
  7118                           ;Pattern.c: 108:     AppendStage( head, CopyStageData( NewStage(), off ) );
  7119  042A  0020               	movlb	0	; select bank0
  7120  042B  085A               	movf	InitWigwagPattern@head+1,w
  7121  042C  00BD               	movwf	AppendStage@head+1
  7122  042D  0859               	movf	InitWigwagPattern@head,w
  7123  042E  00BC               	movwf	AppendStage@head
  7124  042F  3187  279B  3183   	fcall	_NewStage
  7125  0432  0020               	movlb	0	; select bank0
  7126  0433  0821               	movf	?_NewStage+1,w
  7127  0434  00B4               	movwf	CopyStageData@dest+1
  7128  0435  0820               	movf	?_NewStage,w
  7129  0436  00B3               	movwf	CopyStageData@dest
  7130  0437  0858               	movf	InitWigwagPattern@off+1,w
  7131  0438  00B6               	movwf	CopyStageData@source+1
  7132  0439  0857               	movf	InitWigwagPattern@off,w
  7133  043A  00B5               	movwf	CopyStageData@source
  7134  043B  318F  274A  3183   	fcall	_CopyStageData
  7135  043E  0020               	movlb	0	; select bank0
  7136  043F  0834               	movf	?_CopyStageData+1,w
  7137  0440  00BF               	movwf	AppendStage@new_stage+1
  7138  0441  0833               	movf	?_CopyStageData,w
  7139  0442  00BE               	movwf	AppendStage@new_stage
  7140  0443  3187  2743  3183   	fcall	_AppendStage
  7141  0446                     l2179:	
  7142                           
  7143                           ;Pattern.c: 111:     for( int i = 0; i < 3; i++ )
  7144  0446  0020               	movlb	0	; select bank0
  7145  0447  01D5               	clrf	InitWigwagPattern@i_864
  7146  0448  01D6               	clrf	InitWigwagPattern@i_864+1
  7147  0449                     l2185:	
  7148                           
  7149                           ;Pattern.c: 112:     {;Pattern.c: 113:         AppendStage( head, CopyStageData( NewStag
      +                          e(), right_side_on ) );
  7150  0449  0020               	movlb	0	; select bank0
  7151  044A  085A               	movf	InitWigwagPattern@head+1,w
  7152  044B  00BD               	movwf	AppendStage@head+1
  7153  044C  0859               	movf	InitWigwagPattern@head,w
  7154  044D  00BC               	movwf	AppendStage@head
  7155  044E  3187  279B  3183   	fcall	_NewStage
  7156  0451  0020               	movlb	0	; select bank0
  7157  0452  0821               	movf	?_NewStage+1,w
  7158  0453  00B4               	movwf	CopyStageData@dest+1
  7159  0454  0820               	movf	?_NewStage,w
  7160  0455  00B3               	movwf	CopyStageData@dest
  7161  0456  0852               	movf	InitWigwagPattern@right_side_on+1,w
  7162  0457  00B6               	movwf	CopyStageData@source+1
  7163  0458  0851               	movf	InitWigwagPattern@right_side_on,w
  7164  0459  00B5               	movwf	CopyStageData@source
  7165  045A  318F  274A  3183   	fcall	_CopyStageData
  7166  045D  0020               	movlb	0	; select bank0
  7167  045E  0834               	movf	?_CopyStageData+1,w
  7168  045F  00BF               	movwf	AppendStage@new_stage+1
  7169  0460  0833               	movf	?_CopyStageData,w
  7170  0461  00BE               	movwf	AppendStage@new_stage
  7171  0462  3187  2743  3183   	fcall	_AppendStage
  7172                           
  7173                           ;Pattern.c: 114:         AppendStage( head, CopyStageData( NewStage(), off ) );
  7174  0465  0020               	movlb	0	; select bank0
  7175  0466  085A               	movf	InitWigwagPattern@head+1,w
  7176  0467  00BD               	movwf	AppendStage@head+1
  7177  0468  0859               	movf	InitWigwagPattern@head,w
  7178  0469  00BC               	movwf	AppendStage@head
  7179  046A  3187  279B  3183   	fcall	_NewStage
  7180  046D  0020               	movlb	0	; select bank0
  7181  046E  0821               	movf	?_NewStage+1,w
  7182  046F  00B4               	movwf	CopyStageData@dest+1
  7183  0470  0820               	movf	?_NewStage,w
  7184  0471  00B3               	movwf	CopyStageData@dest
  7185  0472  0858               	movf	InitWigwagPattern@off+1,w
  7186  0473  00B6               	movwf	CopyStageData@source+1
  7187  0474  0857               	movf	InitWigwagPattern@off,w
  7188  0475  00B5               	movwf	CopyStageData@source
  7189  0476  318F  274A  3183   	fcall	_CopyStageData
  7190  0479  0020               	movlb	0	; select bank0
  7191  047A  0834               	movf	?_CopyStageData+1,w
  7192  047B  00BF               	movwf	AppendStage@new_stage+1
  7193  047C  0833               	movf	?_CopyStageData,w
  7194  047D  00BE               	movwf	AppendStage@new_stage
  7195  047E  3187  2743  3183   	fcall	_AppendStage
  7196  0481                     l2187:	
  7197                           
  7198                           ;Pattern.c: 115:     }
  7199  0481  3001               	movlw	1
  7200  0482  0020               	movlb	0	; select bank0
  7201  0483  07D5               	addwf	InitWigwagPattern@i_864,f
  7202  0484  3000               	movlw	0
  7203  0485  3DD6               	addwfc	InitWigwagPattern@i_864+1,f
  7204  0486                     l2189:	
  7205  0486  0856               	movf	InitWigwagPattern@i_864+1,w
  7206  0487  3A80               	xorlw	128
  7207  0488  00C6               	movwf	??_InitWigwagPattern
  7208  0489  3080               	movlw	128
  7209  048A  0246               	subwf	??_InitWigwagPattern,w
  7210  048B  1D03               	skipz
  7211  048C  2C8F               	goto	u1025
  7212  048D  3003               	movlw	3
  7213  048E  0255               	subwf	InitWigwagPattern@i_864,w
  7214  048F                     u1025:	
  7215  048F  1C03               	skipc
  7216  0490  2C92               	goto	u1021
  7217  0491  2C93               	goto	u1020
  7218  0492                     u1021:	
  7219  0492  2C49               	goto	l2185
  7220  0493                     u1020:	
  7221  0493                     l462:	
  7222  0493  0008               	return
  7223  0494                     __end_of_InitWigwagPattern:	
  7224                           
  7225                           	psect	text16
  7226  0177                     __ptext16:	
  7227 ;; *************** function _InitUpperLowerPattern *****************
  7228 ;; Defined at:
  7229 ;;		line 151 in file "Pattern.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;  pattern         2   36[BANK0 ] PTR struct Pattern
  7232 ;;		 -> pattern_stash(18), NULL(0), 
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;  i               2   53[BANK0 ] int 
  7235 ;;  i               2   51[BANK0 ] int 
  7236 ;;  lower_states    4   43[BANK0 ] _Bool [4]
  7237 ;;  upper_states    4   39[BANK0 ] _Bool [4]
  7238 ;;  head            2   57[BANK0 ] PTR struct Stage
  7239 ;;		 -> stage_stash(768), NULL(0), 
  7240 ;;  off             2   55[BANK0 ] PTR struct Stage
  7241 ;;		 -> stage_stash(768), NULL(0), 
  7242 ;;  lower           2   49[BANK0 ] PTR struct Stage
  7243 ;;		 -> stage_stash(768), NULL(0), 
  7244 ;;  upper           2   47[BANK0 ] PTR struct Stage
  7245 ;;		 -> stage_stash(768), NULL(0), 
  7246 ;; Return value:  Size  Location     Type
  7247 ;;                  1    wreg      void 
  7248 ;; Registers used:
  7249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7250 ;; Tracked objects:
  7251 ;;		On entry : 0/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7255 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7257 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7258 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7259 ;;Total ram usage:       23 bytes
  7260 ;; Hardware stack levels used:    1
  7261 ;; Hardware stack levels required when called:    9
  7262 ;; This function calls:
  7263 ;;		_AppendStage
  7264 ;;		_ConstructStage
  7265 ;;		_CopyStageData
  7266 ;;		_NewStage
  7267 ;; This function is called by:
  7268 ;;		_InitPatternSelector
  7269 ;; This function uses a non-reentrant model
  7270 ;;
  7271                           
  7272                           
  7273                           ;psect for function _InitUpperLowerPattern
  7274  0177                     _InitUpperLowerPattern:	
  7275  0177                     l2231:	
  7276                           ;incstack = 0
  7277                           ; Regs used in _InitUpperLowerPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7278                           
  7279                           
  7280                           ;Pattern.c: 151: void InitUpperLowerPattern( struct Pattern* pattern );Pattern.c: 152: {
      +                          ;Pattern.c: 153:     pattern->name = UPPER_LOWER;
  7281  0177  0020               	movlb	0	; select bank0
  7282  0178  0844               	movf	InitUpperLowerPattern@pattern,w
  7283  0179  0086               	movwf	6
  7284  017A  0845               	movf	InitUpperLowerPattern@pattern+1,w
  7285  017B  0087               	movwf	7
  7286  017C  3002               	movlw	2
  7287  017D  0081               	movwf	1
  7288  017E                     l2233:	
  7289                           
  7290                           ;Pattern.c: 156:     _Bool upper_states[NUM_LIGHTS] = { 1, 1, 0, 0 };
  7291  017E  0021               	movlb	1	; select bank1
  7292  017F  082F               	movf	(InitUpperLowerPattern@F462+3)^(0+128),w
  7293  0180  0020               	movlb	0	; select bank0
  7294  0181  00CA               	movwf	InitUpperLowerPattern@upper_states+3
  7295  0182  0021               	movlb	1	; select bank1
  7296  0183  082E               	movf	(InitUpperLowerPattern@F462+2)^(0+128),w
  7297  0184  0020               	movlb	0	; select bank0
  7298  0185  00C9               	movwf	InitUpperLowerPattern@upper_states+2
  7299  0186  0021               	movlb	1	; select bank1
  7300  0187  082D               	movf	(InitUpperLowerPattern@F462+1)^(0+128),w
  7301  0188  0020               	movlb	0	; select bank0
  7302  0189  00C8               	movwf	InitUpperLowerPattern@upper_states+1
  7303  018A  0021               	movlb	1	; select bank1
  7304  018B  082C               	movf	InitUpperLowerPattern@F462^(0+128),w
  7305  018C  0020               	movlb	0	; select bank0
  7306  018D  00C7               	movwf	InitUpperLowerPattern@upper_states
  7307  018E                     l2235:	
  7308                           
  7309                           ;Pattern.c: 157:     struct Stage* upper = ConstructStage( upper_states, 60UL, ((void*)0
      +                          ) );
  7310  018E  303C               	movlw	60
  7311  018F  00B3               	movwf	ConstructStage@time_ms
  7312  0190  3000               	movlw	0
  7313  0191  00B4               	movwf	ConstructStage@time_ms+1
  7314  0192  01B5               	clrf	ConstructStage@next
  7315  0193  3047               	movlw	(low (InitUpperLowerPattern@upper_states| 0))& (0+255)
  7316  0194  318E  26BB  3181   	fcall	_ConstructStage
  7317  0197  0020               	movlb	0	; select bank0
  7318  0198  0834               	movf	?_ConstructStage+1,w
  7319  0199  00D0               	movwf	InitUpperLowerPattern@upper+1
  7320  019A  0833               	movf	?_ConstructStage,w
  7321  019B  00CF               	movwf	InitUpperLowerPattern@upper
  7322  019C                     l2237:	
  7323                           
  7324                           ;Pattern.c: 159:     _Bool lower_states[NUM_LIGHTS] = { 0, 0, 1, 1 };
  7325  019C  0021               	movlb	1	; select bank1
  7326  019D  082B               	movf	(InitUpperLowerPattern@F465+3)^(0+128),w
  7327  019E  0020               	movlb	0	; select bank0
  7328  019F  00CE               	movwf	InitUpperLowerPattern@lower_states+3
  7329  01A0  0021               	movlb	1	; select bank1
  7330  01A1  082A               	movf	(InitUpperLowerPattern@F465+2)^(0+128),w
  7331  01A2  0020               	movlb	0	; select bank0
  7332  01A3  00CD               	movwf	InitUpperLowerPattern@lower_states+2
  7333  01A4  0021               	movlb	1	; select bank1
  7334  01A5  0829               	movf	(InitUpperLowerPattern@F465+1)^(0+128),w
  7335  01A6  0020               	movlb	0	; select bank0
  7336  01A7  00CC               	movwf	InitUpperLowerPattern@lower_states+1
  7337  01A8  0021               	movlb	1	; select bank1
  7338  01A9  0828               	movf	InitUpperLowerPattern@F465^(0+128),w
  7339  01AA  0020               	movlb	0	; select bank0
  7340  01AB  00CB               	movwf	InitUpperLowerPattern@lower_states
  7341  01AC                     l2239:	
  7342                           
  7343                           ;Pattern.c: 160:     struct Stage* lower = ConstructStage( lower_states, 60UL, ((void*)0
      +                          ) );
  7344  01AC  303C               	movlw	60
  7345  01AD  00B3               	movwf	ConstructStage@time_ms
  7346  01AE  3000               	movlw	0
  7347  01AF  00B4               	movwf	ConstructStage@time_ms+1
  7348  01B0  01B5               	clrf	ConstructStage@next
  7349  01B1  304B               	movlw	(low (InitUpperLowerPattern@lower_states| 0))& (0+255)
  7350  01B2  318E  26BB  3181   	fcall	_ConstructStage
  7351  01B5  0020               	movlb	0	; select bank0
  7352  01B6  0834               	movf	?_ConstructStage+1,w
  7353  01B7  00D2               	movwf	InitUpperLowerPattern@lower+1
  7354  01B8  0833               	movf	?_ConstructStage,w
  7355  01B9  00D1               	movwf	InitUpperLowerPattern@lower
  7356  01BA                     l2241:	
  7357                           
  7358                           ;Pattern.c: 162:     struct Stage* off = NewStage();
  7359  01BA  3187  279B  3181   	fcall	_NewStage
  7360  01BD  0020               	movlb	0	; select bank0
  7361  01BE  0821               	movf	?_NewStage+1,w
  7362  01BF  00D8               	movwf	InitUpperLowerPattern@off+1
  7363  01C0  0820               	movf	?_NewStage,w
  7364  01C1  00D7               	movwf	InitUpperLowerPattern@off
  7365  01C2                     l2243:	
  7366                           
  7367                           ;Pattern.c: 165:     struct Stage* head = pattern->first_stage;
  7368  01C2  0844               	movf	InitUpperLowerPattern@pattern,w
  7369  01C3  0086               	movwf	6
  7370  01C4  0845               	movf	InitUpperLowerPattern@pattern+1,w
  7371  01C5  0087               	movwf	7
  7372  01C6  3141               	addfsr 1,1
  7373  01C7  3F40               	moviw [0]fsr1
  7374  01C8  00D9               	movwf	InitUpperLowerPattern@head
  7375  01C9  3F41               	moviw [1]fsr1
  7376  01CA  00DA               	movwf	InitUpperLowerPattern@head+1
  7377  01CB                     l2245:	
  7378                           
  7379                           ;Pattern.c: 168:     for( int i = 0; i < 3; i++ )
  7380  01CB  01D3               	clrf	InitUpperLowerPattern@i
  7381  01CC  01D4               	clrf	InitUpperLowerPattern@i+1
  7382  01CD                     l2251:	
  7383                           
  7384                           ;Pattern.c: 169:     {;Pattern.c: 170:         AppendStage( head, CopyStageData( NewStag
      +                          e(), upper ) );
  7385  01CD  0020               	movlb	0	; select bank0
  7386  01CE  085A               	movf	InitUpperLowerPattern@head+1,w
  7387  01CF  00BD               	movwf	AppendStage@head+1
  7388  01D0  0859               	movf	InitUpperLowerPattern@head,w
  7389  01D1  00BC               	movwf	AppendStage@head
  7390  01D2  3187  279B  3181   	fcall	_NewStage
  7391  01D5  0020               	movlb	0	; select bank0
  7392  01D6  0821               	movf	?_NewStage+1,w
  7393  01D7  00B4               	movwf	CopyStageData@dest+1
  7394  01D8  0820               	movf	?_NewStage,w
  7395  01D9  00B3               	movwf	CopyStageData@dest
  7396  01DA  0850               	movf	InitUpperLowerPattern@upper+1,w
  7397  01DB  00B6               	movwf	CopyStageData@source+1
  7398  01DC  084F               	movf	InitUpperLowerPattern@upper,w
  7399  01DD  00B5               	movwf	CopyStageData@source
  7400  01DE  318F  274A  3181   	fcall	_CopyStageData
  7401  01E1  0020               	movlb	0	; select bank0
  7402  01E2  0834               	movf	?_CopyStageData+1,w
  7403  01E3  00BF               	movwf	AppendStage@new_stage+1
  7404  01E4  0833               	movf	?_CopyStageData,w
  7405  01E5  00BE               	movwf	AppendStage@new_stage
  7406  01E6  3187  2743  3181   	fcall	_AppendStage
  7407                           
  7408                           ;Pattern.c: 171:         AppendStage( head, CopyStageData( NewStage(), off ) );
  7409  01E9  0020               	movlb	0	; select bank0
  7410  01EA  085A               	movf	InitUpperLowerPattern@head+1,w
  7411  01EB  00BD               	movwf	AppendStage@head+1
  7412  01EC  0859               	movf	InitUpperLowerPattern@head,w
  7413  01ED  00BC               	movwf	AppendStage@head
  7414  01EE  3187  279B  3181   	fcall	_NewStage
  7415  01F1  0020               	movlb	0	; select bank0
  7416  01F2  0821               	movf	?_NewStage+1,w
  7417  01F3  00B4               	movwf	CopyStageData@dest+1
  7418  01F4  0820               	movf	?_NewStage,w
  7419  01F5  00B3               	movwf	CopyStageData@dest
  7420  01F6  0858               	movf	InitUpperLowerPattern@off+1,w
  7421  01F7  00B6               	movwf	CopyStageData@source+1
  7422  01F8  0857               	movf	InitUpperLowerPattern@off,w
  7423  01F9  00B5               	movwf	CopyStageData@source
  7424  01FA  318F  274A  3181   	fcall	_CopyStageData
  7425  01FD  0020               	movlb	0	; select bank0
  7426  01FE  0834               	movf	?_CopyStageData+1,w
  7427  01FF  00BF               	movwf	AppendStage@new_stage+1
  7428  0200  0833               	movf	?_CopyStageData,w
  7429  0201  00BE               	movwf	AppendStage@new_stage
  7430  0202  3187  2743  3181   	fcall	_AppendStage
  7431  0205                     l2253:	
  7432                           
  7433                           ;Pattern.c: 172:     }
  7434  0205  3001               	movlw	1
  7435  0206  0020               	movlb	0	; select bank0
  7436  0207  07D3               	addwf	InitUpperLowerPattern@i,f
  7437  0208  3000               	movlw	0
  7438  0209  3DD4               	addwfc	InitUpperLowerPattern@i+1,f
  7439  020A                     l2255:	
  7440  020A  0854               	movf	InitUpperLowerPattern@i+1,w
  7441  020B  3A80               	xorlw	128
  7442  020C  00C6               	movwf	??_InitUpperLowerPattern
  7443  020D  3080               	movlw	128
  7444  020E  0246               	subwf	??_InitUpperLowerPattern,w
  7445  020F  1D03               	skipz
  7446  0210  2A13               	goto	u1055
  7447  0211  3003               	movlw	3
  7448  0212  0253               	subwf	InitUpperLowerPattern@i,w
  7449  0213                     u1055:	
  7450  0213  1C03               	skipc
  7451  0214  2A16               	goto	u1051
  7452  0215  2A17               	goto	u1050
  7453  0216                     u1051:	
  7454  0216  29CD               	goto	l2251
  7455  0217                     u1050:	
  7456  0217                     l2257:	
  7457                           
  7458                           ;Pattern.c: 175:     AppendStage( head, CopyStageData( NewStage(), off ) );
  7459  0217  0020               	movlb	0	; select bank0
  7460  0218  085A               	movf	InitUpperLowerPattern@head+1,w
  7461  0219  00BD               	movwf	AppendStage@head+1
  7462  021A  0859               	movf	InitUpperLowerPattern@head,w
  7463  021B  00BC               	movwf	AppendStage@head
  7464  021C  3187  279B  3181   	fcall	_NewStage
  7465  021F  0020               	movlb	0	; select bank0
  7466  0220  0821               	movf	?_NewStage+1,w
  7467  0221  00B4               	movwf	CopyStageData@dest+1
  7468  0222  0820               	movf	?_NewStage,w
  7469  0223  00B3               	movwf	CopyStageData@dest
  7470  0224  0858               	movf	InitUpperLowerPattern@off+1,w
  7471  0225  00B6               	movwf	CopyStageData@source+1
  7472  0226  0857               	movf	InitUpperLowerPattern@off,w
  7473  0227  00B5               	movwf	CopyStageData@source
  7474  0228  318F  274A  3181   	fcall	_CopyStageData
  7475  022B  0020               	movlb	0	; select bank0
  7476  022C  0834               	movf	?_CopyStageData+1,w
  7477  022D  00BF               	movwf	AppendStage@new_stage+1
  7478  022E  0833               	movf	?_CopyStageData,w
  7479  022F  00BE               	movwf	AppendStage@new_stage
  7480  0230  3187  2743  3181   	fcall	_AppendStage
  7481  0233                     l2259:	
  7482                           
  7483                           ;Pattern.c: 178:     for( int i = 0; i < 3; i++ )
  7484  0233  0020               	movlb	0	; select bank0
  7485  0234  01D5               	clrf	InitUpperLowerPattern@i_916
  7486  0235  01D6               	clrf	InitUpperLowerPattern@i_916+1
  7487  0236                     l2265:	
  7488                           
  7489                           ;Pattern.c: 179:     {;Pattern.c: 180:         AppendStage( head, CopyStageData( NewStag
      +                          e(), lower ) );
  7490  0236  0020               	movlb	0	; select bank0
  7491  0237  085A               	movf	InitUpperLowerPattern@head+1,w
  7492  0238  00BD               	movwf	AppendStage@head+1
  7493  0239  0859               	movf	InitUpperLowerPattern@head,w
  7494  023A  00BC               	movwf	AppendStage@head
  7495  023B  3187  279B  3181   	fcall	_NewStage
  7496  023E  0020               	movlb	0	; select bank0
  7497  023F  0821               	movf	?_NewStage+1,w
  7498  0240  00B4               	movwf	CopyStageData@dest+1
  7499  0241  0820               	movf	?_NewStage,w
  7500  0242  00B3               	movwf	CopyStageData@dest
  7501  0243  0852               	movf	InitUpperLowerPattern@lower+1,w
  7502  0244  00B6               	movwf	CopyStageData@source+1
  7503  0245  0851               	movf	InitUpperLowerPattern@lower,w
  7504  0246  00B5               	movwf	CopyStageData@source
  7505  0247  318F  274A  3181   	fcall	_CopyStageData
  7506  024A  0020               	movlb	0	; select bank0
  7507  024B  0834               	movf	?_CopyStageData+1,w
  7508  024C  00BF               	movwf	AppendStage@new_stage+1
  7509  024D  0833               	movf	?_CopyStageData,w
  7510  024E  00BE               	movwf	AppendStage@new_stage
  7511  024F  3187  2743  3181   	fcall	_AppendStage
  7512                           
  7513                           ;Pattern.c: 181:         AppendStage( head, CopyStageData( NewStage(), off ) );
  7514  0252  0020               	movlb	0	; select bank0
  7515  0253  085A               	movf	InitUpperLowerPattern@head+1,w
  7516  0254  00BD               	movwf	AppendStage@head+1
  7517  0255  0859               	movf	InitUpperLowerPattern@head,w
  7518  0256  00BC               	movwf	AppendStage@head
  7519  0257  3187  279B  3181   	fcall	_NewStage
  7520  025A  0020               	movlb	0	; select bank0
  7521  025B  0821               	movf	?_NewStage+1,w
  7522  025C  00B4               	movwf	CopyStageData@dest+1
  7523  025D  0820               	movf	?_NewStage,w
  7524  025E  00B3               	movwf	CopyStageData@dest
  7525  025F  0858               	movf	InitUpperLowerPattern@off+1,w
  7526  0260  00B6               	movwf	CopyStageData@source+1
  7527  0261  0857               	movf	InitUpperLowerPattern@off,w
  7528  0262  00B5               	movwf	CopyStageData@source
  7529  0263  318F  274A  3181   	fcall	_CopyStageData
  7530  0266  0020               	movlb	0	; select bank0
  7531  0267  0834               	movf	?_CopyStageData+1,w
  7532  0268  00BF               	movwf	AppendStage@new_stage+1
  7533  0269  0833               	movf	?_CopyStageData,w
  7534  026A  00BE               	movwf	AppendStage@new_stage
  7535  026B  3187  2743  3181   	fcall	_AppendStage
  7536  026E                     l2267:	
  7537                           
  7538                           ;Pattern.c: 182:     }
  7539  026E  3001               	movlw	1
  7540  026F  0020               	movlb	0	; select bank0
  7541  0270  07D5               	addwf	InitUpperLowerPattern@i_916,f
  7542  0271  3000               	movlw	0
  7543  0272  3DD6               	addwfc	InitUpperLowerPattern@i_916+1,f
  7544  0273                     l2269:	
  7545  0273  0856               	movf	InitUpperLowerPattern@i_916+1,w
  7546  0274  3A80               	xorlw	128
  7547  0275  00C6               	movwf	??_InitUpperLowerPattern
  7548  0276  3080               	movlw	128
  7549  0277  0246               	subwf	??_InitUpperLowerPattern,w
  7550  0278  1D03               	skipz
  7551  0279  2A7C               	goto	u1065
  7552  027A  3003               	movlw	3
  7553  027B  0255               	subwf	InitUpperLowerPattern@i_916,w
  7554  027C                     u1065:	
  7555  027C  1C03               	skipc
  7556  027D  2A7F               	goto	u1061
  7557  027E  2A80               	goto	u1060
  7558  027F                     u1061:	
  7559  027F  2A36               	goto	l2265
  7560  0280                     u1060:	
  7561  0280                     l484:	
  7562  0280  0008               	return
  7563  0281                     __end_of_InitUpperLowerPattern:	
  7564                           
  7565                           	psect	text17
  7566  0281                     __ptext17:	
  7567 ;; *************** function _InitLowerPattern *****************
  7568 ;; Defined at:
  7569 ;;		line 185 in file "Pattern.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;  pattern         2   36[BANK0 ] PTR struct Pattern
  7572 ;;		 -> pattern_stash(18), NULL(0), 
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;  i               2   53[BANK0 ] int 
  7575 ;;  i               2   51[BANK0 ] int 
  7576 ;;  lower_right_    4   43[BANK0 ] _Bool [4]
  7577 ;;  lower_left_s    4   39[BANK0 ] _Bool [4]
  7578 ;;  head            2   57[BANK0 ] PTR struct Stage
  7579 ;;		 -> stage_stash(768), NULL(0), 
  7580 ;;  off             2   55[BANK0 ] PTR struct Stage
  7581 ;;		 -> stage_stash(768), NULL(0), 
  7582 ;;  lower_right     2   49[BANK0 ] PTR struct Stage
  7583 ;;		 -> stage_stash(768), NULL(0), 
  7584 ;;  lower_left      2   47[BANK0 ] PTR struct Stage
  7585 ;;		 -> stage_stash(768), NULL(0), 
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  1    wreg      void 
  7588 ;; Registers used:
  7589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7595 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;Total ram usage:       23 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:    9
  7602 ;; This function calls:
  7603 ;;		_AppendStage
  7604 ;;		_ConstructStage
  7605 ;;		_CopyStageData
  7606 ;;		_NewStage
  7607 ;; This function is called by:
  7608 ;;		_InitPatternSelector
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           
  7613                           ;psect for function _InitLowerPattern
  7614  0281                     _InitLowerPattern:	
  7615  0281                     l2271:	
  7616                           ;incstack = 0
  7617                           ; Regs used in _InitLowerPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7618                           
  7619                           
  7620                           ;Pattern.c: 185: void InitLowerPattern( struct Pattern* pattern );Pattern.c: 186: {;Patt
      +                          ern.c: 187:     pattern->name = LOWER;
  7621  0281  0020               	movlb	0	; select bank0
  7622  0282  0844               	movf	InitLowerPattern@pattern,w
  7623  0283  0086               	movwf	6
  7624  0284  0845               	movf	InitLowerPattern@pattern+1,w
  7625  0285  0087               	movwf	7
  7626  0286  3003               	movlw	3
  7627  0287  0081               	movwf	1
  7628  0288                     l2273:	
  7629                           
  7630                           ;Pattern.c: 190:     _Bool lower_left_states[NUM_LIGHTS] = { 0, 0, 1, 0 };
  7631  0288  0021               	movlb	1	; select bank1
  7632  0289  0827               	movf	(InitLowerPattern@F474+3)^(0+128),w
  7633  028A  0020               	movlb	0	; select bank0
  7634  028B  00CA               	movwf	InitLowerPattern@lower_left_states+3
  7635  028C  0021               	movlb	1	; select bank1
  7636  028D  0826               	movf	(InitLowerPattern@F474+2)^(0+128),w
  7637  028E  0020               	movlb	0	; select bank0
  7638  028F  00C9               	movwf	InitLowerPattern@lower_left_states+2
  7639  0290  0021               	movlb	1	; select bank1
  7640  0291  0825               	movf	(InitLowerPattern@F474+1)^(0+128),w
  7641  0292  0020               	movlb	0	; select bank0
  7642  0293  00C8               	movwf	InitLowerPattern@lower_left_states+1
  7643  0294  0021               	movlb	1	; select bank1
  7644  0295  0824               	movf	InitLowerPattern@F474^(0+128),w
  7645  0296  0020               	movlb	0	; select bank0
  7646  0297  00C7               	movwf	InitLowerPattern@lower_left_states
  7647  0298                     l2275:	
  7648                           
  7649                           ;Pattern.c: 191:     struct Stage* lower_left = ConstructStage( lower_left_states, 60UL,
      +                           ((void*)0) );
  7650  0298  303C               	movlw	60
  7651  0299  00B3               	movwf	ConstructStage@time_ms
  7652  029A  3000               	movlw	0
  7653  029B  00B4               	movwf	ConstructStage@time_ms+1
  7654  029C  01B5               	clrf	ConstructStage@next
  7655  029D  3047               	movlw	(low (InitLowerPattern@lower_left_states| 0))& (0+255)
  7656  029E  318E  26BB  3182   	fcall	_ConstructStage
  7657  02A1  0020               	movlb	0	; select bank0
  7658  02A2  0834               	movf	?_ConstructStage+1,w
  7659  02A3  00D0               	movwf	InitLowerPattern@lower_left+1
  7660  02A4  0833               	movf	?_ConstructStage,w
  7661  02A5  00CF               	movwf	InitLowerPattern@lower_left
  7662  02A6                     l2277:	
  7663                           
  7664                           ;Pattern.c: 193:     _Bool lower_right_states[NUM_LIGHTS] = { 0, 0, 0, 1 };
  7665  02A6  0021               	movlb	1	; select bank1
  7666  02A7  0823               	movf	(InitLowerPattern@F477+3)^(0+128),w
  7667  02A8  0020               	movlb	0	; select bank0
  7668  02A9  00CE               	movwf	InitLowerPattern@lower_right_states+3
  7669  02AA  0021               	movlb	1	; select bank1
  7670  02AB  0822               	movf	(InitLowerPattern@F477+2)^(0+128),w
  7671  02AC  0020               	movlb	0	; select bank0
  7672  02AD  00CD               	movwf	InitLowerPattern@lower_right_states+2
  7673  02AE  0021               	movlb	1	; select bank1
  7674  02AF  0821               	movf	(InitLowerPattern@F477+1)^(0+128),w
  7675  02B0  0020               	movlb	0	; select bank0
  7676  02B1  00CC               	movwf	InitLowerPattern@lower_right_states+1
  7677  02B2  0021               	movlb	1	; select bank1
  7678  02B3  0820               	movf	InitLowerPattern@F477^(0+128),w
  7679  02B4  0020               	movlb	0	; select bank0
  7680  02B5  00CB               	movwf	InitLowerPattern@lower_right_states
  7681  02B6                     l2279:	
  7682                           
  7683                           ;Pattern.c: 194:     struct Stage* lower_right = ConstructStage( lower_right_states, 60U
      +                          L, ((void*)0) );
  7684  02B6  303C               	movlw	60
  7685  02B7  00B3               	movwf	ConstructStage@time_ms
  7686  02B8  3000               	movlw	0
  7687  02B9  00B4               	movwf	ConstructStage@time_ms+1
  7688  02BA  01B5               	clrf	ConstructStage@next
  7689  02BB  304B               	movlw	(low (InitLowerPattern@lower_right_states| 0))& (0+255)
  7690  02BC  318E  26BB  3182   	fcall	_ConstructStage
  7691  02BF  0020               	movlb	0	; select bank0
  7692  02C0  0834               	movf	?_ConstructStage+1,w
  7693  02C1  00D2               	movwf	InitLowerPattern@lower_right+1
  7694  02C2  0833               	movf	?_ConstructStage,w
  7695  02C3  00D1               	movwf	InitLowerPattern@lower_right
  7696  02C4                     l2281:	
  7697                           
  7698                           ;Pattern.c: 196:     struct Stage* off = NewStage();
  7699  02C4  3187  279B  3182   	fcall	_NewStage
  7700  02C7  0020               	movlb	0	; select bank0
  7701  02C8  0821               	movf	?_NewStage+1,w
  7702  02C9  00D8               	movwf	InitLowerPattern@off+1
  7703  02CA  0820               	movf	?_NewStage,w
  7704  02CB  00D7               	movwf	InitLowerPattern@off
  7705  02CC                     l2283:	
  7706                           
  7707                           ;Pattern.c: 198:     struct Stage* head = pattern->first_stage;
  7708  02CC  0844               	movf	InitLowerPattern@pattern,w
  7709  02CD  0086               	movwf	6
  7710  02CE  0845               	movf	InitLowerPattern@pattern+1,w
  7711  02CF  0087               	movwf	7
  7712  02D0  3141               	addfsr 1,1
  7713  02D1  3F40               	moviw [0]fsr1
  7714  02D2  00D9               	movwf	InitLowerPattern@head
  7715  02D3  3F41               	moviw [1]fsr1
  7716  02D4  00DA               	movwf	InitLowerPattern@head+1
  7717  02D5                     l2285:	
  7718                           
  7719                           ;Pattern.c: 201:     for( int i = 0; i < 3; i++ )
  7720  02D5  01D3               	clrf	InitLowerPattern@i
  7721  02D6  01D4               	clrf	InitLowerPattern@i+1
  7722  02D7                     l2291:	
  7723                           
  7724                           ;Pattern.c: 202:     {;Pattern.c: 203:         AppendStage( head, CopyStageData( NewStag
      +                          e(), lower_left ) );
  7725  02D7  0020               	movlb	0	; select bank0
  7726  02D8  085A               	movf	InitLowerPattern@head+1,w
  7727  02D9  00BD               	movwf	AppendStage@head+1
  7728  02DA  0859               	movf	InitLowerPattern@head,w
  7729  02DB  00BC               	movwf	AppendStage@head
  7730  02DC  3187  279B  3182   	fcall	_NewStage
  7731  02DF  0020               	movlb	0	; select bank0
  7732  02E0  0821               	movf	?_NewStage+1,w
  7733  02E1  00B4               	movwf	CopyStageData@dest+1
  7734  02E2  0820               	movf	?_NewStage,w
  7735  02E3  00B3               	movwf	CopyStageData@dest
  7736  02E4  0850               	movf	InitLowerPattern@lower_left+1,w
  7737  02E5  00B6               	movwf	CopyStageData@source+1
  7738  02E6  084F               	movf	InitLowerPattern@lower_left,w
  7739  02E7  00B5               	movwf	CopyStageData@source
  7740  02E8  318F  274A  3182   	fcall	_CopyStageData
  7741  02EB  0020               	movlb	0	; select bank0
  7742  02EC  0834               	movf	?_CopyStageData+1,w
  7743  02ED  00BF               	movwf	AppendStage@new_stage+1
  7744  02EE  0833               	movf	?_CopyStageData,w
  7745  02EF  00BE               	movwf	AppendStage@new_stage
  7746  02F0  3187  2743  3182   	fcall	_AppendStage
  7747                           
  7748                           ;Pattern.c: 204:         AppendStage( head, CopyStageData( NewStage(), off ) );
  7749  02F3  0020               	movlb	0	; select bank0
  7750  02F4  085A               	movf	InitLowerPattern@head+1,w
  7751  02F5  00BD               	movwf	AppendStage@head+1
  7752  02F6  0859               	movf	InitLowerPattern@head,w
  7753  02F7  00BC               	movwf	AppendStage@head
  7754  02F8  3187  279B  3182   	fcall	_NewStage
  7755  02FB  0020               	movlb	0	; select bank0
  7756  02FC  0821               	movf	?_NewStage+1,w
  7757  02FD  00B4               	movwf	CopyStageData@dest+1
  7758  02FE  0820               	movf	?_NewStage,w
  7759  02FF  00B3               	movwf	CopyStageData@dest
  7760  0300  0858               	movf	InitLowerPattern@off+1,w
  7761  0301  00B6               	movwf	CopyStageData@source+1
  7762  0302  0857               	movf	InitLowerPattern@off,w
  7763  0303  00B5               	movwf	CopyStageData@source
  7764  0304  318F  274A  3182   	fcall	_CopyStageData
  7765  0307  0020               	movlb	0	; select bank0
  7766  0308  0834               	movf	?_CopyStageData+1,w
  7767  0309  00BF               	movwf	AppendStage@new_stage+1
  7768  030A  0833               	movf	?_CopyStageData,w
  7769  030B  00BE               	movwf	AppendStage@new_stage
  7770  030C  3187  2743  3182   	fcall	_AppendStage
  7771  030F                     l2293:	
  7772                           
  7773                           ;Pattern.c: 205:     }
  7774  030F  3001               	movlw	1
  7775  0310  0020               	movlb	0	; select bank0
  7776  0311  07D3               	addwf	InitLowerPattern@i,f
  7777  0312  3000               	movlw	0
  7778  0313  3DD4               	addwfc	InitLowerPattern@i+1,f
  7779  0314                     l2295:	
  7780  0314  0854               	movf	InitLowerPattern@i+1,w
  7781  0315  3A80               	xorlw	128
  7782  0316  00C6               	movwf	??_InitLowerPattern
  7783  0317  3080               	movlw	128
  7784  0318  0246               	subwf	??_InitLowerPattern,w
  7785  0319  1D03               	skipz
  7786  031A  2B1D               	goto	u1075
  7787  031B  3003               	movlw	3
  7788  031C  0253               	subwf	InitLowerPattern@i,w
  7789  031D                     u1075:	
  7790  031D  1C03               	skipc
  7791  031E  2B20               	goto	u1071
  7792  031F  2B21               	goto	u1070
  7793  0320                     u1071:	
  7794  0320  2AD7               	goto	l2291
  7795  0321                     u1070:	
  7796  0321                     l2297:	
  7797                           
  7798                           ;Pattern.c: 208:     AppendStage( head, CopyStageData( NewStage(), off ) );
  7799  0321  0020               	movlb	0	; select bank0
  7800  0322  085A               	movf	InitLowerPattern@head+1,w
  7801  0323  00BD               	movwf	AppendStage@head+1
  7802  0324  0859               	movf	InitLowerPattern@head,w
  7803  0325  00BC               	movwf	AppendStage@head
  7804  0326  3187  279B  3182   	fcall	_NewStage
  7805  0329  0020               	movlb	0	; select bank0
  7806  032A  0821               	movf	?_NewStage+1,w
  7807  032B  00B4               	movwf	CopyStageData@dest+1
  7808  032C  0820               	movf	?_NewStage,w
  7809  032D  00B3               	movwf	CopyStageData@dest
  7810  032E  0858               	movf	InitLowerPattern@off+1,w
  7811  032F  00B6               	movwf	CopyStageData@source+1
  7812  0330  0857               	movf	InitLowerPattern@off,w
  7813  0331  00B5               	movwf	CopyStageData@source
  7814  0332  318F  274A  3182   	fcall	_CopyStageData
  7815  0335  0020               	movlb	0	; select bank0
  7816  0336  0834               	movf	?_CopyStageData+1,w
  7817  0337  00BF               	movwf	AppendStage@new_stage+1
  7818  0338  0833               	movf	?_CopyStageData,w
  7819  0339  00BE               	movwf	AppendStage@new_stage
  7820  033A  3187  2743  3182   	fcall	_AppendStage
  7821  033D                     l2299:	
  7822                           
  7823                           ;Pattern.c: 211:     for( int i = 0; i < 3; i++ )
  7824  033D  0020               	movlb	0	; select bank0
  7825  033E  01D5               	clrf	InitLowerPattern@i_942
  7826  033F  01D6               	clrf	InitLowerPattern@i_942+1
  7827  0340                     l2305:	
  7828                           
  7829                           ;Pattern.c: 212:     {;Pattern.c: 213:         AppendStage( head, CopyStageData( NewStag
      +                          e(), lower_right ) );
  7830  0340  0020               	movlb	0	; select bank0
  7831  0341  085A               	movf	InitLowerPattern@head+1,w
  7832  0342  00BD               	movwf	AppendStage@head+1
  7833  0343  0859               	movf	InitLowerPattern@head,w
  7834  0344  00BC               	movwf	AppendStage@head
  7835  0345  3187  279B  3182   	fcall	_NewStage
  7836  0348  0020               	movlb	0	; select bank0
  7837  0349  0821               	movf	?_NewStage+1,w
  7838  034A  00B4               	movwf	CopyStageData@dest+1
  7839  034B  0820               	movf	?_NewStage,w
  7840  034C  00B3               	movwf	CopyStageData@dest
  7841  034D  0852               	movf	InitLowerPattern@lower_right+1,w
  7842  034E  00B6               	movwf	CopyStageData@source+1
  7843  034F  0851               	movf	InitLowerPattern@lower_right,w
  7844  0350  00B5               	movwf	CopyStageData@source
  7845  0351  318F  274A  3182   	fcall	_CopyStageData
  7846  0354  0020               	movlb	0	; select bank0
  7847  0355  0834               	movf	?_CopyStageData+1,w
  7848  0356  00BF               	movwf	AppendStage@new_stage+1
  7849  0357  0833               	movf	?_CopyStageData,w
  7850  0358  00BE               	movwf	AppendStage@new_stage
  7851  0359  3187  2743  3182   	fcall	_AppendStage
  7852                           
  7853                           ;Pattern.c: 214:         AppendStage( head, CopyStageData( NewStage(), off ) );
  7854  035C  0020               	movlb	0	; select bank0
  7855  035D  085A               	movf	InitLowerPattern@head+1,w
  7856  035E  00BD               	movwf	AppendStage@head+1
  7857  035F  0859               	movf	InitLowerPattern@head,w
  7858  0360  00BC               	movwf	AppendStage@head
  7859  0361  3187  279B  3182   	fcall	_NewStage
  7860  0364  0020               	movlb	0	; select bank0
  7861  0365  0821               	movf	?_NewStage+1,w
  7862  0366  00B4               	movwf	CopyStageData@dest+1
  7863  0367  0820               	movf	?_NewStage,w
  7864  0368  00B3               	movwf	CopyStageData@dest
  7865  0369  0858               	movf	InitLowerPattern@off+1,w
  7866  036A  00B6               	movwf	CopyStageData@source+1
  7867  036B  0857               	movf	InitLowerPattern@off,w
  7868  036C  00B5               	movwf	CopyStageData@source
  7869  036D  318F  274A  3182   	fcall	_CopyStageData
  7870  0370  0020               	movlb	0	; select bank0
  7871  0371  0834               	movf	?_CopyStageData+1,w
  7872  0372  00BF               	movwf	AppendStage@new_stage+1
  7873  0373  0833               	movf	?_CopyStageData,w
  7874  0374  00BE               	movwf	AppendStage@new_stage
  7875  0375  3187  2743  3182   	fcall	_AppendStage
  7876  0378                     l2307:	
  7877                           
  7878                           ;Pattern.c: 215:     }
  7879  0378  3001               	movlw	1
  7880  0379  0020               	movlb	0	; select bank0
  7881  037A  07D5               	addwf	InitLowerPattern@i_942,f
  7882  037B  3000               	movlw	0
  7883  037C  3DD6               	addwfc	InitLowerPattern@i_942+1,f
  7884  037D                     l2309:	
  7885  037D  0856               	movf	InitLowerPattern@i_942+1,w
  7886  037E  3A80               	xorlw	128
  7887  037F  00C6               	movwf	??_InitLowerPattern
  7888  0380  3080               	movlw	128
  7889  0381  0246               	subwf	??_InitLowerPattern,w
  7890  0382  1D03               	skipz
  7891  0383  2B86               	goto	u1085
  7892  0384  3003               	movlw	3
  7893  0385  0255               	subwf	InitLowerPattern@i_942,w
  7894  0386                     u1085:	
  7895  0386  1C03               	skipc
  7896  0387  2B89               	goto	u1081
  7897  0388  2B8A               	goto	u1080
  7898  0389                     u1081:	
  7899  0389  2B40               	goto	l2305
  7900  038A                     u1080:	
  7901  038A                     l495:	
  7902  038A  0008               	return
  7903  038B                     __end_of_InitLowerPattern:	
  7904                           
  7905                           	psect	text18
  7906  0F4A                     __ptext18:	
  7907 ;; *************** function _CopyStageData *****************
  7908 ;; Defined at:
  7909 ;;		line 58 in file "Pattern.c"
  7910 ;; Parameters:    Size  Location     Type
  7911 ;;  dest            2   19[BANK0 ] PTR struct Stage
  7912 ;;		 -> stage_stash(768), NULL(0), 
  7913 ;;  source          2   21[BANK0 ] PTR struct Stage
  7914 ;;		 -> stage_stash(768), NULL(0), 
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;  i               2   26[BANK0 ] int 
  7917 ;; Return value:  Size  Location     Type
  7918 ;;                  2   19[BANK0 ] PTR struct Stage
  7919 ;; Registers used:
  7920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7926 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7927 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7928 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7929 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;Total ram usage:        9 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    6
  7933 ;; This function calls:
  7934 ;;		Nothing
  7935 ;; This function is called by:
  7936 ;;		_InitWigwagPattern
  7937 ;;		_InitXStrobePattern
  7938 ;;		_InitUpperLowerPattern
  7939 ;;		_InitLowerPattern
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           
  7944                           ;psect for function _CopyStageData
  7945  0F4A                     _CopyStageData:	
  7946  0F4A                     l2007:	
  7947                           ;incstack = 0
  7948                           ; Regs used in _CopyStageData: [wreg-fsr1h+status,2+status,0]
  7949                           
  7950                           
  7951                           ;Pattern.c: 58: struct Stage* CopyStageData( struct Stage* dest, struct Stage* source );
      +                          Pattern.c: 59: {;Pattern.c: 60:     for( int i = 0; i < NUM_LIGHTS; i++ )
  7952  0F4A  0020               	movlb	0	; select bank0
  7953  0F4B  01BA               	clrf	CopyStageData@i
  7954  0F4C  01BB               	clrf	CopyStageData@i+1
  7955  0F4D                     l2013:	
  7956                           
  7957                           ;Pattern.c: 61:         dest->light_states[i] = source->light_states[i];
  7958  0F4D  0020               	movlb	0	; select bank0
  7959  0F4E  083A               	movf	CopyStageData@i,w
  7960  0F4F  0735               	addwf	CopyStageData@source,w
  7961  0F50  0086               	movwf	6
  7962  0F51  083B               	movf	CopyStageData@i+1,w
  7963  0F52  3D36               	addwfc	CopyStageData@source+1,w
  7964  0F53  0087               	movwf	7
  7965  0F54  0801               	movf	1,w
  7966  0F55  00B7               	movwf	??_CopyStageData
  7967  0F56  083A               	movf	CopyStageData@i,w
  7968  0F57  0733               	addwf	CopyStageData@dest,w
  7969  0F58  00B8               	movwf	??_CopyStageData+1
  7970  0F59  083B               	movf	CopyStageData@i+1,w
  7971  0F5A  3D34               	addwfc	CopyStageData@dest+1,w
  7972  0F5B  00B9               	movwf	??_CopyStageData+2
  7973  0F5C  0838               	movf	??_CopyStageData+1,w
  7974  0F5D  0086               	movwf	6
  7975  0F5E  0839               	movf	??_CopyStageData+2,w
  7976  0F5F  0087               	movwf	7
  7977  0F60  0837               	movf	??_CopyStageData,w
  7978  0F61  0081               	movwf	1
  7979  0F62                     l2015:	
  7980  0F62  3001               	movlw	1
  7981  0F63  07BA               	addwf	CopyStageData@i,f
  7982  0F64  3000               	movlw	0
  7983  0F65  3DBB               	addwfc	CopyStageData@i+1,f
  7984  0F66                     l2017:	
  7985  0F66  083B               	movf	CopyStageData@i+1,w
  7986  0F67  3A80               	xorlw	128
  7987  0F68  00B7               	movwf	??_CopyStageData
  7988  0F69  3080               	movlw	128
  7989  0F6A  0237               	subwf	??_CopyStageData,w
  7990  0F6B  1D03               	skipz
  7991  0F6C  2F6F               	goto	u885
  7992  0F6D  3004               	movlw	4
  7993  0F6E  023A               	subwf	CopyStageData@i,w
  7994  0F6F                     u885:	
  7995  0F6F  1C03               	skipc
  7996  0F70  2F72               	goto	u881
  7997  0F71  2F73               	goto	u880
  7998  0F72                     u881:	
  7999  0F72  2F4D               	goto	l2013
  8000  0F73                     u880:	
  8001  0F73                     l2019:	
  8002                           
  8003                           ;Pattern.c: 62:     dest->time_ms = source->time_ms;
  8004  0F73  0020               	movlb	0	; select bank0
  8005  0F74  0835               	movf	CopyStageData@source,w
  8006  0F75  0086               	movwf	6
  8007  0F76  0836               	movf	CopyStageData@source+1,w
  8008  0F77  0087               	movwf	7
  8009  0F78  3144               	addfsr 1,4
  8010  0F79  0833               	movf	CopyStageData@dest,w
  8011  0F7A  0084               	movwf	4
  8012  0F7B  0834               	movf	CopyStageData@dest+1,w
  8013  0F7C  0085               	movwf	5
  8014  0F7D  3104               	addfsr 0,4
  8015  0F7E  3F40               	moviw [0]fsr1
  8016  0F7F  3F80               	movwi [0]fsr0
  8017  0F80  3F41               	moviw [1]fsr1
  8018  0F81  3F81               	movwi [1]fsr0
  8019  0F82                     l2021:	
  8020  0F82                     l443:	
  8021                           ;Pattern.c: 63:     return dest;
  8022                           
  8023  0F82  0008               	return
  8024  0F83                     __end_of_CopyStageData:	
  8025                           
  8026                           	psect	text19
  8027  0EBB                     __ptext19:	
  8028 ;; *************** function _ConstructStage *****************
  8029 ;; Defined at:
  8030 ;;		line 49 in file "Pattern.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;  states          1    wreg     PTR const _Bool 
  8033 ;;		 -> InitLowerPattern@lower_right_states(4), InitLowerPattern@lower_left_states(4), InitUpperLowerPattern@lower_state
      +s(4), InitUpperLowerPattern@upper_states(4), 
  8034 ;;		 -> InitXStrobePattern@diag_2_3_states(4), InitXStrobePattern@diag_1_4_states(4), InitWigwagPattern@right_side_state
      +s(4), InitWigwagPattern@left_side_states(4), 
  8035 ;;  time_ms         2   19[BANK0 ] const unsigned short 
  8036 ;;  next            1   21[BANK0 ] PTR struct Stage
  8037 ;;		 -> NULL(0), 
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;  states          1   25[BANK0 ] PTR const _Bool 
  8040 ;;		 -> InitLowerPattern@lower_right_states(4), InitLowerPattern@lower_left_states(4), InitUpperLowerPattern@lower_state
      +s(4), InitUpperLowerPattern@upper_states(4), 
  8041 ;;		 -> InitXStrobePattern@diag_2_3_states(4), InitXStrobePattern@diag_1_4_states(4), InitWigwagPattern@right_side_state
      +s(4), InitWigwagPattern@left_side_states(4), 
  8042 ;;  new_stage       2   23[BANK0 ] PTR struct Stage
  8043 ;;		 -> stage_stash(768), NULL(0), 
  8044 ;; Return value:  Size  Location     Type
  8045 ;;                  2   19[BANK0 ] PTR struct Stage
  8046 ;; Registers used:
  8047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8048 ;; Tracked objects:
  8049 ;;		On entry : 0/0
  8050 ;;		On exit  : 0/0
  8051 ;;		Unchanged: 0/0
  8052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8053 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8054 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8056 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8057 ;;Total ram usage:        7 bytes
  8058 ;; Hardware stack levels used:    1
  8059 ;; Hardware stack levels required when called:    8
  8060 ;; This function calls:
  8061 ;;		_AssignLightStates
  8062 ;;		_NewStage
  8063 ;; This function is called by:
  8064 ;;		_InitWigwagPattern
  8065 ;;		_InitXStrobePattern
  8066 ;;		_InitUpperLowerPattern
  8067 ;;		_InitLowerPattern
  8068 ;; This function uses a non-reentrant model
  8069 ;;
  8070                           
  8071                           
  8072                           ;psect for function _ConstructStage
  8073  0EBB                     _ConstructStage:	
  8074                           
  8075                           ;incstack = 0
  8076                           ; Regs used in _ConstructStage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8077                           ;ConstructStage@states stored from wreg
  8078  0EBB  0020               	movlb	0	; select bank0
  8079  0EBC  00B9               	movwf	ConstructStage@states
  8080  0EBD                     l1997:	
  8081                           
  8082                           ;Pattern.c: 49: struct Stage* ConstructStage( const _Bool states[NUM_LIGHTS], const uint
      +                           time_ms, struct Stage* next );Pattern.c: 50: {;Pattern.c: 51:     struct Stage* new_sta
      +                          ge = NewStage();
  8083  0EBD  3187  279B  318E   	fcall	_NewStage
  8084  0EC0  0020               	movlb	0	; select bank0
  8085  0EC1  0821               	movf	?_NewStage+1,w
  8086  0EC2  00B8               	movwf	ConstructStage@new_stage+1
  8087  0EC3  0820               	movf	?_NewStage,w
  8088  0EC4  00B7               	movwf	ConstructStage@new_stage
  8089                           
  8090                           ;Pattern.c: 52:     AssignLightStates( new_stage, states );
  8091  0EC5  0838               	movf	ConstructStage@new_stage+1,w
  8092  0EC6  00A1               	movwf	AssignLightStates@stage+1
  8093  0EC7  0837               	movf	ConstructStage@new_stage,w
  8094  0EC8  00A0               	movwf	AssignLightStates@stage
  8095  0EC9  0839               	movf	ConstructStage@states,w
  8096  0ECA  00B6               	movwf	??_ConstructStage
  8097  0ECB  0836               	movf	??_ConstructStage,w
  8098  0ECC  00A2               	movwf	AssignLightStates@states
  8099  0ECD  318E  2618  318E   	fcall	_AssignLightStates
  8100  0ED0                     l1999:	
  8101                           
  8102                           ;Pattern.c: 53:     new_stage->time_ms = time_ms;
  8103  0ED0  0020               	movlb	0	; select bank0
  8104  0ED1  0837               	movf	ConstructStage@new_stage,w
  8105  0ED2  0086               	movwf	6
  8106  0ED3  0838               	movf	ConstructStage@new_stage+1,w
  8107  0ED4  0087               	movwf	7
  8108  0ED5  3144               	addfsr 1,4
  8109  0ED6  0833               	movf	ConstructStage@time_ms,w
  8110  0ED7  3FC0               	movwi [0]fsr1
  8111  0ED8  0834               	movf	ConstructStage@time_ms+1,w
  8112  0ED9  3FC1               	movwi [1]fsr1
  8113  0EDA                     l2001:	
  8114                           
  8115                           ;Pattern.c: 54:     new_stage->next = next;
  8116  0EDA  0837               	movf	ConstructStage@new_stage,w
  8117  0EDB  0086               	movwf	6
  8118  0EDC  0838               	movf	ConstructStage@new_stage+1,w
  8119  0EDD  0087               	movwf	7
  8120  0EDE  3146               	addfsr 1,6
  8121  0EDF  0835               	movf	ConstructStage@next,w
  8122  0EE0  3FC0               	movwi [0]fsr1
  8123  0EE1  3000               	movlw	0
  8124  0EE2  3FC1               	movwi [1]fsr1
  8125  0EE3                     l2003:	
  8126                           
  8127                           ;Pattern.c: 55:     return new_stage;
  8128  0EE3  0838               	movf	ConstructStage@new_stage+1,w
  8129  0EE4  00B4               	movwf	?_ConstructStage+1
  8130  0EE5  0837               	movf	ConstructStage@new_stage,w
  8131  0EE6  00B3               	movwf	?_ConstructStage
  8132  0EE7                     l438:	
  8133  0EE7  0008               	return
  8134  0EE8                     __end_of_ConstructStage:	
  8135                           
  8136                           	psect	text20
  8137  079B                     __ptext20:	
  8138 ;; *************** function _NewStage *****************
  8139 ;; Defined at:
  8140 ;;		line 22 in file "Pattern.c"
  8141 ;; Parameters:    Size  Location     Type
  8142 ;;		None
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;  init_states     4   13[BANK0 ] _Bool [4]
  8145 ;;  new_stage       2   17[BANK0 ] PTR struct Stage
  8146 ;;		 -> stage_stash(768), 
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  2    0[BANK0 ] PTR struct Stage
  8149 ;; Registers used:
  8150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8151 ;; Tracked objects:
  8152 ;;		On entry : 0/0
  8153 ;;		On exit  : 0/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8158 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8159 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8160 ;;Total ram usage:       10 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; Hardware stack levels required when called:    7
  8163 ;; This function calls:
  8164 ;;		_AssignLightStates
  8165 ;; This function is called by:
  8166 ;;		_NewPattern
  8167 ;;		_ConstructStage
  8168 ;;		_InitWigwagPattern
  8169 ;;		_InitXStrobePattern
  8170 ;;		_InitUpperLowerPattern
  8171 ;;		_InitLowerPattern
  8172 ;; This function uses a non-reentrant model
  8173 ;;
  8174                           
  8175                           
  8176                           ;psect for function _NewStage
  8177  079B                     _NewStage:	
  8178  079B                     l1943:	
  8179                           ;incstack = 0
  8180                           ; Regs used in _NewStage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8181                           
  8182                           
  8183                           ;Pattern.c: 24:     if ( stage_list_iter >= MAX_STAGES )
  8184  079B  3000               	movlw	0
  8185  079C  0020               	movlb	0	; select bank0
  8186  079D  026B               	subwf	_stage_list_iter+1,w
  8187  079E  3060               	movlw	96
  8188  079F  1903               	skipnz
  8189  07A0  026A               	subwf	_stage_list_iter,w
  8190  07A1  1C03               	skipc
  8191  07A2  2FA4               	goto	u751
  8192  07A3  2FA5               	goto	u750
  8193  07A4                     u751:	
  8194  07A4  2FA8               	goto	l1949
  8195  07A5                     u750:	
  8196  07A5                     l1945:	
  8197                           
  8198                           ;Pattern.c: 25:         return ((void*)0);
  8199  07A5  01A0               	clrf	?_NewStage
  8200  07A6  01A1               	clrf	?_NewStage+1
  8201  07A7  2FE9               	goto	l429
  8202  07A8                     l1949:	
  8203                           
  8204                           ;Pattern.c: 27:     struct Stage* new_stage = &stage_stash[ stage_list_iter++ ];
  8205  07A8  086B               	movf	_stage_list_iter+1,w
  8206  07A9  00AA               	movwf	??_NewStage+1
  8207  07AA  086A               	movf	_stage_list_iter,w
  8208  07AB  00A9               	movwf	??_NewStage
  8209  07AC  35A9               	lslf	??_NewStage,f
  8210  07AD  0DAA               	rlf	??_NewStage+1,f
  8211  07AE  35A9               	lslf	??_NewStage,f
  8212  07AF  0DAA               	rlf	??_NewStage+1,f
  8213  07B0  35A9               	lslf	??_NewStage,f
  8214  07B1  0DAA               	rlf	??_NewStage+1,f
  8215  07B2  30F0               	movlw	240
  8216  07B3  00AB               	movwf	??_NewStage+2
  8217  07B4  3020               	movlw	32
  8218  07B5  00AC               	movwf	??_NewStage+3
  8219  07B6  0829               	movf	??_NewStage,w
  8220  07B7  072B               	addwf	??_NewStage+2,w
  8221  07B8  00B1               	movwf	NewStage@new_stage
  8222  07B9  082A               	movf	??_NewStage+1,w
  8223  07BA  3D2C               	addwfc	??_NewStage+3,w
  8224  07BB  00B2               	movwf	NewStage@new_stage+1
  8225  07BC                     l1951:	
  8226  07BC  3001               	movlw	1
  8227  07BD  07EA               	addwf	_stage_list_iter,f
  8228  07BE  3000               	movlw	0
  8229  07BF  3DEB               	addwfc	_stage_list_iter+1,f
  8230  07C0                     l1953:	
  8231                           
  8232                           ;Pattern.c: 28:     _Bool init_states[NUM_LIGHTS] = { 0, 0, 0, 0 };
  8233  07C0  3000               	movlw	0
  8234  07C1  00B0               	movwf	NewStage@init_states+3
  8235  07C2  3000               	movlw	0
  8236  07C3  00AF               	movwf	NewStage@init_states+2
  8237  07C4  3000               	movlw	0
  8238  07C5  00AE               	movwf	NewStage@init_states+1
  8239  07C6  3000               	movlw	0
  8240  07C7  00AD               	movwf	NewStage@init_states
  8241  07C8                     l1955:	
  8242                           
  8243                           ;Pattern.c: 29:     AssignLightStates( new_stage, init_states );
  8244  07C8  0832               	movf	NewStage@new_stage+1,w
  8245  07C9  00A1               	movwf	AssignLightStates@stage+1
  8246  07CA  0831               	movf	NewStage@new_stage,w
  8247  07CB  00A0               	movwf	AssignLightStates@stage
  8248  07CC  302D               	movlw	(low (NewStage@init_states| 0))& (0+255)
  8249  07CD  00A9               	movwf	??_NewStage
  8250  07CE  0829               	movf	??_NewStage,w
  8251  07CF  00A2               	movwf	AssignLightStates@states
  8252  07D0  318E  2618  3187   	fcall	_AssignLightStates
  8253  07D3                     l1957:	
  8254                           
  8255                           ;Pattern.c: 30:     new_stage->time_ms = 60UL;
  8256  07D3  0020               	movlb	0	; select bank0
  8257  07D4  0831               	movf	NewStage@new_stage,w
  8258  07D5  0086               	movwf	6
  8259  07D6  0832               	movf	NewStage@new_stage+1,w
  8260  07D7  0087               	movwf	7
  8261  07D8  3144               	addfsr 1,4
  8262  07D9  303C               	movlw	60
  8263  07DA  3FC0               	movwi [0]fsr1
  8264  07DB  3000               	movlw	0
  8265  07DC  3FC1               	movwi [1]fsr1
  8266  07DD                     l1959:	
  8267                           
  8268                           ;Pattern.c: 31:     new_stage->next = ((void*)0);
  8269  07DD  0831               	movf	NewStage@new_stage,w
  8270  07DE  0086               	movwf	6
  8271  07DF  0832               	movf	NewStage@new_stage+1,w
  8272  07E0  0087               	movwf	7
  8273  07E1  3146               	addfsr 1,6
  8274  07E2  3000               	movlw	0
  8275  07E3  3FC0               	movwi [0]fsr1
  8276  07E4  3FC1               	movwi [1]fsr1
  8277  07E5                     l1961:	
  8278                           
  8279                           ;Pattern.c: 33:     return new_stage;
  8280  07E5  0832               	movf	NewStage@new_stage+1,w
  8281  07E6  00A1               	movwf	?_NewStage+1
  8282  07E7  0831               	movf	NewStage@new_stage,w
  8283  07E8  00A0               	movwf	?_NewStage
  8284  07E9                     l429:	
  8285  07E9  0008               	return
  8286  07EA                     __end_of_NewStage:	
  8287                           
  8288                           	psect	text21
  8289  0E18                     __ptext21:	
  8290 ;; *************** function _AssignLightStates *****************
  8291 ;; Defined at:
  8292 ;;		line 14 in file "Pattern.c"
  8293 ;; Parameters:    Size  Location     Type
  8294 ;;  stage           2    0[BANK0 ] PTR struct Stage
  8295 ;;		 -> stage_stash(768), NULL(0), 
  8296 ;;  states          1    2[BANK0 ] PTR const _Bool 
  8297 ;;		 -> InitLowerPattern@lower_right_states(4), InitLowerPattern@lower_left_states(4), InitUpperLowerPattern@lower_state
      +s(4), InitUpperLowerPattern@upper_states(4), 
  8298 ;;		 -> InitXStrobePattern@diag_2_3_states(4), InitXStrobePattern@diag_1_4_states(4), InitWigwagPattern@right_side_state
      +s(4), InitWigwagPattern@left_side_states(4), 
  8299 ;;		 -> NewStage@init_states(4), 
  8300 ;; Auto vars:     Size  Location     Type
  8301 ;;  i               2    7[BANK0 ] unsigned short 
  8302 ;; Return value:  Size  Location     Type
  8303 ;;                  1    wreg      void 
  8304 ;; Registers used:
  8305 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8306 ;; Tracked objects:
  8307 ;;		On entry : 0/0
  8308 ;;		On exit  : 0/0
  8309 ;;		Unchanged: 0/0
  8310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8311 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8312 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8313 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8314 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8315 ;;Total ram usage:        9 bytes
  8316 ;; Hardware stack levels used:    1
  8317 ;; Hardware stack levels required when called:    6
  8318 ;; This function calls:
  8319 ;;		Nothing
  8320 ;; This function is called by:
  8321 ;;		_NewStage
  8322 ;;		_ConstructStage
  8323 ;; This function uses a non-reentrant model
  8324 ;;
  8325                           
  8326                           
  8327                           ;psect for function _AssignLightStates
  8328  0E18                     _AssignLightStates:	
  8329  0E18                     l1931:	
  8330                           ;incstack = 0
  8331                           ; Regs used in _AssignLightStates: [wreg+fsr1l+fsr1h+status,2+status,0]
  8332                           
  8333                           
  8334                           ;Pattern.c: 14: void AssignLightStates( struct Stage* stage, const _Bool states[ NUM_LIG
      +                          HTS ] );Pattern.c: 15: {;Pattern.c: 16:     for( uint i = 0; i < NUM_LIGHTS; i++ )
  8335  0E18  0020               	movlb	0	; select bank0
  8336  0E19  01A7               	clrf	AssignLightStates@i
  8337  0E1A  01A8               	clrf	AssignLightStates@i+1
  8338  0E1B                     l1937:	
  8339                           
  8340                           ;Pattern.c: 17:     {;Pattern.c: 18:         stage->light_states[i] = states[i];
  8341  0E1B  0827               	movf	AssignLightStates@i,w
  8342  0E1C  0722               	addwf	AssignLightStates@states,w
  8343  0E1D  00A3               	movwf	??_AssignLightStates
  8344  0E1E  0823               	movf	??_AssignLightStates,w
  8345  0E1F  0086               	movwf	6
  8346  0E20  0187               	clrf	7
  8347  0E21  0801               	movf	1,w
  8348  0E22  00A4               	movwf	??_AssignLightStates+1
  8349  0E23  0827               	movf	AssignLightStates@i,w
  8350  0E24  0720               	addwf	AssignLightStates@stage,w
  8351  0E25  00A5               	movwf	??_AssignLightStates+2
  8352  0E26  0828               	movf	AssignLightStates@i+1,w
  8353  0E27  3D21               	addwfc	AssignLightStates@stage+1,w
  8354  0E28  00A6               	movwf	??_AssignLightStates+3
  8355  0E29  0825               	movf	??_AssignLightStates+2,w
  8356  0E2A  0086               	movwf	6
  8357  0E2B  0826               	movf	??_AssignLightStates+3,w
  8358  0E2C  0087               	movwf	7
  8359  0E2D  0824               	movf	??_AssignLightStates+1,w
  8360  0E2E  0081               	movwf	1
  8361  0E2F                     l1939:	
  8362                           
  8363                           ;Pattern.c: 19:     }
  8364  0E2F  3001               	movlw	1
  8365  0E30  07A7               	addwf	AssignLightStates@i,f
  8366  0E31  3000               	movlw	0
  8367  0E32  3DA8               	addwfc	AssignLightStates@i+1,f
  8368  0E33                     l1941:	
  8369  0E33  3000               	movlw	0
  8370  0E34  0228               	subwf	AssignLightStates@i+1,w
  8371  0E35  3004               	movlw	4
  8372  0E36  1903               	skipnz
  8373  0E37  0227               	subwf	AssignLightStates@i,w
  8374  0E38  1C03               	skipc
  8375  0E39  2E3B               	goto	u741
  8376  0E3A  2E3C               	goto	u740
  8377  0E3B                     u741:	
  8378  0E3B  2E1B               	goto	l1937
  8379  0E3C                     u740:	
  8380  0E3C                     l425:	
  8381  0E3C  0008               	return
  8382  0E3D                     __end_of_AssignLightStates:	
  8383                           
  8384                           	psect	text22
  8385  0743                     __ptext22:	
  8386 ;; *************** function _AppendStage *****************
  8387 ;; Defined at:
  8388 ;;		line 66 in file "Pattern.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;  head            2   28[BANK0 ] PTR struct Stage
  8391 ;;		 -> stage_stash(768), NULL(0), 
  8392 ;;  new_stage       2   30[BANK0 ] PTR struct Stage
  8393 ;;		 -> stage_stash(768), NULL(0), 
  8394 ;; Auto vars:     Size  Location     Type
  8395 ;;  last_stage      2   34[BANK0 ] PTR struct Stage
  8396 ;;		 -> stage_stash(768), NULL(0), 
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  1    wreg      void 
  8399 ;; Registers used:
  8400 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8406 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;Total ram usage:        8 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; Hardware stack levels required when called:    6
  8413 ;; This function calls:
  8414 ;;		Nothing
  8415 ;; This function is called by:
  8416 ;;		_InitWigwagPattern
  8417 ;;		_InitXStrobePattern
  8418 ;;		_InitUpperLowerPattern
  8419 ;;		_InitLowerPattern
  8420 ;; This function uses a non-reentrant model
  8421 ;;
  8422                           
  8423                           
  8424                           ;psect for function _AppendStage
  8425  0743                     _AppendStage:	
  8426  0743                     l2025:	
  8427                           ;incstack = 0
  8428                           ; Regs used in _AppendStage: [wreg+fsr1l+fsr1h+status,2+status,0]
  8429                           
  8430                           
  8431                           ;Pattern.c: 66: void AppendStage( struct Stage* head, struct Stage* new_stage );Pattern.
      +                          c: 67: {;Pattern.c: 68:     if ( head->next == ((void*)0) )
  8432  0743  0020               	movlb	0	; select bank0
  8433  0744  083C               	movf	AppendStage@head,w
  8434  0745  0086               	movwf	6
  8435  0746  083D               	movf	AppendStage@head+1,w
  8436  0747  0087               	movwf	7
  8437  0748  3146               	addfsr 1,6
  8438  0749  0016               	moviw fsr1++
  8439  074A  0401               	iorwf	1,w
  8440  074B  1D03               	btfss	3,2
  8441  074C  2F4E               	goto	u891
  8442  074D  2F4F               	goto	u890
  8443  074E                     u891:	
  8444  074E  2F62               	goto	l2029
  8445  074F                     u890:	
  8446  074F                     l2027:	
  8447                           
  8448                           ;Pattern.c: 69:     {;Pattern.c: 70:         head->next = new_stage;
  8449  074F  083C               	movf	AppendStage@head,w
  8450  0750  0086               	movwf	6
  8451  0751  083D               	movf	AppendStage@head+1,w
  8452  0752  0087               	movwf	7
  8453  0753  3146               	addfsr 1,6
  8454  0754  083E               	movf	AppendStage@new_stage,w
  8455  0755  3FC0               	movwi [0]fsr1
  8456  0756  083F               	movf	AppendStage@new_stage+1,w
  8457  0757  3FC1               	movwi [1]fsr1
  8458                           
  8459                           ;Pattern.c: 71:         new_stage->next = head;
  8460  0758  083E               	movf	AppendStage@new_stage,w
  8461  0759  0086               	movwf	6
  8462  075A  083F               	movf	AppendStage@new_stage+1,w
  8463  075B  0087               	movwf	7
  8464  075C  3146               	addfsr 1,6
  8465  075D  083C               	movf	AppendStage@head,w
  8466  075E  3FC0               	movwi [0]fsr1
  8467  075F  083D               	movf	AppendStage@head+1,w
  8468  0760  3FC1               	movwi [1]fsr1
  8469                           
  8470                           ;Pattern.c: 72:     }
  8471  0761  2F9A               	goto	l451
  8472  0762                     l2029:	
  8473                           
  8474                           ;Pattern.c: 74:     {;Pattern.c: 75:         struct Stage* last_stage = head->next;
  8475  0762  083C               	movf	AppendStage@head,w
  8476  0763  0086               	movwf	6
  8477  0764  083D               	movf	AppendStage@head+1,w
  8478  0765  0087               	movwf	7
  8479  0766  3146               	addfsr 1,6
  8480  0767  3F40               	moviw [0]fsr1
  8481  0768  00C2               	movwf	AppendStage@last_stage
  8482  0769  3F41               	moviw [1]fsr1
  8483  076A  00C3               	movwf	AppendStage@last_stage+1
  8484                           
  8485                           ;Pattern.c: 76:         while( last_stage->next != head )
  8486  076B  2F75               	goto	l2033
  8487  076C                     l2031:	
  8488                           
  8489                           ;Pattern.c: 77:             last_stage = last_stage->next;
  8490  076C  0842               	movf	AppendStage@last_stage,w
  8491  076D  0086               	movwf	6
  8492  076E  0843               	movf	AppendStage@last_stage+1,w
  8493  076F  0087               	movwf	7
  8494  0770  3146               	addfsr 1,6
  8495  0771  3F40               	moviw [0]fsr1
  8496  0772  00C2               	movwf	AppendStage@last_stage
  8497  0773  3F41               	moviw [1]fsr1
  8498  0774  00C3               	movwf	AppendStage@last_stage+1
  8499  0775                     l2033:	
  8500                           
  8501                           ;Pattern.c: 76:         while( last_stage->next != head )
  8502  0775  0842               	movf	AppendStage@last_stage,w
  8503  0776  0086               	movwf	6
  8504  0777  0843               	movf	AppendStage@last_stage+1,w
  8505  0778  0087               	movwf	7
  8506  0779  3146               	addfsr 1,6
  8507  077A  3F40               	moviw [0]fsr1
  8508  077B  00C0               	movwf	??_AppendStage
  8509  077C  3F41               	moviw [1]fsr1
  8510  077D  00C1               	movwf	??_AppendStage+1
  8511  077E  083D               	movf	AppendStage@head+1,w
  8512  077F  0641               	xorwf	??_AppendStage+1,w
  8513  0780  1D03               	skipz
  8514  0781  2F84               	goto	u905
  8515  0782  083C               	movf	AppendStage@head,w
  8516  0783  0640               	xorwf	??_AppendStage,w
  8517  0784                     u905:	
  8518  0784  1D03               	skipz
  8519  0785  2F87               	goto	u901
  8520  0786  2F88               	goto	u900
  8521  0787                     u901:	
  8522  0787  2F6C               	goto	l2031
  8523  0788                     u900:	
  8524  0788                     l2035:	
  8525                           
  8526                           ;Pattern.c: 80:         last_stage->next = new_stage;
  8527  0788  0842               	movf	AppendStage@last_stage,w
  8528  0789  0086               	movwf	6
  8529  078A  0843               	movf	AppendStage@last_stage+1,w
  8530  078B  0087               	movwf	7
  8531  078C  3146               	addfsr 1,6
  8532  078D  083E               	movf	AppendStage@new_stage,w
  8533  078E  3FC0               	movwi [0]fsr1
  8534  078F  083F               	movf	AppendStage@new_stage+1,w
  8535  0790  3FC1               	movwi [1]fsr1
  8536                           
  8537                           ;Pattern.c: 81:         new_stage->next = head;
  8538  0791  083E               	movf	AppendStage@new_stage,w
  8539  0792  0086               	movwf	6
  8540  0793  083F               	movf	AppendStage@new_stage+1,w
  8541  0794  0087               	movwf	7
  8542  0795  3146               	addfsr 1,6
  8543  0796  083C               	movf	AppendStage@head,w
  8544  0797  3FC0               	movwi [0]fsr1
  8545  0798  083D               	movf	AppendStage@head+1,w
  8546  0799  3FC1               	movwi [1]fsr1
  8547  079A                     l451:	
  8548  079A  0008               	return
  8549  079B                     __end_of_AppendStage:	
  8550                           
  8551                           	psect	text23
  8552  0DD5                     __ptext23:	
  8553 ;; *************** function _EEPROM_GetSavedPattern *****************
  8554 ;; Defined at:
  8555 ;;		line 8 in file "EEPROM.c"
  8556 ;; Parameters:    Size  Location     Type
  8557 ;;		None
  8558 ;; Auto vars:     Size  Location     Type
  8559 ;;  saved_patter    1    2[BANK0 ] enum E53
  8560 ;; Return value:  Size  Location     Type
  8561 ;;                  1    wreg      enum E53
  8562 ;; Registers used:
  8563 ;;		wreg, status,2, status,0, pclath, cstack
  8564 ;; Tracked objects:
  8565 ;;		On entry : 0/0
  8566 ;;		On exit  : 0/0
  8567 ;;		Unchanged: 0/0
  8568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8570 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8572 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8573 ;;Total ram usage:        2 bytes
  8574 ;; Hardware stack levels used:    1
  8575 ;; Hardware stack levels required when called:    7
  8576 ;; This function calls:
  8577 ;;		_eeprom_read
  8578 ;; This function is called by:
  8579 ;;		_InitPatternSelector
  8580 ;; This function uses a non-reentrant model
  8581 ;;
  8582                           
  8583                           
  8584                           ;psect for function _EEPROM_GetSavedPattern
  8585  0DD5                     _EEPROM_GetSavedPattern:	
  8586  0DD5                     l2725:	
  8587                           ;incstack = 0
  8588                           ; Regs used in _EEPROM_GetSavedPattern: [wreg+status,2+status,0+pclath+cstack]
  8589                           
  8590                           
  8591                           ;EEPROM.c: 10:     enum PatternName saved_pattern = ( enum PatternName )eeprom_read( 0 )
      +                          ;
  8592  0DD5  3000               	movlw	0
  8593  0DD6  318D  2539  318D   	fcall	_eeprom_read
  8594  0DD9  0020               	movlb	0	; select bank0
  8595  0DDA  00A1               	movwf	??_EEPROM_GetSavedPattern
  8596  0DDB  0821               	movf	??_EEPROM_GetSavedPattern,w
  8597  0DDC  00A2               	movwf	EEPROM_GetSavedPattern@saved_pattern
  8598  0DDD                     l2727:	
  8599                           
  8600                           ;EEPROM.c: 11:     if ( saved_pattern != WIGWAG && saved_pattern != XSTROBE && saved_pat
      +                          tern != UPPER_LOWER && saved_pattern != LOWER )
  8601  0DDD  0822               	movf	EEPROM_GetSavedPattern@saved_pattern,w
  8602  0DDE  1903               	btfsc	3,2
  8603  0DDF  2DE1               	goto	u1531
  8604  0DE0  2DE2               	goto	u1530
  8605  0DE1                     u1531:	
  8606  0DE1  2DF4               	goto	l2737
  8607  0DE2                     u1530:	
  8608  0DE2                     l2729:	
  8609  0DE2  0322               	decf	EEPROM_GetSavedPattern@saved_pattern,w
  8610  0DE3  1903               	btfsc	3,2
  8611  0DE4  2DE6               	goto	u1541
  8612  0DE5  2DE7               	goto	u1540
  8613  0DE6                     u1541:	
  8614  0DE6  2DF4               	goto	l2737
  8615  0DE7                     u1540:	
  8616  0DE7                     l2731:	
  8617  0DE7  3002               	movlw	2
  8618  0DE8  0622               	xorwf	EEPROM_GetSavedPattern@saved_pattern,w
  8619  0DE9  1903               	btfsc	3,2
  8620  0DEA  2DEC               	goto	u1551
  8621  0DEB  2DED               	goto	u1550
  8622  0DEC                     u1551:	
  8623  0DEC  2DF4               	goto	l2737
  8624  0DED                     u1550:	
  8625  0DED                     l2733:	
  8626  0DED  3003               	movlw	3
  8627  0DEE  0622               	xorwf	EEPROM_GetSavedPattern@saved_pattern,w
  8628  0DEF  1903               	btfsc	3,2
  8629  0DF0  2DF2               	goto	u1561
  8630  0DF1  2DF3               	goto	u1560
  8631  0DF2                     u1561:	
  8632  0DF2  2DF4               	goto	l2737
  8633  0DF3                     u1560:	
  8634  0DF3                     l2735:	
  8635                           
  8636                           ;EEPROM.c: 12:         saved_pattern = WIGWAG;
  8637  0DF3  01A2               	clrf	EEPROM_GetSavedPattern@saved_pattern
  8638  0DF4                     l2737:	
  8639                           
  8640                           ;EEPROM.c: 13:     return saved_pattern;
  8641  0DF4  0822               	movf	EEPROM_GetSavedPattern@saved_pattern,w
  8642  0DF5                     l558:	
  8643  0DF5  0008               	return
  8644  0DF6                     __end_of_EEPROM_GetSavedPattern:	
  8645                           
  8646                           	psect	text24
  8647  0D39                     __ptext24:	
  8648 ;; *************** function _eeprom_read *****************
  8649 ;; Defined at:
  8650 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\pic\__eeread.c"
  8651 ;; Parameters:    Size  Location     Type
  8652 ;;  addr            1    wreg     unsigned char 
  8653 ;; Auto vars:     Size  Location     Type
  8654 ;;  addr            1    0[BANK0 ] unsigned char 
  8655 ;; Return value:  Size  Location     Type
  8656 ;;                  1    wreg      unsigned char 
  8657 ;; Registers used:
  8658 ;;		wreg
  8659 ;; Tracked objects:
  8660 ;;		On entry : 0/0
  8661 ;;		On exit  : 0/0
  8662 ;;		Unchanged: 0/0
  8663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8668 ;;Total ram usage:        1 bytes
  8669 ;; Hardware stack levels used:    1
  8670 ;; Hardware stack levels required when called:    6
  8671 ;; This function calls:
  8672 ;;		Nothing
  8673 ;; This function is called by:
  8674 ;;		_EEPROM_GetSavedPattern
  8675 ;; This function uses a non-reentrant model
  8676 ;;
  8677                           
  8678                           
  8679                           ;psect for function _eeprom_read
  8680  0D39                     _eeprom_read:	
  8681                           
  8682                           ;incstack = 0
  8683                           ; Regs used in _eeprom_read: [wreg]
  8684                           ;eeprom_read@addr stored from wreg
  8685  0D39  0020               	movlb	0	; select bank0
  8686  0D3A  00A0               	movwf	eeprom_read@addr
  8687  0D3B                     l717:	
  8688                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\pic\__eeread.c: 6: eeprom_re
      +                          ad(unsigned char addr);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\pic\__
      +                          eeread.c: 7: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\pic\__eeread.c
      +                          : 8:  do
  8689                           
  8690  0D3B  0064               	clrwdt	;# 
  8691  0D3C  0031               	movlb	17	; select bank17
  8692  0D3D  1895               	btfsc	21,1	;volsfr
  8693  0D3E  2D40               	goto	u1471
  8694  0D3F  2D42               	goto	u1470
  8695  0D40                     u1471:	
  8696  0D40  0020               	movlb	0	; select bank0
  8697  0D41  2D3B               	goto	l717
  8698  0D42                     u1470:	
  8699  0D42                     l2633:	
  8700                           
  8701                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\pic\__eeread.c: 18:  return 
      +                          ( NVMCON1bits.NVMREGS = 1, NVMADRL = (addr) & 0xFFU, NVMADRH = 0x70, NVMCON1bits.RD = 1,
      +                           NVMDATL);
  8702  0D42  1715               	bsf	21,6	;volsfr
  8703  0D43  0020               	movlb	0	; select bank0
  8704  0D44  0820               	movf	eeprom_read@addr,w
  8705  0D45  0031               	movlb	17	; select bank17
  8706  0D46  0091               	movwf	17	;volatile
  8707  0D47  3070               	movlw	112
  8708  0D48  0092               	movwf	18	;volatile
  8709  0D49  1415               	bsf	21,0	;volsfr
  8710  0D4A  0813               	movf	19,w	;volatile
  8711  0D4B                     l719:	
  8712  0D4B  0008               	return
  8713  0D4C                     __end_of_eeprom_read:	
  8714                           
  8715                           	psect	text25
  8716  0FC1                     __ptext25:	
  8717 ;; *************** function _TurnSignalDone *****************
  8718 ;; Defined at:
  8719 ;;		line 14 in file "TurnSignal.c"
  8720 ;; Parameters:    Size  Location     Type
  8721 ;;		None
  8722 ;; Auto vars:     Size  Location     Type
  8723 ;;		None
  8724 ;; Return value:  Size  Location     Type
  8725 ;;                  1    wreg      _Bool 
  8726 ;; Registers used:
  8727 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8728 ;; Tracked objects:
  8729 ;;		On entry : 0/0
  8730 ;;		On exit  : 0/0
  8731 ;;		Unchanged: 0/0
  8732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;Total ram usage:        1 bytes
  8738 ;; Hardware stack levels used:    1
  8739 ;; Hardware stack levels required when called:    8
  8740 ;; This function calls:
  8741 ;;		_SetOutputs
  8742 ;;		_abs
  8743 ;;		_ms
  8744 ;; This function is called by:
  8745 ;;		_main
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           
  8750                           ;psect for function _TurnSignalDone
  8751  0FC1                     _TurnSignalDone:	
  8752  0FC1                     l2815:	
  8753                           ;incstack = 0
  8754                           ; Regs used in _TurnSignalDone: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8755                           
  8756                           
  8757                           ;TurnSignal.c: 17:     if ( PORTCbits.RC0 == 1 )
  8758  0FC1  0020               	movlb	0	; select bank0
  8759  0FC2  1C0E               	btfss	14,0	;volatile
  8760  0FC3  2FC5               	goto	u1621
  8761  0FC4  2FC6               	goto	u1620
  8762  0FC5                     u1621:	
  8763  0FC5  2FDF               	goto	l2825
  8764  0FC6                     u1620:	
  8765  0FC6                     l2817:	
  8766                           
  8767                           ;TurnSignal.c: 18:     {;TurnSignal.c: 19:         SetOutputs( 0 );
  8768  0FC6  3000               	movlw	0
  8769  0FC7  318E  263D  318F   	fcall	_SetOutputs
  8770  0FCA                     l2819:	
  8771                           
  8772                           ;TurnSignal.c: 20:         ts_trigger_time = ms();
  8773  0FCA  318C  24CB  318F   	fcall	_ms
  8774  0FCD  0020               	movlb	0	; select bank0
  8775  0FCE  0823               	movf	?_ms+3,w
  8776  0FCF  0021               	movlb	1	; select bank1
  8777  0FD0  00C7               	movwf	(_ts_trigger_time+3)^(0+128)
  8778  0FD1  0020               	movlb	0	; select bank0
  8779  0FD2  0822               	movf	?_ms+2,w
  8780  0FD3  0021               	movlb	1	; select bank1
  8781  0FD4  00C6               	movwf	(_ts_trigger_time+2)^(0+128)
  8782  0FD5  0020               	movlb	0	; select bank0
  8783  0FD6  0821               	movf	?_ms+1,w
  8784  0FD7  0021               	movlb	1	; select bank1
  8785  0FD8  00C5               	movwf	(_ts_trigger_time+1)^(0+128)
  8786  0FD9  0020               	movlb	0	; select bank0
  8787  0FDA  0820               	movf	?_ms,w
  8788  0FDB  0021               	movlb	1	; select bank1
  8789  0FDC  00C4               	movwf	_ts_trigger_time^(0+128)
  8790  0FDD                     l2821:	
  8791                           
  8792                           ;TurnSignal.c: 21:         return 0;
  8793  0FDD  3000               	movlw	0
  8794  0FDE  2FFF               	goto	l399
  8795  0FDF                     l2825:	
  8796                           
  8797                           ;TurnSignal.c: 24:     return abs( ms() - ts_trigger_time ) > 2000;;
  8798  0FDF  318C  24CB  318F   	fcall	_ms
  8799  0FE2  0021               	movlb	1	; select bank1
  8800  0FE3  0844               	movf	_ts_trigger_time^(0+128),w
  8801  0FE4  0020               	movlb	0	; select bank0
  8802  0FE5  0220               	subwf	?_ms,w
  8803  0FE6  00A4               	movwf	abs@a
  8804  0FE7  0021               	movlb	1	; select bank1
  8805  0FE8  0845               	movf	(_ts_trigger_time+1)^(0+128),w
  8806  0FE9  0020               	movlb	0	; select bank0
  8807  0FEA  3B21               	subwfb	?_ms+1,w
  8808  0FEB  00A5               	movwf	abs@a+1
  8809  0FEC  318D  2579  318F   	fcall	_abs
  8810  0FEF  0020               	movlb	0	; select bank0
  8811  0FF0  0825               	movf	?_abs+1,w
  8812  0FF1  3A80               	xorlw	128
  8813  0FF2  00A8               	movwf	??_TurnSignalDone
  8814  0FF3  3087               	movlw	135
  8815  0FF4  0228               	subwf	??_TurnSignalDone,w
  8816  0FF5  1D03               	skipz
  8817  0FF6  2FF9               	goto	u1635
  8818  0FF7  30D1               	movlw	209
  8819  0FF8  0224               	subwf	?_abs,w
  8820  0FF9                     u1635:	
  8821  0FF9  1803               	skipnc
  8822  0FFA  2FFC               	goto	u1631
  8823  0FFB  2FFE               	goto	u1630
  8824  0FFC                     u1631:	
  8825  0FFC  3001               	movlw	1
  8826  0FFD  2FFF               	goto	u1640
  8827  0FFE                     u1630:	
  8828  0FFE  3000               	movlw	0
  8829  0FFF                     u1640:	
  8830  0FFF                     l399:	
  8831  0FFF  0008               	return
  8832  1000                     __end_of_TurnSignalDone:	
  8833                           
  8834                           	psect	text26
  8835  0D79                     __ptext26:	
  8836 ;; *************** function _abs *****************
  8837 ;; Defined at:
  8838 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\abs.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;  a               2    4[BANK0 ] int 
  8841 ;; Auto vars:     Size  Location     Type
  8842 ;;		None
  8843 ;; Return value:  Size  Location     Type
  8844 ;;                  2    4[BANK0 ] int 
  8845 ;; Registers used:
  8846 ;;		wreg, status,2, status,0
  8847 ;; Tracked objects:
  8848 ;;		On entry : 0/0
  8849 ;;		On exit  : 0/0
  8850 ;;		Unchanged: 0/0
  8851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8852 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8855 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8856 ;;Total ram usage:        4 bytes
  8857 ;; Hardware stack levels used:    1
  8858 ;; Hardware stack levels required when called:    6
  8859 ;; This function calls:
  8860 ;;		Nothing
  8861 ;; This function is called by:
  8862 ;;		_TurnSignalDone
  8863 ;; This function uses a non-reentrant model
  8864 ;;
  8865                           
  8866                           
  8867                           ;psect for function _abs
  8868  0D79                     _abs:	
  8869  0D79                     l2429:	
  8870                           ;incstack = 0
  8871                           ; Regs used in _abs: [wreg+status,2+status,0]
  8872                           
  8873  0D79  0020               	movlb	0	; select bank0
  8874  0D7A  0825               	movf	abs@a+1,w
  8875  0D7B  3A80               	xorlw	128
  8876  0D7C  00A6               	movwf	??_abs
  8877  0D7D  3080               	movlw	128
  8878  0D7E  0226               	subwf	??_abs,w
  8879  0D7F  1D03               	skipz
  8880  0D80  2D83               	goto	u1285
  8881  0D81  3001               	movlw	1
  8882  0D82  0224               	subwf	abs@a,w
  8883  0D83                     u1285:	
  8884  0D83  1803               	skipnc
  8885  0D84  2D86               	goto	u1281
  8886  0D85  2D87               	goto	u1280
  8887  0D86                     u1281:	
  8888  0D86  2D94               	goto	l1206
  8889  0D87                     u1280:	
  8890  0D87                     l2431:	
  8891  0D87  0020               	movlb	0	; select bank0
  8892  0D88  0924               	comf	abs@a,w
  8893  0D89  00A6               	movwf	??_abs
  8894  0D8A  0925               	comf	abs@a+1,w
  8895  0D8B  00A7               	movwf	??_abs+1
  8896  0D8C  0AA6               	incf	??_abs,f
  8897  0D8D  1903               	skipnz
  8898  0D8E  0AA7               	incf	??_abs+1,f
  8899  0D8F  0826               	movf	??_abs,w
  8900  0D90  00A4               	movwf	?_abs
  8901  0D91  0827               	movf	??_abs+1,w
  8902  0D92  00A5               	movwf	?_abs+1
  8903  0D93  2D94               	goto	l1209
  8904  0D94                     l1206:	
  8905  0D94                     l1209:	
  8906  0D94  0008               	return
  8907  0D95                     __end_of_abs:	
  8908                           
  8909                           	psect	text27
  8910  0E3D                     __ptext27:	
  8911 ;; *************** function _SetOutputs *****************
  8912 ;; Defined at:
  8913 ;;		line 39 in file "Lights.c"
  8914 ;; Parameters:    Size  Location     Type
  8915 ;;  state           1    wreg     const _Bool 
  8916 ;; Auto vars:     Size  Location     Type
  8917 ;;  state           1    6[BANK0 ] const _Bool 
  8918 ;; Return value:  Size  Location     Type
  8919 ;;                  1    wreg      void 
  8920 ;; Registers used:
  8921 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8922 ;; Tracked objects:
  8923 ;;		On entry : 0/0
  8924 ;;		On exit  : 0/0
  8925 ;;		Unchanged: 0/0
  8926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8928 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8931 ;;Total ram usage:        2 bytes
  8932 ;; Hardware stack levels used:    1
  8933 ;; Hardware stack levels required when called:    7
  8934 ;; This function calls:
  8935 ;;		_SetLight
  8936 ;; This function is called by:
  8937 ;;		_setup
  8938 ;;		_TurnSignalDone
  8939 ;; This function uses a non-reentrant model
  8940 ;;
  8941                           
  8942                           
  8943                           ;psect for function _SetOutputs
  8944  0E3D                     _SetOutputs:	
  8945                           
  8946                           ;incstack = 0
  8947                           ; Regs used in _SetOutputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8948                           ;SetOutputs@state stored from wreg
  8949  0E3D  0020               	movlb	0	; select bank0
  8950  0E3E  00A6               	movwf	SetOutputs@state
  8951  0E3F                     l2395:	
  8952                           
  8953                           ;Lights.c: 39: void SetOutputs( const _Bool state );Lights.c: 40: {;Lights.c: 41:     Se
      +                          tLight( L1, state );
  8954  0E3F  0826               	movf	SetOutputs@state,w
  8955  0E40  00A5               	movwf	??_SetOutputs
  8956  0E41  0825               	movf	??_SetOutputs,w
  8957  0E42  00A0               	movwf	SetLight@_state
  8958  0E43  3000               	movlw	0
  8959  0E44  3186  26D1  318E   	fcall	_SetLight
  8960                           
  8961                           ;Lights.c: 42:     SetLight( L2, state );
  8962  0E47  0020               	movlb	0	; select bank0
  8963  0E48  0826               	movf	SetOutputs@state,w
  8964  0E49  00A5               	movwf	??_SetOutputs
  8965  0E4A  0825               	movf	??_SetOutputs,w
  8966  0E4B  00A0               	movwf	SetLight@_state
  8967  0E4C  3001               	movlw	1
  8968  0E4D  3186  26D1  318E   	fcall	_SetLight
  8969                           
  8970                           ;Lights.c: 43:     SetLight( L3, state );
  8971  0E50  0020               	movlb	0	; select bank0
  8972  0E51  0826               	movf	SetOutputs@state,w
  8973  0E52  00A5               	movwf	??_SetOutputs
  8974  0E53  0825               	movf	??_SetOutputs,w
  8975  0E54  00A0               	movwf	SetLight@_state
  8976  0E55  3002               	movlw	2
  8977  0E56  3186  26D1  318E   	fcall	_SetLight
  8978                           
  8979                           ;Lights.c: 44:     SetLight( L4, state );
  8980  0E59  0020               	movlb	0	; select bank0
  8981  0E5A  0826               	movf	SetOutputs@state,w
  8982  0E5B  00A5               	movwf	??_SetOutputs
  8983  0E5C  0825               	movf	??_SetOutputs,w
  8984  0E5D  00A0               	movwf	SetLight@_state
  8985  0E5E  3003               	movlw	3
  8986  0E5F  3186  26D1  318E   	fcall	_SetLight
  8987  0E62                     l364:	
  8988  0E62  0008               	return
  8989  0E63                     __end_of_SetOutputs:	
  8990                           
  8991                           	psect	text28
  8992  0F16                     __ptext28:	
  8993 ;; *************** function _PatternCycleInputChanged *****************
  8994 ;; Defined at:
  8995 ;;		line 27 in file "TurnSignal.c"
  8996 ;; Parameters:    Size  Location     Type
  8997 ;;		None
  8998 ;; Auto vars:     Size  Location     Type
  8999 ;;  delay_count     2    2[BANK0 ] unsigned short 
  9000 ;; Return value:  Size  Location     Type
  9001 ;;                  1    wreg      _Bool 
  9002 ;; Registers used:
  9003 ;;		wreg, status,2, status,0
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9013 ;;Total ram usage:        4 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    6
  9016 ;; This function calls:
  9017 ;;		Nothing
  9018 ;; This function is called by:
  9019 ;;		_main
  9020 ;; This function uses a non-reentrant model
  9021 ;;
  9022                           
  9023                           
  9024                           ;psect for function _PatternCycleInputChanged
  9025  0F16                     _PatternCycleInputChanged:	
  9026  0F16                     l2471:	
  9027                           ;incstack = 0
  9028                           ; Regs used in _PatternCycleInputChanged: [wreg+status,2+status,0]
  9029                           
  9030                           
  9031                           ;TurnSignal.c: 29:     cur_pc_input_state = PORTCbits.RC5;
  9032  0F16  3000               	movlw	0
  9033  0F17  0020               	movlb	0	; select bank0
  9034  0F18  1A8E               	btfsc	14,5	;volatile
  9035  0F19  3001               	movlw	1
  9036  0F1A  00EE               	movwf	_cur_pc_input_state
  9037  0F1B                     l2473:	
  9038                           
  9039                           ;TurnSignal.c: 30:     if ( cur_pc_input_state != last_pc_input_state )
  9040  0F1B  086E               	movf	_cur_pc_input_state,w
  9041  0F1C  066D               	xorwf	_last_pc_input_state,w
  9042  0F1D  1903               	skipnz
  9043  0F1E  2F20               	goto	u1341
  9044  0F1F  2F21               	goto	u1340
  9045  0F20                     u1341:	
  9046  0F20  2F36               	goto	l2481
  9047  0F21                     u1340:	
  9048  0F21                     l2475:	
  9049                           
  9050                           ;TurnSignal.c: 31:     {;TurnSignal.c: 32:         uint delay_count = 0;
  9051  0F21  01A2               	clrf	PatternCycleInputChanged@delay_count
  9052  0F22  01A3               	clrf	PatternCycleInputChanged@delay_count+1
  9053                           
  9054                           ;TurnSignal.c: 34:         while ( delay_count++ < 3 )
  9055  0F23  2F38               	goto	l2485
  9056  0F24                     l2477:	
  9057                           
  9058                           ;TurnSignal.c: 35:         {;TurnSignal.c: 36:             _delay((unsigned long)((10)*(
      +                          1000000/4000.0)));
  9059  0F24  3004               	movlw	4
  9060  0F25  0020               	movlb	0	; select bank0
  9061  0F26  00A0               	movwf	??_PatternCycleInputChanged
  9062  0F27  303D               	movlw	61
  9063  0F28                     u1707:	
  9064  0F28  0B89               	decfsz	9,f
  9065  0F29  2F28               	goto	u1707
  9066  0F2A  0BA0               	decfsz	??_PatternCycleInputChanged,f
  9067  0F2B  2F28               	goto	u1707
  9068  0F2C  3200               	nop2
  9069  0F2D                     l2479:	
  9070                           
  9071                           ;TurnSignal.c: 38:             if( PORTCbits.RC5 != cur_pc_input_state )
  9072  0F2D  0020               	movlb	0	; select bank0
  9073  0F2E  0E0E               	swapf	14,w	;volatile
  9074  0F2F  0C89               	rrf	9,f
  9075  0F30  3901               	andlw	1
  9076  0F31  066E               	xorwf	_cur_pc_input_state,w
  9077  0F32  1903               	skipnz
  9078  0F33  2F35               	goto	u1351
  9079  0F34  2F36               	goto	u1350
  9080  0F35                     u1351:	
  9081  0F35  2F38               	goto	l2485
  9082  0F36                     u1350:	
  9083  0F36                     l2481:	
  9084                           
  9085                           ;TurnSignal.c: 39:             {;TurnSignal.c: 40:                 return 0;
  9086  0F36  3000               	movlw	0
  9087  0F37  2F49               	goto	l406
  9088  0F38                     l2485:	
  9089                           
  9090                           ;TurnSignal.c: 34:         while ( delay_count++ < 3 )
  9091  0F38  0823               	movf	PatternCycleInputChanged@delay_count+1,w
  9092  0F39  00A1               	movwf	??_PatternCycleInputChanged+1
  9093  0F3A  0822               	movf	PatternCycleInputChanged@delay_count,w
  9094  0F3B  00A0               	movwf	??_PatternCycleInputChanged
  9095  0F3C  0AA2               	incf	PatternCycleInputChanged@delay_count,f
  9096  0F3D  1903               	skipnz
  9097  0F3E  0AA3               	incf	PatternCycleInputChanged@delay_count+1,f
  9098  0F3F  3000               	movlw	0
  9099  0F40  0221               	subwf	??_PatternCycleInputChanged+1,w
  9100  0F41  3003               	movlw	3
  9101  0F42  1903               	skipnz
  9102  0F43  0220               	subwf	??_PatternCycleInputChanged,w
  9103  0F44  1C03               	skipc
  9104  0F45  2F47               	goto	u1361
  9105  0F46  2F48               	goto	u1360
  9106  0F47                     u1361:	
  9107  0F47  2F24               	goto	l2477
  9108  0F48                     u1360:	
  9109  0F48                     l2491:	
  9110                           
  9111                           ;TurnSignal.c: 49:     return 1;
  9112  0F48  3001               	movlw	1
  9113  0F49                     l406:	
  9114  0F49  0008               	return
  9115  0F4A                     __end_of_PatternCycleInputChanged:	
  9116                           
  9117                           	psect	text29
  9118  05CD                     __ptext29:	
  9119 ;; *************** function _NextPattern *****************
  9120 ;; Defined at:
  9121 ;;		line 26 in file "PatternSelector.c"
  9122 ;; Parameters:    Size  Location     Type
  9123 ;;  p_selector      2    4[BANK0 ] PTR volatile struct Patt
  9124 ;;		 -> pattern_selector(19), 
  9125 ;; Auto vars:     Size  Location     Type
  9126 ;;		None
  9127 ;; Return value:  Size  Location     Type
  9128 ;;                  2    4[BANK0 ] PTR struct Pattern
  9129 ;; Registers used:
  9130 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9131 ;; Tracked objects:
  9132 ;;		On entry : 0/0
  9133 ;;		On exit  : 0/0
  9134 ;;		Unchanged: 0/0
  9135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9136 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9138 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9139 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9140 ;;Total ram usage:        6 bytes
  9141 ;; Hardware stack levels used:    1
  9142 ;; Hardware stack levels required when called:    8
  9143 ;; This function calls:
  9144 ;;		_EEPROM_SavePattern
  9145 ;; This function is called by:
  9146 ;;		_main
  9147 ;; This function uses a non-reentrant model
  9148 ;;
  9149                           
  9150                           
  9151                           ;psect for function _NextPattern
  9152  05CD                     _NextPattern:	
  9153  05CD                     l2829:	
  9154                           ;incstack = 0
  9155                           ; Regs used in _NextPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9156                           
  9157                           
  9158                           ;PatternSelector.c: 26: struct Pattern* NextPattern( struct PatternSelector* p_selector 
      +                          );PatternSelector.c: 27: {;PatternSelector.c: 28:     switch( p_selector->active )
  9159  05CD  2E03               	goto	l2843
  9160  05CE                     l2831:	
  9161                           
  9162                           ;PatternSelector.c: 31:             p_selector->active = XSTROBE;
  9163  05CE  0824               	movf	NextPattern@p_selector,w
  9164  05CF  3E0C               	addlw	12
  9165  05D0  00A6               	movwf	??_NextPattern
  9166  05D1  3000               	movlw	0
  9167  05D2  3D25               	addwfc	NextPattern@p_selector+1,w
  9168  05D3  00A7               	movwf	??_NextPattern+1
  9169  05D4  0826               	movf	??_NextPattern,w
  9170  05D5  0086               	movwf	6
  9171  05D6  0827               	movf	??_NextPattern+1,w
  9172  05D7  0087               	movwf	7
  9173  05D8  3001               	movlw	1
  9174  05D9  0081               	movwf	1
  9175                           
  9176                           ;PatternSelector.c: 32:             break;
  9177  05DA  2E1F               	goto	l2845
  9178  05DB                     l2833:	
  9179                           
  9180                           ;PatternSelector.c: 34:             p_selector->active = UPPER_LOWER;
  9181  05DB  0824               	movf	NextPattern@p_selector,w
  9182  05DC  3E0C               	addlw	12
  9183  05DD  00A6               	movwf	??_NextPattern
  9184  05DE  3000               	movlw	0
  9185  05DF  3D25               	addwfc	NextPattern@p_selector+1,w
  9186  05E0  00A7               	movwf	??_NextPattern+1
  9187  05E1  0826               	movf	??_NextPattern,w
  9188  05E2  0086               	movwf	6
  9189  05E3  0827               	movf	??_NextPattern+1,w
  9190  05E4  0087               	movwf	7
  9191  05E5  3002               	movlw	2
  9192  05E6  0081               	movwf	1
  9193                           
  9194                           ;PatternSelector.c: 35:             break;
  9195  05E7  2E1F               	goto	l2845
  9196  05E8                     l2835:	
  9197                           
  9198                           ;PatternSelector.c: 37:             p_selector->active = LOWER;
  9199  05E8  0824               	movf	NextPattern@p_selector,w
  9200  05E9  3E0C               	addlw	12
  9201  05EA  00A6               	movwf	??_NextPattern
  9202  05EB  3000               	movlw	0
  9203  05EC  3D25               	addwfc	NextPattern@p_selector+1,w
  9204  05ED  00A7               	movwf	??_NextPattern+1
  9205  05EE  0826               	movf	??_NextPattern,w
  9206  05EF  0086               	movwf	6
  9207  05F0  0827               	movf	??_NextPattern+1,w
  9208  05F1  0087               	movwf	7
  9209  05F2  3003               	movlw	3
  9210  05F3  0081               	movwf	1
  9211                           
  9212                           ;PatternSelector.c: 38:             break;
  9213  05F4  2E1F               	goto	l2845
  9214  05F5                     l2837:	
  9215                           
  9216                           ;PatternSelector.c: 40:             p_selector->active = WIGWAG;
  9217  05F5  0824               	movf	NextPattern@p_selector,w
  9218  05F6  0086               	movwf	6
  9219  05F7  0825               	movf	NextPattern@p_selector+1,w
  9220  05F8  0087               	movwf	7
  9221  05F9  314C               	addfsr 1,12
  9222  05FA  0181               	clrf	1
  9223                           
  9224                           ;PatternSelector.c: 41:             break;
  9225  05FB  2E1F               	goto	l2845
  9226  05FC                     l2839:	
  9227                           
  9228                           ;PatternSelector.c: 43:             p_selector->active = WIGWAG;
  9229  05FC  0824               	movf	NextPattern@p_selector,w
  9230  05FD  0086               	movwf	6
  9231  05FE  0825               	movf	NextPattern@p_selector+1,w
  9232  05FF  0087               	movwf	7
  9233  0600  314C               	addfsr 1,12
  9234  0601  0181               	clrf	1
  9235                           
  9236                           ;PatternSelector.c: 44:             break;
  9237  0602  2E1F               	goto	l2845
  9238  0603                     l2843:	
  9239  0603  0020               	movlb	0	; select bank0
  9240  0604  0824               	movf	NextPattern@p_selector,w
  9241  0605  0086               	movwf	6
  9242  0606  0825               	movf	NextPattern@p_selector+1,w
  9243  0607  0087               	movwf	7
  9244  0608  314C               	addfsr 1,12
  9245  0609  0801               	movf	1,w
  9246  060A  00A6               	movwf	??_NextPattern
  9247  060B  01A7               	clrf	??_NextPattern+1
  9248                           
  9249                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9250                           ; Switch size 1, requested type "simple"
  9251                           ; Number of cases is 1, Range of values is 0 to 0
  9252                           ; switch strategies available:
  9253                           ; Name         Instructions Cycles
  9254                           ; simple_byte            4     3 (average)
  9255                           ; direct_byte            8     6 (fixed)
  9256                           ; jumptable            260     6 (fixed)
  9257                           ;	Chosen strategy is simple_byte
  9258  060C  0827               	movf	??_NextPattern+1,w
  9259  060D  3A00               	xorlw	0	; case 0
  9260  060E  1903               	skipnz
  9261  060F  2E11               	goto	l2949
  9262  0610  2DFC               	goto	l2839
  9263  0611                     l2949:	
  9264                           
  9265                           ; Switch size 1, requested type "simple"
  9266                           ; Number of cases is 4, Range of values is 0 to 3
  9267                           ; switch strategies available:
  9268                           ; Name         Instructions Cycles
  9269                           ; simple_byte           13     7 (average)
  9270                           ; direct_byte           14     6 (fixed)
  9271                           ; jumptable            260     6 (fixed)
  9272                           ;	Chosen strategy is simple_byte
  9273  0611  0826               	movf	??_NextPattern,w
  9274  0612  3A00               	xorlw	0	; case 0
  9275  0613  1903               	skipnz
  9276  0614  2DCE               	goto	l2831
  9277  0615  3A01               	xorlw	1	; case 1
  9278  0616  1903               	skipnz
  9279  0617  2DDB               	goto	l2833
  9280  0618  3A03               	xorlw	3	; case 2
  9281  0619  1903               	skipnz
  9282  061A  2DE8               	goto	l2835
  9283  061B  3A01               	xorlw	1	; case 3
  9284  061C  1903               	skipnz
  9285  061D  2DF5               	goto	l2837
  9286  061E  2DFC               	goto	l2839
  9287  061F                     l2845:	
  9288                           
  9289                           ;PatternSelector.c: 47:     p_selector->current_stage = p_selector->patterns[ p_selector
      +                          ->active ]->first_stage;
  9290  061F  0824               	movf	NextPattern@p_selector,w
  9291  0620  0086               	movwf	6
  9292  0621  0825               	movf	NextPattern@p_selector+1,w
  9293  0622  0087               	movwf	7
  9294  0623  314C               	addfsr 1,12
  9295  0624  0801               	movf	1,w
  9296  0625  00A6               	movwf	??_NextPattern
  9297  0626  01A7               	clrf	??_NextPattern+1
  9298  0627  35A6               	lslf	??_NextPattern,f
  9299  0628  0DA7               	rlf	??_NextPattern+1,f
  9300  0629  0826               	movf	??_NextPattern,w
  9301  062A  0724               	addwf	NextPattern@p_selector,w
  9302  062B  0086               	movwf	6
  9303  062C  0827               	movf	??_NextPattern+1,w
  9304  062D  3D25               	addwfc	NextPattern@p_selector+1,w
  9305  062E  0087               	movwf	7
  9306  062F  3F40               	moviw [0]fsr1
  9307  0630  00A8               	movwf	??_NextPattern+2
  9308  0631  3F41               	moviw [1]fsr1
  9309  0632  00A9               	movwf	??_NextPattern+3
  9310  0633  0828               	movf	??_NextPattern+2,w
  9311  0634  0086               	movwf	6
  9312  0635  0829               	movf	??_NextPattern+3,w
  9313  0636  0087               	movwf	7
  9314  0637  3141               	addfsr 1,1
  9315  0638  0824               	movf	NextPattern@p_selector,w
  9316  0639  0084               	movwf	4
  9317  063A  0825               	movf	NextPattern@p_selector+1,w
  9318  063B  0085               	movwf	5
  9319  063C  310D               	addfsr 0,13
  9320  063D  3F40               	moviw [0]fsr1
  9321  063E  3F80               	movwi [0]fsr0
  9322  063F  3F41               	moviw [1]fsr1
  9323  0640  3F81               	movwi [1]fsr0
  9324  0641                     l2847:	
  9325                           
  9326                           ;PatternSelector.c: 49:     EEPROM_SavePattern( p_selector->active );
  9327  0641  0824               	movf	NextPattern@p_selector,w
  9328  0642  0086               	movwf	6
  9329  0643  0825               	movf	NextPattern@p_selector+1,w
  9330  0644  0087               	movwf	7
  9331  0645  314C               	addfsr 1,12
  9332  0646  0801               	movf	1,w
  9333  0647  318C  24D5  3185   	fcall	_EEPROM_SavePattern
  9334  064A                     l2849:	
  9335                           
  9336                           ;PatternSelector.c: 51:     return p_selector->patterns[ p_selector->active ];;	Return v
      +                          alue of _NextPattern is never used
  9337  064A  0020               	movlb	0	; select bank0
  9338  064B  0824               	movf	NextPattern@p_selector,w
  9339  064C  0086               	movwf	6
  9340  064D  0825               	movf	NextPattern@p_selector+1,w
  9341  064E  0087               	movwf	7
  9342  064F  314C               	addfsr 1,12
  9343  0650  0801               	movf	1,w
  9344  0651  00A6               	movwf	??_NextPattern
  9345  0652  01A7               	clrf	??_NextPattern+1
  9346  0653  35A6               	lslf	??_NextPattern,f
  9347  0654  0DA7               	rlf	??_NextPattern+1,f
  9348  0655  0826               	movf	??_NextPattern,w
  9349  0656  0724               	addwf	NextPattern@p_selector,w
  9350  0657  0086               	movwf	6
  9351  0658  0827               	movf	??_NextPattern+1,w
  9352  0659  3D25               	addwfc	NextPattern@p_selector+1,w
  9353  065A  0087               	movwf	7
  9354  065B                     l325:	
  9355  065B  0008               	return
  9356  065C                     __end_of_NextPattern:	
  9357                           
  9358                           	psect	text30
  9359  0CD5                     __ptext30:	
  9360 ;; *************** function _EEPROM_SavePattern *****************
  9361 ;; Defined at:
  9362 ;;		line 3 in file "EEPROM.c"
  9363 ;; Parameters:    Size  Location     Type
  9364 ;;  pattern_name    1    wreg     enum E53
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;  pattern_name    1    3[BANK0 ] enum E53
  9367 ;; Return value:  Size  Location     Type
  9368 ;;                  1    wreg      void 
  9369 ;; Registers used:
  9370 ;;		wreg, status,2, status,0, pclath, cstack
  9371 ;; Tracked objects:
  9372 ;;		On entry : 0/0
  9373 ;;		On exit  : 0/0
  9374 ;;		Unchanged: 0/0
  9375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9378 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;Total ram usage:        2 bytes
  9381 ;; Hardware stack levels used:    1
  9382 ;; Hardware stack levels required when called:    7
  9383 ;; This function calls:
  9384 ;;		_eeprom_write
  9385 ;; This function is called by:
  9386 ;;		_NextPattern
  9387 ;; This function uses a non-reentrant model
  9388 ;;
  9389                           
  9390                           
  9391                           ;psect for function _EEPROM_SavePattern
  9392  0CD5                     _EEPROM_SavePattern:	
  9393                           
  9394                           ;incstack = 0
  9395                           ; Regs used in _EEPROM_SavePattern: [wreg+status,2+status,0+pclath+cstack]
  9396                           ;EEPROM_SavePattern@pattern_name stored from wreg
  9397  0CD5  0020               	movlb	0	; select bank0
  9398  0CD6  00A3               	movwf	EEPROM_SavePattern@pattern_name
  9399  0CD7                     l2797:	
  9400                           
  9401                           ;EEPROM.c: 3: void EEPROM_SavePattern( enum PatternName pattern_name );EEPROM.c: 4: {;EE
      +                          PROM.c: 5:     eeprom_write( 0, (byte)pattern_name );
  9402  0CD7  0823               	movf	EEPROM_SavePattern@pattern_name,w
  9403  0CD8  00A2               	movwf	??_EEPROM_SavePattern
  9404  0CD9  0822               	movf	??_EEPROM_SavePattern,w
  9405  0CDA  00A0               	movwf	eeprom_write@value
  9406  0CDB  3000               	movlw	0
  9407  0CDC  318E  26E8  318C   	fcall	_eeprom_write
  9408  0CDF                     l554:	
  9409  0CDF  0008               	return
  9410  0CE0                     __end_of_EEPROM_SavePattern:	
  9411                           
  9412                           	psect	text31
  9413  0EE8                     __ptext31:	
  9414 ;; *************** function _eeprom_write *****************
  9415 ;; Defined at:
  9416 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\pic\__eewrite.c"
  9417 ;; Parameters:    Size  Location     Type
  9418 ;;  addr            1    wreg     unsigned char 
  9419 ;;  value           1    0[BANK0 ] unsigned char 
  9420 ;; Auto vars:     Size  Location     Type
  9421 ;;  addr            1    1[BANK0 ] unsigned char 
  9422 ;; Return value:  Size  Location     Type
  9423 ;;                  1    wreg      void 
  9424 ;; Registers used:
  9425 ;;		wreg, status,2
  9426 ;; Tracked objects:
  9427 ;;		On entry : 0/0
  9428 ;;		On exit  : 0/0
  9429 ;;		Unchanged: 0/0
  9430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9431 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;Total ram usage:        2 bytes
  9436 ;; Hardware stack levels used:    1
  9437 ;; Hardware stack levels required when called:    6
  9438 ;; This function calls:
  9439 ;;		Nothing
  9440 ;; This function is called by:
  9441 ;;		_EEPROM_SavePattern
  9442 ;; This function uses a non-reentrant model
  9443 ;;
  9444                           
  9445                           
  9446                           ;psect for function _eeprom_write
  9447  0EE8                     _eeprom_write:	
  9448                           
  9449                           ;incstack = 0
  9450                           ; Regs used in _eeprom_write: [wreg+status,2]
  9451                           ;eeprom_write@addr stored from wreg
  9452  0EE8  0020               	movlb	0	; select bank0
  9453  0EE9  00A1               	movwf	eeprom_write@addr
  9454  0EEA                     l738:	
  9455  0EEA                     l739:	
  9456  0EEA  0031               	movlb	17	; select bank17
  9457  0EEB  1895               	btfsc	21,1	;volsfr
  9458  0EEC  2EEE               	goto	u1571
  9459  0EED  2EEF               	goto	u1570
  9460  0EEE                     u1571:	
  9461  0EEE  2EEA               	goto	l739
  9462  0EEF                     u1570:	
  9463  0EEF                     l741:	
  9464  0EEF  1715               	bsf	21,6	;volsfr
  9465  0EF0                     l2741:	
  9466  0EF0  0020               	movlb	0	; select bank0
  9467  0EF1  0821               	movf	eeprom_write@addr,w
  9468  0EF2  0031               	movlb	17	; select bank17
  9469  0EF3  0091               	movwf	17	;volatile
  9470  0EF4  3070               	movlw	112
  9471  0EF5  0092               	movwf	18	;volatile
  9472  0EF6                     l2743:	
  9473  0EF6  0194               	clrf	20	;volatile
  9474  0EF7                     l2745:	
  9475  0EF7  0020               	movlb	0	; select bank0
  9476  0EF8  0820               	movf	eeprom_write@value,w
  9477  0EF9  0031               	movlb	17	; select bank17
  9478  0EFA  0093               	movwf	19	;volatile
  9479  0EFB                     l2747:	
  9480  0EFB  0020               	movlb	0	; select bank0
  9481  0EFC  1003               	bcf	3,0	;volatile
  9482  0EFD                     l2749:	
  9483  0EFD  1F8B               	btfss	11,7	;volatile
  9484  0EFE  2F00               	goto	u1581
  9485  0EFF  2F01               	goto	u1580
  9486  0F00                     u1581:	
  9487  0F00  2F02               	goto	l742
  9488  0F01                     u1580:	
  9489  0F01                     l2751:	
  9490  0F01  1403               	bsf	3,0	;volatile
  9491  0F02                     l742:	
  9492  0F02  138B               	bcf	11,7	;volatile
  9493  0F03  0031               	movlb	17	; select bank17
  9494  0F04  1515               	bsf	21,2	;volsfr
  9495  0F05                     l2753:	
  9496  0F05  3055               	movlw	85
  9497  0F06  0096               	movwf	22	;volsfr
  9498  0F07  30AA               	movlw	170
  9499  0F08  0096               	movwf	22	;volsfr
  9500  0F09                     l2755:	
  9501  0F09  1495               	bsf	21,1	;volsfr
  9502  0F0A                     l743:	
  9503  0F0A  1895               	btfsc	21,1	;volsfr
  9504  0F0B  2F0D               	goto	u1591
  9505  0F0C  2F0E               	goto	u1590
  9506  0F0D                     u1591:	
  9507  0F0D  2F0A               	goto	l743
  9508  0F0E                     u1590:	
  9509  0F0E                     l745:	
  9510  0F0E  1115               	bcf	21,2	;volsfr
  9511  0F0F  0020               	movlb	0	; select bank0
  9512  0F10  1C03               	btfss	3,0	;volatile
  9513  0F11  2F13               	goto	u1601
  9514  0F12  2F14               	goto	u1600
  9515  0F13                     u1601:	
  9516  0F13  2F15               	goto	l748
  9517  0F14                     u1600:	
  9518  0F14                     l2757:	
  9519  0F14  178B               	bsf	11,7	;volatile
  9520  0F15                     l748:	
  9521  0F15  0008               	return
  9522  0F16                     __end_of_eeprom_write:	
  9523                           
  9524                           	psect	text32
  9525  0532                     __ptext32:	
  9526 ;; *************** function _FlashPattern *****************
  9527 ;; Defined at:
  9528 ;;		line 11 in file "PatternFlasher.c"
  9529 ;; Parameters:    Size  Location     Type
  9530 ;;		None
  9531 ;; Auto vars:     Size  Location     Type
  9532 ;;  current_time    2   15[BANK0 ] unsigned short 
  9533 ;; Return value:  Size  Location     Type
  9534 ;;                  1    wreg      void 
  9535 ;; Registers used:
  9536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9537 ;; Tracked objects:
  9538 ;;		On entry : 0/0
  9539 ;;		On exit  : 0/0
  9540 ;;		Unchanged: 0/0
  9541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;Total ram usage:       12 bytes
  9547 ;; Hardware stack levels used:    1
  9548 ;; Hardware stack levels required when called:    7
  9549 ;; This function calls:
  9550 ;;		_SetLight
  9551 ;;		_ms
  9552 ;; This function is called by:
  9553 ;;		_main
  9554 ;; This function uses a non-reentrant model
  9555 ;;
  9556                           
  9557                           
  9558                           ;psect for function _FlashPattern
  9559  0532                     _FlashPattern:	
  9560  0532                     l2857:	
  9561                           ;incstack = 0
  9562                           ; Regs used in _FlashPattern: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9563                           
  9564                           
  9565                           ;PatternFlasher.c: 13:     uint current_time = ms();
  9566  0532  318C  24CB  3185   	fcall	_ms
  9567  0535  0020               	movlb	0	; select bank0
  9568  0536  0821               	movf	?_ms+1,w
  9569  0537  00B0               	movwf	FlashPattern@current_time+1
  9570  0538  0820               	movf	?_ms,w
  9571  0539  00AF               	movwf	FlashPattern@current_time
  9572  053A                     l2859:	
  9573                           
  9574                           ;PatternFlasher.c: 15:     if ( current_time - pattern_selector.start_time > pattern_sel
      +                          ector.current_stage->time_ms )
  9575  053A  082F               	movf	FlashPattern@current_time,w
  9576  053B  00A5               	movwf	??_FlashPattern
  9577  053C  0830               	movf	FlashPattern@current_time+1,w
  9578  053D  00A6               	movwf	??_FlashPattern+1
  9579  053E  01A7               	clrf	??_FlashPattern+2
  9580  053F  01A8               	clrf	??_FlashPattern+3
  9581  0540  0021               	movlb	1	; select bank1
  9582  0541  0857               	movf	(_pattern_selector^(0+128)+15),w	;volatile
  9583  0542  0020               	movlb	0	; select bank0
  9584  0543  02A5               	subwf	??_FlashPattern,f
  9585  0544  0021               	movlb	1	; select bank1
  9586  0545  0858               	movf	((_pattern_selector+1)^(0+128)+15),w	;volatile
  9587  0546  0020               	movlb	0	; select bank0
  9588  0547  3BA6               	subwfb	??_FlashPattern+1,f
  9589  0548  0021               	movlb	1	; select bank1
  9590  0549  0859               	movf	((_pattern_selector+2)^(0+128)+15),w	;volatile
  9591  054A  0020               	movlb	0	; select bank0
  9592  054B  3BA7               	subwfb	??_FlashPattern+2,f
  9593  054C  0021               	movlb	1	; select bank1
  9594  054D  085A               	movf	((_pattern_selector+3)^(0+128)+15),w	;volatile
  9595  054E  0020               	movlb	0	; select bank0
  9596  054F  3BA8               	subwfb	??_FlashPattern+3,f
  9597  0550  0021               	movlb	1	; select bank1
  9598  0551  0855               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  9599  0552  0086               	movwf	6
  9600  0553  0856               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  9601  0554  0087               	movwf	7
  9602  0555  3144               	addfsr 1,4
  9603  0556  3F40               	moviw [0]fsr1
  9604  0557  0020               	movlb	0	; select bank0
  9605  0558  00A9               	movwf	??_FlashPattern+4
  9606  0559  3F41               	moviw [1]fsr1
  9607  055A  00AA               	movwf	??_FlashPattern+5
  9608  055B  0829               	movf	??_FlashPattern+4,w
  9609  055C  00AB               	movwf	??_FlashPattern+6
  9610  055D  082A               	movf	??_FlashPattern+5,w
  9611  055E  00AC               	movwf	??_FlashPattern+7
  9612  055F  01AD               	clrf	??_FlashPattern+8
  9613  0560  01AE               	clrf	??_FlashPattern+9
  9614  0561  0828               	movf	??_FlashPattern+3,w
  9615  0562  022E               	subwf	??_FlashPattern+9,w
  9616  0563  1D03               	skipz
  9617  0564  2D6F               	goto	u1655
  9618  0565  0827               	movf	??_FlashPattern+2,w
  9619  0566  022D               	subwf	??_FlashPattern+8,w
  9620  0567  1D03               	skipz
  9621  0568  2D6F               	goto	u1655
  9622  0569  0826               	movf	??_FlashPattern+1,w
  9623  056A  022C               	subwf	??_FlashPattern+7,w
  9624  056B  1D03               	skipz
  9625  056C  2D6F               	goto	u1655
  9626  056D  0825               	movf	??_FlashPattern,w
  9627  056E  022B               	subwf	??_FlashPattern+6,w
  9628  056F                     u1655:	
  9629  056F  1803               	skipnc
  9630  0570  2D72               	goto	u1651
  9631  0571  2D73               	goto	u1650
  9632  0572                     u1651:	
  9633  0572  2D8A               	goto	l2867
  9634  0573                     u1650:	
  9635  0573                     l2861:	
  9636                           
  9637                           ;PatternFlasher.c: 16:     {;PatternFlasher.c: 17:         pattern_selector.current_stag
      +                          e = pattern_selector.current_stage->next;
  9638  0573  0021               	movlb	1	; select bank1
  9639  0574  0855               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  9640  0575  0086               	movwf	6
  9641  0576  0856               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  9642  0577  0087               	movwf	7
  9643  0578  3146               	addfsr 1,6
  9644  0579  3F40               	moviw [0]fsr1
  9645  057A  00D5               	movwf	(_pattern_selector^(0+128)+13)	;volatile
  9646  057B  3F41               	moviw [1]fsr1
  9647  057C  00D6               	movwf	((_pattern_selector+1)^(0+128)+13)	;volatile
  9648  057D                     l2863:	
  9649                           
  9650                           ;PatternFlasher.c: 18:         pattern_selector.start_time = current_time;
  9651  057D  0020               	movlb	0	; select bank0
  9652  057E  082F               	movf	FlashPattern@current_time,w
  9653  057F  0021               	movlb	1	; select bank1
  9654  0580  00D7               	movwf	(_pattern_selector^(0+128)+15)	;volatile
  9655  0581  0020               	movlb	0	; select bank0
  9656  0582  0830               	movf	FlashPattern@current_time+1,w
  9657  0583  0021               	movlb	1	; select bank1
  9658  0584  00D8               	movwf	(_pattern_selector^(0+128)+16)	;volatile
  9659  0585  01D9               	clrf	(_pattern_selector^(0+128)+17)	;volatile
  9660  0586  01DA               	clrf	(_pattern_selector^(0+128)+18)	;volatile
  9661  0587                     l2865:	
  9662                           
  9663                           ;PatternFlasher.c: 19:         update_stage = 1;
  9664  0587  0020               	movlb	0	; select bank0
  9665  0588  01EC               	clrf	_update_stage
  9666  0589  0AEC               	incf	_update_stage,f
  9667  058A                     l2867:	
  9668                           
  9669                           ;PatternFlasher.c: 23:     if ( update_stage == 1 )
  9670  058A  036C               	decf	_update_stage,w
  9671  058B  1D03               	btfss	3,2
  9672  058C  2D8E               	goto	u1661
  9673  058D  2D8F               	goto	u1660
  9674  058E                     u1661:	
  9675  058E  2DCC               	goto	l528
  9676  058F                     u1660:	
  9677  058F                     l2869:	
  9678                           
  9679                           ;PatternFlasher.c: 24:     {;PatternFlasher.c: 25:         SetLight( L1, pattern_selecto
      +                          r.current_stage->light_states[L1] );
  9680  058F  0021               	movlb	1	; select bank1
  9681  0590  0855               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  9682  0591  0086               	movwf	6
  9683  0592  0856               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  9684  0593  0087               	movwf	7
  9685  0594  0801               	movf	1,w
  9686  0595  0020               	movlb	0	; select bank0
  9687  0596  00A5               	movwf	??_FlashPattern
  9688  0597  0825               	movf	??_FlashPattern,w
  9689  0598  00A0               	movwf	SetLight@_state
  9690  0599  3000               	movlw	0
  9691  059A  3186  26D1  3185   	fcall	_SetLight
  9692                           
  9693                           ;PatternFlasher.c: 26:         SetLight( L2, pattern_selector.current_stage->light_state
      +                          s[L2] );
  9694  059D  0021               	movlb	1	; select bank1
  9695  059E  0855               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  9696  059F  0086               	movwf	6
  9697  05A0  0856               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  9698  05A1  0087               	movwf	7
  9699  05A2  3141               	addfsr 1,1
  9700  05A3  0801               	movf	1,w
  9701  05A4  0020               	movlb	0	; select bank0
  9702  05A5  00A5               	movwf	??_FlashPattern
  9703  05A6  0825               	movf	??_FlashPattern,w
  9704  05A7  00A0               	movwf	SetLight@_state
  9705  05A8  3001               	movlw	1
  9706  05A9  3186  26D1  3185   	fcall	_SetLight
  9707                           
  9708                           ;PatternFlasher.c: 27:         SetLight( L3, pattern_selector.current_stage->light_state
      +                          s[L3] );
  9709  05AC  0021               	movlb	1	; select bank1
  9710  05AD  0855               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  9711  05AE  0086               	movwf	6
  9712  05AF  0856               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  9713  05B0  0087               	movwf	7
  9714  05B1  3142               	addfsr 1,2
  9715  05B2  0801               	movf	1,w
  9716  05B3  0020               	movlb	0	; select bank0
  9717  05B4  00A5               	movwf	??_FlashPattern
  9718  05B5  0825               	movf	??_FlashPattern,w
  9719  05B6  00A0               	movwf	SetLight@_state
  9720  05B7  3002               	movlw	2
  9721  05B8  3186  26D1  3185   	fcall	_SetLight
  9722                           
  9723                           ;PatternFlasher.c: 28:         SetLight( L4, pattern_selector.current_stage->light_state
      +                          s[L4] );
  9724  05BB  0021               	movlb	1	; select bank1
  9725  05BC  0855               	movf	(_pattern_selector^(0+128)+13),w	;volatile
  9726  05BD  0086               	movwf	6
  9727  05BE  0856               	movf	((_pattern_selector+1)^(0+128)+13),w	;volatile
  9728  05BF  0087               	movwf	7
  9729  05C0  3143               	addfsr 1,3
  9730  05C1  0801               	movf	1,w
  9731  05C2  0020               	movlb	0	; select bank0
  9732  05C3  00A5               	movwf	??_FlashPattern
  9733  05C4  0825               	movf	??_FlashPattern,w
  9734  05C5  00A0               	movwf	SetLight@_state
  9735  05C6  3003               	movlw	3
  9736  05C7  3186  26D1  3185   	fcall	_SetLight
  9737  05CA                     l2871:	
  9738                           
  9739                           ;PatternFlasher.c: 29:         update_stage = 0;
  9740  05CA  0020               	movlb	0	; select bank0
  9741  05CB  01EC               	clrf	_update_stage
  9742  05CC                     l528:	
  9743  05CC  0008               	return
  9744  05CD                     __end_of_FlashPattern:	
  9745                           
  9746                           	psect	text33
  9747  0CCB                     __ptext33:	
  9748 ;; *************** function _ms *****************
  9749 ;; Defined at:
  9750 ;;		line 7 in file "Time.c"
  9751 ;; Parameters:    Size  Location     Type
  9752 ;;		None
  9753 ;; Auto vars:     Size  Location     Type
  9754 ;;		None
  9755 ;; Return value:  Size  Location     Type
  9756 ;;                  4    0[BANK0 ] unsigned long 
  9757 ;; Registers used:
  9758 ;;		wreg
  9759 ;; Tracked objects:
  9760 ;;		On entry : 0/0
  9761 ;;		On exit  : 0/0
  9762 ;;		Unchanged: 0/0
  9763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9764 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9768 ;;Total ram usage:        4 bytes
  9769 ;; Hardware stack levels used:    1
  9770 ;; Hardware stack levels required when called:    6
  9771 ;; This function calls:
  9772 ;;		Nothing
  9773 ;; This function is called by:
  9774 ;;		_TurnSignalDone
  9775 ;;		_FlashPattern
  9776 ;; This function uses a non-reentrant model
  9777 ;;
  9778                           
  9779                           
  9780                           ;psect for function _ms
  9781  0CCB                     _ms:	
  9782  0CCB                     l2799:	
  9783                           ;incstack = 0
  9784                           ; Regs used in _ms: [wreg]
  9785                           
  9786                           
  9787                           ;Time.c: 9:     return cur_ms;
  9788  0CCB  0020               	movlb	0	; select bank0
  9789  0CCC  0867               	movf	_cur_ms+3,w	;volatile
  9790  0CCD  00A3               	movwf	?_ms+3
  9791  0CCE  0866               	movf	_cur_ms+2,w	;volatile
  9792  0CCF  00A2               	movwf	?_ms+2
  9793  0CD0  0865               	movf	_cur_ms+1,w	;volatile
  9794  0CD1  00A1               	movwf	?_ms+1
  9795  0CD2  0864               	movf	_cur_ms,w	;volatile
  9796  0CD3  00A0               	movwf	?_ms
  9797  0CD4                     l539:	
  9798  0CD4  0008               	return
  9799  0CD5                     __end_of_ms:	
  9800                           
  9801                           	psect	text34
  9802  06D1                     __ptext34:	
  9803 ;; *************** function _SetLight *****************
  9804 ;; Defined at:
  9805 ;;		line 12 in file "Lights.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;  light           1    wreg     const enum E6338
  9808 ;;  _state          1    0[BANK0 ] const _Bool 
  9809 ;; Auto vars:     Size  Location     Type
  9810 ;;  light           1    3[BANK0 ] const enum E6338
  9811 ;;  state           1    4[BANK0 ] _Bool 
  9812 ;; Return value:  Size  Location     Type
  9813 ;;                  1    wreg      void 
  9814 ;; Registers used:
  9815 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9816 ;; Tracked objects:
  9817 ;;		On entry : 0/0
  9818 ;;		On exit  : 0/0
  9819 ;;		Unchanged: 0/0
  9820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9821 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9823 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9824 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9825 ;;Total ram usage:        5 bytes
  9826 ;; Hardware stack levels used:    1
  9827 ;; Hardware stack levels required when called:    6
  9828 ;; This function calls:
  9829 ;;		Nothing
  9830 ;; This function is called by:
  9831 ;;		_SetOutputs
  9832 ;;		_FlashPattern
  9833 ;; This function uses a non-reentrant model
  9834 ;;
  9835                           
  9836                           
  9837                           ;psect for function _SetLight
  9838  06D1                     _SetLight:	
  9839                           
  9840                           ;incstack = 0
  9841                           ; Regs used in _SetLight: [wreg-fsr0h+status,2+status,0]
  9842                           ;SetLight@light stored from wreg
  9843  06D1  0020               	movlb	0	; select bank0
  9844  06D2  00A3               	movwf	SetLight@light
  9845  06D3                     l2311:	
  9846                           
  9847                           ;Lights.c: 12: void SetLight( const enum Light light, const _Bool _state );Lights.c: 13:
      +                           {;Lights.c: 14:     _Bool state = ( _state );
  9848  06D3  0820               	movf	SetLight@_state,w
  9849  06D4  00A1               	movwf	??_SetLight
  9850  06D5  0821               	movf	??_SetLight,w
  9851  06D6  00A4               	movwf	SetLight@state
  9852                           
  9853                           ;Lights.c: 16:     switch ( light )
  9854  06D7  2F2C               	goto	l2333
  9855  06D8                     l2313:	
  9856                           
  9857                           ;Lights.c: 19:             if ( PORTCbits.RC1 != state )
  9858  06D8  0C0E               	rrf	14,w	;volatile
  9859  06D9  3901               	andlw	1
  9860  06DA  0624               	xorwf	SetLight@state,w
  9861  06DB  1903               	skipnz
  9862  06DC  2EDE               	goto	u1091
  9863  06DD  2EDF               	goto	u1090
  9864  06DE                     u1091:	
  9865  06DE  2F42               	goto	l361
  9866  06DF                     u1090:	
  9867  06DF                     l2315:	
  9868  06DF  1003               	clrc
  9869  06E0  0022               	movlb	2	; select bank2
  9870  06E1  1C8E               	btfss	14,1	;volatile
  9871  06E2  1403               	setc
  9872  06E3  1803               	btfsc	3,0
  9873  06E4  2EE6               	goto	u1101
  9874  06E5  2EE9               	goto	u1100
  9875  06E6                     u1101:	
  9876  06E6  0022               	movlb	2	; select bank2
  9877  06E7  148E               	bsf	14,1	;volatile
  9878  06E8  2EEB               	goto	u1114
  9879  06E9                     u1100:	
  9880  06E9  0022               	movlb	2	; select bank2
  9881  06EA  108E               	bcf	14,1	;volatile
  9882  06EB                     u1114:	
  9883  06EB  2F42               	goto	l361
  9884  06EC                     l2317:	
  9885                           
  9886                           ;Lights.c: 23:             if ( PORTCbits.RC2 != state )
  9887  06EC  0C0E               	rrf	14,w	;volatile
  9888  06ED  0C89               	rrf	9,f
  9889  06EE  3901               	andlw	1
  9890  06EF  0624               	xorwf	SetLight@state,w
  9891  06F0  1903               	skipnz
  9892  06F1  2EF3               	goto	u1121
  9893  06F2  2EF4               	goto	u1120
  9894  06F3                     u1121:	
  9895  06F3  2F42               	goto	l361
  9896  06F4                     u1120:	
  9897  06F4                     l2319:	
  9898  06F4  1003               	clrc
  9899  06F5  0022               	movlb	2	; select bank2
  9900  06F6  1D0E               	btfss	14,2	;volatile
  9901  06F7  1403               	setc
  9902  06F8  1803               	btfsc	3,0
  9903  06F9  2EFB               	goto	u1131
  9904  06FA  2EFE               	goto	u1130
  9905  06FB                     u1131:	
  9906  06FB  0022               	movlb	2	; select bank2
  9907  06FC  150E               	bsf	14,2	;volatile
  9908  06FD  2F00               	goto	u1144
  9909  06FE                     u1130:	
  9910  06FE  0022               	movlb	2	; select bank2
  9911  06FF  110E               	bcf	14,2	;volatile
  9912  0700                     u1144:	
  9913  0700  2F42               	goto	l361
  9914  0701                     l2321:	
  9915                           
  9916                           ;Lights.c: 27:             if ( PORTCbits.RC3 != state )
  9917  0701  0C0E               	rrf	14,w	;volatile
  9918  0702  00A1               	movwf	??_SetLight
  9919  0703  0CA1               	rrf	??_SetLight,f
  9920  0704  0C21               	rrf	??_SetLight,w
  9921  0705  3901               	andlw	1
  9922  0706  0624               	xorwf	SetLight@state,w
  9923  0707  1903               	skipnz
  9924  0708  2F0A               	goto	u1151
  9925  0709  2F0B               	goto	u1150
  9926  070A                     u1151:	
  9927  070A  2F42               	goto	l361
  9928  070B                     u1150:	
  9929  070B                     l2323:	
  9930  070B  1003               	clrc
  9931  070C  0022               	movlb	2	; select bank2
  9932  070D  1D8E               	btfss	14,3	;volatile
  9933  070E  1403               	setc
  9934  070F  1803               	btfsc	3,0
  9935  0710  2F12               	goto	u1161
  9936  0711  2F15               	goto	u1160
  9937  0712                     u1161:	
  9938  0712  0022               	movlb	2	; select bank2
  9939  0713  158E               	bsf	14,3	;volatile
  9940  0714  2F17               	goto	u1174
  9941  0715                     u1160:	
  9942  0715  0022               	movlb	2	; select bank2
  9943  0716  118E               	bcf	14,3	;volatile
  9944  0717                     u1174:	
  9945  0717  2F42               	goto	l361
  9946  0718                     l2325:	
  9947                           
  9948                           ;Lights.c: 32:             if ( PORTCbits.RC4 != state )
  9949  0718  0E0E               	swapf	14,w	;volatile
  9950  0719  3901               	andlw	1
  9951  071A  0624               	xorwf	SetLight@state,w
  9952  071B  1903               	skipnz
  9953  071C  2F1E               	goto	u1181
  9954  071D  2F1F               	goto	u1180
  9955  071E                     u1181:	
  9956  071E  2F42               	goto	l361
  9957  071F                     u1180:	
  9958  071F                     l2327:	
  9959  071F  1003               	clrc
  9960  0720  0022               	movlb	2	; select bank2
  9961  0721  1E0E               	btfss	14,4	;volatile
  9962  0722  1403               	setc
  9963  0723  1803               	btfsc	3,0
  9964  0724  2F26               	goto	u1191
  9965  0725  2F29               	goto	u1190
  9966  0726                     u1191:	
  9967  0726  0022               	movlb	2	; select bank2
  9968  0727  160E               	bsf	14,4	;volatile
  9969  0728  2F2B               	goto	u1204
  9970  0729                     u1190:	
  9971  0729  0022               	movlb	2	; select bank2
  9972  072A  120E               	bcf	14,4	;volatile
  9973  072B                     u1204:	
  9974  072B  2F42               	goto	l361
  9975  072C                     l2333:	
  9976  072C  0823               	movf	SetLight@light,w
  9977  072D  00A1               	movwf	??_SetLight
  9978  072E  01A2               	clrf	??_SetLight+1
  9979                           
  9980                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9981                           ; Switch size 1, requested type "simple"
  9982                           ; Number of cases is 1, Range of values is 0 to 0
  9983                           ; switch strategies available:
  9984                           ; Name         Instructions Cycles
  9985                           ; simple_byte            4     3 (average)
  9986                           ; direct_byte            8     6 (fixed)
  9987                           ; jumptable            260     6 (fixed)
  9988                           ;	Chosen strategy is simple_byte
  9989  072F  0822               	movf	??_SetLight+1,w
  9990  0730  3A00               	xorlw	0	; case 0
  9991  0731  1903               	skipnz
  9992  0732  2F34               	goto	l2951
  9993  0733  2F18               	goto	l2325
  9994  0734                     l2951:	
  9995                           
  9996                           ; Switch size 1, requested type "simple"
  9997                           ; Number of cases is 4, Range of values is 0 to 3
  9998                           ; switch strategies available:
  9999                           ; Name         Instructions Cycles
 10000                           ; simple_byte           13     7 (average)
 10001                           ; direct_byte           14     6 (fixed)
 10002                           ; jumptable            260     6 (fixed)
 10003                           ;	Chosen strategy is simple_byte
 10004  0734  0821               	movf	??_SetLight,w
 10005  0735  3A00               	xorlw	0	; case 0
 10006  0736  1903               	skipnz
 10007  0737  2ED8               	goto	l2313
 10008  0738  3A01               	xorlw	1	; case 1
 10009  0739  1903               	skipnz
 10010  073A  2EEC               	goto	l2317
 10011  073B  3A03               	xorlw	3	; case 2
 10012  073C  1903               	skipnz
 10013  073D  2F01               	goto	l2321
 10014  073E  3A01               	xorlw	1	; case 3
 10015  073F  1903               	skipnz
 10016  0740  2F18               	goto	l2325
 10017  0741  2F18               	goto	l2325
 10018  0742                     l361:	
 10019  0742  0008               	return
 10020  0743                     __end_of_SetLight:	
 10021                           
 10022                           	psect	intentry
 10023  0004                     __pintentry:	
 10024 ;; *************** function _INTERRUPT_InterruptManager *****************
 10025 ;; Defined at:
 10026 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10027 ;; Parameters:    Size  Location     Type
 10028 ;;		None
 10029 ;; Auto vars:     Size  Location     Type
 10030 ;;		None
 10031 ;; Return value:  Size  Location     Type
 10032 ;;                  1    wreg      void 
 10033 ;; Registers used:
 10034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10035 ;; Tracked objects:
 10036 ;;		On entry : 0/0
 10037 ;;		On exit  : 0/0
 10038 ;;		Unchanged: 0/0
 10039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;Total ram usage:        0 bytes
 10045 ;; Hardware stack levels used:    1
 10046 ;; Hardware stack levels required when called:    5
 10047 ;; This function calls:
 10048 ;;		_PIN_MANAGER_IOC
 10049 ;;		_TMR1_ISR
 10050 ;; This function is called by:
 10051 ;;		Interrupt level 1
 10052 ;; This function uses a non-reentrant model
 10053 ;;
 10054                           
 10055  0004                     _INTERRUPT_InterruptManager:	
 10056                           
 10057                           ;incstack = 0
 10058  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 10059                           
 10060                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10061  0005  3180               	pagesel	$
 10062  0006                     i1l2539:	
 10063                           
 10064                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 10065  0006  0021               	movlb	1	; select bank1
 10066  0007  1E10               	btfss	16,4	;volatile
 10067  0008  280A               	goto	u139_21
 10068  0009  280B               	goto	u139_20
 10069  000A                     u139_21:	
 10070  000A  2814               	goto	i1l156
 10071  000B                     u139_20:	
 10072  000B                     i1l2541:	
 10073  000B  0020               	movlb	0	; select bank0
 10074  000C  1E10               	btfss	16,4	;volatile
 10075  000D  280F               	goto	u140_21
 10076  000E  2810               	goto	u140_20
 10077  000F                     u140_21:	
 10078  000F  2814               	goto	i1l156
 10079  0010                     u140_20:	
 10080  0010                     i1l2543:	
 10081                           
 10082                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 10083  0010  318C  2493  3180   	fcall	_PIN_MANAGER_IOC
 10084                           
 10085                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 10086  0013  2826               	goto	i1l162
 10087  0014                     i1l156:	
 10088                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 10089                           
 10090  0014  1F0B               	btfss	11,6	;volatile
 10091  0015  2817               	goto	u141_21
 10092  0016  2818               	goto	u141_20
 10093  0017                     u141_21:	
 10094  0017  2826               	goto	i1l162
 10095  0018                     u141_20:	
 10096  0018                     i1l2545:	
 10097                           
 10098                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 10099  0018  0021               	movlb	1	; select bank1
 10100  0019  1C11               	btfss	17,0	;volatile
 10101  001A  281C               	goto	u142_21
 10102  001B  281D               	goto	u142_20
 10103  001C                     u142_21:	
 10104  001C  2826               	goto	i1l161
 10105  001D                     u142_20:	
 10106  001D                     i1l2547:	
 10107  001D  0020               	movlb	0	; select bank0
 10108  001E  1C11               	btfss	17,0	;volatile
 10109  001F  2821               	goto	u143_21
 10110  0020  2822               	goto	u143_20
 10111  0021                     u143_21:	
 10112  0021  2826               	goto	i1l161
 10113  0022                     u143_20:	
 10114  0022                     i1l2549:	
 10115                           
 10116                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR1_ISR();
 10117  0022  3187  27EA  3180   	fcall	_TMR1_ISR
 10118                           
 10119                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 10120  0025  2826               	goto	i1l162
 10121  0026                     i1l161:	
 10122                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
 10123                           
 10124  0026                     i1l162:	
 10125  0026  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 10126  0027  0009               	retfie
 10127  0028                     __end_of_INTERRUPT_InterruptManager:	
 10128                           
 10129                           	psect	text36
 10130  07EA                     __ptext36:	
 10131 ;; *************** function _TMR1_ISR *****************
 10132 ;; Defined at:
 10133 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 10134 ;; Parameters:    Size  Location     Type
 10135 ;;		None
 10136 ;; Auto vars:     Size  Location     Type
 10137 ;;		None
 10138 ;; Return value:  Size  Location     Type
 10139 ;;                  1    wreg      void 
 10140 ;; Registers used:
 10141 ;;		wreg, status,2, status,0, pclath, cstack
 10142 ;; Tracked objects:
 10143 ;;		On entry : 0/0
 10144 ;;		On exit  : 0/0
 10145 ;;		Unchanged: 0/0
 10146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10151 ;;Total ram usage:        0 bytes
 10152 ;; Hardware stack levels used:    1
 10153 ;; Hardware stack levels required when called:    1
 10154 ;; This function calls:
 10155 ;;		Absolute function
 10156 ;;		_TMR1_DefaultInterruptHandler
 10157 ;;		_TMR1_WriteTimer
 10158 ;; This function is called by:
 10159 ;;		_INTERRUPT_InterruptManager
 10160 ;; This function uses a non-reentrant model
 10161 ;;
 10162                           
 10163                           
 10164                           ;psect for function _TMR1_ISR
 10165  07EA                     _TMR1_ISR:	
 10166  07EA                     i1l2437:	
 10167                           ;incstack = 0
 10168                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 10169                           
 10170                           
 10171                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
 10172  07EA  0020               	movlb	0	; select bank0
 10173  07EB  1011               	bcf	17,0	;volatile
 10174  07EC                     i1l2439:	
 10175                           
 10176                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
 10177  07EC  087D               	movf	_timer1ReloadVal+1,w	;volatile
 10178  07ED  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 10179  07EE  087C               	movf	_timer1ReloadVal,w	;volatile
 10180  07EF  00F0               	movwf	TMR1_WriteTimer@timerVal
 10181  07F0  318D  2528  3187   	fcall	_TMR1_WriteTimer
 10182  07F3                     i1l2441:	
 10183                           
 10184                           ;mcc_generated_files/tmr1.c: 165:     if(TMR1_InterruptHandler)
 10185  07F3  0021               	movlb	1	; select bank1
 10186  07F4  085B               	movf	_TMR1_InterruptHandler^(0+128),w
 10187  07F5  045C               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
 10188  07F6  1903               	btfsc	3,2
 10189  07F7  2FF9               	goto	u130_21
 10190  07F8  2FFA               	goto	u130_20
 10191  07F9                     u130_21:	
 10192  07F9  2FFF               	goto	i1l218
 10193  07FA                     u130_20:	
 10194  07FA                     i1l2443:	
 10195                           
 10196                           ;mcc_generated_files/tmr1.c: 166:     {;mcc_generated_files/tmr1.c: 167:         TMR1_In
      +                          terruptHandler();
 10197  07FA  085C               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
 10198  07FB  008A               	movwf	10
 10199  07FC  085B               	movf	_TMR1_InterruptHandler^(0+128),w
 10200  07FD  000A               	callw
 10201  07FE  3187               	pagesel	$
 10202  07FF                     i1l218:	
 10203  07FF  0008               	return
 10204  0800                     __end_of_TMR1_ISR:	
 10205                           
 10206                           	psect	text37
 10207  0D28                     __ptext37:	
 10208 ;; *************** function _TMR1_WriteTimer *****************
 10209 ;; Defined at:
 10210 ;;		line 120 in file "mcc_generated_files/tmr1.c"
 10211 ;; Parameters:    Size  Location     Type
 10212 ;;  timerVal        2    0[COMMON] unsigned short 
 10213 ;; Auto vars:     Size  Location     Type
 10214 ;;		None
 10215 ;; Return value:  Size  Location     Type
 10216 ;;                  1    wreg      void 
 10217 ;; Registers used:
 10218 ;;		wreg, status,2
 10219 ;; Tracked objects:
 10220 ;;		On entry : 0/0
 10221 ;;		On exit  : 0/0
 10222 ;;		Unchanged: 0/0
 10223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10224 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;Total ram usage:        2 bytes
 10229 ;; Hardware stack levels used:    1
 10230 ;; This function calls:
 10231 ;;		Nothing
 10232 ;; This function is called by:
 10233 ;;		_TMR1_ISR
 10234 ;;		_TMR1_Reload
 10235 ;; This function uses a non-reentrant model
 10236 ;;
 10237                           
 10238                           
 10239                           ;psect for function _TMR1_WriteTimer
 10240  0D28                     _TMR1_WriteTimer:	
 10241  0D28                     i1l2379:	
 10242                           ;incstack = 0
 10243                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 10244                           
 10245                           
 10246                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.T1SYNC == 1)
 10247  0D28  0020               	movlb	0	; select bank0
 10248  0D29  1D1B               	btfss	27,2	;volatile
 10249  0D2A  2D2C               	goto	u126_21
 10250  0D2B  2D2D               	goto	u126_20
 10251  0D2C                     u126_21:	
 10252  0D2C  2D34               	goto	i1l2389
 10253  0D2D                     u126_20:	
 10254  0D2D                     i1l2381:	
 10255                           
 10256                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
 10257  0D2D  101B               	bcf	27,0	;volatile
 10258  0D2E                     i1l2383:	
 10259                           
 10260                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
 10261  0D2E  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 10262  0D2F  009A               	movwf	26	;volatile
 10263  0D30                     i1l2385:	
 10264                           
 10265                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
 10266  0D30  0870               	movf	TMR1_WriteTimer@timerVal,w
 10267  0D31  0099               	movwf	25	;volatile
 10268  0D32                     i1l2387:	
 10269                           
 10270                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
 10271  0D32  141B               	bsf	27,0	;volatile
 10272                           
 10273                           ;mcc_generated_files/tmr1.c: 133:     }
 10274  0D33  2D38               	goto	i1l205
 10275  0D34                     i1l2389:	
 10276                           
 10277                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
 10278  0D34  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 10279  0D35  009A               	movwf	26	;volatile
 10280  0D36                     i1l2391:	
 10281                           
 10282                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
 10283  0D36  0870               	movf	TMR1_WriteTimer@timerVal,w
 10284  0D37  0099               	movwf	25	;volatile
 10285  0D38                     i1l205:	
 10286  0D38  0008               	return
 10287  0D39                     __end_of_TMR1_WriteTimer:	
 10288                           
 10289                           	psect	text38
 10290  0CC1                     __ptext38:	
 10291 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 10292 ;; Defined at:
 10293 ;;		line 176 in file "mcc_generated_files/tmr1.c"
 10294 ;; Parameters:    Size  Location     Type
 10295 ;;		None
 10296 ;; Auto vars:     Size  Location     Type
 10297 ;;		None
 10298 ;; Return value:  Size  Location     Type
 10299 ;;                  1    wreg      void 
 10300 ;; Registers used:
 10301 ;;		wreg
 10302 ;; Tracked objects:
 10303 ;;		On entry : 0/0
 10304 ;;		On exit  : 0/0
 10305 ;;		Unchanged: 0/0
 10306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;Total ram usage:        0 bytes
 10312 ;; Hardware stack levels used:    1
 10313 ;; This function calls:
 10314 ;;		Nothing
 10315 ;; This function is called by:
 10316 ;;		_TMR1_Initialize
 10317 ;;		_TMR1_ISR
 10318 ;; This function uses a non-reentrant model
 10319 ;;
 10320                           
 10321                           
 10322                           ;psect for function _TMR1_DefaultInterruptHandler
 10323  0CC1                     _TMR1_DefaultInterruptHandler:	
 10324  0CC1                     i1l2393:	
 10325                           ;incstack = 0
 10326                           ; Regs used in _TMR1_DefaultInterruptHandler: [wreg]
 10327                           
 10328                           
 10329                           ;mcc_generated_files/tmr1.c: 177:     cur_ms++;
 10330  0CC1  3001               	movlw	1
 10331  0CC2  0020               	movlb	0	; select bank0
 10332  0CC3  07E4               	addwf	_cur_ms,f	;volatile
 10333  0CC4  3000               	movlw	0
 10334  0CC5  3DE5               	addwfc	_cur_ms+1,f	;volatile
 10335  0CC6  3000               	movlw	0
 10336  0CC7  3DE6               	addwfc	_cur_ms+2,f	;volatile
 10337  0CC8  3000               	movlw	0
 10338  0CC9  3DE7               	addwfc	_cur_ms+3,f	;volatile
 10339  0CCA                     i1l224:	
 10340  0CCA  0008               	return
 10341  0CCB                     __end_of_TMR1_DefaultInterruptHandler:	
 10342                           
 10343                           	psect	text39
 10344  0C93                     __ptext39:	
 10345 ;; *************** function _PIN_MANAGER_IOC *****************
 10346 ;; Defined at:
 10347 ;;		line 120 in file "mcc_generated_files/pin_manager.c"
 10348 ;; Parameters:    Size  Location     Type
 10349 ;;		None
 10350 ;; Auto vars:     Size  Location     Type
 10351 ;;		None
 10352 ;; Return value:  Size  Location     Type
 10353 ;;                  1    wreg      void 
 10354 ;; Registers used:
 10355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10356 ;; Tracked objects:
 10357 ;;		On entry : 0/0
 10358 ;;		On exit  : 0/0
 10359 ;;		Unchanged: 0/0
 10360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10365 ;;Total ram usage:        0 bytes
 10366 ;; Hardware stack levels used:    1
 10367 ;; Hardware stack levels required when called:    4
 10368 ;; This function calls:
 10369 ;;		_IOCCF0_ISR
 10370 ;; This function is called by:
 10371 ;;		_INTERRUPT_InterruptManager
 10372 ;; This function uses a non-reentrant model
 10373 ;;
 10374                           
 10375                           
 10376                           ;psect for function _PIN_MANAGER_IOC
 10377  0C93                     _PIN_MANAGER_IOC:	
 10378  0C93                     i1l2433:	
 10379                           ;incstack = 0
 10380                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10381                           
 10382                           
 10383                           ;mcc_generated_files/pin_manager.c: 123:     if(IOCCFbits.IOCCF0 == 1)
 10384  0C93  0027               	movlb	7	; select bank7
 10385  0C94  1C19               	btfss	25,0	;volatile
 10386  0C95  2C97               	goto	u129_21
 10387  0C96  2C98               	goto	u129_20
 10388  0C97                     u129_21:	
 10389  0C97  2C9B               	goto	i1l117
 10390  0C98                     u129_20:	
 10391  0C98                     i1l2435:	
 10392                           
 10393                           ;mcc_generated_files/pin_manager.c: 124:     {;mcc_generated_files/pin_manager.c: 125:  
      +                                 IOCCF0_ISR();
 10394  0C98  318C  24F8  318C   	fcall	_IOCCF0_ISR
 10395  0C9B                     i1l117:	
 10396  0C9B  0008               	return
 10397  0C9C                     __end_of_PIN_MANAGER_IOC:	
 10398                           
 10399                           	psect	text40
 10400  0CF8                     __ptext40:	
 10401 ;; *************** function _IOCCF0_ISR *****************
 10402 ;; Defined at:
 10403 ;;		line 132 in file "mcc_generated_files/pin_manager.c"
 10404 ;; Parameters:    Size  Location     Type
 10405 ;;		None
 10406 ;; Auto vars:     Size  Location     Type
 10407 ;;		None
 10408 ;; Return value:  Size  Location     Type
 10409 ;;                  1    wreg      void 
 10410 ;; Registers used:
 10411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10412 ;; Tracked objects:
 10413 ;;		On entry : 0/0
 10414 ;;		On exit  : 0/0
 10415 ;;		Unchanged: 0/0
 10416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10421 ;;Total ram usage:        0 bytes
 10422 ;; Hardware stack levels used:    1
 10423 ;; Hardware stack levels required when called:    3
 10424 ;; This function calls:
 10425 ;;		Absolute function
 10426 ;;		_TripTurnSignal
 10427 ;; This function is called by:
 10428 ;;		_PIN_MANAGER_IOC
 10429 ;; This function uses a non-reentrant model
 10430 ;;
 10431                           
 10432                           
 10433                           ;psect for function _IOCCF0_ISR
 10434  0CF8                     _IOCCF0_ISR:	
 10435  0CF8                     i1l2371:	
 10436                           ;incstack = 0
 10437                           ; Regs used in _IOCCF0_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10438                           
 10439                           
 10440                           ;mcc_generated_files/pin_manager.c: 137:     if(IOCCF0_InterruptHandler)
 10441  0CF8  0021               	movlb	1	; select bank1
 10442  0CF9  085D               	movf	_IOCCF0_InterruptHandler^(0+128),w
 10443  0CFA  045E               	iorwf	(_IOCCF0_InterruptHandler+1)^(0+128),w
 10444  0CFB  1903               	btfsc	3,2
 10445  0CFC  2CFE               	goto	u125_21
 10446  0CFD  2CFF               	goto	u125_20
 10447  0CFE                     u125_21:	
 10448  0CFE  2D04               	goto	i1l2375
 10449  0CFF                     u125_20:	
 10450  0CFF                     i1l2373:	
 10451                           
 10452                           ;mcc_generated_files/pin_manager.c: 138:     {;mcc_generated_files/pin_manager.c: 139:  
      +                                 IOCCF0_InterruptHandler();
 10453  0CFF  085E               	movf	(_IOCCF0_InterruptHandler+1)^(0+128),w
 10454  0D00  008A               	movwf	10
 10455  0D01  085D               	movf	_IOCCF0_InterruptHandler^(0+128),w
 10456  0D02  000A               	callw
 10457  0D03  318C               	pagesel	$
 10458  0D04                     i1l2375:	
 10459                           
 10460                           ;mcc_generated_files/pin_manager.c: 141:     IOCCFbits.IOCCF0 = 0;
 10461  0D04  0027               	movlb	7	; select bank7
 10462  0D05  1019               	bcf	25,0	;volatile
 10463  0D06                     i1l121:	
 10464  0D06  0008               	return
 10465  0D07                     __end_of_IOCCF0_ISR:	
 10466                           
 10467                           	psect	text41
 10468  0D17                     __ptext41:	
 10469 ;; *************** function _TripTurnSignal *****************
 10470 ;; Defined at:
 10471 ;;		line 8 in file "TurnSignal.c"
 10472 ;; Parameters:    Size  Location     Type
 10473 ;;		None
 10474 ;; Auto vars:     Size  Location     Type
 10475 ;;		None
 10476 ;; Return value:  Size  Location     Type
 10477 ;;                  1    wreg      void 
 10478 ;; Registers used:
 10479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10480 ;; Tracked objects:
 10481 ;;		On entry : 0/0
 10482 ;;		On exit  : 0/0
 10483 ;;		Unchanged: 0/0
 10484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10489 ;;Total ram usage:        0 bytes
 10490 ;; Hardware stack levels used:    1
 10491 ;; Hardware stack levels required when called:    2
 10492 ;; This function calls:
 10493 ;;		i1_SetOutputs
 10494 ;;		i1_ms
 10495 ;; This function is called by:
 10496 ;;		_PIN_MANAGER_Initialize
 10497 ;;		_IOCCF0_ISR
 10498 ;; This function uses a non-reentrant model
 10499 ;;
 10500                           
 10501                           
 10502                           ;psect for function _TripTurnSignal
 10503  0D17                     _TripTurnSignal:	
 10504  0D17                     i1l2339:	
 10505                           ;incstack = 0
 10506                           ; Regs used in _TripTurnSignal: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10507                           
 10508                           
 10509                           ;TurnSignal.c: 10:     SetOutputs( 0 );
 10510  0D17  3000               	movlw	0
 10511  0D18  318D  25F6  318D   	fcall	i1_SetOutputs
 10512  0D1B                     i1l2341:	
 10513                           
 10514                           ;TurnSignal.c: 11:     ts_trigger_time = ms();
 10515  0D1B  318C  24B7  318D   	fcall	i1_ms
 10516  0D1E  0873               	movf	?i1_ms+3,w
 10517  0D1F  0021               	movlb	1	; select bank1
 10518  0D20  00C7               	movwf	(_ts_trigger_time+3)^(0+128)
 10519  0D21  0872               	movf	?i1_ms+2,w
 10520  0D22  00C6               	movwf	(_ts_trigger_time+2)^(0+128)
 10521  0D23  0871               	movf	?i1_ms+1,w
 10522  0D24  00C5               	movwf	(_ts_trigger_time+1)^(0+128)
 10523  0D25  0870               	movf	?i1_ms,w
 10524  0D26  00C4               	movwf	_ts_trigger_time^(0+128)
 10525  0D27                     i1l395:	
 10526  0D27  0008               	return
 10527  0D28                     __end_of_TripTurnSignal:	
 10528                           
 10529                           	psect	text42
 10530  0CB7                     __ptext42:	
 10531 ;; *************** function i1_ms *****************
 10532 ;; Defined at:
 10533 ;;		line 7 in file "Time.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;		None
 10536 ;; Auto vars:     Size  Location     Type
 10537 ;;		None
 10538 ;; Return value:  Size  Location     Type
 10539 ;;                  4    0[COMMON] unsigned long 
 10540 ;; Registers used:
 10541 ;;		wreg
 10542 ;; Tracked objects:
 10543 ;;		On entry : 0/0
 10544 ;;		On exit  : 0/0
 10545 ;;		Unchanged: 0/0
 10546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10547 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;Total ram usage:        4 bytes
 10552 ;; Hardware stack levels used:    1
 10553 ;; This function calls:
 10554 ;;		Nothing
 10555 ;; This function is called by:
 10556 ;;		_TripTurnSignal
 10557 ;; This function uses a non-reentrant model
 10558 ;;
 10559                           
 10560                           
 10561                           ;psect for function i1_ms
 10562  0CB7                     i1_ms:	
 10563  0CB7                     i1l2057:	
 10564                           ;incstack = 0
 10565                           ; Regs used in i1_ms: [wreg]
 10566                           
 10567                           
 10568                           ;Time.c: 9:     return cur_ms;
 10569  0CB7  0020               	movlb	0	; select bank0
 10570  0CB8  0867               	movf	_cur_ms+3,w	;volatile
 10571  0CB9  00F3               	movwf	?i1_ms+3
 10572  0CBA  0866               	movf	_cur_ms+2,w	;volatile
 10573  0CBB  00F2               	movwf	?i1_ms+2
 10574  0CBC  0865               	movf	_cur_ms+1,w	;volatile
 10575  0CBD  00F1               	movwf	?i1_ms+1
 10576  0CBE  0864               	movf	_cur_ms,w	;volatile
 10577  0CBF  00F0               	movwf	?i1_ms
 10578  0CC0                     i1l539:	
 10579  0CC0  0008               	return
 10580  0CC1                     __end_ofi1_ms:	
 10581                           
 10582                           	psect	text43
 10583  0DF6                     __ptext43:	
 10584 ;; *************** function i1_SetOutputs *****************
 10585 ;; Defined at:
 10586 ;;		line 39 in file "Lights.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;  state           1    wreg     const _Bool 
 10589 ;; Auto vars:     Size  Location     Type
 10590 ;;  state           1    6[COMMON] const _Bool 
 10591 ;; Return value:  Size  Location     Type
 10592 ;;                  1    wreg      void 
 10593 ;; Registers used:
 10594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10595 ;; Tracked objects:
 10596 ;;		On entry : 0/0
 10597 ;;		On exit  : 0/0
 10598 ;;		Unchanged: 0/0
 10599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;Total ram usage:        2 bytes
 10605 ;; Hardware stack levels used:    1
 10606 ;; Hardware stack levels required when called:    1
 10607 ;; This function calls:
 10608 ;;		i1_SetLight
 10609 ;; This function is called by:
 10610 ;;		_TripTurnSignal
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           
 10615                           ;psect for function i1_SetOutputs
 10616  0DF6                     i1_SetOutputs:	
 10617                           
 10618                           ;incstack = 0
 10619                           ; Regs used in i1_SetOutputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10620                           ;i1SetOutputs@state stored from wreg
 10621  0DF6  00F6               	movwf	i1SetOutputs@state
 10622  0DF7                     i1l2055:	
 10623                           
 10624                           ;Lights.c: 39: void SetOutputs( const _Bool state );Lights.c: 40: {;Lights.c: 41:     Se
      +                          tLight( L1, state );
 10625  0DF7  0876               	movf	i1SetOutputs@state,w
 10626  0DF8  00F5               	movwf	??i1_SetOutputs
 10627  0DF9  0875               	movf	??i1_SetOutputs,w
 10628  0DFA  00F0               	movwf	i1SetLight@_state
 10629  0DFB  3000               	movlw	0
 10630  0DFC  3186  265C  318D   	fcall	i1_SetLight
 10631                           
 10632                           ;Lights.c: 42:     SetLight( L2, state );
 10633  0DFF  0876               	movf	i1SetOutputs@state,w
 10634  0E00  00F5               	movwf	??i1_SetOutputs
 10635  0E01  0875               	movf	??i1_SetOutputs,w
 10636  0E02  00F0               	movwf	i1SetLight@_state
 10637  0E03  3001               	movlw	1
 10638  0E04  3186  265C  318D   	fcall	i1_SetLight
 10639                           
 10640                           ;Lights.c: 43:     SetLight( L3, state );
 10641  0E07  0876               	movf	i1SetOutputs@state,w
 10642  0E08  00F5               	movwf	??i1_SetOutputs
 10643  0E09  0875               	movf	??i1_SetOutputs,w
 10644  0E0A  00F0               	movwf	i1SetLight@_state
 10645  0E0B  3002               	movlw	2
 10646  0E0C  3186  265C  318D   	fcall	i1_SetLight
 10647                           
 10648                           ;Lights.c: 44:     SetLight( L4, state );
 10649  0E0F  0876               	movf	i1SetOutputs@state,w
 10650  0E10  00F5               	movwf	??i1_SetOutputs
 10651  0E11  0875               	movf	??i1_SetOutputs,w
 10652  0E12  00F0               	movwf	i1SetLight@_state
 10653  0E13  3003               	movlw	3
 10654  0E14  3186  265C  318D   	fcall	i1_SetLight
 10655  0E17                     i1l364:	
 10656  0E17  0008               	return
 10657  0E18                     __end_ofi1_SetOutputs:	
 10658                           
 10659                           	psect	text44
 10660  065C                     __ptext44:	
 10661 ;; *************** function i1_SetLight *****************
 10662 ;; Defined at:
 10663 ;;		line 12 in file "Lights.c"
 10664 ;; Parameters:    Size  Location     Type
 10665 ;;  light           1    wreg     const enum E6338
 10666 ;;  _state          1    0[COMMON] const _Bool 
 10667 ;; Auto vars:     Size  Location     Type
 10668 ;;  light           1    3[COMMON] const enum E6338
 10669 ;;  SetLight        1    4[COMMON] _Bool 
 10670 ;; Return value:  Size  Location     Type
 10671 ;;                  1    wreg      void 
 10672 ;; Registers used:
 10673 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10674 ;; Tracked objects:
 10675 ;;		On entry : 0/0
 10676 ;;		On exit  : 0/0
 10677 ;;		Unchanged: 0/0
 10678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10679 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10680 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10681 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10682 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10683 ;;Total ram usage:        5 bytes
 10684 ;; Hardware stack levels used:    1
 10685 ;; This function calls:
 10686 ;;		Nothing
 10687 ;; This function is called by:
 10688 ;;		i1_SetOutputs
 10689 ;; This function uses a non-reentrant model
 10690 ;;
 10691                           
 10692                           
 10693                           ;psect for function i1_SetLight
 10694  065C                     i1_SetLight:	
 10695                           
 10696                           ;incstack = 0
 10697                           ; Regs used in i1_SetLight: [wreg-fsr0h+status,2+status,0]
 10698                           ;i1SetLight@light stored from wreg
 10699  065C  00F3               	movwf	i1SetLight@light
 10700  065D                     i1l1965:	
 10701                           
 10702                           ;Lights.c: 12: void SetLight( const enum Light light, const _Bool _state );Lights.c: 13:
      +                           {;Lights.c: 14:     _Bool state = ( _state );
 10703  065D  0870               	movf	i1SetLight@_state,w
 10704  065E  00F1               	movwf	??i1_SetLight
 10705  065F  0871               	movf	??i1_SetLight,w
 10706  0660  00F4               	movwf	i1SetLight@state
 10707                           
 10708                           ;Lights.c: 16:     switch ( light )
 10709  0661  2EBA               	goto	i1l1987
 10710  0662                     i1l1967:	
 10711                           
 10712                           ;Lights.c: 19:             if ( PORTCbits.RC1 != state )
 10713  0662  0020               	movlb	0	; select bank0
 10714  0663  0C0E               	rrf	14,w	;volatile
 10715  0664  3901               	andlw	1
 10716  0665  0674               	xorwf	i1SetLight@state,w
 10717  0666  1903               	skipnz
 10718  0667  2E69               	goto	u76_21
 10719  0668  2E6A               	goto	u76_20
 10720  0669                     u76_21:	
 10721  0669  2ED0               	goto	i1l361
 10722  066A                     u76_20:	
 10723  066A                     i1l1969:	
 10724  066A  1003               	clrc
 10725  066B  0022               	movlb	2	; select bank2
 10726  066C  1C8E               	btfss	14,1	;volatile
 10727  066D  1403               	setc
 10728  066E  1803               	btfsc	3,0
 10729  066F  2E71               	goto	u77_21
 10730  0670  2E74               	goto	u77_20
 10731  0671                     u77_21:	
 10732  0671  0022               	movlb	2	; select bank2
 10733  0672  148E               	bsf	14,1	;volatile
 10734  0673  2E76               	goto	u78_24
 10735  0674                     u77_20:	
 10736  0674  0022               	movlb	2	; select bank2
 10737  0675  108E               	bcf	14,1	;volatile
 10738  0676                     u78_24:	
 10739  0676  2ED0               	goto	i1l361
 10740  0677                     i1l1971:	
 10741                           
 10742                           ;Lights.c: 23:             if ( PORTCbits.RC2 != state )
 10743  0677  0020               	movlb	0	; select bank0
 10744  0678  0C0E               	rrf	14,w	;volatile
 10745  0679  0C89               	rrf	9,f
 10746  067A  3901               	andlw	1
 10747  067B  0674               	xorwf	i1SetLight@state,w
 10748  067C  1903               	skipnz
 10749  067D  2E7F               	goto	u79_21
 10750  067E  2E80               	goto	u79_20
 10751  067F                     u79_21:	
 10752  067F  2ED0               	goto	i1l361
 10753  0680                     u79_20:	
 10754  0680                     i1l1973:	
 10755  0680  1003               	clrc
 10756  0681  0022               	movlb	2	; select bank2
 10757  0682  1D0E               	btfss	14,2	;volatile
 10758  0683  1403               	setc
 10759  0684  1803               	btfsc	3,0
 10760  0685  2E87               	goto	u80_21
 10761  0686  2E8A               	goto	u80_20
 10762  0687                     u80_21:	
 10763  0687  0022               	movlb	2	; select bank2
 10764  0688  150E               	bsf	14,2	;volatile
 10765  0689  2E8C               	goto	u81_24
 10766  068A                     u80_20:	
 10767  068A  0022               	movlb	2	; select bank2
 10768  068B  110E               	bcf	14,2	;volatile
 10769  068C                     u81_24:	
 10770  068C  2ED0               	goto	i1l361
 10771  068D                     i1l1975:	
 10772                           
 10773                           ;Lights.c: 27:             if ( PORTCbits.RC3 != state )
 10774  068D  0020               	movlb	0	; select bank0
 10775  068E  0C0E               	rrf	14,w	;volatile
 10776  068F  00F1               	movwf	??i1_SetLight
 10777  0690  0CF1               	rrf	??i1_SetLight,f
 10778  0691  0C71               	rrf	??i1_SetLight,w
 10779  0692  3901               	andlw	1
 10780  0693  0674               	xorwf	i1SetLight@state,w
 10781  0694  1903               	skipnz
 10782  0695  2E97               	goto	u82_21
 10783  0696  2E98               	goto	u82_20
 10784  0697                     u82_21:	
 10785  0697  2ED0               	goto	i1l361
 10786  0698                     u82_20:	
 10787  0698                     i1l1977:	
 10788  0698  1003               	clrc
 10789  0699  0022               	movlb	2	; select bank2
 10790  069A  1D8E               	btfss	14,3	;volatile
 10791  069B  1403               	setc
 10792  069C  1803               	btfsc	3,0
 10793  069D  2E9F               	goto	u83_21
 10794  069E  2EA2               	goto	u83_20
 10795  069F                     u83_21:	
 10796  069F  0022               	movlb	2	; select bank2
 10797  06A0  158E               	bsf	14,3	;volatile
 10798  06A1  2EA4               	goto	u84_24
 10799  06A2                     u83_20:	
 10800  06A2  0022               	movlb	2	; select bank2
 10801  06A3  118E               	bcf	14,3	;volatile
 10802  06A4                     u84_24:	
 10803  06A4  2ED0               	goto	i1l361
 10804  06A5                     i1l1979:	
 10805                           
 10806                           ;Lights.c: 32:             if ( PORTCbits.RC4 != state )
 10807  06A5  0020               	movlb	0	; select bank0
 10808  06A6  0E0E               	swapf	14,w	;volatile
 10809  06A7  3901               	andlw	1
 10810  06A8  0674               	xorwf	i1SetLight@state,w
 10811  06A9  1903               	skipnz
 10812  06AA  2EAC               	goto	u85_21
 10813  06AB  2EAD               	goto	u85_20
 10814  06AC                     u85_21:	
 10815  06AC  2ED0               	goto	i1l361
 10816  06AD                     u85_20:	
 10817  06AD                     i1l1981:	
 10818  06AD  1003               	clrc
 10819  06AE  0022               	movlb	2	; select bank2
 10820  06AF  1E0E               	btfss	14,4	;volatile
 10821  06B0  1403               	setc
 10822  06B1  1803               	btfsc	3,0
 10823  06B2  2EB4               	goto	u86_21
 10824  06B3  2EB7               	goto	u86_20
 10825  06B4                     u86_21:	
 10826  06B4  0022               	movlb	2	; select bank2
 10827  06B5  160E               	bsf	14,4	;volatile
 10828  06B6  2EB9               	goto	u87_24
 10829  06B7                     u86_20:	
 10830  06B7  0022               	movlb	2	; select bank2
 10831  06B8  120E               	bcf	14,4	;volatile
 10832  06B9                     u87_24:	
 10833  06B9  2ED0               	goto	i1l361
 10834  06BA                     i1l1987:	
 10835  06BA  0873               	movf	i1SetLight@light,w
 10836  06BB  00F1               	movwf	??i1_SetLight
 10837  06BC  01F2               	clrf	??i1_SetLight+1
 10838                           
 10839                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10840                           ; Switch size 1, requested type "simple"
 10841                           ; Number of cases is 1, Range of values is 0 to 0
 10842                           ; switch strategies available:
 10843                           ; Name         Instructions Cycles
 10844                           ; simple_byte            4     3 (average)
 10845                           ; direct_byte            8     6 (fixed)
 10846                           ; jumptable            260     6 (fixed)
 10847                           ;	Chosen strategy is simple_byte
 10848  06BD  0872               	movf	??i1_SetLight+1,w
 10849  06BE  3A00               	xorlw	0	; case 0
 10850  06BF  1903               	skipnz
 10851  06C0  2EC2               	goto	i1l2953
 10852  06C1  2EA5               	goto	i1l1979
 10853  06C2                     i1l2953:	
 10854                           
 10855                           ; Switch size 1, requested type "simple"
 10856                           ; Number of cases is 4, Range of values is 0 to 3
 10857                           ; switch strategies available:
 10858                           ; Name         Instructions Cycles
 10859                           ; simple_byte           13     7 (average)
 10860                           ; direct_byte           14     6 (fixed)
 10861                           ; jumptable            260     6 (fixed)
 10862                           ;	Chosen strategy is simple_byte
 10863  06C2  0871               	movf	??i1_SetLight,w
 10864  06C3  3A00               	xorlw	0	; case 0
 10865  06C4  1903               	skipnz
 10866  06C5  2E62               	goto	i1l1967
 10867  06C6  3A01               	xorlw	1	; case 1
 10868  06C7  1903               	skipnz
 10869  06C8  2E77               	goto	i1l1971
 10870  06C9  3A03               	xorlw	3	; case 2
 10871  06CA  1903               	skipnz
 10872  06CB  2E8D               	goto	i1l1975
 10873  06CC  3A01               	xorlw	1	; case 3
 10874  06CD  1903               	skipnz
 10875  06CE  2EA5               	goto	i1l1979
 10876  06CF  2EA5               	goto	i1l1979
 10877  06D0                     i1l361:	
 10878  06D0  0008               	return
 10879  06D1                     __end_ofi1_SetLight:	
 10880  007E                     btemp	set	126	;btemp
 10881  007E                     int$flags	set	126
 10882  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        32
    BSS         61
    Persistent  38
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     68      79
    BANK1            80      0      63
    BANK2            80      0      18
    BANK3             0      0       0
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0
    BANK7             0      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    ActivePattern@p.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    stage_stash.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_stash.first_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    stage_stash.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_stash.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.patterns.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.patterns.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_CopyStageData.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_ConstructStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewPattern.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewPattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ?_NewStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_right.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_right	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_left.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@lower_left	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitLowerPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK2[18]), NULL(NULL[0]), 

    InitUpperLowerPattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@lower.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@lower	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@upper.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@upper	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitUpperLowerPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK2[18]), NULL(NULL[0]), 

    InitXStrobePattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_2_3.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_2_3	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_1_4.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@diag_1_4	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitXStrobePattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK2[18]), NULL(NULL[0]), 

    InitWigwagPattern@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@off.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@off	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@right_side_on.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@right_side_on	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@left_side_on.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@left_side_on	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitWigwagPattern@pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK2[18]), NULL(NULL[0]), 

    AppendStage@last_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@last_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@last_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AppendStage@head	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStageData.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__CopyStageData	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@source.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@dest.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@source	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    CopyStageData@dest	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__ConstructStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__ConstructStage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@new_stage.next.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@next	PTR struct Stage size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    ConstructStage@states	PTR const _Bool  size(1) Largest target is 4
		 -> InitLowerPattern@lower_right_states(BANK0[4]), InitLowerPattern@lower_left_states(BANK0[4]), InitUpperLowerPattern@lower_states(BANK0[4]), InitUpperLowerPattern@upper_states(BANK0[4]), 
		 -> InitXStrobePattern@diag_2_3_states(BANK0[4]), InitXStrobePattern@diag_1_4_states(BANK0[4]), InitWigwagPattern@right_side_states(BANK0[4]), InitWigwagPattern@left_side_states(BANK0[4]), 

    ConstructStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ConstructStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern.first_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewPattern@new_pattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK2[18]), 

    sp__NewStage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewStage@new_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NewStage@new_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), 

    sp__NewStage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AssignLightStates@stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    AssignLightStates@states	PTR const _Bool  size(1) Largest target is 4
		 -> InitLowerPattern@lower_right_states(BANK0[4]), InitLowerPattern@lower_left_states(BANK0[4]), InitUpperLowerPattern@lower_states(BANK0[4]), InitUpperLowerPattern@upper_states(BANK0[4]), 
		 -> InitXStrobePattern@diag_2_3_states(BANK0[4]), InitXStrobePattern@diag_1_4_states(BANK0[4]), InitWigwagPattern@right_side_states(BANK0[4]), InitWigwagPattern@left_side_states(BANK0[4]), 
		 -> NewStage@init_states(BANK0[4]), 

    AssignLightStates@stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NextPattern@p_selector.current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NextPattern@p_selector.patterns.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NextPattern@p_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    NextPattern@p_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK2[18]), NULL(NULL[0]), 

    NextPattern@p_selector	PTR volatile struct PatternSelector size(2) Largest target is 19
		 -> pattern_selector(BANK1[19]), 

    sp__ActivePattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK2[18]), NULL(NULL[0]), 

    ActivePattern@p.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    ActivePattern@p.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK2[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.current_stage.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S447Stage$next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns.next	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S457Pattern$first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns.first_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    sp__NewPattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK2[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    InitPatternSelector@p_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK2[18]), NULL(NULL[0]), 

    InitPatternSelector@p_selector	PTR volatile struct PatternSelector size(2) Largest target is 19
		 -> pattern_selector(BANK1[19]), 

    sp__NextPattern	PTR struct Pattern size(2) Largest target is 18
		 -> pattern_stash(BANK2[18]), NULL(NULL[0]), 

    S460PatternSelector$current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    pattern_selector.current_stage	PTR struct Stage size(2) Largest target is 768
		 -> stage_stash(BIGRAM[768]), NULL(NULL[0]), 

    S460PatternSelector$patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK2[18]), NULL(NULL[0]), 

    pattern_selector.patterns	PTR struct Pattern[6] size(2) Largest target is 18
		 -> pattern_stash(BANK2[18]), NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    IOCCF0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TripTurnSignal(), 

    IOCCF0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TripTurnSignal(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    _TripTurnSignal->i1_SetOutputs
    i1_SetOutputs->i1_SetLight

Critical Paths under _main in BANK0

    _setup->_InitPatternSelector
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF0_SetInterruptHandler
    _InitPatternSelector->_InitLowerPattern
    _InitPatternSelector->_InitUpperLowerPattern
    _InitPatternSelector->_InitWigwagPattern
    _InitPatternSelector->_InitXStrobePattern
    _NewPattern->_NewStage
    _InitXStrobePattern->_AppendStage
    _InitWigwagPattern->_AppendStage
    _InitUpperLowerPattern->_AppendStage
    _InitLowerPattern->_AppendStage
    _CopyStageData->_NewStage
    _ConstructStage->_NewStage
    _NewStage->_AssignLightStates
    _AppendStage->_CopyStageData
    _EEPROM_GetSavedPattern->_eeprom_read
    _TurnSignalDone->_abs
    _abs->_ms
    _SetOutputs->_SetLight
    _NextPattern->_EEPROM_SavePattern
    _EEPROM_SavePattern->_eeprom_write
    _FlashPattern->_SetLight

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   46725
                                             67 BANK0      1     1      0
                       _FlashPattern
                        _NextPattern
           _PatternCycleInputChanged
                     _TurnSignalDone
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   44299
                _InitPatternSelector
                  _SYSTEM_Initialize
                         _SetOutputs
                    _TMR1_Initialize
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     242
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     121
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0     121
         _IOCCF0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCCF0_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternSelector                                  8     6      2   43107
                                             59 BANK0      8     6      2
             _EEPROM_GetSavedPattern
                   _InitLowerPattern
              _InitUpperLowerPattern
                  _InitWigwagPattern
                 _InitXStrobePattern
                         _NewPattern
 ---------------------------------------------------------------------------------
 (3) _NewPattern                                           4     4      0    1623
                                             19 BANK0      4     4      0
                           _NewStage
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     976
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _InitXStrobePattern                                  23    21      2   10203
                                             36 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (3) _InitWigwagPattern                                   23    21      2   10203
                                             36 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (3) _InitUpperLowerPattern                               23    21      2   10203
                                             36 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (3) _InitLowerPattern                                    23    21      2   10203
                                             36 BANK0     23    21      2
                        _AppendStage
                     _ConstructStage
                      _CopyStageData
                           _NewStage
 ---------------------------------------------------------------------------------
 (4) _CopyStageData                                        9     5      4    3240
                                             19 BANK0      9     5      4
                           _NewStage (ARG)
 ---------------------------------------------------------------------------------
 (4) _ConstructStage                                       7     4      3    2624
                                             19 BANK0      7     4      3
                  _AssignLightStates
                           _NewStage
 ---------------------------------------------------------------------------------
 (4) _NewStage                                            10    10      0     551
                                              9 BANK0     10    10      0
                  _AssignLightStates
 ---------------------------------------------------------------------------------
 (5) _AssignLightStates                                    9     6      3     438
                                              0 BANK0      9     6      3
 ---------------------------------------------------------------------------------
 (4) _AppendStage                                          8     4      4    3328
                                             28 BANK0      8     4      4
                      _CopyStageData (ARG)
                           _NewStage (ARG)
 ---------------------------------------------------------------------------------
 (3) _EEPROM_GetSavedPattern                               2     2      0     192
                                              1 BANK0      2     2      0
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (4) _eeprom_read                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TurnSignalDone                                       1     1      0     971
                                              8 BANK0      1     1      0
                         _SetOutputs
                                _abs
                                 _ms
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     142
                                              4 BANK0      4     2      2
                                 _ms (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetOutputs                                           2     2      0     829
                                              5 BANK0      2     2      0
                           _SetLight
 ---------------------------------------------------------------------------------
 (1) _PatternCycleInputChanged                             4     4      0      23
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _NextPattern                                          6     4      2     626
                                              4 BANK0      6     4      2
                 _EEPROM_SavePattern
 ---------------------------------------------------------------------------------
 (2) _EEPROM_SavePattern                                   2     2      0     183
                                              2 BANK0      2     2      0
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         2     1      1     152
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _FlashPattern                                        12    12      0     806
                                              5 BANK0     12    12      0
                           _SetLight
                                 _ms
 ---------------------------------------------------------------------------------
 (2) _ms                                                   4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _SetLight                                             5     4      1     741
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           0     0      0     565
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0     240
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (9) _TMR1_WriteTimer                                      2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (9) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _PIN_MANAGER_IOC                                      0     0      0     325
                         _IOCCF0_ISR
 ---------------------------------------------------------------------------------
 (9) _IOCCF0_ISR                                           0     0      0     325
                   Absolute function *
                     _TripTurnSignal *
 ---------------------------------------------------------------------------------
 (10) _TripTurnSignal                                      0     0      0     325
                       i1_SetOutputs
                               i1_ms
 ---------------------------------------------------------------------------------
 (11) i1_ms                                                4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (11) i1_SetOutputs                                        2     2      0     325
                                              5 COMMON     2     2      0
                         i1_SetLight
 ---------------------------------------------------------------------------------
 (12) i1_SetLight                                          5     4      1     237
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FlashPattern
     _SetLight
     _ms
   _NextPattern
     _EEPROM_SavePattern
       _eeprom_write
   _PatternCycleInputChanged
   _TurnSignalDone
     _SetOutputs
       _SetLight
     _abs
       _ms (ARG)
     _ms
   _setup
     _InitPatternSelector
       _EEPROM_GetSavedPattern
         _eeprom_read
       _InitLowerPattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _InitUpperLowerPattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _InitWigwagPattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _InitXStrobePattern
         _AppendStage
           _CopyStageData (ARG)
             _NewStage (ARG)
               _AssignLightStates
           _NewStage (ARG)
             _AssignLightStates
         _ConstructStage
           _AssignLightStates
           _NewStage
             _AssignLightStates
         _CopyStageData
           _NewStage (ARG)
             _AssignLightStates
         _NewStage
           _AssignLightStates
       _NewPattern
         _NewStage
           _AssignLightStates
         ___wmul
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCCF0_SetInterruptHandler
       _PMD_Initialize
       _TMR1_Initialize
         _TMR1_SetInterruptHandler
       _WDT_Initialize
     _SetOutputs
       _SetLight
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR1_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCCF0_ISR
       Absolute function(Fake) *
       _TripTurnSignal *
         i1_SetOutputs
           i1_SetLight
         i1_ms
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      3F       7       78.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      12       9       22.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      AE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      AE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri May 08 21:29:47 2020

                              _update_stage 006C                                 __CFG_CP$OFF 0000  
                                        l50 0CA4                                          l53 0C8A  
                                        l47 0D16                                          l56 0C92  
                        ConstructStage@next 0035                                          _ms 0CCB  
                       ___wmul@multiplicand 0022                     ?_EEPROM_GetSavedPattern 0070  
                               __CFG_LVP$ON 0000                                         l113 0E8E  
                                       l124 0CAD                                         l221 0CB6  
                                       l312 0531                                         ?_ms 0020  
                                       l325 065B                                         l406 0F49  
                                       l191 0D60                                         l271 0D78  
                                       l361 0742                                         l425 0E3C  
                                       l194 0C86                                         l451 079A  
                                       l443 0F82                                         l435 0FC0  
                                       l364 0E62                                         l429 07E9  
                                       l438 0EE7                                         l462 0493  
                                       l528 05CC                                         l473 0176  
                                       l554 0CDF                                         l539 0CD4  
                                       l484 0280                                         l741 0EEF  
                                       l717 0D3B                                         l742 0F02  
                                       l558 0DF5                                         l743 0F0A  
                                       l399 0FFF                                         l719 0D4B  
                                       l495 038A                                         l752 0DA0  
                                       l745 0F0E                                         l738 0EEA  
                                       l754 0DB4                                         l739 0EEA  
                                       l748 0F15                                __CFG_CPD$OFF 0000  
                                       u900 0788                                         u740 0E3C  
                                       u901 0787                                         u741 0E3B  
                                       u750 07A5                                         u751 07A4  
                                       u905 0784                                         u880 0F73  
                                       u881 0F72                                         u890 074F  
                                       u891 074E                                         u885 0F6F  
                           _timer1ReloadVal 007C                                         _abs 0D79  
                   __size_of_PMD_Initialize 0008                                         wreg 0009  
        __end_of_IOCCF0_SetInterruptHandler 0CAE                  _IOCCF0_SetInterruptHandler 0CA5  
                                      ??_ms 0024                                        l2001 0EDA  
                                      l2003 0EE3                                        ?_abs 0024  
                                      l2021 0F82                                        l2013 0F4D  
                                      l1206 0D94                                        l2031 076C  
                                      l2015 0F62                                        l2007 0F4A  
                                      l1209 0D94                                        l2033 0775  
                                      l2025 0743                                        l2017 0F66  
                                      l2201 00B0                                        l2035 0788  
                                      l2027 074F                                        l2019 0F73  
                                      l2211 00C3                                        l2203 00B8  
                                      l2029 0762                                        l2213 00FB  
                                      l2205 00C1                                        l2311 06D3  
                                      l2231 0177                                        l2151 038B  
                                      l2215 0100                                        l2321 0701  
                                      l2313 06D8                                        l2305 0340  
                                      l2241 01BA                                        l2233 017E  
                                      l2161 03CD                                        l2153 0391  
                                      l2225 012C                                        l2217 010D  
                                      l2323 070B                                        l2315 06DF  
                                      l2307 0378                                        l2251 01CD  
                                      l2243 01C2                                        l2235 018E  
                                      l2171 03E0                                        l2163 03D5  
                                      l2155 03A1                                        l2227 0164  
                                      l2219 0129                                        l2325 0718  
                                      l2317 06EC                                        l2333 072C  
                                      l2309 037D                                        l2253 0205  
                                      l2245 01CB                                        l2237 019C  
                                      l2173 0418                                        l2165 03DE  
                                      l2157 03AF                                        l2229 0169  
                                      l2327 071F                                        l2319 06F4  
                                      l2431 0D87                                        l2271 0281  
                                      l2255 020A                                        l2239 01AC  
                                      l2175 041D                                        l2159 03BF  
                                      l2191 006D                                        l2281 02C4  
                                      l2273 0288                                        l2265 0236  
                                      l2257 0217                                        l2185 0449  
                                      l2177 042A                                        l2193 0074  
                                      l2291 02D7                                        l2283 02CC  
                                      l2275 0298                                        l2267 026E  
                                      l2259 0233                                        l2187 0481  
                                      l2179 0446                                        l2195 0084  
                                      l2429 0D79                                        l2293 030F  
                                      l2285 02D5                                        l2277 02A6  
                                      l2269 0273                                        l2189 0486  
                                      l2197 0092                                        l2701 0D51  
                                      l2471 0F16                                        l2295 0314  
                                      l2279 02B6                                        l2199 00A2  
                                      l2631 0CAE                                        l2703 0D56  
                                      l2481 0F36                                        l2473 0F1B  
                                      l2633 0D42                                        l2297 0321  
                                      l2641 0D9C                                        l2721 0FBC  
                                      l2713 0F90                                        l2705 0D58  
                                      l2491 0F48                                        l2475 0F21  
                                      l2395 0E3F                                        l2731 0DE7  
                                      l1931 0E18                                        l2299 033D  
                                      l2643 0DA5                                        l2715 0FA6  
                                      l2707 0F83                                        l2651 0C8B  
                                      l2811 0D6C                                        l2803 0D61  
                                      l2741 0EF0                                        l2477 0F24  
                                      l2485 0F38                                        l2821 0FDD  
                                      l2733 0DED                                        l2725 0DD5  
                                      l1941 0E33                                        l2645 0DAA  
                                      l2637 0D95                                        l2717 0FAA  
                                      l2709 0F8D                                        l2629 0CA5  
                                      l2661 0E6C                                        l2653 0E63  
                                      l2813 0D70                                        l2805 0D64  
                                      l2751 0F01                                        l2743 0EF6  
                                      l2831 05CE                                        l2479 0F2D  
                                      l2815 0FC1                                        l2735 0DF3  
                                      l2727 0DDD                                        l1951 07BC  
                                      l1943 079B                                        l2647 0DB0  
                                      l2639 0D98                                        l2719 0FAF  
                                      l2671 0E7C                                        l2663 0E70  
                                      l2655 0E65                                        l2807 0D65  
                                      l2753 0F05                                        l2745 0EF7  
                                      l2833 05DB                                        l2817 0FC6  
                                      l2825 0FDF                                        l2729 0DE2  
                                      l2737 0DF4                                        l1937 0E1B  
                                      l1961 07E5                                        l1953 07C0  
                                      l1945 07A5                                        l2681 0E84  
                                      l2673 0E7F                                        l2665 0E72  
                                      l2657 0E67                                        l2761 0D0A  
                                      l2809 0D69                                        l2755 0F09  
                                      l2747 0EFB                                        l2835 05E8  
                                      l2843 0603                                        l2819 0FCA  
                                      l1939 0E2F                                        l1955 07C8  
                                      l2771 0494                                        l2691 0CA3  
                                      l2683 0E8C                                        l2675 0E81  
                                      l2667 0E77                                        l2659 0E6A  
                                      l2763 0D0D                                        l2861 0573  
                                      l2757 0F14                                        l2749 0EFD  
                                      l2837 05F5                                        l2845 061F  
                                      l2829 05CD                                        l1957 07D3  
                                      l1949 07A8                                        l2781 04AF  
                                      l2685 0C9C                                        l2677 0E82  
                                      l2669 0E7A                                        l2693 0C87  
                                      l2765 0D10                                        l2951 0734  
                                      l2871 05CA                                        l2863 057D  
                                      l2847 0641                                        l2839 05FC  
                                      l1959 07DD                                        l2791 04F2  
                                      l2783 04BC                                        l2687 0C9F  
                                      l2679 0E83                                        l2695 0D4C  
                                      l2767 0D13                                        l2759 0D07  
                                      l2865 0587                                        l2857 0532  
                                      l2849 064A                                        l2793 04FF  
                                      l2785 04CD                                        l2777 0497  
                                      l2689 0CA0                                        l2697 0D4E  
                                      l2769 0C84                                        l2881 0EA3  
                                      l2873 0E8F                                        l2867 058A  
                                      l2859 053A                                        l2795 0522  
                                      l2787 04D8                                        l2779 04AB  
                                      l2699 0D50                                        l2883 0EA9  
                                      l2875 0E92                                        l2869 058F  
                                      l2797 0CD7                                        l2949 0611  
                                      l1997 0EBD                                        l2789 04E5  
                                      l2885 0EB0                                        l2799 0CCB  
                                      l1999 0ED0                                        l2887 0EB5  
                                      l2879 0E9B                             ?_ConstructStage 0033  
                                      u1010 042A                                        u1011 0429  
                                      u1100 06E9                                        u1020 0493  
                                      u1101 06E6                                        u1021 0492  
                                      u1030 010D                                        u1015 0426  
                                      u1031 010C                                        u1120 06F4  
                                      u1040 0176                                        u1121 06F3  
                                      u1025 048F                                        u1041 0175  
                                      u1130 06FE                                        u1114 06EB  
                                      u1050 0217                                        u1131 06FB  
                                      u1051 0216                                        u1035 0109  
                                      u1204 072B                                        u1060 0280  
                                      u1061 027F                                        u1045 0172  
                                      u1150 070B                                        u1070 0321  
                                      u1151 070A                                        u1071 0320  
                                      u1055 0213                                        u1160 0715  
                                      u1144 0700                                        u1080 038A  
                                      u1161 0712                                        u1081 0389  
                                      u1065 027C                                        u1090 06DF  
                                      u1091 06DE                                        u1075 031D  
                                      u1180 071F                                        u1340 0F21  
                                      u1181 071E                                        u1341 0F20  
                                      u1085 0386                                        _LATA 010C  
                                      u1190 0729                                        u1174 0717  
                                      u1350 0F36                                        u1510 0DB0  
                                      u1191 0726                                        u1351 0F35  
                                      u1511 0DAF                                        _LATC 010E  
                                      u1600 0F14                                        u1360 0F48  
                                      u1280 0D87                                        u1520 0F8D  
                                      u1601 0F13                                        u1361 0F47  
                                      u1281 0D86                                        u1505 0DA6  
                                      u1521 0F8C                                        u1530 0DE2  
                                      u1610 04BC                                        u1531 0DE1  
                                      u1611 04BB                                        u1620 0FC6  
                                      u1540 0DE7                                        u1285 0D83  
                                      u1621 0FC5                                        u1541 0DE6  
                                      u1630 0FFE                                        u1470 0D42  
                                      u1550 0DED                                        u1631 0FFC  
                                      u1471 0D40                                        u1551 0DEC  
                                      u1615 04B8                                        u1640 0FFF  
                                      u1560 0DF3                                        u1480 0D9C  
                                      u1561 0DF2                                        u1481 0D9B  
                                      u1650 0573                                        u1570 0EEF  
                                      u1651 0572                                        u1571 0EEE  
                                      u1707 0F28                                        u1635 0FF9  
                                      u1660 058F                                        u1580 0F01  
                                      u1661 058E                                        u1581 0F00  
                                      u1590 0F0E                                        u1670 0E9A  
                                      u1655 056F                                        u1591 0F0D  
                                      u1495 0DA1                                        u1671 0E99  
                                      u1680 0EA3                                        u1681 0EA2  
                                      u1690 0EA9                                        u1691 0EA8  
                                      _PMD0 0911                                        _PMD1 0912  
                                      _PMD2 0913                                        _PMD3 0914  
                                      _PMD4 0915                                        _PMD5 0916  
                                      _WPUA 020C                                        _WPUC 020E  
                            ??_eeprom_write 0021                                        i1_ms 0CB7  
                              __CFG_WRT$OFF 0000                               SetLight@light 0023  
                             __CFG_FCMEN$ON 0000                                        abs@a 0024  
                      ConstructStage@states 0039                               SetLight@state 0024  
                                      _main 0E8F                         __end_of_AppendStage 079B  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                               __CFG_BOREN$ON 0000  
                             __CFG_BORV$LOW 0000                                        start 0028  
                           ?_TripTurnSignal 0070                  ??_TMR1_SetInterruptHandler 0022  
                             __CFG_CSWEN$ON 0000                               __CFG_MCLRE$ON 0000  
                            CopyStageData@i 003A                             ??_CopyStageData 0037  
            __end_of_EEPROM_GetSavedPattern 0DF6                                       ??_abs 0026  
                                     ?i1_ms 0070              __size_of_OSCILLATOR_Initialize 0009  
             __end_of_OSCILLATOR_Initialize 0CA5                         __size_of_IOCCF0_ISR 000F  
                                     ?_main 0070                               __CFG_WDTE$OFF 0000  
                           _TMR1_StartTimer 0C84                              __CFG_DEBUG$OFF 0000  
                                     i1l121 0D06                                       i1l117 0C9B  
                                     i1l205 0D38                                       i1l224 0CCA  
                                     i1l161 0026                                       i1l218 07FF  
                                     i1l162 0026                                       i1l156 0014  
                                     i1l361 06D0                                       i1l364 0E17  
                                     i1l539 0CC0                                       i1l395 0D27  
                                     _OSCEN 091D                                       _TMR1H 001A  
                                     _TMR1L 0019                  InitLowerPattern@lower_left 004F  
                                     u80_20 068A                                       u80_21 0687  
                                     _TRISA 008C                                       u81_24 068C  
                                     _TRISC 008E                                       u82_20 0698  
                                     u82_21 0697                                       u83_20 06A2  
                                     u83_21 069F                                       u76_20 066A  
                                     u76_21 0669                                       u84_24 06A4  
                                     u85_20 06AD                                       u77_20 0674  
                                     u85_21 06AC                                       u77_21 0671  
                                     u86_20 06B7                                       u86_21 06B4  
                                     u78_24 0676                                       u79_20 0680  
                                     u79_21 067F                                       u87_24 06B9  
                            SetLight@_state 0020                       ConstructStage@time_ms 0033  
                          __end_of_TMR1_ISR 0800                     __end_of_PIN_MANAGER_IOC 0C9C  
                            _WDT_Initialize 0C87                                       _setup 0D61  
         InitXStrobePattern@diag_1_4_states 0047                     __end_of_TMR1_Initialize 0D61  
                                     pclath 000A           InitXStrobePattern@diag_2_3_states 004B  
                               ?i1_SetLight 0070                        __end_of_FlashPattern 05CD  
                                     status 0003               InitPatternSelector@p_selector 005B  
                                     wtemp0 007E                    FlashPattern@current_time 002F  
                  _PatternCycleInputChanged 0F16                             _TMR1_WriteTimer 0D28  
               __size_of_EEPROM_SavePattern 000B                           _pattern_list_iter 0068  
                              __end_ofi1_ms 0CC1                             __initialization 002A  
                   __size_of_TurnSignalDone 003F                         NewStage@init_states 002D  
                             ??_NextPattern 0026                                __end_of_main 0EBB  
                                _NewPattern 0F83                 ?_INTERRUPT_InterruptManager 0070  
                          __end_of_NewStage 07EA                                      ??i1_ms 0074  
                                    ??_main 0063                            __end_of_SetLight 0743  
                         ?_InitLowerPattern 0044                 __end_of_InitPatternSelector 0532  
                        ??_InitLowerPattern 0046                      __end_of_WDT_Initialize 0C8B  
                        _cur_pc_input_state 006E                                 _AppendStage 0743  
                       InitXStrobePattern@i 0053                                      ?_setup 0070  
                                    _ANSELA 018C                                      _ANSELC 018E  
                        __CFG_RSTOSC$HFINT1 0000                                      _T1GCON 001C  
                __end_of_InitXStrobePattern 0177                     TMR1_WriteTimer@timerVal 0070  
                                    i1l2055 0DF7                                      i1l2057 0CB7  
                                    _ODCONA 028C                                      _ODCONC 028E  
                                    i1l2341 0D1B                                      i1l2433 0C93  
                                    i1l2441 07F3                                      i1l2339 0D17  
                                    i1l2371 0CF8                                      i1l2435 0C98  
                                    i1l2443 07FA                                      i1l2373 0CFF  
                                    i1l2381 0D2D                                      i1l2437 07EA  
                                    i1l2541 000B                                      i1l2375 0D04  
                                    i1l2391 0D36                                      i1l2383 0D2E  
                                    i1l2439 07EC                                      i1l2543 0010  
                                    u130_20 07FA                                      i1l2393 0CC1  
                                    i1l2385 0D30                                      u130_21 07F9  
                                    i1l2545 0018                                      i1l2387 0D32  
                                    i1l2379 0D28                                      i1l2547 001D  
                                    i1l2539 0006                                      i1l2389 0D34  
                                    i1l2549 0022                                      i1l1971 0677  
                                    i1l1981 06AD                                      i1l1973 0680  
                                    i1l1965 065D                                      i1l1975 068D  
                                    i1l1967 0662                                      u140_20 0010  
                                    i1l2953 06C2                                      i1l1977 0698  
                                    i1l1969 066A                                      u140_21 000F  
                                    i1l1979 06A5                                      i1l1987 06BA  
                                    u125_20 0CFF                                      u141_20 0018  
                                    u125_21 0CFE                                      u141_21 0017  
                                    u126_20 0D2D                                      u142_20 001D  
                                    u126_21 0D2C                                      u142_21 001C  
                                    u143_20 0022                                      u143_21 0021  
                                    _INLVLA 038C                                      _INLVLC 038E  
                                    u129_20 0C98                                      u129_21 0C97  
                                    u139_20 000B                                      u139_21 000A  
                                    _OSCFRQ 091F                                      _WDTCON 0097  
                                _SetOutputs 0E3D                   InitUpperLowerPattern@F462 00AC  
                 InitUpperLowerPattern@F465 00A8                              __CFG_PWRTE$OFF 0000  
                           i1SetLight@light 0073                        __size_of_eeprom_read 0013  
      __end_of_TMR1_DefaultInterruptHandler 0CCB       __size_of_TMR1_DefaultInterruptHandler 000A  
              _TMR1_DefaultInterruptHandler 0CC1                             SetOutputs@state 0026  
                           i1SetLight@state 0074                   InitUpperLowerPattern@head 0059  
                     NextPattern@p_selector 0024                     __end_of_TMR1_StartTimer 0C87  
                                    ___wmul 0D95                              __CFG_STVREN$ON 0000  
         InitWigwagPattern@left_side_states 0047                                      _cur_ms 0064  
         InitUpperLowerPattern@upper_states 0047                        __end_of_eeprom_write 0F16  
                       CopyStageData@source 0035                         __end_of_NextPattern 065C  
                       __size_ofi1_SetLight 0075                              _PMD_Initialize 0C8B  
                           ?_WDT_Initialize 0070    TMR1_SetInterruptHandler@InterruptHandler 0020  
IOCCF0_SetInterruptHandler@InterruptHandler 0020                            ?_PIN_MANAGER_IOC 0070  
                   __end_of_TMR1_WriteTimer 0D39                                ??_IOCCF0_ISR 0077  
                          ?_TMR1_Initialize 0070                      AssignLightStates@stage 0020  
                         _SYSTEM_Initialize 0D07                     __end_of__initialization 0069  
                           eeprom_read@addr 0020                  InitXStrobePattern@diag_1_4 004F  
                InitXStrobePattern@diag_2_3 0051                          ?_SYSTEM_Initialize 0070  
                            __pcstackCOMMON 0070          InitWigwagPattern@right_side_states 004B  
                              __pidataBANK1 0DB5                         ??_SYSTEM_Initialize 0022  
                                 ?_TMR1_ISR 0070               ?_TMR1_DefaultInterruptHandler 0070  
                               ?_NewPattern 0028                               __end_of_setup 0D79  
                    __end_of_PMD_Initialize 0C93                                  __end_of_ms 0CD5  
                        __end_of_IOCCF0_ISR 0D07                           NewStage@new_stage 0031  
                          ??_ConstructStage 0036                           eeprom_write@value 0020  
               ?_IOCCF0_SetInterruptHandler 0020                       __size_of_FlashPattern 009B  
         InitLowerPattern@lower_left_states 0047                    InitUpperLowerPattern@off 0057  
                 __end_of_SYSTEM_Initialize 0D17                                     ??_setup 0063  
                              NewStage@F419 00C0                                  __pbssBANK0 0064  
                                __pbssBANK1 00C0                                  __pbssBANK2 0120  
                          ??_TripTurnSignal 0077                                   ?_NewStage 0020  
                                __pnvCOMMON 007C                                 ?_SetOutputs 0070  
                     _InitUpperLowerPattern 0177                                   ?_SetLight 0020  
                        AssignLightStates@i 0027                        AppendStage@new_stage 003E  
                            _TurnSignalDone 0FC1                                  __pmaintext 0E8F  
                                   ?___wmul 0020                            ?_TMR1_StartTimer 0070  
                                ??_TMR1_ISR 0072                             __CFG_PPS1WAY$ON 0000  
                               _NextPattern 05CD                                  __pintentry 0004  
                           ?_PMD_Initialize 0070                          InitWigwagPattern@i 0053  
                              _FlashPattern 0532                                     _OSCCON1 0919  
                                   _OSCCON3 091B                                     _NVMADRH 0892  
                                   _NVMADRL 0891                                     _NVMDATH 0894  
                                   _OSCTUNE 091E                                     _NVMDATL 0893  
                                   _NVMCON2 0896                  ??_PatternCycleInputChanged 0020  
                                   _SLRCONA 030C                                     _SLRCONC 030E  
                    InitXStrobePattern@F450 00B4                      InitXStrobePattern@F453 00B0  
                          ?_TMR1_WriteTimer 0070                      InitXStrobePattern@head 0059  
                       __size_of_NewPattern 003E                     ConstructStage@new_stage 0037  
                              ??i1_SetLight 0071                                  ??_NewStage 0029  
                    __end_of_TurnSignalDone 1000                            i1SetLight@_state 0070  
              InitUpperLowerPattern@pattern 0044                                  ??_SetLight 0021  
                InitUpperLowerPattern@i_916 0055                       __size_of_eeprom_write 002E  
                InitUpperLowerPattern@lower 0051                  InitUpperLowerPattern@upper 004F  
                           __size_of___wmul 0020         PatternCycleInputChanged@delay_count 0022  
                     __end_of_CopyStageData 0F83                        InitWigwagPattern@off 0057  
                                   __ptext1 0D61                                     __ptext2 0C84  
                                   __ptext3 0D07                                     __ptext4 0C87  
                                   __ptext5 0D4C                                     __ptext6 0CAE  
                                   __ptext7 0C8B                                     __ptext8 0E63  
                                   __ptext9 0CA5              ??_TMR1_DefaultInterruptHandler 0070  
                                 _T1CONbits 001B                        InitLowerPattern@F474 00A4  
                      InitLowerPattern@F477 00A0                       _OSCILLATOR_Initialize 0C9C  
                              __size_of_abs 001C                          __end_ofi1_SetLight 06D1  
                       __size_of_SetOutputs 0026           __size_of_TMR1_SetInterruptHandler 0009  
                  ??_PIN_MANAGER_Initialize 0022                   ?_TMR1_SetInterruptHandler 0020  
                                 _IOCCFbits 0399                        InitLowerPattern@head 0059  
                                   _temp_ms 0079                                   _IOCCNbits 0398  
                                 _IOCCPbits 0397                                ?_AppendStage 003C  
                __size_of_SYSTEM_Initialize 0010                                     clrloop0 0CE1  
                      end_of_initialization 0069                         _last_pc_input_state 006D  
                __end_of_EEPROM_SavePattern 0CE0                                     init_ram 0CEC  
                    ?_InitUpperLowerPattern 0044                   __size_of_InitLowerPattern 010A  
                              _eeprom_write 0EE8                                     initloop 0CED  
        InitLowerPattern@lower_right_states 004B                             ?_TurnSignalDone 0070  
                        _InitXStrobePattern 006D                            ??_WDT_Initialize 0020  
                                 _PORTCbits 000E                     InitLowerPattern@pattern 0044  
                       ?_InitXStrobePattern 0044                               ?i1_SetOutputs 0070  
                   AssignLightStates@states 0022                             _ts_trigger_time 00C4  
                          __CFG_FEXTOSC$OFF 0000              EEPROM_SavePattern@pattern_name 0023  
                                _start_time 0077                __size_of_InitPatternSelector 009E  
                                _ts_trigger 007B                        ??_InitXStrobePattern 0046  
                             ??_eeprom_read 0020                    ??_EEPROM_GetSavedPattern 0021  
                              ??_NewPattern 0033                              __end_of___wmul 0DB5  
                         __size_of_TMR1_ISR 0016                           CopyStageData@dest 0033  
                            ??i1_SetOutputs 0075                      ?_OSCILLATOR_Initialize 0070  
                      InitPatternSelector@i 0061                         start_initialization 002A  
                          _pattern_selector 00C8             __size_of_PIN_MANAGER_Initialize 002C  
                               __end_of_abs 0D95                             AppendStage@head 003C  
                             _pattern_stash 0120                       NewPattern@new_pattern 0035  
                    InitUpperLowerPattern@i 0053                          __end_of_NewPattern 0FC1  
                              ??_SetOutputs 0025                    __size_of_PIN_MANAGER_IOC 0009  
                  InitWigwagPattern@pattern 0044                           __size_of_NewStage 004F  
                          __CFG_LPBOREN$OFF 0000                    __size_of_TMR1_Initialize 0015  
                         __size_of_SetLight 0072                            ??_PMD_Initialize 0020  
                                  ??___wmul 0024                                ?_NextPattern 0024  
                       __end_of_eeprom_read 0D4C                                 __pdataBANK1 00A0  
                               __pbssBIGRAM 20F0                                 __pbssCOMMON 0077  
                     AppendStage@last_stage 0042                                   ___latbits 0002  
                        __end_of_SetOutputs 0E63                               __pcstackBANK0 0020  
                    InitWigwagPattern@i_864 0055                   InitXStrobePattern@pattern 0044  
                      __size_of_AppendStage 0058                            eeprom_write@addr 0021  
                          _InitLowerPattern 0281                                   __pnvBANK1 00DB  
           __size_of_EEPROM_GetSavedPattern 0021                      _PIN_MANAGER_Initialize 0E63  
          __end_of_TMR1_SetInterruptHandler 0CB7                           _AssignLightStates 0E18  
                         _InitWigwagPattern 038B                          ?_AssignLightStates 0020  
              ??_INTERRUPT_InterruptManager 0077                          ?_InitWigwagPattern 0044  
                     InitXStrobePattern@off 0057                    __size_of_TMR1_StartTimer 0003  
                       ??_AssignLightStates 0023                         ??_InitWigwagPattern 0046  
                   ??_InitUpperLowerPattern 0046                              __size_of_setup 0018  
                          ??_TurnSignalDone 0028                                 __size_of_ms 000A  
                       InitLowerPattern@off 0057                              ___wmul@product 0024  
                   __size_of_ConstructStage 002D                                    _LATCbits 010E  
                      __end_ofi1_SetOutputs 0E18                                   clear_ram0 0CE0  
                               _eeprom_read 0D39                                    _PIE0bits 0090  
                                  _PIE1bits 0091                    __size_of_TMR1_WriteTimer 0011  
                 __end_of_AssignLightStates 0E3D         __size_of_INTERRUPT_InterruptManager 0024  
                                  _PIR0bits 0010                                    _PIR1bits 0011  
         __size_of_PatternCycleInputChanged 0034         EEPROM_GetSavedPattern@saved_pattern 0022  
                 ?_PatternCycleInputChanged 0070                   __end_of_InitWigwagPattern 0494  
                   __size_of_TripTurnSignal 0011                                    _TMR1_ISR 07EA  
                        _EEPROM_SavePattern 0CD5                           ??_PIN_MANAGER_IOC 0077  
                       _InitPatternSelector 0494                           ??_TMR1_Initialize 0022  
                         ___wmul@multiplier 0020                     InitXStrobePattern@i_890 0055  
                       ?_EEPROM_SavePattern 0070                      _EEPROM_GetSavedPattern 0DD5  
               InitLowerPattern@lower_right 0051                        ?_InitPatternSelector 005B  
                    __size_of_CopyStageData 0039                                    _NewStage 079B  
                      ??_EEPROM_SavePattern 0022                           i1SetOutputs@state 0076  
                                  _SetLight 06D1                             _stage_list_iter 006A  
                   ??_OSCILLATOR_Initialize 0020                       InitWigwagPattern@F441 00B8  
                     InitWigwagPattern@F438 00BC                        __size_of_NextPattern 008F  
                  _TMR1_SetInterruptHandler 0CAE                       InitWigwagPattern@head 0059  
                     _TMR1_InterruptHandler 00DB                     _IOCCF0_InterruptHandler 00DD  
                                  __ptext10 0C9C                                    __ptext11 0494  
                                  __ptext20 079B                                    __ptext12 0F83  
                                  __ptext21 0E18                                    __ptext13 0D95  
                                _T1GCONbits 001C                                    __ptext30 0CD5  
                                  __ptext22 0743                                    __ptext14 006D  
                                  __ptext31 0EE8                                    __ptext23 0DD5  
                                  __ptext15 038B                                    __ptext40 0CF8  
                                  __ptext32 0532                                    __ptext24 0D39  
                                  __ptext16 0177                                    __ptext41 0D17  
                                  __ptext33 0CCB                                    __ptext25 0FC1  
                                  __ptext17 0281                                    __ptext42 0CB7  
                                  __ptext34 06D1                                    __ptext26 0D79  
                                  __ptext18 0F4A                                    __ptext43 0DF6  
                                  __ptext27 0E3D                                    __ptext19 0EBB  
                                  __ptext44 065C                                    __ptext36 07EA  
                                  __ptext28 0F16                                    __ptext37 0D28  
                                  __ptext29 05CD                                    __ptext38 0CC1  
                                  __ptext39 0C93                ??_IOCCF0_SetInterruptHandler 0022  
            InitWigwagPattern@right_side_on 0051                       ??_InitPatternSelector 005D  
                         ??_TMR1_StartTimer 0020                                  _IOCCF0_ISR 0CF8  
                             __size_ofi1_ms 000A                               __size_of_main 002C  
               __size_of_InitXStrobePattern 010A                       InitLowerPattern@i_942 0055  
                __size_of_AssignLightStates 0025               InitWigwagPattern@left_side_on 004F  
                __size_of_InitWigwagPattern 0109                                    int$flags 007E  
        __end_of_INTERRUPT_InterruptManager 0028                  _INTERRUPT_InterruptManager 0004  
                         ??_TMR1_WriteTimer 0072                               _CopyStageData 0F4A  
                             ?_FlashPattern 0070                    __end_of_InitLowerPattern 038B  
       __size_of_IOCCF0_SetInterruptHandler 0009                                  _INTCONbits 000B  
                               _NVMCON1bits 0895                     __size_of_WDT_Initialize 0004  
                     __size_ofi1_SetOutputs 0022                                    intlevel1 0000  
                            _ConstructStage 0EBB                     ?_PIN_MANAGER_Initialize 0070  
                         __CFG_CLKOUTEN$OFF 0000                           InitLowerPattern@i 0053  
                            _TripTurnSignal 0D17                              ?_CopyStageData 0033  
                            ??_FlashPattern 0025           InitUpperLowerPattern@lower_states 004B  
                              i1_SetOutputs 0DF6                               ??_AppendStage 0040  
          __end_of_PatternCycleInputChanged 0F4A                      __end_of_ConstructStage 0EE8  
                               ?_IOCCF0_ISR 0070              __end_of_PIN_MANAGER_Initialize 0E8F  
            __size_of_InitUpperLowerPattern 010A               __end_of_InitUpperLowerPattern 0281  
                             ?_eeprom_write 0020                                  i1_SetLight 065C  
                                _STATUSbits 0003                             _PIN_MANAGER_IOC 0C93  
                               _stage_stash 20F0                                ?_eeprom_read 0070  
                           _TMR1_Initialize 0D4C                      __end_of_TripTurnSignal 0D28  
